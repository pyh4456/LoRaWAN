
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e214  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  0800e2d4  0800e2d4  0001e2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eea8  0800eea8  0001eea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800eeb0  0800eeb0  0001eeb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800eeb4  0800eeb4  0001eeb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  20000000  0800eeb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001714  20000104  0800efbc  00020104  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  20001818  0800efbc  00021818  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003fdfb  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000aa44  00000000  00000000  0005ff27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002098  00000000  00000000  0006a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003600  00000000  00000000  0006ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020c55  00000000  00000000  00070008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ea2e  00000000  00000000  00090c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ae6de  00000000  00000000  000cf68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0017dd69  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e80  00000000  00000000  0017ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0001ac6f  00000000  00000000  00183c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000104 	.word	0x20000104
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e2bc 	.word	0x0800e2bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000108 	.word	0x20000108
 8000104:	0800e2bc 	.word	0x0800e2bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	0010      	movs	r0, r2
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	0019      	movs	r1, r3
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f001 f859 	bl	800151c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 ffa9 	bl	80013cc <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f84b 	bl	800151c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f841 	bl	800151c <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ffd1 	bl	8001450 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 ffc7 	bl	8001450 <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_cfrcmple>:
 80004d0:	4684      	mov	ip, r0
 80004d2:	0008      	movs	r0, r1
 80004d4:	4661      	mov	r1, ip
 80004d6:	e7ff      	b.n	80004d8 <__aeabi_cfcmpeq>

080004d8 <__aeabi_cfcmpeq>:
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	f000 f9b9 	bl	8000850 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d401      	bmi.n	80004e6 <__aeabi_cfcmpeq+0xe>
 80004e2:	2100      	movs	r1, #0
 80004e4:	42c8      	cmn	r0, r1
 80004e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004e8 <__aeabi_fcmpeq>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 f945 	bl	8000778 <__eqsf2>
 80004ee:	4240      	negs	r0, r0
 80004f0:	3001      	adds	r0, #1
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <__aeabi_fcmplt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f9ab 	bl	8000850 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fcmplt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmple>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f9a1 	bl	8000850 <__lesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dd01      	ble.n	8000516 <__aeabi_fcmple+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpgt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 f951 	bl	80007c4 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	dc01      	bgt.n	800052a <__aeabi_fcmpgt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_fcmpge>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 f947 	bl	80007c4 <__gesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	da01      	bge.n	800053e <__aeabi_fcmpge+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_uldivmod>:
 8000544:	2b00      	cmp	r3, #0
 8000546:	d111      	bne.n	800056c <__aeabi_uldivmod+0x28>
 8000548:	2a00      	cmp	r2, #0
 800054a:	d10f      	bne.n	800056c <__aeabi_uldivmod+0x28>
 800054c:	2900      	cmp	r1, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_uldivmod+0xe>
 8000550:	2800      	cmp	r0, #0
 8000552:	d002      	beq.n	800055a <__aeabi_uldivmod+0x16>
 8000554:	2100      	movs	r1, #0
 8000556:	43c9      	mvns	r1, r1
 8000558:	0008      	movs	r0, r1
 800055a:	b407      	push	{r0, r1, r2}
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <__aeabi_uldivmod+0x24>)
 800055e:	a102      	add	r1, pc, #8	; (adr r1, 8000568 <__aeabi_uldivmod+0x24>)
 8000560:	1840      	adds	r0, r0, r1
 8000562:	9002      	str	r0, [sp, #8]
 8000564:	bd03      	pop	{r0, r1, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	fffffee9 	.word	0xfffffee9
 800056c:	b403      	push	{r0, r1}
 800056e:	4668      	mov	r0, sp
 8000570:	b501      	push	{r0, lr}
 8000572:	9802      	ldr	r0, [sp, #8]
 8000574:	f000 f834 	bl	80005e0 <__udivmoddi4>
 8000578:	9b01      	ldr	r3, [sp, #4]
 800057a:	469e      	mov	lr, r3
 800057c:	b002      	add	sp, #8
 800057e:	bc0c      	pop	{r2, r3}
 8000580:	4770      	bx	lr
 8000582:	46c0      	nop			; (mov r8, r8)

08000584 <__aeabi_lmul>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	46ce      	mov	lr, r9
 8000588:	4647      	mov	r7, r8
 800058a:	b580      	push	{r7, lr}
 800058c:	0007      	movs	r7, r0
 800058e:	4699      	mov	r9, r3
 8000590:	0c3b      	lsrs	r3, r7, #16
 8000592:	469c      	mov	ip, r3
 8000594:	0413      	lsls	r3, r2, #16
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	001d      	movs	r5, r3
 800059a:	000e      	movs	r6, r1
 800059c:	4661      	mov	r1, ip
 800059e:	0400      	lsls	r0, r0, #16
 80005a0:	0c14      	lsrs	r4, r2, #16
 80005a2:	0c00      	lsrs	r0, r0, #16
 80005a4:	4345      	muls	r5, r0
 80005a6:	434b      	muls	r3, r1
 80005a8:	4360      	muls	r0, r4
 80005aa:	4361      	muls	r1, r4
 80005ac:	18c0      	adds	r0, r0, r3
 80005ae:	0c2c      	lsrs	r4, r5, #16
 80005b0:	1820      	adds	r0, r4, r0
 80005b2:	468c      	mov	ip, r1
 80005b4:	4283      	cmp	r3, r0
 80005b6:	d903      	bls.n	80005c0 <__aeabi_lmul+0x3c>
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	025b      	lsls	r3, r3, #9
 80005bc:	4698      	mov	r8, r3
 80005be:	44c4      	add	ip, r8
 80005c0:	4649      	mov	r1, r9
 80005c2:	4379      	muls	r1, r7
 80005c4:	4372      	muls	r2, r6
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	4463      	add	r3, ip
 80005ca:	042d      	lsls	r5, r5, #16
 80005cc:	0c2d      	lsrs	r5, r5, #16
 80005ce:	18c9      	adds	r1, r1, r3
 80005d0:	0400      	lsls	r0, r0, #16
 80005d2:	1940      	adds	r0, r0, r5
 80005d4:	1889      	adds	r1, r1, r2
 80005d6:	bcc0      	pop	{r6, r7}
 80005d8:	46b9      	mov	r9, r7
 80005da:	46b0      	mov	r8, r6
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__udivmoddi4>:
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	4657      	mov	r7, sl
 80005e4:	464e      	mov	r6, r9
 80005e6:	4645      	mov	r5, r8
 80005e8:	46de      	mov	lr, fp
 80005ea:	b5e0      	push	{r5, r6, r7, lr}
 80005ec:	0004      	movs	r4, r0
 80005ee:	000d      	movs	r5, r1
 80005f0:	4692      	mov	sl, r2
 80005f2:	4699      	mov	r9, r3
 80005f4:	b083      	sub	sp, #12
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d830      	bhi.n	800065c <__udivmoddi4+0x7c>
 80005fa:	d02d      	beq.n	8000658 <__udivmoddi4+0x78>
 80005fc:	4649      	mov	r1, r9
 80005fe:	4650      	mov	r0, sl
 8000600:	f001 f88c 	bl	800171c <__clzdi2>
 8000604:	0029      	movs	r1, r5
 8000606:	0006      	movs	r6, r0
 8000608:	0020      	movs	r0, r4
 800060a:	f001 f887 	bl	800171c <__clzdi2>
 800060e:	1a33      	subs	r3, r6, r0
 8000610:	4698      	mov	r8, r3
 8000612:	3b20      	subs	r3, #32
 8000614:	469b      	mov	fp, r3
 8000616:	d433      	bmi.n	8000680 <__udivmoddi4+0xa0>
 8000618:	465a      	mov	r2, fp
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	4642      	mov	r2, r8
 8000620:	001f      	movs	r7, r3
 8000622:	4653      	mov	r3, sl
 8000624:	4093      	lsls	r3, r2
 8000626:	001e      	movs	r6, r3
 8000628:	42af      	cmp	r7, r5
 800062a:	d83a      	bhi.n	80006a2 <__udivmoddi4+0xc2>
 800062c:	42af      	cmp	r7, r5
 800062e:	d100      	bne.n	8000632 <__udivmoddi4+0x52>
 8000630:	e078      	b.n	8000724 <__udivmoddi4+0x144>
 8000632:	465b      	mov	r3, fp
 8000634:	1ba4      	subs	r4, r4, r6
 8000636:	41bd      	sbcs	r5, r7
 8000638:	2b00      	cmp	r3, #0
 800063a:	da00      	bge.n	800063e <__udivmoddi4+0x5e>
 800063c:	e075      	b.n	800072a <__udivmoddi4+0x14a>
 800063e:	2200      	movs	r2, #0
 8000640:	2300      	movs	r3, #0
 8000642:	9200      	str	r2, [sp, #0]
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2301      	movs	r3, #1
 8000648:	465a      	mov	r2, fp
 800064a:	4093      	lsls	r3, r2
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2301      	movs	r3, #1
 8000650:	4642      	mov	r2, r8
 8000652:	4093      	lsls	r3, r2
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	e028      	b.n	80006aa <__udivmoddi4+0xca>
 8000658:	4282      	cmp	r2, r0
 800065a:	d9cf      	bls.n	80005fc <__udivmoddi4+0x1c>
 800065c:	2200      	movs	r2, #0
 800065e:	2300      	movs	r3, #0
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <__udivmoddi4+0x8e>
 800066a:	601c      	str	r4, [r3, #0]
 800066c:	605d      	str	r5, [r3, #4]
 800066e:	9800      	ldr	r0, [sp, #0]
 8000670:	9901      	ldr	r1, [sp, #4]
 8000672:	b003      	add	sp, #12
 8000674:	bcf0      	pop	{r4, r5, r6, r7}
 8000676:	46bb      	mov	fp, r7
 8000678:	46b2      	mov	sl, r6
 800067a:	46a9      	mov	r9, r5
 800067c:	46a0      	mov	r8, r4
 800067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000680:	4642      	mov	r2, r8
 8000682:	2320      	movs	r3, #32
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	4652      	mov	r2, sl
 8000688:	40da      	lsrs	r2, r3
 800068a:	4641      	mov	r1, r8
 800068c:	0013      	movs	r3, r2
 800068e:	464a      	mov	r2, r9
 8000690:	408a      	lsls	r2, r1
 8000692:	0017      	movs	r7, r2
 8000694:	4642      	mov	r2, r8
 8000696:	431f      	orrs	r7, r3
 8000698:	4653      	mov	r3, sl
 800069a:	4093      	lsls	r3, r2
 800069c:	001e      	movs	r6, r3
 800069e:	42af      	cmp	r7, r5
 80006a0:	d9c4      	bls.n	800062c <__udivmoddi4+0x4c>
 80006a2:	2200      	movs	r2, #0
 80006a4:	2300      	movs	r3, #0
 80006a6:	9200      	str	r2, [sp, #0]
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	4643      	mov	r3, r8
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0d9      	beq.n	8000664 <__udivmoddi4+0x84>
 80006b0:	07fb      	lsls	r3, r7, #31
 80006b2:	0872      	lsrs	r2, r6, #1
 80006b4:	431a      	orrs	r2, r3
 80006b6:	4646      	mov	r6, r8
 80006b8:	087b      	lsrs	r3, r7, #1
 80006ba:	e00e      	b.n	80006da <__udivmoddi4+0xfa>
 80006bc:	42ab      	cmp	r3, r5
 80006be:	d101      	bne.n	80006c4 <__udivmoddi4+0xe4>
 80006c0:	42a2      	cmp	r2, r4
 80006c2:	d80c      	bhi.n	80006de <__udivmoddi4+0xfe>
 80006c4:	1aa4      	subs	r4, r4, r2
 80006c6:	419d      	sbcs	r5, r3
 80006c8:	2001      	movs	r0, #1
 80006ca:	1924      	adds	r4, r4, r4
 80006cc:	416d      	adcs	r5, r5
 80006ce:	2100      	movs	r1, #0
 80006d0:	3e01      	subs	r6, #1
 80006d2:	1824      	adds	r4, r4, r0
 80006d4:	414d      	adcs	r5, r1
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d006      	beq.n	80006e8 <__udivmoddi4+0x108>
 80006da:	42ab      	cmp	r3, r5
 80006dc:	d9ee      	bls.n	80006bc <__udivmoddi4+0xdc>
 80006de:	3e01      	subs	r6, #1
 80006e0:	1924      	adds	r4, r4, r4
 80006e2:	416d      	adcs	r5, r5
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d1f8      	bne.n	80006da <__udivmoddi4+0xfa>
 80006e8:	9800      	ldr	r0, [sp, #0]
 80006ea:	9901      	ldr	r1, [sp, #4]
 80006ec:	465b      	mov	r3, fp
 80006ee:	1900      	adds	r0, r0, r4
 80006f0:	4169      	adcs	r1, r5
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db24      	blt.n	8000740 <__udivmoddi4+0x160>
 80006f6:	002b      	movs	r3, r5
 80006f8:	465a      	mov	r2, fp
 80006fa:	4644      	mov	r4, r8
 80006fc:	40d3      	lsrs	r3, r2
 80006fe:	002a      	movs	r2, r5
 8000700:	40e2      	lsrs	r2, r4
 8000702:	001c      	movs	r4, r3
 8000704:	465b      	mov	r3, fp
 8000706:	0015      	movs	r5, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	db2a      	blt.n	8000762 <__udivmoddi4+0x182>
 800070c:	0026      	movs	r6, r4
 800070e:	409e      	lsls	r6, r3
 8000710:	0033      	movs	r3, r6
 8000712:	0026      	movs	r6, r4
 8000714:	4647      	mov	r7, r8
 8000716:	40be      	lsls	r6, r7
 8000718:	0032      	movs	r2, r6
 800071a:	1a80      	subs	r0, r0, r2
 800071c:	4199      	sbcs	r1, r3
 800071e:	9000      	str	r0, [sp, #0]
 8000720:	9101      	str	r1, [sp, #4]
 8000722:	e79f      	b.n	8000664 <__udivmoddi4+0x84>
 8000724:	42a3      	cmp	r3, r4
 8000726:	d8bc      	bhi.n	80006a2 <__udivmoddi4+0xc2>
 8000728:	e783      	b.n	8000632 <__udivmoddi4+0x52>
 800072a:	4642      	mov	r2, r8
 800072c:	2320      	movs	r3, #32
 800072e:	2100      	movs	r1, #0
 8000730:	1a9b      	subs	r3, r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	9100      	str	r1, [sp, #0]
 8000736:	9201      	str	r2, [sp, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	40da      	lsrs	r2, r3
 800073c:	9201      	str	r2, [sp, #4]
 800073e:	e786      	b.n	800064e <__udivmoddi4+0x6e>
 8000740:	4642      	mov	r2, r8
 8000742:	2320      	movs	r3, #32
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	002a      	movs	r2, r5
 8000748:	4646      	mov	r6, r8
 800074a:	409a      	lsls	r2, r3
 800074c:	0023      	movs	r3, r4
 800074e:	40f3      	lsrs	r3, r6
 8000750:	4644      	mov	r4, r8
 8000752:	4313      	orrs	r3, r2
 8000754:	002a      	movs	r2, r5
 8000756:	40e2      	lsrs	r2, r4
 8000758:	001c      	movs	r4, r3
 800075a:	465b      	mov	r3, fp
 800075c:	0015      	movs	r5, r2
 800075e:	2b00      	cmp	r3, #0
 8000760:	dad4      	bge.n	800070c <__udivmoddi4+0x12c>
 8000762:	4642      	mov	r2, r8
 8000764:	002f      	movs	r7, r5
 8000766:	2320      	movs	r3, #32
 8000768:	0026      	movs	r6, r4
 800076a:	4097      	lsls	r7, r2
 800076c:	1a9b      	subs	r3, r3, r2
 800076e:	40de      	lsrs	r6, r3
 8000770:	003b      	movs	r3, r7
 8000772:	4333      	orrs	r3, r6
 8000774:	e7cd      	b.n	8000712 <__udivmoddi4+0x132>
 8000776:	46c0      	nop			; (mov r8, r8)

08000778 <__eqsf2>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	0042      	lsls	r2, r0, #1
 800077c:	0245      	lsls	r5, r0, #9
 800077e:	024e      	lsls	r6, r1, #9
 8000780:	004c      	lsls	r4, r1, #1
 8000782:	0fc3      	lsrs	r3, r0, #31
 8000784:	0a6d      	lsrs	r5, r5, #9
 8000786:	2001      	movs	r0, #1
 8000788:	0e12      	lsrs	r2, r2, #24
 800078a:	0a76      	lsrs	r6, r6, #9
 800078c:	0e24      	lsrs	r4, r4, #24
 800078e:	0fc9      	lsrs	r1, r1, #31
 8000790:	2aff      	cmp	r2, #255	; 0xff
 8000792:	d006      	beq.n	80007a2 <__eqsf2+0x2a>
 8000794:	2cff      	cmp	r4, #255	; 0xff
 8000796:	d003      	beq.n	80007a0 <__eqsf2+0x28>
 8000798:	42a2      	cmp	r2, r4
 800079a:	d101      	bne.n	80007a0 <__eqsf2+0x28>
 800079c:	42b5      	cmp	r5, r6
 800079e:	d006      	beq.n	80007ae <__eqsf2+0x36>
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d1fc      	bne.n	80007a0 <__eqsf2+0x28>
 80007a6:	2cff      	cmp	r4, #255	; 0xff
 80007a8:	d1fa      	bne.n	80007a0 <__eqsf2+0x28>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d1f8      	bne.n	80007a0 <__eqsf2+0x28>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d006      	beq.n	80007c0 <__eqsf2+0x48>
 80007b2:	2001      	movs	r0, #1
 80007b4:	2a00      	cmp	r2, #0
 80007b6:	d1f3      	bne.n	80007a0 <__eqsf2+0x28>
 80007b8:	0028      	movs	r0, r5
 80007ba:	1e43      	subs	r3, r0, #1
 80007bc:	4198      	sbcs	r0, r3
 80007be:	e7ef      	b.n	80007a0 <__eqsf2+0x28>
 80007c0:	2000      	movs	r0, #0
 80007c2:	e7ed      	b.n	80007a0 <__eqsf2+0x28>

080007c4 <__gesf2>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	0042      	lsls	r2, r0, #1
 80007c8:	0245      	lsls	r5, r0, #9
 80007ca:	024e      	lsls	r6, r1, #9
 80007cc:	004c      	lsls	r4, r1, #1
 80007ce:	0fc3      	lsrs	r3, r0, #31
 80007d0:	0a6d      	lsrs	r5, r5, #9
 80007d2:	0e12      	lsrs	r2, r2, #24
 80007d4:	0a76      	lsrs	r6, r6, #9
 80007d6:	0e24      	lsrs	r4, r4, #24
 80007d8:	0fc8      	lsrs	r0, r1, #31
 80007da:	2aff      	cmp	r2, #255	; 0xff
 80007dc:	d01b      	beq.n	8000816 <__gesf2+0x52>
 80007de:	2cff      	cmp	r4, #255	; 0xff
 80007e0:	d00e      	beq.n	8000800 <__gesf2+0x3c>
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d11b      	bne.n	800081e <__gesf2+0x5a>
 80007e6:	2c00      	cmp	r4, #0
 80007e8:	d101      	bne.n	80007ee <__gesf2+0x2a>
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d01c      	beq.n	8000828 <__gesf2+0x64>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d00c      	beq.n	800080c <__gesf2+0x48>
 80007f2:	4283      	cmp	r3, r0
 80007f4:	d01c      	beq.n	8000830 <__gesf2+0x6c>
 80007f6:	2102      	movs	r1, #2
 80007f8:	1e58      	subs	r0, r3, #1
 80007fa:	4008      	ands	r0, r1
 80007fc:	3801      	subs	r0, #1
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	2e00      	cmp	r6, #0
 8000802:	d122      	bne.n	800084a <__gesf2+0x86>
 8000804:	2a00      	cmp	r2, #0
 8000806:	d1f4      	bne.n	80007f2 <__gesf2+0x2e>
 8000808:	2d00      	cmp	r5, #0
 800080a:	d1f2      	bne.n	80007f2 <__gesf2+0x2e>
 800080c:	2800      	cmp	r0, #0
 800080e:	d1f6      	bne.n	80007fe <__gesf2+0x3a>
 8000810:	2001      	movs	r0, #1
 8000812:	4240      	negs	r0, r0
 8000814:	e7f3      	b.n	80007fe <__gesf2+0x3a>
 8000816:	2d00      	cmp	r5, #0
 8000818:	d117      	bne.n	800084a <__gesf2+0x86>
 800081a:	2cff      	cmp	r4, #255	; 0xff
 800081c:	d0f0      	beq.n	8000800 <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d1e7      	bne.n	80007f2 <__gesf2+0x2e>
 8000822:	2e00      	cmp	r6, #0
 8000824:	d1e5      	bne.n	80007f2 <__gesf2+0x2e>
 8000826:	e7e6      	b.n	80007f6 <__gesf2+0x32>
 8000828:	2000      	movs	r0, #0
 800082a:	2d00      	cmp	r5, #0
 800082c:	d0e7      	beq.n	80007fe <__gesf2+0x3a>
 800082e:	e7e2      	b.n	80007f6 <__gesf2+0x32>
 8000830:	42a2      	cmp	r2, r4
 8000832:	dc05      	bgt.n	8000840 <__gesf2+0x7c>
 8000834:	dbea      	blt.n	800080c <__gesf2+0x48>
 8000836:	42b5      	cmp	r5, r6
 8000838:	d802      	bhi.n	8000840 <__gesf2+0x7c>
 800083a:	d3e7      	bcc.n	800080c <__gesf2+0x48>
 800083c:	2000      	movs	r0, #0
 800083e:	e7de      	b.n	80007fe <__gesf2+0x3a>
 8000840:	4243      	negs	r3, r0
 8000842:	4158      	adcs	r0, r3
 8000844:	0040      	lsls	r0, r0, #1
 8000846:	3801      	subs	r0, #1
 8000848:	e7d9      	b.n	80007fe <__gesf2+0x3a>
 800084a:	2002      	movs	r0, #2
 800084c:	4240      	negs	r0, r0
 800084e:	e7d6      	b.n	80007fe <__gesf2+0x3a>

08000850 <__lesf2>:
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	0042      	lsls	r2, r0, #1
 8000854:	0245      	lsls	r5, r0, #9
 8000856:	024e      	lsls	r6, r1, #9
 8000858:	004c      	lsls	r4, r1, #1
 800085a:	0fc3      	lsrs	r3, r0, #31
 800085c:	0a6d      	lsrs	r5, r5, #9
 800085e:	0e12      	lsrs	r2, r2, #24
 8000860:	0a76      	lsrs	r6, r6, #9
 8000862:	0e24      	lsrs	r4, r4, #24
 8000864:	0fc8      	lsrs	r0, r1, #31
 8000866:	2aff      	cmp	r2, #255	; 0xff
 8000868:	d00b      	beq.n	8000882 <__lesf2+0x32>
 800086a:	2cff      	cmp	r4, #255	; 0xff
 800086c:	d00d      	beq.n	800088a <__lesf2+0x3a>
 800086e:	2a00      	cmp	r2, #0
 8000870:	d11f      	bne.n	80008b2 <__lesf2+0x62>
 8000872:	2c00      	cmp	r4, #0
 8000874:	d116      	bne.n	80008a4 <__lesf2+0x54>
 8000876:	2e00      	cmp	r6, #0
 8000878:	d114      	bne.n	80008a4 <__lesf2+0x54>
 800087a:	2000      	movs	r0, #0
 800087c:	2d00      	cmp	r5, #0
 800087e:	d010      	beq.n	80008a2 <__lesf2+0x52>
 8000880:	e009      	b.n	8000896 <__lesf2+0x46>
 8000882:	2d00      	cmp	r5, #0
 8000884:	d10c      	bne.n	80008a0 <__lesf2+0x50>
 8000886:	2cff      	cmp	r4, #255	; 0xff
 8000888:	d113      	bne.n	80008b2 <__lesf2+0x62>
 800088a:	2e00      	cmp	r6, #0
 800088c:	d108      	bne.n	80008a0 <__lesf2+0x50>
 800088e:	2a00      	cmp	r2, #0
 8000890:	d008      	beq.n	80008a4 <__lesf2+0x54>
 8000892:	4283      	cmp	r3, r0
 8000894:	d012      	beq.n	80008bc <__lesf2+0x6c>
 8000896:	2102      	movs	r1, #2
 8000898:	1e58      	subs	r0, r3, #1
 800089a:	4008      	ands	r0, r1
 800089c:	3801      	subs	r0, #1
 800089e:	e000      	b.n	80008a2 <__lesf2+0x52>
 80008a0:	2002      	movs	r0, #2
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d1f4      	bne.n	8000892 <__lesf2+0x42>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d1fa      	bne.n	80008a2 <__lesf2+0x52>
 80008ac:	2001      	movs	r0, #1
 80008ae:	4240      	negs	r0, r0
 80008b0:	e7f7      	b.n	80008a2 <__lesf2+0x52>
 80008b2:	2c00      	cmp	r4, #0
 80008b4:	d1ed      	bne.n	8000892 <__lesf2+0x42>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d1eb      	bne.n	8000892 <__lesf2+0x42>
 80008ba:	e7ec      	b.n	8000896 <__lesf2+0x46>
 80008bc:	42a2      	cmp	r2, r4
 80008be:	dc05      	bgt.n	80008cc <__lesf2+0x7c>
 80008c0:	dbf2      	blt.n	80008a8 <__lesf2+0x58>
 80008c2:	42b5      	cmp	r5, r6
 80008c4:	d802      	bhi.n	80008cc <__lesf2+0x7c>
 80008c6:	d3ef      	bcc.n	80008a8 <__lesf2+0x58>
 80008c8:	2000      	movs	r0, #0
 80008ca:	e7ea      	b.n	80008a2 <__lesf2+0x52>
 80008cc:	4243      	negs	r3, r0
 80008ce:	4158      	adcs	r0, r3
 80008d0:	0040      	lsls	r0, r0, #1
 80008d2:	3801      	subs	r0, #1
 80008d4:	e7e5      	b.n	80008a2 <__lesf2+0x52>
 80008d6:	46c0      	nop			; (mov r8, r8)

080008d8 <__aeabi_fsub>:
 80008d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008da:	46ce      	mov	lr, r9
 80008dc:	4647      	mov	r7, r8
 80008de:	0243      	lsls	r3, r0, #9
 80008e0:	0a5b      	lsrs	r3, r3, #9
 80008e2:	024e      	lsls	r6, r1, #9
 80008e4:	00da      	lsls	r2, r3, #3
 80008e6:	4694      	mov	ip, r2
 80008e8:	0a72      	lsrs	r2, r6, #9
 80008ea:	4691      	mov	r9, r2
 80008ec:	0045      	lsls	r5, r0, #1
 80008ee:	004a      	lsls	r2, r1, #1
 80008f0:	b580      	push	{r7, lr}
 80008f2:	0e2d      	lsrs	r5, r5, #24
 80008f4:	001f      	movs	r7, r3
 80008f6:	0fc4      	lsrs	r4, r0, #31
 80008f8:	0e12      	lsrs	r2, r2, #24
 80008fa:	0fc9      	lsrs	r1, r1, #31
 80008fc:	09b6      	lsrs	r6, r6, #6
 80008fe:	2aff      	cmp	r2, #255	; 0xff
 8000900:	d05b      	beq.n	80009ba <__aeabi_fsub+0xe2>
 8000902:	2001      	movs	r0, #1
 8000904:	4041      	eors	r1, r0
 8000906:	428c      	cmp	r4, r1
 8000908:	d039      	beq.n	800097e <__aeabi_fsub+0xa6>
 800090a:	1aa8      	subs	r0, r5, r2
 800090c:	2800      	cmp	r0, #0
 800090e:	dd5a      	ble.n	80009c6 <__aeabi_fsub+0xee>
 8000910:	2a00      	cmp	r2, #0
 8000912:	d06a      	beq.n	80009ea <__aeabi_fsub+0x112>
 8000914:	2dff      	cmp	r5, #255	; 0xff
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x42>
 8000918:	e0d9      	b.n	8000ace <__aeabi_fsub+0x1f6>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	04d2      	lsls	r2, r2, #19
 800091e:	4316      	orrs	r6, r2
 8000920:	281b      	cmp	r0, #27
 8000922:	dc00      	bgt.n	8000926 <__aeabi_fsub+0x4e>
 8000924:	e0e9      	b.n	8000afa <__aeabi_fsub+0x222>
 8000926:	2001      	movs	r0, #1
 8000928:	4663      	mov	r3, ip
 800092a:	1a18      	subs	r0, r3, r0
 800092c:	0143      	lsls	r3, r0, #5
 800092e:	d400      	bmi.n	8000932 <__aeabi_fsub+0x5a>
 8000930:	e0b4      	b.n	8000a9c <__aeabi_fsub+0x1c4>
 8000932:	0180      	lsls	r0, r0, #6
 8000934:	0987      	lsrs	r7, r0, #6
 8000936:	0038      	movs	r0, r7
 8000938:	f000 fed2 	bl	80016e0 <__clzsi2>
 800093c:	3805      	subs	r0, #5
 800093e:	4087      	lsls	r7, r0
 8000940:	4285      	cmp	r5, r0
 8000942:	dc00      	bgt.n	8000946 <__aeabi_fsub+0x6e>
 8000944:	e0cc      	b.n	8000ae0 <__aeabi_fsub+0x208>
 8000946:	1a2d      	subs	r5, r5, r0
 8000948:	48b5      	ldr	r0, [pc, #724]	; (8000c20 <__aeabi_fsub+0x348>)
 800094a:	4038      	ands	r0, r7
 800094c:	0743      	lsls	r3, r0, #29
 800094e:	d004      	beq.n	800095a <__aeabi_fsub+0x82>
 8000950:	230f      	movs	r3, #15
 8000952:	4003      	ands	r3, r0
 8000954:	2b04      	cmp	r3, #4
 8000956:	d000      	beq.n	800095a <__aeabi_fsub+0x82>
 8000958:	3004      	adds	r0, #4
 800095a:	0143      	lsls	r3, r0, #5
 800095c:	d400      	bmi.n	8000960 <__aeabi_fsub+0x88>
 800095e:	e0a0      	b.n	8000aa2 <__aeabi_fsub+0x1ca>
 8000960:	1c6a      	adds	r2, r5, #1
 8000962:	2dfe      	cmp	r5, #254	; 0xfe
 8000964:	d100      	bne.n	8000968 <__aeabi_fsub+0x90>
 8000966:	e08d      	b.n	8000a84 <__aeabi_fsub+0x1ac>
 8000968:	0180      	lsls	r0, r0, #6
 800096a:	0a47      	lsrs	r7, r0, #9
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	05d0      	lsls	r0, r2, #23
 8000970:	4338      	orrs	r0, r7
 8000972:	07e4      	lsls	r4, r4, #31
 8000974:	4320      	orrs	r0, r4
 8000976:	bcc0      	pop	{r6, r7}
 8000978:	46b9      	mov	r9, r7
 800097a:	46b0      	mov	r8, r6
 800097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097e:	1aa8      	subs	r0, r5, r2
 8000980:	4680      	mov	r8, r0
 8000982:	2800      	cmp	r0, #0
 8000984:	dd45      	ble.n	8000a12 <__aeabi_fsub+0x13a>
 8000986:	2a00      	cmp	r2, #0
 8000988:	d070      	beq.n	8000a6c <__aeabi_fsub+0x194>
 800098a:	2dff      	cmp	r5, #255	; 0xff
 800098c:	d100      	bne.n	8000990 <__aeabi_fsub+0xb8>
 800098e:	e09e      	b.n	8000ace <__aeabi_fsub+0x1f6>
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	04db      	lsls	r3, r3, #19
 8000994:	431e      	orrs	r6, r3
 8000996:	4643      	mov	r3, r8
 8000998:	2b1b      	cmp	r3, #27
 800099a:	dc00      	bgt.n	800099e <__aeabi_fsub+0xc6>
 800099c:	e0d2      	b.n	8000b44 <__aeabi_fsub+0x26c>
 800099e:	2001      	movs	r0, #1
 80009a0:	4460      	add	r0, ip
 80009a2:	0143      	lsls	r3, r0, #5
 80009a4:	d57a      	bpl.n	8000a9c <__aeabi_fsub+0x1c4>
 80009a6:	3501      	adds	r5, #1
 80009a8:	2dff      	cmp	r5, #255	; 0xff
 80009aa:	d06b      	beq.n	8000a84 <__aeabi_fsub+0x1ac>
 80009ac:	2301      	movs	r3, #1
 80009ae:	4a9d      	ldr	r2, [pc, #628]	; (8000c24 <__aeabi_fsub+0x34c>)
 80009b0:	4003      	ands	r3, r0
 80009b2:	0840      	lsrs	r0, r0, #1
 80009b4:	4010      	ands	r0, r2
 80009b6:	4318      	orrs	r0, r3
 80009b8:	e7c8      	b.n	800094c <__aeabi_fsub+0x74>
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d020      	beq.n	8000a00 <__aeabi_fsub+0x128>
 80009be:	428c      	cmp	r4, r1
 80009c0:	d023      	beq.n	8000a0a <__aeabi_fsub+0x132>
 80009c2:	0028      	movs	r0, r5
 80009c4:	38ff      	subs	r0, #255	; 0xff
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d039      	beq.n	8000a3e <__aeabi_fsub+0x166>
 80009ca:	1b57      	subs	r7, r2, r5
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_fsub+0xfa>
 80009d0:	e09d      	b.n	8000b0e <__aeabi_fsub+0x236>
 80009d2:	4663      	mov	r3, ip
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d100      	bne.n	80009da <__aeabi_fsub+0x102>
 80009d8:	e0db      	b.n	8000b92 <__aeabi_fsub+0x2ba>
 80009da:	1e7b      	subs	r3, r7, #1
 80009dc:	2f01      	cmp	r7, #1
 80009de:	d100      	bne.n	80009e2 <__aeabi_fsub+0x10a>
 80009e0:	e10d      	b.n	8000bfe <__aeabi_fsub+0x326>
 80009e2:	2fff      	cmp	r7, #255	; 0xff
 80009e4:	d071      	beq.n	8000aca <__aeabi_fsub+0x1f2>
 80009e6:	001f      	movs	r7, r3
 80009e8:	e098      	b.n	8000b1c <__aeabi_fsub+0x244>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fsub+0x118>
 80009ee:	e0a7      	b.n	8000b40 <__aeabi_fsub+0x268>
 80009f0:	1e42      	subs	r2, r0, #1
 80009f2:	2801      	cmp	r0, #1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fsub+0x120>
 80009f6:	e0e6      	b.n	8000bc6 <__aeabi_fsub+0x2ee>
 80009f8:	28ff      	cmp	r0, #255	; 0xff
 80009fa:	d068      	beq.n	8000ace <__aeabi_fsub+0x1f6>
 80009fc:	0010      	movs	r0, r2
 80009fe:	e78f      	b.n	8000920 <__aeabi_fsub+0x48>
 8000a00:	2001      	movs	r0, #1
 8000a02:	4041      	eors	r1, r0
 8000a04:	42a1      	cmp	r1, r4
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fsub+0x132>
 8000a08:	e77f      	b.n	800090a <__aeabi_fsub+0x32>
 8000a0a:	20ff      	movs	r0, #255	; 0xff
 8000a0c:	4240      	negs	r0, r0
 8000a0e:	4680      	mov	r8, r0
 8000a10:	44a8      	add	r8, r5
 8000a12:	4640      	mov	r0, r8
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d038      	beq.n	8000a8a <__aeabi_fsub+0x1b2>
 8000a18:	1b51      	subs	r1, r2, r5
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0x148>
 8000a1e:	e0ae      	b.n	8000b7e <__aeabi_fsub+0x2a6>
 8000a20:	2aff      	cmp	r2, #255	; 0xff
 8000a22:	d100      	bne.n	8000a26 <__aeabi_fsub+0x14e>
 8000a24:	e0df      	b.n	8000be6 <__aeabi_fsub+0x30e>
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	4660      	mov	r0, ip
 8000a2a:	04db      	lsls	r3, r3, #19
 8000a2c:	4318      	orrs	r0, r3
 8000a2e:	4684      	mov	ip, r0
 8000a30:	291b      	cmp	r1, #27
 8000a32:	dc00      	bgt.n	8000a36 <__aeabi_fsub+0x15e>
 8000a34:	e0d9      	b.n	8000bea <__aeabi_fsub+0x312>
 8000a36:	2001      	movs	r0, #1
 8000a38:	0015      	movs	r5, r2
 8000a3a:	1980      	adds	r0, r0, r6
 8000a3c:	e7b1      	b.n	80009a2 <__aeabi_fsub+0xca>
 8000a3e:	20fe      	movs	r0, #254	; 0xfe
 8000a40:	1c6a      	adds	r2, r5, #1
 8000a42:	4210      	tst	r0, r2
 8000a44:	d171      	bne.n	8000b2a <__aeabi_fsub+0x252>
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x174>
 8000a4a:	e0a6      	b.n	8000b9a <__aeabi_fsub+0x2c2>
 8000a4c:	4663      	mov	r3, ip
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fsub+0x17c>
 8000a52:	e0d9      	b.n	8000c08 <__aeabi_fsub+0x330>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d100      	bne.n	8000a5c <__aeabi_fsub+0x184>
 8000a5a:	e788      	b.n	800096e <__aeabi_fsub+0x96>
 8000a5c:	1b98      	subs	r0, r3, r6
 8000a5e:	0143      	lsls	r3, r0, #5
 8000a60:	d400      	bmi.n	8000a64 <__aeabi_fsub+0x18c>
 8000a62:	e0e1      	b.n	8000c28 <__aeabi_fsub+0x350>
 8000a64:	4663      	mov	r3, ip
 8000a66:	000c      	movs	r4, r1
 8000a68:	1af0      	subs	r0, r6, r3
 8000a6a:	e76f      	b.n	800094c <__aeabi_fsub+0x74>
 8000a6c:	2e00      	cmp	r6, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x19a>
 8000a70:	e0b7      	b.n	8000be2 <__aeabi_fsub+0x30a>
 8000a72:	0002      	movs	r2, r0
 8000a74:	3a01      	subs	r2, #1
 8000a76:	2801      	cmp	r0, #1
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fsub+0x1a4>
 8000a7a:	e09c      	b.n	8000bb6 <__aeabi_fsub+0x2de>
 8000a7c:	28ff      	cmp	r0, #255	; 0xff
 8000a7e:	d026      	beq.n	8000ace <__aeabi_fsub+0x1f6>
 8000a80:	4690      	mov	r8, r2
 8000a82:	e788      	b.n	8000996 <__aeabi_fsub+0xbe>
 8000a84:	22ff      	movs	r2, #255	; 0xff
 8000a86:	2700      	movs	r7, #0
 8000a88:	e771      	b.n	800096e <__aeabi_fsub+0x96>
 8000a8a:	20fe      	movs	r0, #254	; 0xfe
 8000a8c:	1c6a      	adds	r2, r5, #1
 8000a8e:	4210      	tst	r0, r2
 8000a90:	d064      	beq.n	8000b5c <__aeabi_fsub+0x284>
 8000a92:	2aff      	cmp	r2, #255	; 0xff
 8000a94:	d0f6      	beq.n	8000a84 <__aeabi_fsub+0x1ac>
 8000a96:	0015      	movs	r5, r2
 8000a98:	4466      	add	r6, ip
 8000a9a:	0870      	lsrs	r0, r6, #1
 8000a9c:	0743      	lsls	r3, r0, #29
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_fsub+0x1ca>
 8000aa0:	e756      	b.n	8000950 <__aeabi_fsub+0x78>
 8000aa2:	08c3      	lsrs	r3, r0, #3
 8000aa4:	2dff      	cmp	r5, #255	; 0xff
 8000aa6:	d012      	beq.n	8000ace <__aeabi_fsub+0x1f6>
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5f      	lsrs	r7, r3, #9
 8000aac:	b2ea      	uxtb	r2, r5
 8000aae:	e75e      	b.n	800096e <__aeabi_fsub+0x96>
 8000ab0:	4662      	mov	r2, ip
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fsub+0x1e0>
 8000ab6:	e096      	b.n	8000be6 <__aeabi_fsub+0x30e>
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d008      	beq.n	8000ace <__aeabi_fsub+0x1f6>
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	03d2      	lsls	r2, r2, #15
 8000ac0:	4213      	tst	r3, r2
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fsub+0x1f6>
 8000ac4:	4648      	mov	r0, r9
 8000ac6:	4210      	tst	r0, r2
 8000ac8:	d101      	bne.n	8000ace <__aeabi_fsub+0x1f6>
 8000aca:	000c      	movs	r4, r1
 8000acc:	464b      	mov	r3, r9
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0d8      	beq.n	8000a84 <__aeabi_fsub+0x1ac>
 8000ad2:	2780      	movs	r7, #128	; 0x80
 8000ad4:	03ff      	lsls	r7, r7, #15
 8000ad6:	431f      	orrs	r7, r3
 8000ad8:	027f      	lsls	r7, r7, #9
 8000ada:	22ff      	movs	r2, #255	; 0xff
 8000adc:	0a7f      	lsrs	r7, r7, #9
 8000ade:	e746      	b.n	800096e <__aeabi_fsub+0x96>
 8000ae0:	2320      	movs	r3, #32
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	1b45      	subs	r5, r0, r5
 8000ae6:	0038      	movs	r0, r7
 8000ae8:	3501      	adds	r5, #1
 8000aea:	40ea      	lsrs	r2, r5
 8000aec:	1b5d      	subs	r5, r3, r5
 8000aee:	40a8      	lsls	r0, r5
 8000af0:	1e43      	subs	r3, r0, #1
 8000af2:	4198      	sbcs	r0, r3
 8000af4:	2500      	movs	r5, #0
 8000af6:	4310      	orrs	r0, r2
 8000af8:	e728      	b.n	800094c <__aeabi_fsub+0x74>
 8000afa:	2320      	movs	r3, #32
 8000afc:	1a1b      	subs	r3, r3, r0
 8000afe:	0032      	movs	r2, r6
 8000b00:	409e      	lsls	r6, r3
 8000b02:	40c2      	lsrs	r2, r0
 8000b04:	0030      	movs	r0, r6
 8000b06:	1e43      	subs	r3, r0, #1
 8000b08:	4198      	sbcs	r0, r3
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	e70c      	b.n	8000928 <__aeabi_fsub+0x50>
 8000b0e:	2aff      	cmp	r2, #255	; 0xff
 8000b10:	d0db      	beq.n	8000aca <__aeabi_fsub+0x1f2>
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	4660      	mov	r0, ip
 8000b16:	04db      	lsls	r3, r3, #19
 8000b18:	4318      	orrs	r0, r3
 8000b1a:	4684      	mov	ip, r0
 8000b1c:	2f1b      	cmp	r7, #27
 8000b1e:	dd56      	ble.n	8000bce <__aeabi_fsub+0x2f6>
 8000b20:	2001      	movs	r0, #1
 8000b22:	000c      	movs	r4, r1
 8000b24:	0015      	movs	r5, r2
 8000b26:	1a30      	subs	r0, r6, r0
 8000b28:	e700      	b.n	800092c <__aeabi_fsub+0x54>
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	1b9f      	subs	r7, r3, r6
 8000b2e:	017b      	lsls	r3, r7, #5
 8000b30:	d43d      	bmi.n	8000bae <__aeabi_fsub+0x2d6>
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	d000      	beq.n	8000b38 <__aeabi_fsub+0x260>
 8000b36:	e6fe      	b.n	8000936 <__aeabi_fsub+0x5e>
 8000b38:	2400      	movs	r4, #0
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e716      	b.n	800096e <__aeabi_fsub+0x96>
 8000b40:	0005      	movs	r5, r0
 8000b42:	e7af      	b.n	8000aa4 <__aeabi_fsub+0x1cc>
 8000b44:	0032      	movs	r2, r6
 8000b46:	4643      	mov	r3, r8
 8000b48:	4641      	mov	r1, r8
 8000b4a:	40da      	lsrs	r2, r3
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	1a5b      	subs	r3, r3, r1
 8000b50:	409e      	lsls	r6, r3
 8000b52:	0030      	movs	r0, r6
 8000b54:	1e43      	subs	r3, r0, #1
 8000b56:	4198      	sbcs	r0, r3
 8000b58:	4310      	orrs	r0, r2
 8000b5a:	e721      	b.n	80009a0 <__aeabi_fsub+0xc8>
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d1a7      	bne.n	8000ab0 <__aeabi_fsub+0x1d8>
 8000b60:	4663      	mov	r3, ip
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d059      	beq.n	8000c1a <__aeabi_fsub+0x342>
 8000b66:	2200      	movs	r2, #0
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_fsub+0x296>
 8000b6c:	e6ff      	b.n	800096e <__aeabi_fsub+0x96>
 8000b6e:	0030      	movs	r0, r6
 8000b70:	4460      	add	r0, ip
 8000b72:	0143      	lsls	r3, r0, #5
 8000b74:	d592      	bpl.n	8000a9c <__aeabi_fsub+0x1c4>
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <__aeabi_fsub+0x348>)
 8000b78:	3501      	adds	r5, #1
 8000b7a:	4018      	ands	r0, r3
 8000b7c:	e78e      	b.n	8000a9c <__aeabi_fsub+0x1c4>
 8000b7e:	4663      	mov	r3, ip
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d047      	beq.n	8000c14 <__aeabi_fsub+0x33c>
 8000b84:	1e4b      	subs	r3, r1, #1
 8000b86:	2901      	cmp	r1, #1
 8000b88:	d015      	beq.n	8000bb6 <__aeabi_fsub+0x2de>
 8000b8a:	29ff      	cmp	r1, #255	; 0xff
 8000b8c:	d02b      	beq.n	8000be6 <__aeabi_fsub+0x30e>
 8000b8e:	0019      	movs	r1, r3
 8000b90:	e74e      	b.n	8000a30 <__aeabi_fsub+0x158>
 8000b92:	000c      	movs	r4, r1
 8000b94:	464b      	mov	r3, r9
 8000b96:	003d      	movs	r5, r7
 8000b98:	e784      	b.n	8000aa4 <__aeabi_fsub+0x1cc>
 8000b9a:	4662      	mov	r2, ip
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	d18b      	bne.n	8000ab8 <__aeabi_fsub+0x1e0>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d192      	bne.n	8000aca <__aeabi_fsub+0x1f2>
 8000ba4:	2780      	movs	r7, #128	; 0x80
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	03ff      	lsls	r7, r7, #15
 8000bac:	e6df      	b.n	800096e <__aeabi_fsub+0x96>
 8000bae:	4663      	mov	r3, ip
 8000bb0:	000c      	movs	r4, r1
 8000bb2:	1af7      	subs	r7, r6, r3
 8000bb4:	e6bf      	b.n	8000936 <__aeabi_fsub+0x5e>
 8000bb6:	0030      	movs	r0, r6
 8000bb8:	4460      	add	r0, ip
 8000bba:	2501      	movs	r5, #1
 8000bbc:	0143      	lsls	r3, r0, #5
 8000bbe:	d400      	bmi.n	8000bc2 <__aeabi_fsub+0x2ea>
 8000bc0:	e76c      	b.n	8000a9c <__aeabi_fsub+0x1c4>
 8000bc2:	2502      	movs	r5, #2
 8000bc4:	e6f2      	b.n	80009ac <__aeabi_fsub+0xd4>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	2501      	movs	r5, #1
 8000bca:	1b98      	subs	r0, r3, r6
 8000bcc:	e6ae      	b.n	800092c <__aeabi_fsub+0x54>
 8000bce:	2320      	movs	r3, #32
 8000bd0:	4664      	mov	r4, ip
 8000bd2:	4660      	mov	r0, ip
 8000bd4:	40fc      	lsrs	r4, r7
 8000bd6:	1bdf      	subs	r7, r3, r7
 8000bd8:	40b8      	lsls	r0, r7
 8000bda:	1e43      	subs	r3, r0, #1
 8000bdc:	4198      	sbcs	r0, r3
 8000bde:	4320      	orrs	r0, r4
 8000be0:	e79f      	b.n	8000b22 <__aeabi_fsub+0x24a>
 8000be2:	0005      	movs	r5, r0
 8000be4:	e75e      	b.n	8000aa4 <__aeabi_fsub+0x1cc>
 8000be6:	464b      	mov	r3, r9
 8000be8:	e771      	b.n	8000ace <__aeabi_fsub+0x1f6>
 8000bea:	2320      	movs	r3, #32
 8000bec:	4665      	mov	r5, ip
 8000bee:	4660      	mov	r0, ip
 8000bf0:	40cd      	lsrs	r5, r1
 8000bf2:	1a59      	subs	r1, r3, r1
 8000bf4:	4088      	lsls	r0, r1
 8000bf6:	1e43      	subs	r3, r0, #1
 8000bf8:	4198      	sbcs	r0, r3
 8000bfa:	4328      	orrs	r0, r5
 8000bfc:	e71c      	b.n	8000a38 <__aeabi_fsub+0x160>
 8000bfe:	4663      	mov	r3, ip
 8000c00:	000c      	movs	r4, r1
 8000c02:	2501      	movs	r5, #1
 8000c04:	1af0      	subs	r0, r6, r3
 8000c06:	e691      	b.n	800092c <__aeabi_fsub+0x54>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d095      	beq.n	8000b38 <__aeabi_fsub+0x260>
 8000c0c:	000c      	movs	r4, r1
 8000c0e:	464f      	mov	r7, r9
 8000c10:	2200      	movs	r2, #0
 8000c12:	e6ac      	b.n	800096e <__aeabi_fsub+0x96>
 8000c14:	464b      	mov	r3, r9
 8000c16:	000d      	movs	r5, r1
 8000c18:	e744      	b.n	8000aa4 <__aeabi_fsub+0x1cc>
 8000c1a:	464f      	mov	r7, r9
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e6a6      	b.n	800096e <__aeabi_fsub+0x96>
 8000c20:	fbffffff 	.word	0xfbffffff
 8000c24:	7dffffff 	.word	0x7dffffff
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_fsub+0x356>
 8000c2c:	e736      	b.n	8000a9c <__aeabi_fsub+0x1c4>
 8000c2e:	2400      	movs	r4, #0
 8000c30:	2700      	movs	r7, #0
 8000c32:	e69c      	b.n	800096e <__aeabi_fsub+0x96>

08000c34 <__aeabi_i2f>:
 8000c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d013      	beq.n	8000c62 <__aeabi_i2f+0x2e>
 8000c3a:	17c3      	asrs	r3, r0, #31
 8000c3c:	18c6      	adds	r6, r0, r3
 8000c3e:	405e      	eors	r6, r3
 8000c40:	0fc4      	lsrs	r4, r0, #31
 8000c42:	0030      	movs	r0, r6
 8000c44:	f000 fd4c 	bl	80016e0 <__clzsi2>
 8000c48:	239e      	movs	r3, #158	; 0x9e
 8000c4a:	0005      	movs	r5, r0
 8000c4c:	1a1b      	subs	r3, r3, r0
 8000c4e:	2b96      	cmp	r3, #150	; 0x96
 8000c50:	dc0f      	bgt.n	8000c72 <__aeabi_i2f+0x3e>
 8000c52:	2808      	cmp	r0, #8
 8000c54:	dd01      	ble.n	8000c5a <__aeabi_i2f+0x26>
 8000c56:	3d08      	subs	r5, #8
 8000c58:	40ae      	lsls	r6, r5
 8000c5a:	0276      	lsls	r6, r6, #9
 8000c5c:	0a76      	lsrs	r6, r6, #9
 8000c5e:	b2d8      	uxtb	r0, r3
 8000c60:	e002      	b.n	8000c68 <__aeabi_i2f+0x34>
 8000c62:	2400      	movs	r4, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	2600      	movs	r6, #0
 8000c68:	05c0      	lsls	r0, r0, #23
 8000c6a:	4330      	orrs	r0, r6
 8000c6c:	07e4      	lsls	r4, r4, #31
 8000c6e:	4320      	orrs	r0, r4
 8000c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c72:	2b99      	cmp	r3, #153	; 0x99
 8000c74:	dd0c      	ble.n	8000c90 <__aeabi_i2f+0x5c>
 8000c76:	2205      	movs	r2, #5
 8000c78:	0031      	movs	r1, r6
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	40d1      	lsrs	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	0001      	movs	r1, r0
 8000c82:	0030      	movs	r0, r6
 8000c84:	311b      	adds	r1, #27
 8000c86:	4088      	lsls	r0, r1
 8000c88:	1e41      	subs	r1, r0, #1
 8000c8a:	4188      	sbcs	r0, r1
 8000c8c:	4302      	orrs	r2, r0
 8000c8e:	0016      	movs	r6, r2
 8000c90:	2d05      	cmp	r5, #5
 8000c92:	dc12      	bgt.n	8000cba <__aeabi_i2f+0x86>
 8000c94:	0031      	movs	r1, r6
 8000c96:	4f0d      	ldr	r7, [pc, #52]	; (8000ccc <__aeabi_i2f+0x98>)
 8000c98:	4039      	ands	r1, r7
 8000c9a:	0772      	lsls	r2, r6, #29
 8000c9c:	d009      	beq.n	8000cb2 <__aeabi_i2f+0x7e>
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	4030      	ands	r0, r6
 8000ca2:	2804      	cmp	r0, #4
 8000ca4:	d005      	beq.n	8000cb2 <__aeabi_i2f+0x7e>
 8000ca6:	3104      	adds	r1, #4
 8000ca8:	014a      	lsls	r2, r1, #5
 8000caa:	d502      	bpl.n	8000cb2 <__aeabi_i2f+0x7e>
 8000cac:	239f      	movs	r3, #159	; 0x9f
 8000cae:	4039      	ands	r1, r7
 8000cb0:	1b5b      	subs	r3, r3, r5
 8000cb2:	0189      	lsls	r1, r1, #6
 8000cb4:	0a4e      	lsrs	r6, r1, #9
 8000cb6:	b2d8      	uxtb	r0, r3
 8000cb8:	e7d6      	b.n	8000c68 <__aeabi_i2f+0x34>
 8000cba:	1f6a      	subs	r2, r5, #5
 8000cbc:	4096      	lsls	r6, r2
 8000cbe:	0031      	movs	r1, r6
 8000cc0:	4f02      	ldr	r7, [pc, #8]	; (8000ccc <__aeabi_i2f+0x98>)
 8000cc2:	4039      	ands	r1, r7
 8000cc4:	0772      	lsls	r2, r6, #29
 8000cc6:	d0f4      	beq.n	8000cb2 <__aeabi_i2f+0x7e>
 8000cc8:	e7e9      	b.n	8000c9e <__aeabi_i2f+0x6a>
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	fbffffff 	.word	0xfbffffff

08000cd0 <__aeabi_ui2f>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	1e05      	subs	r5, r0, #0
 8000cd4:	d00e      	beq.n	8000cf4 <__aeabi_ui2f+0x24>
 8000cd6:	f000 fd03 	bl	80016e0 <__clzsi2>
 8000cda:	239e      	movs	r3, #158	; 0x9e
 8000cdc:	0004      	movs	r4, r0
 8000cde:	1a1b      	subs	r3, r3, r0
 8000ce0:	2b96      	cmp	r3, #150	; 0x96
 8000ce2:	dc0c      	bgt.n	8000cfe <__aeabi_ui2f+0x2e>
 8000ce4:	2808      	cmp	r0, #8
 8000ce6:	dd01      	ble.n	8000cec <__aeabi_ui2f+0x1c>
 8000ce8:	3c08      	subs	r4, #8
 8000cea:	40a5      	lsls	r5, r4
 8000cec:	026d      	lsls	r5, r5, #9
 8000cee:	0a6d      	lsrs	r5, r5, #9
 8000cf0:	b2d8      	uxtb	r0, r3
 8000cf2:	e001      	b.n	8000cf8 <__aeabi_ui2f+0x28>
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	2500      	movs	r5, #0
 8000cf8:	05c0      	lsls	r0, r0, #23
 8000cfa:	4328      	orrs	r0, r5
 8000cfc:	bd70      	pop	{r4, r5, r6, pc}
 8000cfe:	2b99      	cmp	r3, #153	; 0x99
 8000d00:	dd09      	ble.n	8000d16 <__aeabi_ui2f+0x46>
 8000d02:	0002      	movs	r2, r0
 8000d04:	0029      	movs	r1, r5
 8000d06:	321b      	adds	r2, #27
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	1e4a      	subs	r2, r1, #1
 8000d0c:	4191      	sbcs	r1, r2
 8000d0e:	2205      	movs	r2, #5
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	40d5      	lsrs	r5, r2
 8000d14:	430d      	orrs	r5, r1
 8000d16:	2c05      	cmp	r4, #5
 8000d18:	dc12      	bgt.n	8000d40 <__aeabi_ui2f+0x70>
 8000d1a:	0029      	movs	r1, r5
 8000d1c:	4e0c      	ldr	r6, [pc, #48]	; (8000d50 <__aeabi_ui2f+0x80>)
 8000d1e:	4031      	ands	r1, r6
 8000d20:	076a      	lsls	r2, r5, #29
 8000d22:	d009      	beq.n	8000d38 <__aeabi_ui2f+0x68>
 8000d24:	200f      	movs	r0, #15
 8000d26:	4028      	ands	r0, r5
 8000d28:	2804      	cmp	r0, #4
 8000d2a:	d005      	beq.n	8000d38 <__aeabi_ui2f+0x68>
 8000d2c:	3104      	adds	r1, #4
 8000d2e:	014a      	lsls	r2, r1, #5
 8000d30:	d502      	bpl.n	8000d38 <__aeabi_ui2f+0x68>
 8000d32:	239f      	movs	r3, #159	; 0x9f
 8000d34:	4031      	ands	r1, r6
 8000d36:	1b1b      	subs	r3, r3, r4
 8000d38:	0189      	lsls	r1, r1, #6
 8000d3a:	0a4d      	lsrs	r5, r1, #9
 8000d3c:	b2d8      	uxtb	r0, r3
 8000d3e:	e7db      	b.n	8000cf8 <__aeabi_ui2f+0x28>
 8000d40:	1f62      	subs	r2, r4, #5
 8000d42:	4095      	lsls	r5, r2
 8000d44:	0029      	movs	r1, r5
 8000d46:	4e02      	ldr	r6, [pc, #8]	; (8000d50 <__aeabi_ui2f+0x80>)
 8000d48:	4031      	ands	r1, r6
 8000d4a:	076a      	lsls	r2, r5, #29
 8000d4c:	d0f4      	beq.n	8000d38 <__aeabi_ui2f+0x68>
 8000d4e:	e7e9      	b.n	8000d24 <__aeabi_ui2f+0x54>
 8000d50:	fbffffff 	.word	0xfbffffff

08000d54 <__aeabi_dadd>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	464f      	mov	r7, r9
 8000d58:	4646      	mov	r6, r8
 8000d5a:	46d6      	mov	lr, sl
 8000d5c:	000d      	movs	r5, r1
 8000d5e:	0004      	movs	r4, r0
 8000d60:	b5c0      	push	{r6, r7, lr}
 8000d62:	001f      	movs	r7, r3
 8000d64:	0011      	movs	r1, r2
 8000d66:	0328      	lsls	r0, r5, #12
 8000d68:	0f62      	lsrs	r2, r4, #29
 8000d6a:	0a40      	lsrs	r0, r0, #9
 8000d6c:	4310      	orrs	r0, r2
 8000d6e:	007a      	lsls	r2, r7, #1
 8000d70:	0d52      	lsrs	r2, r2, #21
 8000d72:	00e3      	lsls	r3, r4, #3
 8000d74:	033c      	lsls	r4, r7, #12
 8000d76:	4691      	mov	r9, r2
 8000d78:	0a64      	lsrs	r4, r4, #9
 8000d7a:	0ffa      	lsrs	r2, r7, #31
 8000d7c:	0f4f      	lsrs	r7, r1, #29
 8000d7e:	006e      	lsls	r6, r5, #1
 8000d80:	4327      	orrs	r7, r4
 8000d82:	4692      	mov	sl, r2
 8000d84:	46b8      	mov	r8, r7
 8000d86:	0d76      	lsrs	r6, r6, #21
 8000d88:	0fed      	lsrs	r5, r5, #31
 8000d8a:	00c9      	lsls	r1, r1, #3
 8000d8c:	4295      	cmp	r5, r2
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_dadd+0x3e>
 8000d90:	e099      	b.n	8000ec6 <__aeabi_dadd+0x172>
 8000d92:	464c      	mov	r4, r9
 8000d94:	1b34      	subs	r4, r6, r4
 8000d96:	46a4      	mov	ip, r4
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	dc00      	bgt.n	8000d9e <__aeabi_dadd+0x4a>
 8000d9c:	e07c      	b.n	8000e98 <__aeabi_dadd+0x144>
 8000d9e:	464a      	mov	r2, r9
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x52>
 8000da4:	e0b8      	b.n	8000f18 <__aeabi_dadd+0x1c4>
 8000da6:	4ac5      	ldr	r2, [pc, #788]	; (80010bc <__aeabi_dadd+0x368>)
 8000da8:	4296      	cmp	r6, r2
 8000daa:	d100      	bne.n	8000dae <__aeabi_dadd+0x5a>
 8000dac:	e11c      	b.n	8000fe8 <__aeabi_dadd+0x294>
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	003c      	movs	r4, r7
 8000db2:	0412      	lsls	r2, r2, #16
 8000db4:	4314      	orrs	r4, r2
 8000db6:	46a0      	mov	r8, r4
 8000db8:	4662      	mov	r2, ip
 8000dba:	2a38      	cmp	r2, #56	; 0x38
 8000dbc:	dd00      	ble.n	8000dc0 <__aeabi_dadd+0x6c>
 8000dbe:	e161      	b.n	8001084 <__aeabi_dadd+0x330>
 8000dc0:	2a1f      	cmp	r2, #31
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_dadd+0x72>
 8000dc4:	e1cc      	b.n	8001160 <__aeabi_dadd+0x40c>
 8000dc6:	4664      	mov	r4, ip
 8000dc8:	2220      	movs	r2, #32
 8000dca:	1b12      	subs	r2, r2, r4
 8000dcc:	4644      	mov	r4, r8
 8000dce:	4094      	lsls	r4, r2
 8000dd0:	000f      	movs	r7, r1
 8000dd2:	46a1      	mov	r9, r4
 8000dd4:	4664      	mov	r4, ip
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	40e7      	lsrs	r7, r4
 8000dda:	464c      	mov	r4, r9
 8000ddc:	1e4a      	subs	r2, r1, #1
 8000dde:	4191      	sbcs	r1, r2
 8000de0:	433c      	orrs	r4, r7
 8000de2:	4642      	mov	r2, r8
 8000de4:	4321      	orrs	r1, r4
 8000de6:	4664      	mov	r4, ip
 8000de8:	40e2      	lsrs	r2, r4
 8000dea:	1a80      	subs	r0, r0, r2
 8000dec:	1a5c      	subs	r4, r3, r1
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	419b      	sbcs	r3, r3
 8000df2:	425f      	negs	r7, r3
 8000df4:	1bc7      	subs	r7, r0, r7
 8000df6:	023b      	lsls	r3, r7, #8
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_dadd+0xa8>
 8000dfa:	e0d0      	b.n	8000f9e <__aeabi_dadd+0x24a>
 8000dfc:	027f      	lsls	r7, r7, #9
 8000dfe:	0a7f      	lsrs	r7, r7, #9
 8000e00:	2f00      	cmp	r7, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0xb2>
 8000e04:	e0ff      	b.n	8001006 <__aeabi_dadd+0x2b2>
 8000e06:	0038      	movs	r0, r7
 8000e08:	f000 fc6a 	bl	80016e0 <__clzsi2>
 8000e0c:	0001      	movs	r1, r0
 8000e0e:	3908      	subs	r1, #8
 8000e10:	2320      	movs	r3, #32
 8000e12:	0022      	movs	r2, r4
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	408f      	lsls	r7, r1
 8000e18:	40da      	lsrs	r2, r3
 8000e1a:	408c      	lsls	r4, r1
 8000e1c:	4317      	orrs	r7, r2
 8000e1e:	42b1      	cmp	r1, r6
 8000e20:	da00      	bge.n	8000e24 <__aeabi_dadd+0xd0>
 8000e22:	e0ff      	b.n	8001024 <__aeabi_dadd+0x2d0>
 8000e24:	1b89      	subs	r1, r1, r6
 8000e26:	1c4b      	adds	r3, r1, #1
 8000e28:	2b1f      	cmp	r3, #31
 8000e2a:	dd00      	ble.n	8000e2e <__aeabi_dadd+0xda>
 8000e2c:	e0a8      	b.n	8000f80 <__aeabi_dadd+0x22c>
 8000e2e:	2220      	movs	r2, #32
 8000e30:	0039      	movs	r1, r7
 8000e32:	1ad2      	subs	r2, r2, r3
 8000e34:	0020      	movs	r0, r4
 8000e36:	4094      	lsls	r4, r2
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	1e62      	subs	r2, r4, #1
 8000e3e:	4194      	sbcs	r4, r2
 8000e40:	40df      	lsrs	r7, r3
 8000e42:	2600      	movs	r6, #0
 8000e44:	4301      	orrs	r1, r0
 8000e46:	430c      	orrs	r4, r1
 8000e48:	0763      	lsls	r3, r4, #29
 8000e4a:	d009      	beq.n	8000e60 <__aeabi_dadd+0x10c>
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	4023      	ands	r3, r4
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d005      	beq.n	8000e60 <__aeabi_dadd+0x10c>
 8000e54:	1d23      	adds	r3, r4, #4
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	41a4      	sbcs	r4, r4
 8000e5a:	4264      	negs	r4, r4
 8000e5c:	193f      	adds	r7, r7, r4
 8000e5e:	001c      	movs	r4, r3
 8000e60:	023b      	lsls	r3, r7, #8
 8000e62:	d400      	bmi.n	8000e66 <__aeabi_dadd+0x112>
 8000e64:	e09e      	b.n	8000fa4 <__aeabi_dadd+0x250>
 8000e66:	4b95      	ldr	r3, [pc, #596]	; (80010bc <__aeabi_dadd+0x368>)
 8000e68:	3601      	adds	r6, #1
 8000e6a:	429e      	cmp	r6, r3
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0x11c>
 8000e6e:	e0b7      	b.n	8000fe0 <__aeabi_dadd+0x28c>
 8000e70:	4a93      	ldr	r2, [pc, #588]	; (80010c0 <__aeabi_dadd+0x36c>)
 8000e72:	08e4      	lsrs	r4, r4, #3
 8000e74:	4017      	ands	r7, r2
 8000e76:	077b      	lsls	r3, r7, #29
 8000e78:	0571      	lsls	r1, r6, #21
 8000e7a:	027f      	lsls	r7, r7, #9
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	0b3f      	lsrs	r7, r7, #12
 8000e80:	0d4a      	lsrs	r2, r1, #21
 8000e82:	0512      	lsls	r2, r2, #20
 8000e84:	433a      	orrs	r2, r7
 8000e86:	07ed      	lsls	r5, r5, #31
 8000e88:	432a      	orrs	r2, r5
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	0011      	movs	r1, r2
 8000e8e:	bce0      	pop	{r5, r6, r7}
 8000e90:	46ba      	mov	sl, r7
 8000e92:	46b1      	mov	r9, r6
 8000e94:	46a8      	mov	r8, r5
 8000e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e98:	2c00      	cmp	r4, #0
 8000e9a:	d04b      	beq.n	8000f34 <__aeabi_dadd+0x1e0>
 8000e9c:	464c      	mov	r4, r9
 8000e9e:	1ba4      	subs	r4, r4, r6
 8000ea0:	46a4      	mov	ip, r4
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_dadd+0x154>
 8000ea6:	e123      	b.n	80010f0 <__aeabi_dadd+0x39c>
 8000ea8:	0004      	movs	r4, r0
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dadd+0x15c>
 8000eae:	e1af      	b.n	8001210 <__aeabi_dadd+0x4bc>
 8000eb0:	4662      	mov	r2, ip
 8000eb2:	1e54      	subs	r4, r2, #1
 8000eb4:	2a01      	cmp	r2, #1
 8000eb6:	d100      	bne.n	8000eba <__aeabi_dadd+0x166>
 8000eb8:	e215      	b.n	80012e6 <__aeabi_dadd+0x592>
 8000eba:	4d80      	ldr	r5, [pc, #512]	; (80010bc <__aeabi_dadd+0x368>)
 8000ebc:	45ac      	cmp	ip, r5
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_dadd+0x16e>
 8000ec0:	e1c8      	b.n	8001254 <__aeabi_dadd+0x500>
 8000ec2:	46a4      	mov	ip, r4
 8000ec4:	e11b      	b.n	80010fe <__aeabi_dadd+0x3aa>
 8000ec6:	464a      	mov	r2, r9
 8000ec8:	1ab2      	subs	r2, r6, r2
 8000eca:	4694      	mov	ip, r2
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_dadd+0x17e>
 8000ed0:	e0ac      	b.n	800102c <__aeabi_dadd+0x2d8>
 8000ed2:	464a      	mov	r2, r9
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d043      	beq.n	8000f60 <__aeabi_dadd+0x20c>
 8000ed8:	4a78      	ldr	r2, [pc, #480]	; (80010bc <__aeabi_dadd+0x368>)
 8000eda:	4296      	cmp	r6, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dadd+0x18c>
 8000ede:	e1af      	b.n	8001240 <__aeabi_dadd+0x4ec>
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	003c      	movs	r4, r7
 8000ee4:	0412      	lsls	r2, r2, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	46a0      	mov	r8, r4
 8000eea:	4662      	mov	r2, ip
 8000eec:	2a38      	cmp	r2, #56	; 0x38
 8000eee:	dc67      	bgt.n	8000fc0 <__aeabi_dadd+0x26c>
 8000ef0:	2a1f      	cmp	r2, #31
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_dadd+0x1a2>
 8000ef4:	e15f      	b.n	80011b6 <__aeabi_dadd+0x462>
 8000ef6:	4647      	mov	r7, r8
 8000ef8:	3a20      	subs	r2, #32
 8000efa:	40d7      	lsrs	r7, r2
 8000efc:	4662      	mov	r2, ip
 8000efe:	2a20      	cmp	r2, #32
 8000f00:	d005      	beq.n	8000f0e <__aeabi_dadd+0x1ba>
 8000f02:	4664      	mov	r4, ip
 8000f04:	2240      	movs	r2, #64	; 0x40
 8000f06:	1b12      	subs	r2, r2, r4
 8000f08:	4644      	mov	r4, r8
 8000f0a:	4094      	lsls	r4, r2
 8000f0c:	4321      	orrs	r1, r4
 8000f0e:	1e4a      	subs	r2, r1, #1
 8000f10:	4191      	sbcs	r1, r2
 8000f12:	000c      	movs	r4, r1
 8000f14:	433c      	orrs	r4, r7
 8000f16:	e057      	b.n	8000fc8 <__aeabi_dadd+0x274>
 8000f18:	003a      	movs	r2, r7
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dadd+0x1cc>
 8000f1e:	e105      	b.n	800112c <__aeabi_dadd+0x3d8>
 8000f20:	0022      	movs	r2, r4
 8000f22:	3a01      	subs	r2, #1
 8000f24:	2c01      	cmp	r4, #1
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x1d6>
 8000f28:	e182      	b.n	8001230 <__aeabi_dadd+0x4dc>
 8000f2a:	4c64      	ldr	r4, [pc, #400]	; (80010bc <__aeabi_dadd+0x368>)
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d05b      	beq.n	8000fe8 <__aeabi_dadd+0x294>
 8000f30:	4694      	mov	ip, r2
 8000f32:	e741      	b.n	8000db8 <__aeabi_dadd+0x64>
 8000f34:	4c63      	ldr	r4, [pc, #396]	; (80010c4 <__aeabi_dadd+0x370>)
 8000f36:	1c77      	adds	r7, r6, #1
 8000f38:	4227      	tst	r7, r4
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_dadd+0x1ea>
 8000f3c:	e0c4      	b.n	80010c8 <__aeabi_dadd+0x374>
 8000f3e:	0004      	movs	r4, r0
 8000f40:	431c      	orrs	r4, r3
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	d000      	beq.n	8000f48 <__aeabi_dadd+0x1f4>
 8000f46:	e169      	b.n	800121c <__aeabi_dadd+0x4c8>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dadd+0x1fa>
 8000f4c:	e1bf      	b.n	80012ce <__aeabi_dadd+0x57a>
 8000f4e:	4644      	mov	r4, r8
 8000f50:	430c      	orrs	r4, r1
 8000f52:	d000      	beq.n	8000f56 <__aeabi_dadd+0x202>
 8000f54:	e1d0      	b.n	80012f8 <__aeabi_dadd+0x5a4>
 8000f56:	0742      	lsls	r2, r0, #29
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	08c0      	lsrs	r0, r0, #3
 8000f5e:	e029      	b.n	8000fb4 <__aeabi_dadd+0x260>
 8000f60:	003a      	movs	r2, r7
 8000f62:	430a      	orrs	r2, r1
 8000f64:	d100      	bne.n	8000f68 <__aeabi_dadd+0x214>
 8000f66:	e170      	b.n	800124a <__aeabi_dadd+0x4f6>
 8000f68:	4662      	mov	r2, ip
 8000f6a:	4664      	mov	r4, ip
 8000f6c:	3a01      	subs	r2, #1
 8000f6e:	2c01      	cmp	r4, #1
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dadd+0x220>
 8000f72:	e0e0      	b.n	8001136 <__aeabi_dadd+0x3e2>
 8000f74:	4c51      	ldr	r4, [pc, #324]	; (80010bc <__aeabi_dadd+0x368>)
 8000f76:	45a4      	cmp	ip, r4
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dadd+0x228>
 8000f7a:	e161      	b.n	8001240 <__aeabi_dadd+0x4ec>
 8000f7c:	4694      	mov	ip, r2
 8000f7e:	e7b4      	b.n	8000eea <__aeabi_dadd+0x196>
 8000f80:	003a      	movs	r2, r7
 8000f82:	391f      	subs	r1, #31
 8000f84:	40ca      	lsrs	r2, r1
 8000f86:	0011      	movs	r1, r2
 8000f88:	2b20      	cmp	r3, #32
 8000f8a:	d003      	beq.n	8000f94 <__aeabi_dadd+0x240>
 8000f8c:	2240      	movs	r2, #64	; 0x40
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	409f      	lsls	r7, r3
 8000f92:	433c      	orrs	r4, r7
 8000f94:	1e63      	subs	r3, r4, #1
 8000f96:	419c      	sbcs	r4, r3
 8000f98:	2700      	movs	r7, #0
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	430c      	orrs	r4, r1
 8000f9e:	0763      	lsls	r3, r4, #29
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_dadd+0x250>
 8000fa2:	e753      	b.n	8000e4c <__aeabi_dadd+0xf8>
 8000fa4:	46b4      	mov	ip, r6
 8000fa6:	08e4      	lsrs	r4, r4, #3
 8000fa8:	077b      	lsls	r3, r7, #29
 8000faa:	4323      	orrs	r3, r4
 8000fac:	08f8      	lsrs	r0, r7, #3
 8000fae:	4a43      	ldr	r2, [pc, #268]	; (80010bc <__aeabi_dadd+0x368>)
 8000fb0:	4594      	cmp	ip, r2
 8000fb2:	d01d      	beq.n	8000ff0 <__aeabi_dadd+0x29c>
 8000fb4:	4662      	mov	r2, ip
 8000fb6:	0307      	lsls	r7, r0, #12
 8000fb8:	0552      	lsls	r2, r2, #21
 8000fba:	0b3f      	lsrs	r7, r7, #12
 8000fbc:	0d52      	lsrs	r2, r2, #21
 8000fbe:	e760      	b.n	8000e82 <__aeabi_dadd+0x12e>
 8000fc0:	4644      	mov	r4, r8
 8000fc2:	430c      	orrs	r4, r1
 8000fc4:	1e62      	subs	r2, r4, #1
 8000fc6:	4194      	sbcs	r4, r2
 8000fc8:	18e4      	adds	r4, r4, r3
 8000fca:	429c      	cmp	r4, r3
 8000fcc:	419b      	sbcs	r3, r3
 8000fce:	425f      	negs	r7, r3
 8000fd0:	183f      	adds	r7, r7, r0
 8000fd2:	023b      	lsls	r3, r7, #8
 8000fd4:	d5e3      	bpl.n	8000f9e <__aeabi_dadd+0x24a>
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <__aeabi_dadd+0x368>)
 8000fd8:	3601      	adds	r6, #1
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dadd+0x28c>
 8000fde:	e0b5      	b.n	800114c <__aeabi_dadd+0x3f8>
 8000fe0:	0032      	movs	r2, r6
 8000fe2:	2700      	movs	r7, #0
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e74c      	b.n	8000e82 <__aeabi_dadd+0x12e>
 8000fe8:	0742      	lsls	r2, r0, #29
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	08c0      	lsrs	r0, r0, #3
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	4302      	orrs	r2, r0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dadd+0x2a4>
 8000ff6:	e1e1      	b.n	80013bc <__aeabi_dadd+0x668>
 8000ff8:	2780      	movs	r7, #128	; 0x80
 8000ffa:	033f      	lsls	r7, r7, #12
 8000ffc:	4307      	orrs	r7, r0
 8000ffe:	033f      	lsls	r7, r7, #12
 8001000:	4a2e      	ldr	r2, [pc, #184]	; (80010bc <__aeabi_dadd+0x368>)
 8001002:	0b3f      	lsrs	r7, r7, #12
 8001004:	e73d      	b.n	8000e82 <__aeabi_dadd+0x12e>
 8001006:	0020      	movs	r0, r4
 8001008:	f000 fb6a 	bl	80016e0 <__clzsi2>
 800100c:	0001      	movs	r1, r0
 800100e:	3118      	adds	r1, #24
 8001010:	291f      	cmp	r1, #31
 8001012:	dc00      	bgt.n	8001016 <__aeabi_dadd+0x2c2>
 8001014:	e6fc      	b.n	8000e10 <__aeabi_dadd+0xbc>
 8001016:	3808      	subs	r0, #8
 8001018:	4084      	lsls	r4, r0
 800101a:	0027      	movs	r7, r4
 800101c:	2400      	movs	r4, #0
 800101e:	42b1      	cmp	r1, r6
 8001020:	db00      	blt.n	8001024 <__aeabi_dadd+0x2d0>
 8001022:	e6ff      	b.n	8000e24 <__aeabi_dadd+0xd0>
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <__aeabi_dadd+0x36c>)
 8001026:	1a76      	subs	r6, r6, r1
 8001028:	4017      	ands	r7, r2
 800102a:	e70d      	b.n	8000e48 <__aeabi_dadd+0xf4>
 800102c:	2a00      	cmp	r2, #0
 800102e:	d02f      	beq.n	8001090 <__aeabi_dadd+0x33c>
 8001030:	464a      	mov	r2, r9
 8001032:	1b92      	subs	r2, r2, r6
 8001034:	4694      	mov	ip, r2
 8001036:	2e00      	cmp	r6, #0
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x2e8>
 800103a:	e0ad      	b.n	8001198 <__aeabi_dadd+0x444>
 800103c:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <__aeabi_dadd+0x368>)
 800103e:	4591      	cmp	r9, r2
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0x2f0>
 8001042:	e10f      	b.n	8001264 <__aeabi_dadd+0x510>
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	0412      	lsls	r2, r2, #16
 8001048:	4310      	orrs	r0, r2
 800104a:	4662      	mov	r2, ip
 800104c:	2a38      	cmp	r2, #56	; 0x38
 800104e:	dd00      	ble.n	8001052 <__aeabi_dadd+0x2fe>
 8001050:	e10f      	b.n	8001272 <__aeabi_dadd+0x51e>
 8001052:	2a1f      	cmp	r2, #31
 8001054:	dd00      	ble.n	8001058 <__aeabi_dadd+0x304>
 8001056:	e180      	b.n	800135a <__aeabi_dadd+0x606>
 8001058:	4664      	mov	r4, ip
 800105a:	2220      	movs	r2, #32
 800105c:	001e      	movs	r6, r3
 800105e:	1b12      	subs	r2, r2, r4
 8001060:	4667      	mov	r7, ip
 8001062:	0004      	movs	r4, r0
 8001064:	4093      	lsls	r3, r2
 8001066:	4094      	lsls	r4, r2
 8001068:	40fe      	lsrs	r6, r7
 800106a:	1e5a      	subs	r2, r3, #1
 800106c:	4193      	sbcs	r3, r2
 800106e:	40f8      	lsrs	r0, r7
 8001070:	4334      	orrs	r4, r6
 8001072:	431c      	orrs	r4, r3
 8001074:	4480      	add	r8, r0
 8001076:	1864      	adds	r4, r4, r1
 8001078:	428c      	cmp	r4, r1
 800107a:	41bf      	sbcs	r7, r7
 800107c:	427f      	negs	r7, r7
 800107e:	464e      	mov	r6, r9
 8001080:	4447      	add	r7, r8
 8001082:	e7a6      	b.n	8000fd2 <__aeabi_dadd+0x27e>
 8001084:	4642      	mov	r2, r8
 8001086:	430a      	orrs	r2, r1
 8001088:	0011      	movs	r1, r2
 800108a:	1e4a      	subs	r2, r1, #1
 800108c:	4191      	sbcs	r1, r2
 800108e:	e6ad      	b.n	8000dec <__aeabi_dadd+0x98>
 8001090:	4c0c      	ldr	r4, [pc, #48]	; (80010c4 <__aeabi_dadd+0x370>)
 8001092:	1c72      	adds	r2, r6, #1
 8001094:	4222      	tst	r2, r4
 8001096:	d000      	beq.n	800109a <__aeabi_dadd+0x346>
 8001098:	e0a1      	b.n	80011de <__aeabi_dadd+0x48a>
 800109a:	0002      	movs	r2, r0
 800109c:	431a      	orrs	r2, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d000      	beq.n	80010a4 <__aeabi_dadd+0x350>
 80010a2:	e0fa      	b.n	800129a <__aeabi_dadd+0x546>
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d100      	bne.n	80010aa <__aeabi_dadd+0x356>
 80010a8:	e145      	b.n	8001336 <__aeabi_dadd+0x5e2>
 80010aa:	003a      	movs	r2, r7
 80010ac:	430a      	orrs	r2, r1
 80010ae:	d000      	beq.n	80010b2 <__aeabi_dadd+0x35e>
 80010b0:	e146      	b.n	8001340 <__aeabi_dadd+0x5ec>
 80010b2:	0742      	lsls	r2, r0, #29
 80010b4:	08db      	lsrs	r3, r3, #3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	08c0      	lsrs	r0, r0, #3
 80010ba:	e77b      	b.n	8000fb4 <__aeabi_dadd+0x260>
 80010bc:	000007ff 	.word	0x000007ff
 80010c0:	ff7fffff 	.word	0xff7fffff
 80010c4:	000007fe 	.word	0x000007fe
 80010c8:	4647      	mov	r7, r8
 80010ca:	1a5c      	subs	r4, r3, r1
 80010cc:	1bc2      	subs	r2, r0, r7
 80010ce:	42a3      	cmp	r3, r4
 80010d0:	41bf      	sbcs	r7, r7
 80010d2:	427f      	negs	r7, r7
 80010d4:	46b9      	mov	r9, r7
 80010d6:	0017      	movs	r7, r2
 80010d8:	464a      	mov	r2, r9
 80010da:	1abf      	subs	r7, r7, r2
 80010dc:	023a      	lsls	r2, r7, #8
 80010de:	d500      	bpl.n	80010e2 <__aeabi_dadd+0x38e>
 80010e0:	e08d      	b.n	80011fe <__aeabi_dadd+0x4aa>
 80010e2:	0023      	movs	r3, r4
 80010e4:	433b      	orrs	r3, r7
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x396>
 80010e8:	e68a      	b.n	8000e00 <__aeabi_dadd+0xac>
 80010ea:	2000      	movs	r0, #0
 80010ec:	2500      	movs	r5, #0
 80010ee:	e761      	b.n	8000fb4 <__aeabi_dadd+0x260>
 80010f0:	4cb4      	ldr	r4, [pc, #720]	; (80013c4 <__aeabi_dadd+0x670>)
 80010f2:	45a1      	cmp	r9, r4
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dadd+0x3a4>
 80010f6:	e0ad      	b.n	8001254 <__aeabi_dadd+0x500>
 80010f8:	2480      	movs	r4, #128	; 0x80
 80010fa:	0424      	lsls	r4, r4, #16
 80010fc:	4320      	orrs	r0, r4
 80010fe:	4664      	mov	r4, ip
 8001100:	2c38      	cmp	r4, #56	; 0x38
 8001102:	dc3d      	bgt.n	8001180 <__aeabi_dadd+0x42c>
 8001104:	4662      	mov	r2, ip
 8001106:	2c1f      	cmp	r4, #31
 8001108:	dd00      	ble.n	800110c <__aeabi_dadd+0x3b8>
 800110a:	e0b7      	b.n	800127c <__aeabi_dadd+0x528>
 800110c:	2520      	movs	r5, #32
 800110e:	001e      	movs	r6, r3
 8001110:	1b2d      	subs	r5, r5, r4
 8001112:	0004      	movs	r4, r0
 8001114:	40ab      	lsls	r3, r5
 8001116:	40ac      	lsls	r4, r5
 8001118:	40d6      	lsrs	r6, r2
 800111a:	40d0      	lsrs	r0, r2
 800111c:	4642      	mov	r2, r8
 800111e:	1e5d      	subs	r5, r3, #1
 8001120:	41ab      	sbcs	r3, r5
 8001122:	4334      	orrs	r4, r6
 8001124:	1a12      	subs	r2, r2, r0
 8001126:	4690      	mov	r8, r2
 8001128:	4323      	orrs	r3, r4
 800112a:	e02c      	b.n	8001186 <__aeabi_dadd+0x432>
 800112c:	0742      	lsls	r2, r0, #29
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	4313      	orrs	r3, r2
 8001132:	08c0      	lsrs	r0, r0, #3
 8001134:	e73b      	b.n	8000fae <__aeabi_dadd+0x25a>
 8001136:	185c      	adds	r4, r3, r1
 8001138:	429c      	cmp	r4, r3
 800113a:	419b      	sbcs	r3, r3
 800113c:	4440      	add	r0, r8
 800113e:	425b      	negs	r3, r3
 8001140:	18c7      	adds	r7, r0, r3
 8001142:	2601      	movs	r6, #1
 8001144:	023b      	lsls	r3, r7, #8
 8001146:	d400      	bmi.n	800114a <__aeabi_dadd+0x3f6>
 8001148:	e729      	b.n	8000f9e <__aeabi_dadd+0x24a>
 800114a:	2602      	movs	r6, #2
 800114c:	4a9e      	ldr	r2, [pc, #632]	; (80013c8 <__aeabi_dadd+0x674>)
 800114e:	0863      	lsrs	r3, r4, #1
 8001150:	4017      	ands	r7, r2
 8001152:	2201      	movs	r2, #1
 8001154:	4014      	ands	r4, r2
 8001156:	431c      	orrs	r4, r3
 8001158:	07fb      	lsls	r3, r7, #31
 800115a:	431c      	orrs	r4, r3
 800115c:	087f      	lsrs	r7, r7, #1
 800115e:	e673      	b.n	8000e48 <__aeabi_dadd+0xf4>
 8001160:	4644      	mov	r4, r8
 8001162:	3a20      	subs	r2, #32
 8001164:	40d4      	lsrs	r4, r2
 8001166:	4662      	mov	r2, ip
 8001168:	2a20      	cmp	r2, #32
 800116a:	d005      	beq.n	8001178 <__aeabi_dadd+0x424>
 800116c:	4667      	mov	r7, ip
 800116e:	2240      	movs	r2, #64	; 0x40
 8001170:	1bd2      	subs	r2, r2, r7
 8001172:	4647      	mov	r7, r8
 8001174:	4097      	lsls	r7, r2
 8001176:	4339      	orrs	r1, r7
 8001178:	1e4a      	subs	r2, r1, #1
 800117a:	4191      	sbcs	r1, r2
 800117c:	4321      	orrs	r1, r4
 800117e:	e635      	b.n	8000dec <__aeabi_dadd+0x98>
 8001180:	4303      	orrs	r3, r0
 8001182:	1e58      	subs	r0, r3, #1
 8001184:	4183      	sbcs	r3, r0
 8001186:	1acc      	subs	r4, r1, r3
 8001188:	42a1      	cmp	r1, r4
 800118a:	41bf      	sbcs	r7, r7
 800118c:	4643      	mov	r3, r8
 800118e:	427f      	negs	r7, r7
 8001190:	4655      	mov	r5, sl
 8001192:	464e      	mov	r6, r9
 8001194:	1bdf      	subs	r7, r3, r7
 8001196:	e62e      	b.n	8000df6 <__aeabi_dadd+0xa2>
 8001198:	0002      	movs	r2, r0
 800119a:	431a      	orrs	r2, r3
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x44c>
 800119e:	e0bd      	b.n	800131c <__aeabi_dadd+0x5c8>
 80011a0:	4662      	mov	r2, ip
 80011a2:	4664      	mov	r4, ip
 80011a4:	3a01      	subs	r2, #1
 80011a6:	2c01      	cmp	r4, #1
 80011a8:	d100      	bne.n	80011ac <__aeabi_dadd+0x458>
 80011aa:	e0e5      	b.n	8001378 <__aeabi_dadd+0x624>
 80011ac:	4c85      	ldr	r4, [pc, #532]	; (80013c4 <__aeabi_dadd+0x670>)
 80011ae:	45a4      	cmp	ip, r4
 80011b0:	d058      	beq.n	8001264 <__aeabi_dadd+0x510>
 80011b2:	4694      	mov	ip, r2
 80011b4:	e749      	b.n	800104a <__aeabi_dadd+0x2f6>
 80011b6:	4664      	mov	r4, ip
 80011b8:	2220      	movs	r2, #32
 80011ba:	1b12      	subs	r2, r2, r4
 80011bc:	4644      	mov	r4, r8
 80011be:	4094      	lsls	r4, r2
 80011c0:	000f      	movs	r7, r1
 80011c2:	46a1      	mov	r9, r4
 80011c4:	4664      	mov	r4, ip
 80011c6:	4091      	lsls	r1, r2
 80011c8:	40e7      	lsrs	r7, r4
 80011ca:	464c      	mov	r4, r9
 80011cc:	1e4a      	subs	r2, r1, #1
 80011ce:	4191      	sbcs	r1, r2
 80011d0:	433c      	orrs	r4, r7
 80011d2:	4642      	mov	r2, r8
 80011d4:	430c      	orrs	r4, r1
 80011d6:	4661      	mov	r1, ip
 80011d8:	40ca      	lsrs	r2, r1
 80011da:	1880      	adds	r0, r0, r2
 80011dc:	e6f4      	b.n	8000fc8 <__aeabi_dadd+0x274>
 80011de:	4c79      	ldr	r4, [pc, #484]	; (80013c4 <__aeabi_dadd+0x670>)
 80011e0:	42a2      	cmp	r2, r4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x492>
 80011e4:	e6fd      	b.n	8000fe2 <__aeabi_dadd+0x28e>
 80011e6:	1859      	adds	r1, r3, r1
 80011e8:	4299      	cmp	r1, r3
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	4440      	add	r0, r8
 80011ee:	425f      	negs	r7, r3
 80011f0:	19c7      	adds	r7, r0, r7
 80011f2:	07fc      	lsls	r4, r7, #31
 80011f4:	0849      	lsrs	r1, r1, #1
 80011f6:	0016      	movs	r6, r2
 80011f8:	430c      	orrs	r4, r1
 80011fa:	087f      	lsrs	r7, r7, #1
 80011fc:	e6cf      	b.n	8000f9e <__aeabi_dadd+0x24a>
 80011fe:	1acc      	subs	r4, r1, r3
 8001200:	42a1      	cmp	r1, r4
 8001202:	41bf      	sbcs	r7, r7
 8001204:	4643      	mov	r3, r8
 8001206:	427f      	negs	r7, r7
 8001208:	1a18      	subs	r0, r3, r0
 800120a:	4655      	mov	r5, sl
 800120c:	1bc7      	subs	r7, r0, r7
 800120e:	e5f7      	b.n	8000e00 <__aeabi_dadd+0xac>
 8001210:	08c9      	lsrs	r1, r1, #3
 8001212:	077b      	lsls	r3, r7, #29
 8001214:	4655      	mov	r5, sl
 8001216:	430b      	orrs	r3, r1
 8001218:	08f8      	lsrs	r0, r7, #3
 800121a:	e6c8      	b.n	8000fae <__aeabi_dadd+0x25a>
 800121c:	2c00      	cmp	r4, #0
 800121e:	d000      	beq.n	8001222 <__aeabi_dadd+0x4ce>
 8001220:	e081      	b.n	8001326 <__aeabi_dadd+0x5d2>
 8001222:	4643      	mov	r3, r8
 8001224:	430b      	orrs	r3, r1
 8001226:	d115      	bne.n	8001254 <__aeabi_dadd+0x500>
 8001228:	2080      	movs	r0, #128	; 0x80
 800122a:	2500      	movs	r5, #0
 800122c:	0300      	lsls	r0, r0, #12
 800122e:	e6e3      	b.n	8000ff8 <__aeabi_dadd+0x2a4>
 8001230:	1a5c      	subs	r4, r3, r1
 8001232:	42a3      	cmp	r3, r4
 8001234:	419b      	sbcs	r3, r3
 8001236:	1bc7      	subs	r7, r0, r7
 8001238:	425b      	negs	r3, r3
 800123a:	2601      	movs	r6, #1
 800123c:	1aff      	subs	r7, r7, r3
 800123e:	e5da      	b.n	8000df6 <__aeabi_dadd+0xa2>
 8001240:	0742      	lsls	r2, r0, #29
 8001242:	08db      	lsrs	r3, r3, #3
 8001244:	4313      	orrs	r3, r2
 8001246:	08c0      	lsrs	r0, r0, #3
 8001248:	e6d2      	b.n	8000ff0 <__aeabi_dadd+0x29c>
 800124a:	0742      	lsls	r2, r0, #29
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	4313      	orrs	r3, r2
 8001250:	08c0      	lsrs	r0, r0, #3
 8001252:	e6ac      	b.n	8000fae <__aeabi_dadd+0x25a>
 8001254:	4643      	mov	r3, r8
 8001256:	4642      	mov	r2, r8
 8001258:	08c9      	lsrs	r1, r1, #3
 800125a:	075b      	lsls	r3, r3, #29
 800125c:	4655      	mov	r5, sl
 800125e:	430b      	orrs	r3, r1
 8001260:	08d0      	lsrs	r0, r2, #3
 8001262:	e6c5      	b.n	8000ff0 <__aeabi_dadd+0x29c>
 8001264:	4643      	mov	r3, r8
 8001266:	4642      	mov	r2, r8
 8001268:	075b      	lsls	r3, r3, #29
 800126a:	08c9      	lsrs	r1, r1, #3
 800126c:	430b      	orrs	r3, r1
 800126e:	08d0      	lsrs	r0, r2, #3
 8001270:	e6be      	b.n	8000ff0 <__aeabi_dadd+0x29c>
 8001272:	4303      	orrs	r3, r0
 8001274:	001c      	movs	r4, r3
 8001276:	1e63      	subs	r3, r4, #1
 8001278:	419c      	sbcs	r4, r3
 800127a:	e6fc      	b.n	8001076 <__aeabi_dadd+0x322>
 800127c:	0002      	movs	r2, r0
 800127e:	3c20      	subs	r4, #32
 8001280:	40e2      	lsrs	r2, r4
 8001282:	0014      	movs	r4, r2
 8001284:	4662      	mov	r2, ip
 8001286:	2a20      	cmp	r2, #32
 8001288:	d003      	beq.n	8001292 <__aeabi_dadd+0x53e>
 800128a:	2540      	movs	r5, #64	; 0x40
 800128c:	1aad      	subs	r5, r5, r2
 800128e:	40a8      	lsls	r0, r5
 8001290:	4303      	orrs	r3, r0
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	4183      	sbcs	r3, r0
 8001296:	4323      	orrs	r3, r4
 8001298:	e775      	b.n	8001186 <__aeabi_dadd+0x432>
 800129a:	2a00      	cmp	r2, #0
 800129c:	d0e2      	beq.n	8001264 <__aeabi_dadd+0x510>
 800129e:	003a      	movs	r2, r7
 80012a0:	430a      	orrs	r2, r1
 80012a2:	d0cd      	beq.n	8001240 <__aeabi_dadd+0x4ec>
 80012a4:	0742      	lsls	r2, r0, #29
 80012a6:	08db      	lsrs	r3, r3, #3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	08c0      	lsrs	r0, r0, #3
 80012ae:	0312      	lsls	r2, r2, #12
 80012b0:	4210      	tst	r0, r2
 80012b2:	d006      	beq.n	80012c2 <__aeabi_dadd+0x56e>
 80012b4:	08fc      	lsrs	r4, r7, #3
 80012b6:	4214      	tst	r4, r2
 80012b8:	d103      	bne.n	80012c2 <__aeabi_dadd+0x56e>
 80012ba:	0020      	movs	r0, r4
 80012bc:	08cb      	lsrs	r3, r1, #3
 80012be:	077a      	lsls	r2, r7, #29
 80012c0:	4313      	orrs	r3, r2
 80012c2:	0f5a      	lsrs	r2, r3, #29
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	0752      	lsls	r2, r2, #29
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	e690      	b.n	8000ff0 <__aeabi_dadd+0x29c>
 80012ce:	4643      	mov	r3, r8
 80012d0:	430b      	orrs	r3, r1
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dadd+0x582>
 80012d4:	e709      	b.n	80010ea <__aeabi_dadd+0x396>
 80012d6:	4643      	mov	r3, r8
 80012d8:	4642      	mov	r2, r8
 80012da:	08c9      	lsrs	r1, r1, #3
 80012dc:	075b      	lsls	r3, r3, #29
 80012de:	4655      	mov	r5, sl
 80012e0:	430b      	orrs	r3, r1
 80012e2:	08d0      	lsrs	r0, r2, #3
 80012e4:	e666      	b.n	8000fb4 <__aeabi_dadd+0x260>
 80012e6:	1acc      	subs	r4, r1, r3
 80012e8:	42a1      	cmp	r1, r4
 80012ea:	4189      	sbcs	r1, r1
 80012ec:	1a3f      	subs	r7, r7, r0
 80012ee:	4249      	negs	r1, r1
 80012f0:	4655      	mov	r5, sl
 80012f2:	2601      	movs	r6, #1
 80012f4:	1a7f      	subs	r7, r7, r1
 80012f6:	e57e      	b.n	8000df6 <__aeabi_dadd+0xa2>
 80012f8:	4642      	mov	r2, r8
 80012fa:	1a5c      	subs	r4, r3, r1
 80012fc:	1a87      	subs	r7, r0, r2
 80012fe:	42a3      	cmp	r3, r4
 8001300:	4192      	sbcs	r2, r2
 8001302:	4252      	negs	r2, r2
 8001304:	1abf      	subs	r7, r7, r2
 8001306:	023a      	lsls	r2, r7, #8
 8001308:	d53d      	bpl.n	8001386 <__aeabi_dadd+0x632>
 800130a:	1acc      	subs	r4, r1, r3
 800130c:	42a1      	cmp	r1, r4
 800130e:	4189      	sbcs	r1, r1
 8001310:	4643      	mov	r3, r8
 8001312:	4249      	negs	r1, r1
 8001314:	1a1f      	subs	r7, r3, r0
 8001316:	4655      	mov	r5, sl
 8001318:	1a7f      	subs	r7, r7, r1
 800131a:	e595      	b.n	8000e48 <__aeabi_dadd+0xf4>
 800131c:	077b      	lsls	r3, r7, #29
 800131e:	08c9      	lsrs	r1, r1, #3
 8001320:	430b      	orrs	r3, r1
 8001322:	08f8      	lsrs	r0, r7, #3
 8001324:	e643      	b.n	8000fae <__aeabi_dadd+0x25a>
 8001326:	4644      	mov	r4, r8
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	430c      	orrs	r4, r1
 800132c:	d130      	bne.n	8001390 <__aeabi_dadd+0x63c>
 800132e:	0742      	lsls	r2, r0, #29
 8001330:	4313      	orrs	r3, r2
 8001332:	08c0      	lsrs	r0, r0, #3
 8001334:	e65c      	b.n	8000ff0 <__aeabi_dadd+0x29c>
 8001336:	077b      	lsls	r3, r7, #29
 8001338:	08c9      	lsrs	r1, r1, #3
 800133a:	430b      	orrs	r3, r1
 800133c:	08f8      	lsrs	r0, r7, #3
 800133e:	e639      	b.n	8000fb4 <__aeabi_dadd+0x260>
 8001340:	185c      	adds	r4, r3, r1
 8001342:	429c      	cmp	r4, r3
 8001344:	419b      	sbcs	r3, r3
 8001346:	4440      	add	r0, r8
 8001348:	425b      	negs	r3, r3
 800134a:	18c7      	adds	r7, r0, r3
 800134c:	023b      	lsls	r3, r7, #8
 800134e:	d400      	bmi.n	8001352 <__aeabi_dadd+0x5fe>
 8001350:	e625      	b.n	8000f9e <__aeabi_dadd+0x24a>
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <__aeabi_dadd+0x674>)
 8001354:	2601      	movs	r6, #1
 8001356:	401f      	ands	r7, r3
 8001358:	e621      	b.n	8000f9e <__aeabi_dadd+0x24a>
 800135a:	0004      	movs	r4, r0
 800135c:	3a20      	subs	r2, #32
 800135e:	40d4      	lsrs	r4, r2
 8001360:	4662      	mov	r2, ip
 8001362:	2a20      	cmp	r2, #32
 8001364:	d004      	beq.n	8001370 <__aeabi_dadd+0x61c>
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	4666      	mov	r6, ip
 800136a:	1b92      	subs	r2, r2, r6
 800136c:	4090      	lsls	r0, r2
 800136e:	4303      	orrs	r3, r0
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	4193      	sbcs	r3, r2
 8001374:	431c      	orrs	r4, r3
 8001376:	e67e      	b.n	8001076 <__aeabi_dadd+0x322>
 8001378:	185c      	adds	r4, r3, r1
 800137a:	428c      	cmp	r4, r1
 800137c:	4189      	sbcs	r1, r1
 800137e:	4440      	add	r0, r8
 8001380:	4249      	negs	r1, r1
 8001382:	1847      	adds	r7, r0, r1
 8001384:	e6dd      	b.n	8001142 <__aeabi_dadd+0x3ee>
 8001386:	0023      	movs	r3, r4
 8001388:	433b      	orrs	r3, r7
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0x63a>
 800138c:	e6ad      	b.n	80010ea <__aeabi_dadd+0x396>
 800138e:	e606      	b.n	8000f9e <__aeabi_dadd+0x24a>
 8001390:	0744      	lsls	r4, r0, #29
 8001392:	4323      	orrs	r3, r4
 8001394:	2480      	movs	r4, #128	; 0x80
 8001396:	08c0      	lsrs	r0, r0, #3
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	4220      	tst	r0, r4
 800139c:	d008      	beq.n	80013b0 <__aeabi_dadd+0x65c>
 800139e:	4642      	mov	r2, r8
 80013a0:	08d6      	lsrs	r6, r2, #3
 80013a2:	4226      	tst	r6, r4
 80013a4:	d104      	bne.n	80013b0 <__aeabi_dadd+0x65c>
 80013a6:	4655      	mov	r5, sl
 80013a8:	0030      	movs	r0, r6
 80013aa:	08cb      	lsrs	r3, r1, #3
 80013ac:	0751      	lsls	r1, r2, #29
 80013ae:	430b      	orrs	r3, r1
 80013b0:	0f5a      	lsrs	r2, r3, #29
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	0752      	lsls	r2, r2, #29
 80013b8:	4313      	orrs	r3, r2
 80013ba:	e619      	b.n	8000ff0 <__aeabi_dadd+0x29c>
 80013bc:	2300      	movs	r3, #0
 80013be:	4a01      	ldr	r2, [pc, #4]	; (80013c4 <__aeabi_dadd+0x670>)
 80013c0:	001f      	movs	r7, r3
 80013c2:	e55e      	b.n	8000e82 <__aeabi_dadd+0x12e>
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	ff7fffff 	.word	0xff7fffff

080013cc <__eqdf2>:
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	464e      	mov	r6, r9
 80013d0:	4645      	mov	r5, r8
 80013d2:	46de      	mov	lr, fp
 80013d4:	4657      	mov	r7, sl
 80013d6:	4690      	mov	r8, r2
 80013d8:	b5e0      	push	{r5, r6, r7, lr}
 80013da:	0017      	movs	r7, r2
 80013dc:	031a      	lsls	r2, r3, #12
 80013de:	0b12      	lsrs	r2, r2, #12
 80013e0:	0005      	movs	r5, r0
 80013e2:	4684      	mov	ip, r0
 80013e4:	4819      	ldr	r0, [pc, #100]	; (800144c <__eqdf2+0x80>)
 80013e6:	030e      	lsls	r6, r1, #12
 80013e8:	004c      	lsls	r4, r1, #1
 80013ea:	4691      	mov	r9, r2
 80013ec:	005a      	lsls	r2, r3, #1
 80013ee:	0fdb      	lsrs	r3, r3, #31
 80013f0:	469b      	mov	fp, r3
 80013f2:	0b36      	lsrs	r6, r6, #12
 80013f4:	0d64      	lsrs	r4, r4, #21
 80013f6:	0fc9      	lsrs	r1, r1, #31
 80013f8:	0d52      	lsrs	r2, r2, #21
 80013fa:	4284      	cmp	r4, r0
 80013fc:	d019      	beq.n	8001432 <__eqdf2+0x66>
 80013fe:	4282      	cmp	r2, r0
 8001400:	d010      	beq.n	8001424 <__eqdf2+0x58>
 8001402:	2001      	movs	r0, #1
 8001404:	4294      	cmp	r4, r2
 8001406:	d10e      	bne.n	8001426 <__eqdf2+0x5a>
 8001408:	454e      	cmp	r6, r9
 800140a:	d10c      	bne.n	8001426 <__eqdf2+0x5a>
 800140c:	2001      	movs	r0, #1
 800140e:	45c4      	cmp	ip, r8
 8001410:	d109      	bne.n	8001426 <__eqdf2+0x5a>
 8001412:	4559      	cmp	r1, fp
 8001414:	d017      	beq.n	8001446 <__eqdf2+0x7a>
 8001416:	2c00      	cmp	r4, #0
 8001418:	d105      	bne.n	8001426 <__eqdf2+0x5a>
 800141a:	0030      	movs	r0, r6
 800141c:	4328      	orrs	r0, r5
 800141e:	1e43      	subs	r3, r0, #1
 8001420:	4198      	sbcs	r0, r3
 8001422:	e000      	b.n	8001426 <__eqdf2+0x5a>
 8001424:	2001      	movs	r0, #1
 8001426:	bcf0      	pop	{r4, r5, r6, r7}
 8001428:	46bb      	mov	fp, r7
 800142a:	46b2      	mov	sl, r6
 800142c:	46a9      	mov	r9, r5
 800142e:	46a0      	mov	r8, r4
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001432:	0033      	movs	r3, r6
 8001434:	2001      	movs	r0, #1
 8001436:	432b      	orrs	r3, r5
 8001438:	d1f5      	bne.n	8001426 <__eqdf2+0x5a>
 800143a:	42a2      	cmp	r2, r4
 800143c:	d1f3      	bne.n	8001426 <__eqdf2+0x5a>
 800143e:	464b      	mov	r3, r9
 8001440:	433b      	orrs	r3, r7
 8001442:	d1f0      	bne.n	8001426 <__eqdf2+0x5a>
 8001444:	e7e2      	b.n	800140c <__eqdf2+0x40>
 8001446:	2000      	movs	r0, #0
 8001448:	e7ed      	b.n	8001426 <__eqdf2+0x5a>
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	000007ff 	.word	0x000007ff

08001450 <__gedf2>:
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001452:	4647      	mov	r7, r8
 8001454:	46ce      	mov	lr, r9
 8001456:	0004      	movs	r4, r0
 8001458:	0018      	movs	r0, r3
 800145a:	0016      	movs	r6, r2
 800145c:	031b      	lsls	r3, r3, #12
 800145e:	0b1b      	lsrs	r3, r3, #12
 8001460:	4d2d      	ldr	r5, [pc, #180]	; (8001518 <__gedf2+0xc8>)
 8001462:	004a      	lsls	r2, r1, #1
 8001464:	4699      	mov	r9, r3
 8001466:	b580      	push	{r7, lr}
 8001468:	0043      	lsls	r3, r0, #1
 800146a:	030f      	lsls	r7, r1, #12
 800146c:	46a4      	mov	ip, r4
 800146e:	46b0      	mov	r8, r6
 8001470:	0b3f      	lsrs	r7, r7, #12
 8001472:	0d52      	lsrs	r2, r2, #21
 8001474:	0fc9      	lsrs	r1, r1, #31
 8001476:	0d5b      	lsrs	r3, r3, #21
 8001478:	0fc0      	lsrs	r0, r0, #31
 800147a:	42aa      	cmp	r2, r5
 800147c:	d021      	beq.n	80014c2 <__gedf2+0x72>
 800147e:	42ab      	cmp	r3, r5
 8001480:	d013      	beq.n	80014aa <__gedf2+0x5a>
 8001482:	2a00      	cmp	r2, #0
 8001484:	d122      	bne.n	80014cc <__gedf2+0x7c>
 8001486:	433c      	orrs	r4, r7
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <__gedf2+0x42>
 800148c:	464d      	mov	r5, r9
 800148e:	432e      	orrs	r6, r5
 8001490:	d022      	beq.n	80014d8 <__gedf2+0x88>
 8001492:	2c00      	cmp	r4, #0
 8001494:	d010      	beq.n	80014b8 <__gedf2+0x68>
 8001496:	4281      	cmp	r1, r0
 8001498:	d022      	beq.n	80014e0 <__gedf2+0x90>
 800149a:	2002      	movs	r0, #2
 800149c:	3901      	subs	r1, #1
 800149e:	4008      	ands	r0, r1
 80014a0:	3801      	subs	r0, #1
 80014a2:	bcc0      	pop	{r6, r7}
 80014a4:	46b9      	mov	r9, r7
 80014a6:	46b0      	mov	r8, r6
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	464d      	mov	r5, r9
 80014ac:	432e      	orrs	r6, r5
 80014ae:	d129      	bne.n	8001504 <__gedf2+0xb4>
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d1f0      	bne.n	8001496 <__gedf2+0x46>
 80014b4:	433c      	orrs	r4, r7
 80014b6:	d1ee      	bne.n	8001496 <__gedf2+0x46>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d1f2      	bne.n	80014a2 <__gedf2+0x52>
 80014bc:	2001      	movs	r0, #1
 80014be:	4240      	negs	r0, r0
 80014c0:	e7ef      	b.n	80014a2 <__gedf2+0x52>
 80014c2:	003d      	movs	r5, r7
 80014c4:	4325      	orrs	r5, r4
 80014c6:	d11d      	bne.n	8001504 <__gedf2+0xb4>
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d0ee      	beq.n	80014aa <__gedf2+0x5a>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1e2      	bne.n	8001496 <__gedf2+0x46>
 80014d0:	464c      	mov	r4, r9
 80014d2:	4326      	orrs	r6, r4
 80014d4:	d1df      	bne.n	8001496 <__gedf2+0x46>
 80014d6:	e7e0      	b.n	800149a <__gedf2+0x4a>
 80014d8:	2000      	movs	r0, #0
 80014da:	2c00      	cmp	r4, #0
 80014dc:	d0e1      	beq.n	80014a2 <__gedf2+0x52>
 80014de:	e7dc      	b.n	800149a <__gedf2+0x4a>
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dc0a      	bgt.n	80014fa <__gedf2+0xaa>
 80014e4:	dbe8      	blt.n	80014b8 <__gedf2+0x68>
 80014e6:	454f      	cmp	r7, r9
 80014e8:	d8d7      	bhi.n	800149a <__gedf2+0x4a>
 80014ea:	d00e      	beq.n	800150a <__gedf2+0xba>
 80014ec:	2000      	movs	r0, #0
 80014ee:	454f      	cmp	r7, r9
 80014f0:	d2d7      	bcs.n	80014a2 <__gedf2+0x52>
 80014f2:	2900      	cmp	r1, #0
 80014f4:	d0e2      	beq.n	80014bc <__gedf2+0x6c>
 80014f6:	0008      	movs	r0, r1
 80014f8:	e7d3      	b.n	80014a2 <__gedf2+0x52>
 80014fa:	4243      	negs	r3, r0
 80014fc:	4158      	adcs	r0, r3
 80014fe:	0040      	lsls	r0, r0, #1
 8001500:	3801      	subs	r0, #1
 8001502:	e7ce      	b.n	80014a2 <__gedf2+0x52>
 8001504:	2002      	movs	r0, #2
 8001506:	4240      	negs	r0, r0
 8001508:	e7cb      	b.n	80014a2 <__gedf2+0x52>
 800150a:	45c4      	cmp	ip, r8
 800150c:	d8c5      	bhi.n	800149a <__gedf2+0x4a>
 800150e:	2000      	movs	r0, #0
 8001510:	45c4      	cmp	ip, r8
 8001512:	d2c6      	bcs.n	80014a2 <__gedf2+0x52>
 8001514:	e7ed      	b.n	80014f2 <__gedf2+0xa2>
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	000007ff 	.word	0x000007ff

0800151c <__ledf2>:
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151e:	4647      	mov	r7, r8
 8001520:	46ce      	mov	lr, r9
 8001522:	0004      	movs	r4, r0
 8001524:	0018      	movs	r0, r3
 8001526:	0016      	movs	r6, r2
 8001528:	031b      	lsls	r3, r3, #12
 800152a:	0b1b      	lsrs	r3, r3, #12
 800152c:	4d2c      	ldr	r5, [pc, #176]	; (80015e0 <__ledf2+0xc4>)
 800152e:	004a      	lsls	r2, r1, #1
 8001530:	4699      	mov	r9, r3
 8001532:	b580      	push	{r7, lr}
 8001534:	0043      	lsls	r3, r0, #1
 8001536:	030f      	lsls	r7, r1, #12
 8001538:	46a4      	mov	ip, r4
 800153a:	46b0      	mov	r8, r6
 800153c:	0b3f      	lsrs	r7, r7, #12
 800153e:	0d52      	lsrs	r2, r2, #21
 8001540:	0fc9      	lsrs	r1, r1, #31
 8001542:	0d5b      	lsrs	r3, r3, #21
 8001544:	0fc0      	lsrs	r0, r0, #31
 8001546:	42aa      	cmp	r2, r5
 8001548:	d00d      	beq.n	8001566 <__ledf2+0x4a>
 800154a:	42ab      	cmp	r3, r5
 800154c:	d010      	beq.n	8001570 <__ledf2+0x54>
 800154e:	2a00      	cmp	r2, #0
 8001550:	d127      	bne.n	80015a2 <__ledf2+0x86>
 8001552:	433c      	orrs	r4, r7
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <__ledf2+0x60>
 8001558:	464d      	mov	r5, r9
 800155a:	432e      	orrs	r6, r5
 800155c:	d10e      	bne.n	800157c <__ledf2+0x60>
 800155e:	2000      	movs	r0, #0
 8001560:	2c00      	cmp	r4, #0
 8001562:	d015      	beq.n	8001590 <__ledf2+0x74>
 8001564:	e00e      	b.n	8001584 <__ledf2+0x68>
 8001566:	003d      	movs	r5, r7
 8001568:	4325      	orrs	r5, r4
 800156a:	d110      	bne.n	800158e <__ledf2+0x72>
 800156c:	4293      	cmp	r3, r2
 800156e:	d118      	bne.n	80015a2 <__ledf2+0x86>
 8001570:	464d      	mov	r5, r9
 8001572:	432e      	orrs	r6, r5
 8001574:	d10b      	bne.n	800158e <__ledf2+0x72>
 8001576:	2a00      	cmp	r2, #0
 8001578:	d102      	bne.n	8001580 <__ledf2+0x64>
 800157a:	433c      	orrs	r4, r7
 800157c:	2c00      	cmp	r4, #0
 800157e:	d00b      	beq.n	8001598 <__ledf2+0x7c>
 8001580:	4281      	cmp	r1, r0
 8001582:	d014      	beq.n	80015ae <__ledf2+0x92>
 8001584:	2002      	movs	r0, #2
 8001586:	3901      	subs	r1, #1
 8001588:	4008      	ands	r0, r1
 800158a:	3801      	subs	r0, #1
 800158c:	e000      	b.n	8001590 <__ledf2+0x74>
 800158e:	2002      	movs	r0, #2
 8001590:	bcc0      	pop	{r6, r7}
 8001592:	46b9      	mov	r9, r7
 8001594:	46b0      	mov	r8, r6
 8001596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001598:	2800      	cmp	r0, #0
 800159a:	d1f9      	bne.n	8001590 <__ledf2+0x74>
 800159c:	2001      	movs	r0, #1
 800159e:	4240      	negs	r0, r0
 80015a0:	e7f6      	b.n	8001590 <__ledf2+0x74>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ec      	bne.n	8001580 <__ledf2+0x64>
 80015a6:	464c      	mov	r4, r9
 80015a8:	4326      	orrs	r6, r4
 80015aa:	d1e9      	bne.n	8001580 <__ledf2+0x64>
 80015ac:	e7ea      	b.n	8001584 <__ledf2+0x68>
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dd04      	ble.n	80015bc <__ledf2+0xa0>
 80015b2:	4243      	negs	r3, r0
 80015b4:	4158      	adcs	r0, r3
 80015b6:	0040      	lsls	r0, r0, #1
 80015b8:	3801      	subs	r0, #1
 80015ba:	e7e9      	b.n	8001590 <__ledf2+0x74>
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbeb      	blt.n	8001598 <__ledf2+0x7c>
 80015c0:	454f      	cmp	r7, r9
 80015c2:	d8df      	bhi.n	8001584 <__ledf2+0x68>
 80015c4:	d006      	beq.n	80015d4 <__ledf2+0xb8>
 80015c6:	2000      	movs	r0, #0
 80015c8:	454f      	cmp	r7, r9
 80015ca:	d2e1      	bcs.n	8001590 <__ledf2+0x74>
 80015cc:	2900      	cmp	r1, #0
 80015ce:	d0e5      	beq.n	800159c <__ledf2+0x80>
 80015d0:	0008      	movs	r0, r1
 80015d2:	e7dd      	b.n	8001590 <__ledf2+0x74>
 80015d4:	45c4      	cmp	ip, r8
 80015d6:	d8d5      	bhi.n	8001584 <__ledf2+0x68>
 80015d8:	2000      	movs	r0, #0
 80015da:	45c4      	cmp	ip, r8
 80015dc:	d2d8      	bcs.n	8001590 <__ledf2+0x74>
 80015de:	e7f5      	b.n	80015cc <__ledf2+0xb0>
 80015e0:	000007ff 	.word	0x000007ff

080015e4 <__aeabi_d2iz>:
 80015e4:	000a      	movs	r2, r1
 80015e6:	b530      	push	{r4, r5, lr}
 80015e8:	4c13      	ldr	r4, [pc, #76]	; (8001638 <__aeabi_d2iz+0x54>)
 80015ea:	0053      	lsls	r3, r2, #1
 80015ec:	0309      	lsls	r1, r1, #12
 80015ee:	0005      	movs	r5, r0
 80015f0:	0b09      	lsrs	r1, r1, #12
 80015f2:	2000      	movs	r0, #0
 80015f4:	0d5b      	lsrs	r3, r3, #21
 80015f6:	0fd2      	lsrs	r2, r2, #31
 80015f8:	42a3      	cmp	r3, r4
 80015fa:	dd04      	ble.n	8001606 <__aeabi_d2iz+0x22>
 80015fc:	480f      	ldr	r0, [pc, #60]	; (800163c <__aeabi_d2iz+0x58>)
 80015fe:	4283      	cmp	r3, r0
 8001600:	dd02      	ble.n	8001608 <__aeabi_d2iz+0x24>
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <__aeabi_d2iz+0x5c>)
 8001604:	18d0      	adds	r0, r2, r3
 8001606:	bd30      	pop	{r4, r5, pc}
 8001608:	2080      	movs	r0, #128	; 0x80
 800160a:	0340      	lsls	r0, r0, #13
 800160c:	4301      	orrs	r1, r0
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <__aeabi_d2iz+0x60>)
 8001610:	1ac0      	subs	r0, r0, r3
 8001612:	281f      	cmp	r0, #31
 8001614:	dd08      	ble.n	8001628 <__aeabi_d2iz+0x44>
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <__aeabi_d2iz+0x64>)
 8001618:	1ac3      	subs	r3, r0, r3
 800161a:	40d9      	lsrs	r1, r3
 800161c:	000b      	movs	r3, r1
 800161e:	4258      	negs	r0, r3
 8001620:	2a00      	cmp	r2, #0
 8001622:	d1f0      	bne.n	8001606 <__aeabi_d2iz+0x22>
 8001624:	0018      	movs	r0, r3
 8001626:	e7ee      	b.n	8001606 <__aeabi_d2iz+0x22>
 8001628:	4c08      	ldr	r4, [pc, #32]	; (800164c <__aeabi_d2iz+0x68>)
 800162a:	40c5      	lsrs	r5, r0
 800162c:	46a4      	mov	ip, r4
 800162e:	4463      	add	r3, ip
 8001630:	4099      	lsls	r1, r3
 8001632:	000b      	movs	r3, r1
 8001634:	432b      	orrs	r3, r5
 8001636:	e7f2      	b.n	800161e <__aeabi_d2iz+0x3a>
 8001638:	000003fe 	.word	0x000003fe
 800163c:	0000041d 	.word	0x0000041d
 8001640:	7fffffff 	.word	0x7fffffff
 8001644:	00000433 	.word	0x00000433
 8001648:	00000413 	.word	0x00000413
 800164c:	fffffbed 	.word	0xfffffbed

08001650 <__aeabi_f2d>:
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	0043      	lsls	r3, r0, #1
 8001654:	0246      	lsls	r6, r0, #9
 8001656:	0fc4      	lsrs	r4, r0, #31
 8001658:	20fe      	movs	r0, #254	; 0xfe
 800165a:	0e1b      	lsrs	r3, r3, #24
 800165c:	1c59      	adds	r1, r3, #1
 800165e:	0a75      	lsrs	r5, r6, #9
 8001660:	4208      	tst	r0, r1
 8001662:	d00c      	beq.n	800167e <__aeabi_f2d+0x2e>
 8001664:	22e0      	movs	r2, #224	; 0xe0
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4694      	mov	ip, r2
 800166a:	076d      	lsls	r5, r5, #29
 800166c:	0b36      	lsrs	r6, r6, #12
 800166e:	4463      	add	r3, ip
 8001670:	051b      	lsls	r3, r3, #20
 8001672:	4333      	orrs	r3, r6
 8001674:	07e4      	lsls	r4, r4, #31
 8001676:	4323      	orrs	r3, r4
 8001678:	0028      	movs	r0, r5
 800167a:	0019      	movs	r1, r3
 800167c:	bd70      	pop	{r4, r5, r6, pc}
 800167e:	2b00      	cmp	r3, #0
 8001680:	d114      	bne.n	80016ac <__aeabi_f2d+0x5c>
 8001682:	2d00      	cmp	r5, #0
 8001684:	d01b      	beq.n	80016be <__aeabi_f2d+0x6e>
 8001686:	0028      	movs	r0, r5
 8001688:	f000 f82a 	bl	80016e0 <__clzsi2>
 800168c:	280a      	cmp	r0, #10
 800168e:	dc1c      	bgt.n	80016ca <__aeabi_f2d+0x7a>
 8001690:	230b      	movs	r3, #11
 8001692:	002e      	movs	r6, r5
 8001694:	1a1b      	subs	r3, r3, r0
 8001696:	40de      	lsrs	r6, r3
 8001698:	0003      	movs	r3, r0
 800169a:	3315      	adds	r3, #21
 800169c:	409d      	lsls	r5, r3
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <__aeabi_f2d+0x88>)
 80016a0:	0336      	lsls	r6, r6, #12
 80016a2:	1a12      	subs	r2, r2, r0
 80016a4:	0552      	lsls	r2, r2, #21
 80016a6:	0b36      	lsrs	r6, r6, #12
 80016a8:	0d53      	lsrs	r3, r2, #21
 80016aa:	e7e1      	b.n	8001670 <__aeabi_f2d+0x20>
 80016ac:	2d00      	cmp	r5, #0
 80016ae:	d009      	beq.n	80016c4 <__aeabi_f2d+0x74>
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	0b36      	lsrs	r6, r6, #12
 80016b4:	0312      	lsls	r2, r2, #12
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <__aeabi_f2d+0x8c>)
 80016b8:	076d      	lsls	r5, r5, #29
 80016ba:	4316      	orrs	r6, r2
 80016bc:	e7d8      	b.n	8001670 <__aeabi_f2d+0x20>
 80016be:	2300      	movs	r3, #0
 80016c0:	2600      	movs	r6, #0
 80016c2:	e7d5      	b.n	8001670 <__aeabi_f2d+0x20>
 80016c4:	2600      	movs	r6, #0
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <__aeabi_f2d+0x8c>)
 80016c8:	e7d2      	b.n	8001670 <__aeabi_f2d+0x20>
 80016ca:	0003      	movs	r3, r0
 80016cc:	3b0b      	subs	r3, #11
 80016ce:	409d      	lsls	r5, r3
 80016d0:	002e      	movs	r6, r5
 80016d2:	2500      	movs	r5, #0
 80016d4:	e7e3      	b.n	800169e <__aeabi_f2d+0x4e>
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	00000389 	.word	0x00000389
 80016dc:	000007ff 	.word	0x000007ff

080016e0 <__clzsi2>:
 80016e0:	211c      	movs	r1, #28
 80016e2:	2301      	movs	r3, #1
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	4298      	cmp	r0, r3
 80016e8:	d301      	bcc.n	80016ee <__clzsi2+0xe>
 80016ea:	0c00      	lsrs	r0, r0, #16
 80016ec:	3910      	subs	r1, #16
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	4298      	cmp	r0, r3
 80016f2:	d301      	bcc.n	80016f8 <__clzsi2+0x18>
 80016f4:	0a00      	lsrs	r0, r0, #8
 80016f6:	3908      	subs	r1, #8
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	4298      	cmp	r0, r3
 80016fc:	d301      	bcc.n	8001702 <__clzsi2+0x22>
 80016fe:	0900      	lsrs	r0, r0, #4
 8001700:	3904      	subs	r1, #4
 8001702:	a202      	add	r2, pc, #8	; (adr r2, 800170c <__clzsi2+0x2c>)
 8001704:	5c10      	ldrb	r0, [r2, r0]
 8001706:	1840      	adds	r0, r0, r1
 8001708:	4770      	bx	lr
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	02020304 	.word	0x02020304
 8001710:	01010101 	.word	0x01010101
	...

0800171c <__clzdi2>:
 800171c:	b510      	push	{r4, lr}
 800171e:	2900      	cmp	r1, #0
 8001720:	d103      	bne.n	800172a <__clzdi2+0xe>
 8001722:	f7ff ffdd 	bl	80016e0 <__clzsi2>
 8001726:	3020      	adds	r0, #32
 8001728:	e002      	b.n	8001730 <__clzdi2+0x14>
 800172a:	0008      	movs	r0, r1
 800172c:	f7ff ffd8 	bl	80016e0 <__clzsi2>
 8001730:	bd10      	pop	{r4, pc}
 8001732:	46c0      	nop			; (mov r8, r8)

08001734 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001734:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001736:	f000 fee1 	bl	80024fc <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800173a:	f000 f911 	bl	8001960 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800173e:	bd10      	pop	{r4, pc}

08001740 <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001740:	2001      	movs	r0, #1
{
 8001742:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001744:	4240      	negs	r0, r0
 8001746:	f00c f90d 	bl	800d964 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800174a:	bd10      	pop	{r4, pc}

0800174c <OnTxTimerEvent>:
  HAL_Delay(17000);
  spacecheck = ReadUlt();
}

static void OnTxTimerEvent(void *context)
{
 800174c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800174e:	2100      	movs	r1, #0
 8001750:	2002      	movs	r0, #2
 8001752:	f00c f8d9 	bl	800d908 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8001756:	4802      	ldr	r0, [pc, #8]	; (8001760 <OnTxTimerEvent+0x14>)
 8001758:	f00c fb22 	bl	800dda0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800175c:	bd10      	pop	{r4, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	20000120 	.word	0x20000120

08001764 <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 8001764:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001766:	2100      	movs	r1, #0
 8001768:	2001      	movs	r0, #1
 800176a:	f00c f8cd 	bl	800d908 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800176e:	bd10      	pop	{r4, pc}

08001770 <OnRxData>:
{
 8001770:	b530      	push	{r4, r5, lr}
 8001772:	0004      	movs	r4, r0
 8001774:	000d      	movs	r5, r1
 8001776:	b087      	sub	sp, #28
  if ((appData != NULL) || (params != NULL))
 8001778:	2800      	cmp	r0, #0
 800177a:	d101      	bne.n	8001780 <OnRxData+0x10>
 800177c:	2900      	cmp	r1, #0
 800177e:	d037      	beq.n	80017f0 <OnRxData+0x80>
    LED_On(LED_BLUE);
 8001780:	2002      	movs	r0, #2
 8001782:	f001 fa37 	bl	8002bf4 <BSP_LED_On>
    UTIL_TIMER_Start(&RxLedTimer);
 8001786:	4829      	ldr	r0, [pc, #164]	; (800182c <OnRxData+0xbc>)
 8001788:	3018      	adds	r0, #24
 800178a:	f00c fb09 	bl	800dda0 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800178e:	2200      	movs	r2, #0
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <OnRxData+0xc0>)
 8001792:	0011      	movs	r1, r2
 8001794:	2002      	movs	r0, #2
 8001796:	f00b ff8f 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800179a:	2304      	movs	r3, #4
 800179c:	56eb      	ldrsb	r3, [r5, r3]
 800179e:	4a25      	ldr	r2, [pc, #148]	; (8001834 <OnRxData+0xc4>)
 80017a0:	9305      	str	r3, [sp, #20]
 80017a2:	2303      	movs	r3, #3
 80017a4:	56eb      	ldrsb	r3, [r5, r3]
 80017a6:	2003      	movs	r0, #3
 80017a8:	9304      	str	r3, [sp, #16]
 80017aa:	2302      	movs	r3, #2
 80017ac:	56eb      	ldrsb	r3, [r5, r3]
 80017ae:	9303      	str	r3, [sp, #12]
 80017b0:	7823      	ldrb	r3, [r4, #0]
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	230c      	movs	r3, #12
 80017b6:	56eb      	ldrsb	r3, [r5, r3]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	589b      	ldr	r3, [r3, r2]
 80017bc:	2200      	movs	r2, #0
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	68ab      	ldr	r3, [r5, #8]
 80017c2:	0011      	movs	r1, r2
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <OnRxData+0xc8>)
 80017c8:	f00b ff76 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 80017cc:	7823      	ldrb	r3, [r4, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d010      	beq.n	80017f4 <OnRxData+0x84>
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d10c      	bne.n	80017f0 <OnRxData+0x80>
        if (appData->BufferSize == 1)
 80017d6:	7863      	ldrb	r3, [r4, #1]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d109      	bne.n	80017f0 <OnRxData+0x80>
          switch (appData->Buffer[0])
 80017dc:	6863      	ldr	r3, [r4, #4]
 80017de:	7818      	ldrb	r0, [r3, #0]
 80017e0:	2801      	cmp	r0, #1
 80017e2:	d003      	beq.n	80017ec <OnRxData+0x7c>
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d001      	beq.n	80017ec <OnRxData+0x7c>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d101      	bne.n	80017f0 <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_C);
 80017ec:	f005 fa08 	bl	8006c00 <LmHandlerRequestClass>
}
 80017f0:	b007      	add	sp, #28
 80017f2:	bd30      	pop	{r4, r5, pc}
        if (appData->BufferSize == 1)
 80017f4:	7865      	ldrb	r5, [r4, #1]
 80017f6:	2d01      	cmp	r5, #1
 80017f8:	d1fa      	bne.n	80017f0 <OnRxData+0x80>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 80017fa:	6863      	ldr	r3, [r4, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
          if (AppLedStateOn == RESET)
 80017fe:	0019      	movs	r1, r3
 8001800:	4029      	ands	r1, r5
 8001802:	422b      	tst	r3, r5
 8001804:	d108      	bne.n	8001818 <OnRxData+0xa8>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8001806:	000a      	movs	r2, r1
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <OnRxData+0xcc>)
 800180a:	2003      	movs	r0, #3
 800180c:	f00b ff54 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
            LED_Off(LED_RED1);
 8001810:	0028      	movs	r0, r5
 8001812:	f001 f9ff 	bl	8002c14 <BSP_LED_Off>
 8001816:	e7eb      	b.n	80017f0 <OnRxData+0x80>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8001818:	2200      	movs	r2, #0
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <OnRxData+0xd0>)
 800181c:	0011      	movs	r1, r2
 800181e:	2003      	movs	r0, #3
 8001820:	f00b ff4a 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8001824:	0028      	movs	r0, r5
 8001826:	f001 f9e5 	bl	8002bf4 <BSP_LED_On>
}
 800182a:	e7e1      	b.n	80017f0 <OnRxData+0x80>
 800182c:	20000120 	.word	0x20000120
 8001830:	0800e90c 	.word	0x0800e90c
 8001834:	0800e2d4 	.word	0x0800e2d4
 8001838:	0800e93d 	.word	0x0800e93d
 800183c:	0800e984 	.word	0x0800e984
 8001840:	0800e98e 	.word	0x0800e98e

08001844 <OnRxTimerLedEvent>:
{
 8001844:	b510      	push	{r4, lr}
  LED_Off(LED_BLUE) ;
 8001846:	2002      	movs	r0, #2
 8001848:	f001 f9e4 	bl	8002c14 <BSP_LED_Off>
}
 800184c:	bd10      	pop	{r4, pc}

0800184e <OnTxTimerLedEvent>:
{
 800184e:	b510      	push	{r4, lr}
  LED_Off(LED_RED2);
 8001850:	2003      	movs	r0, #3
 8001852:	f001 f9df 	bl	8002c14 <BSP_LED_Off>
}
 8001856:	bd10      	pop	{r4, pc}

08001858 <OnJoinTimerLedEvent>:
{
 8001858:	b510      	push	{r4, lr}
  LED_Toggle(LED_RED1) ;
 800185a:	2001      	movs	r0, #1
 800185c:	f001 f9ea 	bl	8002c34 <BSP_LED_Toggle>
}
 8001860:	bd10      	pop	{r4, pc}
	...

08001864 <OnTxData>:
{
 8001864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001866:	1e04      	subs	r4, r0, #0
  if ((params != NULL))
 8001868:	d034      	beq.n	80018d4 <OnTxData+0x70>
    if (params->IsMcpsConfirm != 0)
 800186a:	7803      	ldrb	r3, [r0, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d031      	beq.n	80018d4 <OnTxData+0x70>
      LED_On(LED_RED2);
 8001870:	2003      	movs	r0, #3
 8001872:	f001 f9bf 	bl	8002bf4 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 8001876:	481b      	ldr	r0, [pc, #108]	; (80018e4 <OnTxData+0x80>)
 8001878:	3030      	adds	r0, #48	; 0x30
 800187a:	f00c fa91 	bl	800dda0 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800187e:	2200      	movs	r2, #0
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <OnTxData+0x84>)
 8001882:	0011      	movs	r1, r2
 8001884:	2002      	movs	r0, #2
 8001886:	f00b ff17 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800188a:	2314      	movs	r3, #20
 800188c:	56e3      	ldrsb	r3, [r4, r3]
 800188e:	2200      	movs	r2, #0
 8001890:	9303      	str	r3, [sp, #12]
 8001892:	2304      	movs	r3, #4
 8001894:	56e3      	ldrsb	r3, [r4, r3]
 8001896:	0011      	movs	r1, r2
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	7b23      	ldrb	r3, [r4, #12]
 800189c:	2003      	movs	r0, #3
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	68a3      	ldr	r3, [r4, #8]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <OnTxData+0x88>)
 80018a6:	f00b ff07 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80018aa:	2200      	movs	r2, #0
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <OnTxData+0x8c>)
 80018ae:	0011      	movs	r1, r2
 80018b0:	2003      	movs	r0, #3
 80018b2:	f00b ff01 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80018b6:	78a3      	ldrb	r3, [r4, #2]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10c      	bne.n	80018d6 <OnTxData+0x72>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80018bc:	78e2      	ldrb	r2, [r4, #3]
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <OnTxData+0x90>)
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d100      	bne.n	80018c6 <OnTxData+0x62>
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <OnTxData+0x94>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	0011      	movs	r1, r2
 80018cc:	2003      	movs	r0, #3
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <OnTxData+0x98>)
 80018d0:	f00b fef2 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80018d4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80018d6:	2200      	movs	r2, #0
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <OnTxData+0x9c>)
 80018da:	0011      	movs	r1, r2
 80018dc:	2003      	movs	r0, #3
 80018de:	f00b feeb 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80018e2:	e7f7      	b.n	80018d4 <OnTxData+0x70>
 80018e4:	20000120 	.word	0x20000120
 80018e8:	0800e99c 	.word	0x0800e99c
 80018ec:	0800e9cd 	.word	0x0800e9cd
 80018f0:	0800e9fe 	.word	0x0800e9fe
 80018f4:	0800e998 	.word	0x0800e998
 80018f8:	0800e997 	.word	0x0800e997
 80018fc:	0800ea0b 	.word	0x0800ea0b
 8001900:	0800ea1c 	.word	0x0800ea1c

08001904 <OnJoinRequest>:
{
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	1e05      	subs	r5, r0, #0
  if (joinParams != NULL)
 8001908:	d019      	beq.n	800193e <OnJoinRequest+0x3a>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800190a:	2401      	movs	r4, #1
 800190c:	5704      	ldrsb	r4, [r0, r4]
 800190e:	2c00      	cmp	r4, #0
 8001910:	d118      	bne.n	8001944 <OnJoinRequest+0x40>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <OnJoinRequest+0x48>)
 8001914:	3048      	adds	r0, #72	; 0x48
 8001916:	f00c f9ef 	bl	800dcf8 <UTIL_TIMER_Stop>
      LED_Off(LED_RED1) ;
 800191a:	2001      	movs	r0, #1
 800191c:	f001 f97a 	bl	8002c14 <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <OnJoinRequest+0x4c>)
 8001922:	0022      	movs	r2, r4
 8001924:	0021      	movs	r1, r4
 8001926:	2002      	movs	r0, #2
 8001928:	f00b fec6 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800192c:	78ab      	ldrb	r3, [r5, #2]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d106      	bne.n	8001940 <OnJoinRequest+0x3c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <OnJoinRequest+0x50>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001934:	0022      	movs	r2, r4
 8001936:	0021      	movs	r1, r4
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001938:	2002      	movs	r0, #2
 800193a:	f00b febd 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800193e:	bd70      	pop	{r4, r5, r6, pc}
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <OnJoinRequest+0x54>)
 8001942:	e7f7      	b.n	8001934 <OnJoinRequest+0x30>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001944:	2200      	movs	r2, #0
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <OnJoinRequest+0x58>)
 8001948:	0011      	movs	r1, r2
 800194a:	e7f5      	b.n	8001938 <OnJoinRequest+0x34>
 800194c:	20000120 	.word	0x20000120
 8001950:	0800ea2a 	.word	0x0800ea2a
 8001954:	0800ea3f 	.word	0x0800ea3f
 8001958:	0800ea5c 	.word	0x0800ea5c
 800195c:	0800ea79 	.word	0x0800ea79

08001960 <LoRaWAN_Init>:
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001962:	2400      	movs	r4, #0
 8001964:	2701      	movs	r7, #1
{
 8001966:	b085      	sub	sp, #20
  LED_Init(LED_BLUE);
 8001968:	2002      	movs	r0, #2
 800196a:	f001 f901 	bl	8002b70 <BSP_LED_Init>
  LED_Init(LED_RED1);
 800196e:	2001      	movs	r0, #1
 8001970:	f001 f8fe 	bl	8002b70 <BSP_LED_Init>
  LED_Init(LED_RED2);
 8001974:	2003      	movs	r0, #3
 8001976:	f001 f8fb 	bl	8002b70 <BSP_LED_Init>
  BSP_ULT_TRIG_Init();
 800197a:	f001 f8a5 	bl	8002ac8 <BSP_ULT_TRIG_Init>
  BSP_ULT_ECHO_Init();
 800197e:	f001 f8d3 	bl	8002b28 <BSP_ULT_ECHO_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001982:	0022      	movs	r2, r4
 8001984:	0021      	movs	r1, r4
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <LoRaWAN_Init+0x104>)
 8001988:	9402      	str	r4, [sp, #8]
 800198a:	9701      	str	r7, [sp, #4]
 800198c:	9700      	str	r7, [sp, #0]
 800198e:	2002      	movs	r0, #2
 8001990:	f00b fe92 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001994:	2502      	movs	r5, #2
 8001996:	2303      	movs	r3, #3
 8001998:	0022      	movs	r2, r4
 800199a:	0021      	movs	r1, r4
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9500      	str	r5, [sp, #0]
 80019a0:	0028      	movs	r0, r5
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <LoRaWAN_Init+0x108>)
 80019a4:	9402      	str	r4, [sp, #8]
 80019a6:	f00b fe87 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 80019aa:	0022      	movs	r2, r4
 80019ac:	0021      	movs	r1, r4
 80019ae:	0028      	movs	r0, r5
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <LoRaWAN_Init+0x10c>)
 80019b2:	9402      	str	r4, [sp, #8]
 80019b4:	9701      	str	r7, [sp, #4]
 80019b6:	9700      	str	r7, [sp, #0]
 80019b8:	f00b fe7e 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80019bc:	2101      	movs	r1, #1
 80019be:	0022      	movs	r2, r4
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <LoRaWAN_Init+0x110>)
 80019c2:	9400      	str	r4, [sp, #0]
 80019c4:	4249      	negs	r1, r1
 80019c6:	482b      	ldr	r0, [pc, #172]	; (8001a74 <LoRaWAN_Init+0x114>)
 80019c8:	4e2b      	ldr	r6, [pc, #172]	; (8001a78 <LoRaWAN_Init+0x118>)
 80019ca:	f00c f935 	bl	800dc38 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80019ce:	2101      	movs	r1, #1
 80019d0:	0022      	movs	r2, r4
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <LoRaWAN_Init+0x11c>)
 80019d4:	9400      	str	r4, [sp, #0]
 80019d6:	4249      	negs	r1, r1
 80019d8:	4829      	ldr	r0, [pc, #164]	; (8001a80 <LoRaWAN_Init+0x120>)
 80019da:	f00c f92d 	bl	800dc38 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80019de:	2101      	movs	r1, #1
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <LoRaWAN_Init+0x124>)
 80019e2:	003a      	movs	r2, r7
 80019e4:	9400      	str	r4, [sp, #0]
 80019e6:	4249      	negs	r1, r1
 80019e8:	4827      	ldr	r0, [pc, #156]	; (8001a88 <LoRaWAN_Init+0x128>)
 80019ea:	f00c f925 	bl	800dc38 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 80019ee:	21fa      	movs	r1, #250	; 0xfa
 80019f0:	4820      	ldr	r0, [pc, #128]	; (8001a74 <LoRaWAN_Init+0x114>)
 80019f2:	0049      	lsls	r1, r1, #1
 80019f4:	f00c fa16 	bl	800de24 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80019f8:	21fa      	movs	r1, #250	; 0xfa
 80019fa:	4821      	ldr	r0, [pc, #132]	; (8001a80 <LoRaWAN_Init+0x120>)
 80019fc:	0049      	lsls	r1, r1, #1
 80019fe:	f00c fa11 	bl	800de24 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8001a02:	21fa      	movs	r1, #250	; 0xfa
 8001a04:	4820      	ldr	r0, [pc, #128]	; (8001a88 <LoRaWAN_Init+0x128>)
 8001a06:	0049      	lsls	r1, r1, #1
 8001a08:	f00c fa0c 	bl	800de24 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8001a0c:	0021      	movs	r1, r4
 8001a0e:	0038      	movs	r0, r7
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <LoRaWAN_Init+0x12c>)
 8001a12:	f00c f80d 	bl	800da30 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8001a16:	0021      	movs	r1, r4
 8001a18:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <LoRaWAN_Init+0x130>)
 8001a1a:	0028      	movs	r0, r5
 8001a1c:	f00c f808 	bl	800da30 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8001a20:	f000 f8c8 	bl	8001bb4 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8001a24:	4d1b      	ldr	r5, [pc, #108]	; (8001a94 <LoRaWAN_Init+0x134>)
 8001a26:	0028      	movs	r0, r5
 8001a28:	f005 fb2c 	bl	8007084 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8001a2c:	0028      	movs	r0, r5
 8001a2e:	3034      	adds	r0, #52	; 0x34
 8001a30:	f004 fff6 	bl	8006a20 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8001a34:	4814      	ldr	r0, [pc, #80]	; (8001a88 <LoRaWAN_Init+0x128>)
 8001a36:	f00c f9b3 	bl	800dda0 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8001a3a:	0038      	movs	r0, r7
 8001a3c:	f005 f938 	bl	8006cb0 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8001a40:	2101      	movs	r1, #1
 8001a42:	0022      	movs	r2, r4
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <LoRaWAN_Init+0x138>)
 8001a46:	0030      	movs	r0, r6
 8001a48:	9400      	str	r4, [sp, #0]
 8001a4a:	4249      	negs	r1, r1
 8001a4c:	f00c f8f4 	bl	800dc38 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8001a50:	4912      	ldr	r1, [pc, #72]	; (8001a9c <LoRaWAN_Init+0x13c>)
 8001a52:	0030      	movs	r0, r6
 8001a54:	f00c f9e6 	bl	800de24 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8001a58:	0030      	movs	r0, r6
 8001a5a:	f00c f9a1 	bl	800dda0 <UTIL_TIMER_Start>
}
 8001a5e:	b005      	add	sp, #20
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	0800ea92 	.word	0x0800ea92
 8001a68:	0800eab2 	.word	0x0800eab2
 8001a6c:	0800ead2 	.word	0x0800ead2
 8001a70:	0800184f 	.word	0x0800184f
 8001a74:	20000150 	.word	0x20000150
 8001a78:	20000120 	.word	0x20000120
 8001a7c:	08001845 	.word	0x08001845
 8001a80:	20000138 	.word	0x20000138
 8001a84:	08001859 	.word	0x08001859
 8001a88:	20000168 	.word	0x20000168
 8001a8c:	08006b9d 	.word	0x08006b9d
 8001a90:	08001b29 	.word	0x08001b29
 8001a94:	20000000 	.word	0x20000000
 8001a98:	0800174d 	.word	0x0800174d
 8001a9c:	00004e20 	.word	0x00004e20

08001aa0 <HAL_GPIO_EXTI_Callback>:
{
 8001aa0:	b510      	push	{r4, lr}
  switch (GPIO_Pin)
 8001aa2:	2804      	cmp	r0, #4
 8001aa4:	d103      	bne.n	8001aae <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	3802      	subs	r0, #2
 8001aaa:	f00b ff2d 	bl	800d908 <UTIL_SEQ_SetTask>
}
 8001aae:	bd10      	pop	{r4, pc}

08001ab0 <ReadUlt>:

/* Check if the distance between sensor & vehicle is shorter than 60cm */
uint32_t ReadUlt(){
 8001ab0:	b513      	push	{r0, r1, r4, lr}
    uint32_t echo = 0, distance = 0;
    BSP_ULT_TRIG_Off();
 8001ab2:	f001 f830 	bl	8002b16 <BSP_ULT_TRIG_Off>
    HAL_MSDelay(2);
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f000 fe06 	bl	80026c8 <HAL_MSDelay>
    BSP_ULT_TRIG_On();
 8001abc:	f001 f822 	bl	8002b04 <BSP_ULT_TRIG_On>
    HAL_MSDelay(10);
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f000 fe01 	bl	80026c8 <HAL_MSDelay>
    BSP_ULT_TRIG_Off();
 8001ac6:	f001 f826 	bl	8002b16 <BSP_ULT_TRIG_Off>
    HAL_MSDelay(100);
 8001aca:	2064      	movs	r0, #100	; 0x64
 8001acc:	f000 fdfc 	bl	80026c8 <HAL_MSDelay>

    while(!echo){
    	  echo = BSP_ULT_ECHO_Read();
 8001ad0:	f001 f846 	bl	8002b60 <BSP_ULT_ECHO_Read>
    while(!echo){
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d0fb      	beq.n	8001ad0 <ReadUlt+0x20>
    uint32_t echo = 0, distance = 0;
 8001ad8:	2400      	movs	r4, #0
    }
    while(BSP_ULT_ECHO_Read() && distance < 20000){
 8001ada:	f001 f841 	bl	8002b60 <BSP_ULT_ECHO_Read>
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <ReadUlt+0x6c>)
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d017      	beq.n	8001b14 <ReadUlt+0x64>
 8001ae4:	429c      	cmp	r4, r3
 8001ae6:	d113      	bne.n	8001b10 <ReadUlt+0x60>
		  distance = distance + 1;
    }
    if (distance >= 20000) distance = 0;
 8001ae8:	2400      	movs	r4, #0
    distance = (distance * 24)/1000;
 8001aea:	2318      	movs	r3, #24
 8001aec:	21fa      	movs	r1, #250	; 0xfa
 8001aee:	435c      	muls	r4, r3
 8001af0:	0089      	lsls	r1, r1, #2
 8001af2:	0020      	movs	r0, r4
 8001af4:	f7fe fb38 	bl	8000168 <__udivsi3>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### distance= %d\r\n", distance);
 8001af8:	2200      	movs	r2, #0
 8001afa:	9000      	str	r0, [sp, #0]
 8001afc:	0011      	movs	r1, r2
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <ReadUlt+0x70>)
 8001b00:	2002      	movs	r0, #2
 8001b02:	f00b fdd9 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>

    if (distance <= 200) return 1;
 8001b06:	2000      	movs	r0, #0
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <ReadUlt+0x74>)
 8001b0a:	42a3      	cmp	r3, r4
 8001b0c:	4140      	adcs	r0, r0
    else return 0;
}
 8001b0e:	bd16      	pop	{r1, r2, r4, pc}
		  distance = distance + 1;
 8001b10:	3401      	adds	r4, #1
 8001b12:	e7e2      	b.n	8001ada <ReadUlt+0x2a>
    if (distance >= 20000) distance = 0;
 8001b14:	429c      	cmp	r4, r3
 8001b16:	d1e8      	bne.n	8001aea <ReadUlt+0x3a>
 8001b18:	0004      	movs	r4, r0
 8001b1a:	e7e6      	b.n	8001aea <ReadUlt+0x3a>
 8001b1c:	00004e20 	.word	0x00004e20
 8001b20:	0800eaf2 	.word	0x0800eaf2
 8001b24:	00031127 	.word	0x00031127

08001b28 <SendTxData>:
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <SendTxData+0x74>)
{
 8001b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001b2c:	001f      	movs	r7, r3
 8001b2e:	2202      	movs	r2, #2
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001b30:	2500      	movs	r5, #0
  AppData.BufferSize = i;
 8001b32:	2401      	movs	r4, #1
  AppData.Buffer[i++] = (uint8_t)spacecheck;
 8001b34:	4e1a      	ldr	r6, [pc, #104]	; (8001ba0 <SendTxData+0x78>)
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001b36:	3744      	adds	r7, #68	; 0x44
  AppData.Buffer[i++] = (uint8_t)spacecheck;
 8001b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001b3a:	703a      	strb	r2, [r7, #0]
  AppData.Buffer[i++] = (uint8_t)spacecheck;
 8001b3c:	6e32      	ldr	r2, [r6, #96]	; 0x60
{
 8001b3e:	b085      	sub	sp, #20
  APP_LOG(TS_ON, VLEVEL_L, "FOR TEST\r\n");
 8001b40:	0029      	movs	r1, r5
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001b42:	9503      	str	r5, [sp, #12]
  APP_LOG(TS_ON, VLEVEL_L, "FOR TEST\r\n");
 8001b44:	0020      	movs	r0, r4
  AppData.Buffer[i++] = (uint8_t)spacecheck;
 8001b46:	701a      	strb	r2, [r3, #0]
  APP_LOG(TS_ON, VLEVEL_L, "FOR TEST\r\n");
 8001b48:	0022      	movs	r2, r4
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <SendTxData+0x7c>)
  AppData.BufferSize = i;
 8001b4c:	707c      	strb	r4, [r7, #1]
  APP_LOG(TS_ON, VLEVEL_L, "FOR TEST\r\n");
 8001b4e:	f00b fdb3 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8001b52:	0029      	movs	r1, r5
 8001b54:	002b      	movs	r3, r5
 8001b56:	0038      	movs	r0, r7
 8001b58:	aa03      	add	r2, sp, #12
 8001b5a:	f005 f8e9 	bl	8006d30 <LmHandlerSend>
 8001b5e:	0001      	movs	r1, r0
 8001b60:	42a8      	cmp	r0, r5
 8001b62:	d10c      	bne.n	8001b7e <SendTxData+0x56>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8001b64:	0022      	movs	r2, r4
 8001b66:	0020      	movs	r0, r4
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <SendTxData+0x80>)
 8001b6a:	f00b fda5 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
  HAL_Delay(17000);
 8001b6e:	480f      	ldr	r0, [pc, #60]	; (8001bac <SendTxData+0x84>)
 8001b70:	f000 fda4 	bl	80026bc <HAL_Delay>
  spacecheck = ReadUlt();
 8001b74:	f7ff ff9c 	bl	8001ab0 <ReadUlt>
 8001b78:	6630      	str	r0, [r6, #96]	; 0x60
}
 8001b7a:	b005      	add	sp, #20
 8001b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (nextTxIn > 0)
 8001b7e:	9803      	ldr	r0, [sp, #12]
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d0f4      	beq.n	8001b6e <SendTxData+0x46>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8001b84:	21fa      	movs	r1, #250	; 0xfa
 8001b86:	0089      	lsls	r1, r1, #2
 8001b88:	f7fe faee 	bl	8000168 <__udivsi3>
 8001b8c:	0022      	movs	r2, r4
 8001b8e:	9000      	str	r0, [sp, #0]
 8001b90:	0029      	movs	r1, r5
 8001b92:	0020      	movs	r0, r4
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SendTxData+0x88>)
 8001b96:	f00b fd8f 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
 8001b9a:	e7e8      	b.n	8001b6e <SendTxData+0x46>
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000120 	.word	0x20000120
 8001ba4:	0800eb0a 	.word	0x0800eb0a
 8001ba8:	0800eb15 	.word	0x0800eb15
 8001bac:	00004268 	.word	0x00004268
 8001bb0:	0800eb24 	.word	0x0800eb24

08001bb4 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <LoraInfo_Init+0x14>)
 8001bb8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8001bba:	60da      	str	r2, [r3, #12]
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
#endif /* REGION_EU868 */
#ifdef  REGION_KR920
  loraInfo.Region |= (1 << LORAMAC_REGION_KR920) ;
 8001bbc:	3240      	adds	r2, #64	; 0x40
 8001bbe:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8001bc0:	3a3d      	subs	r2, #61	; 0x3d
 8001bc2:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8001bc4:	4770      	bx	lr
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000278 	.word	0x20000278

08001bcc <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8001bcc:	4800      	ldr	r0, [pc, #0]	; (8001bd0 <LoraInfo_GetPtr+0x4>)
 8001bce:	4770      	bx	lr
 8001bd0:	20000278 	.word	0x20000278

08001bd4 <MX_ADC_Init>:
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc.Init.LowPowerFrequencyMode = ENABLE;
  hadc.Init.LowPowerAutoWait      = DISABLE;
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8001bd4:	2107      	movs	r1, #7
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001bd6:	2201      	movs	r2, #1
{
 8001bd8:	b510      	push	{r4, lr}
  hadc.Init.OversamplingMode      = DISABLE;
 8001bda:	4c13      	ldr	r4, [pc, #76]	; (8001c28 <MX_ADC_Init+0x54>)
 8001bdc:	2300      	movs	r3, #0
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8001bde:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc.Instance  = ADC1;
 8001be0:	4912      	ldr	r1, [pc, #72]	; (8001c2c <MX_ADC_Init+0x58>)
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001be2:	6362      	str	r2, [r4, #52]	; 0x34
  hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8001be4:	6122      	str	r2, [r4, #16]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode    = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8001be6:	3203      	adds	r2, #3
  hadc.Instance  = ADC1;
 8001be8:	6021      	str	r1, [r4, #0]
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8001bea:	6162      	str	r2, [r4, #20]
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bec:	2180      	movs	r1, #128	; 0x80
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001bee:	0022      	movs	r2, r4
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bf0:	0609      	lsls	r1, r1, #24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001bf2:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bf4:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode    = DISABLE;
 8001bf6:	8423      	strh	r3, [r4, #32]
  hadc.Init.OversamplingMode      = DISABLE;
 8001bf8:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bfa:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bfc:	6061      	str	r1, [r4, #4]
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8001bfe:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8001c00:	60e3      	str	r3, [r4, #12]
  hadc.Init.LowPowerAutoWait      = DISABLE;
 8001c02:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8001c04:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001c06:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c08:	f001 fb36 	bl	8003278 <HAL_ADC_Init>
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8001c10:	f000 f942 	bl	8001e98 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8001c14:	2100      	movs	r1, #0
 8001c16:	0020      	movs	r0, r4
 8001c18:	f001 fd5c 	bl	80036d4 <HAL_ADCEx_Calibration_Start>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8001c20:	f000 f93a 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001c24:	bd10      	pop	{r4, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	20000288 	.word	0x20000288
 8001c2c:	40012400 	.word	0x40012400

08001c30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_ADC_MspInit+0x18>)
 8001c32:	6802      	ldr	r2, [r0, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d105      	bne.n	8001c44 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_ADC_MspInit+0x1c>)
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8001c44:	4770      	bx	lr
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40012400 	.word	0x40012400
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_ADC_MspDeInit+0x24>)
 8001c52:	6802      	ldr	r2, [r0, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d10c      	bne.n	8001c72 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_ADC_MspDeInit+0x28>)
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC1_FORCE_RESET();
 8001c62:	430a      	orrs	r2, r1
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8001c66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c68:	4001      	ands	r1, r0
 8001c6a:	6259      	str	r1, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6e:	4002      	ands	r2, r0
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001c72:	4770      	bx	lr
 8001c74:	40012400 	.word	0x40012400
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	fffffdff 	.word	0xfffffdff

08001c80 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c82:	2208      	movs	r2, #8
 8001c84:	2100      	movs	r1, #0
{
 8001c86:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c88:	4668      	mov	r0, sp
 8001c8a:	f00c fa84 	bl	800e196 <memset>

  MX_ADC_Init();
 8001c8e:	f7ff ffa1 	bl	8001bd4 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8001c92:	2308      	movs	r3, #8
 8001c94:	491f      	ldr	r1, [pc, #124]	; (8001d14 <ADC_ReadChannels+0x94>)
 8001c96:	684a      	ldr	r2, [r1, #4]
 8001c98:	421a      	tst	r2, r3
 8001c9a:	d0fc      	beq.n	8001c96 <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	4d1e      	ldr	r5, [pc, #120]	; (8001d18 <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001ca0:	4c1e      	ldr	r4, [pc, #120]	; (8001d1c <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 8001ca2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001ca8:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 8001caa:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001cac:	0020      	movs	r0, r4
 8001cae:	f001 fd11 	bl	80036d4 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001cb4:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 8001cb6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001cba:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 8001cbc:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001cbe:	f001 fcb5 	bl	800362c <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001cc2:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001cc4:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001cc6:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001cc8:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 8001cca:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001ccc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001cce:	f001 fcad 	bl	800362c <HAL_ADC_ConfigChannel>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d001      	beq.n	8001cda <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 8001cd6:	f000 f8df 	bl	8001e98 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001cda:	0020      	movs	r0, r4
 8001cdc:	f001 fbfa 	bl	80034d4 <HAL_ADC_Start>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	d001      	beq.n	8001ce8 <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 8001ce4:	f000 f8d8 	bl	8001e98 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	0020      	movs	r0, r4
 8001cec:	4249      	negs	r1, r1
 8001cee:	f001 fc3b 	bl	8003568 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001cf2:	0020      	movs	r0, r4
 8001cf4:	f001 fc1a 	bl	800352c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001cf8:	0020      	movs	r0, r4
 8001cfa:	f001 fc93 	bl	8003624 <HAL_ADC_GetValue>
 8001cfe:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc);
 8001d00:	0020      	movs	r0, r4
 8001d02:	f001 fb93 	bl	800342c <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8001d06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001d0a:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	636b      	str	r3, [r5, #52]	; 0x34
}
 8001d10:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40007000 	.word	0x40007000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	20000288 	.word	0x20000288
 8001d20:	0007ffff 	.word	0x0007ffff
 8001d24:	00001001 	.word	0x00001001
 8001d28:	fffffdff 	.word	0xfffffdff

08001d2c <SYS_InitMeasurement>:
  hadc.Instance = ADC1;
 8001d2c:	4b01      	ldr	r3, [pc, #4]	; (8001d34 <SYS_InitMeasurement+0x8>)
 8001d2e:	4a02      	ldr	r2, [pc, #8]	; (8001d38 <SYS_InitMeasurement+0xc>)
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	4770      	bx	lr
 8001d34:	20000288 	.word	0x20000288
 8001d38:	40012400 	.word	0x40012400

08001d3c <SYS_GetBatteryLevel>:
{
 8001d3c:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001d3e:	4807      	ldr	r0, [pc, #28]	; (8001d5c <SYS_GetBatteryLevel+0x20>)
 8001d40:	f7ff ff9e 	bl	8001c80 <ADC_ReadChannels>
 8001d44:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 8001d46:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 8001d48:	4281      	cmp	r1, r0
 8001d4a:	d006      	beq.n	8001d5a <SYS_GetBatteryLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SYS_GetBatteryLevel+0x24>)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <SYS_GetBatteryLevel+0x28>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	4358      	muls	r0, r3
 8001d54:	f7fe fa08 	bl	8000168 <__udivsi3>
 8001d58:	b280      	uxth	r0, r0
}
 8001d5a:	bd10      	pop	{r4, pc}
 8001d5c:	44020000 	.word	0x44020000
 8001d60:	1ff80078 	.word	0x1ff80078
 8001d64:	00000bb8 	.word	0x00000bb8

08001d68 <SYS_GetTemperatureLevel>:
{
 8001d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001d6a:	f7ff ffe7 	bl	8001d3c <SYS_GetBatteryLevel>
 8001d6e:	0005      	movs	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001d70:	480f      	ldr	r0, [pc, #60]	; (8001db0 <SYS_GetTemperatureLevel+0x48>)
 8001d72:	f7ff ff85 	bl	8001c80 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <SYS_GetTemperatureLevel+0x4c>)
 8001d78:	4368      	muls	r0, r5
 8001d7a:	490f      	ldr	r1, [pc, #60]	; (8001db8 <SYS_GetTemperatureLevel+0x50>)
 8001d7c:	881c      	ldrh	r4, [r3, #0]
 8001d7e:	f7fe f9f3 	bl	8000168 <__udivsi3>
 8001d82:	1b03      	subs	r3, r0, r4
 8001d84:	2050      	movs	r0, #80	; 0x50
 8001d86:	4358      	muls	r0, r3
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <SYS_GetTemperatureLevel+0x54>)
 8001d8a:	0200      	lsls	r0, r0, #8
 8001d8c:	8819      	ldrh	r1, [r3, #0]
 8001d8e:	1b09      	subs	r1, r1, r4
 8001d90:	f7fe fa74 	bl	800027c <__divsi3>
 8001d94:	23f0      	movs	r3, #240	; 0xf0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 8001d96:	2201      	movs	r2, #1
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8001d98:	015b      	lsls	r3, r3, #5
 8001d9a:	18c0      	adds	r0, r0, r3
 8001d9c:	b204      	sxth	r4, r0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 8001d9e:	1223      	asrs	r3, r4, #8
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2100      	movs	r1, #0
 8001da4:	0010      	movs	r0, r2
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <SYS_GetTemperatureLevel+0x58>)
 8001da8:	f00b fc86 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8001dac:	0020      	movs	r0, r4
 8001dae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8001db0:	48040000 	.word	0x48040000
 8001db4:	1ff8007a 	.word	0x1ff8007a
 8001db8:	00000bb8 	.word	0x00000bb8
 8001dbc:	1ff8007e 	.word	0x1ff8007e
 8001dc0:	0800eb74 	.word	0x0800eb74

08001dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001dc4:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	4a08      	ldr	r2, [pc, #32]	; (8001dec <MX_DMA_Init+0x28>)
 8001dca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001dcc:	4301      	orrs	r1, r0
 8001dce:	6311      	str	r1, [r2, #48]	; 0x30
 8001dd0:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dd4:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001dd6:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dd8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001dda:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ddc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001dde:	f001 fcc9 	bl	8003774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001de2:	200b      	movs	r0, #11
 8001de4:	f001 fcf0 	bl	80037c8 <HAL_NVIC_EnableIRQ>

}
 8001de8:	bd07      	pop	{r0, r1, r2, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	40021000 	.word	0x40021000

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b510      	push	{r4, lr}
 8001df2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df4:	222c      	movs	r2, #44	; 0x2c
 8001df6:	2100      	movs	r1, #0
 8001df8:	a807      	add	r0, sp, #28
 8001dfa:	f00c f9cc 	bl	800e196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfe:	2214      	movs	r2, #20
 8001e00:	2100      	movs	r1, #0
 8001e02:	a801      	add	r0, sp, #4
 8001e04:	f00c f9c7 	bl	800e196 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8001e0c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	031b      	lsls	r3, r3, #12
 8001e12:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8001e14:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8001e16:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e18:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8001e1a:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8001e1e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e20:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8001e22:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e24:	f002 f88e 	bl	8003f44 <HAL_RCC_OscConfig>
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	d001      	beq.n	8001e30 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <SystemClock_Config+0x3e>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <SystemClock_Config+0x88>)
 8001e34:	055b      	lsls	r3, r3, #21
 8001e36:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <SystemClock_Config+0x8c>)
 8001e3e:	4910      	ldr	r1, [pc, #64]	; (8001e80 <SystemClock_Config+0x90>)
 8001e40:	6813      	ldr	r3, [r2, #0]
 8001e42:	4019      	ands	r1, r3
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6013      	str	r3, [r2, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8001e4c:	6851      	ldr	r1, [r2, #4]
 8001e4e:	000b      	movs	r3, r1
 8001e50:	4023      	ands	r3, r4
 8001e52:	4221      	tst	r1, r4
 8001e54:	d1fa      	bne.n	8001e4c <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e56:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e58:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e5a:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e5c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5e:	3a0c      	subs	r2, #12
 8001e60:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e62:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e64:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e66:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e68:	f002 faf6 	bl	8004458 <HAL_RCC_ClockConfig>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x84>
 8001e70:	b672      	cpsid	i
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <SystemClock_Config+0x82>
}
 8001e74:	b014      	add	sp, #80	; 0x50
 8001e76:	bd10      	pop	{r4, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	ffffe7ff 	.word	0xffffe7ff

08001e84 <main>:
{
 8001e84:	b510      	push	{r4, lr}
  HAL_Init();
 8001e86:	f001 f901 	bl	800308c <HAL_Init>
  SystemClock_Config();
 8001e8a:	f7ff ffb1 	bl	8001df0 <SystemClock_Config>
  MX_LoRaWAN_Init();
 8001e8e:	f7ff fc51 	bl	8001734 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8001e92:	f7ff fc55 	bl	8001740 <MX_LoRaWAN_Process>
  while (1)
 8001e96:	e7fc      	b.n	8001e92 <main+0xe>

08001e98 <Error_Handler>:
 8001e98:	b672      	cpsid	i
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <Error_Handler+0x2>

08001e9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e9c:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8001e9e:	2500      	movs	r5, #0
{
 8001ea0:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8001ea2:	2214      	movs	r2, #20
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	a801      	add	r0, sp, #4
 8001ea8:	f00c f975 	bl	800e196 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001eac:	2228      	movs	r2, #40	; 0x28
 8001eae:	0029      	movs	r1, r5
 8001eb0:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 8001eb2:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001eb4:	f00c f96f 	bl	800e196 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001eb8:	4c26      	ldr	r4, [pc, #152]	; (8001f54 <MX_RTC_Init+0xb8>)
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <MX_RTC_Init+0xbc>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ebc:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 8001ebe:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001ec0:	231f      	movs	r3, #31
 8001ec2:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <MX_RTC_Init+0xc0>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ec6:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8001ec8:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eca:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ecc:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ece:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ed0:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ed2:	f002 fd55 	bl	8004980 <HAL_RTC_Init>
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	d001      	beq.n	8001ede <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001eda:	f7ff ffdd 	bl	8001e98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001ede:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	0020      	movs	r0, r4
  sTime.Hours = 0;
 8001ee4:	809d      	strh	r5, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ee6:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 8001ee8:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001eea:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001eec:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001eee:	f002 fdaf 	bl	8004a50 <HAL_RTC_SetTime>
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d001      	beq.n	8001efa <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001ef6:	f7ff ffcf 	bl	8001e98 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001efa:	466a      	mov	r2, sp
 8001efc:	2301      	movs	r3, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;
 8001efe:	2500      	movs	r5, #0
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f00:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f02:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 8001f04:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 8001f06:	70d5      	strb	r5, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f08:	4669      	mov	r1, sp
 8001f0a:	002a      	movs	r2, r5
 8001f0c:	0020      	movs	r0, r4
 8001f0e:	f002 fe23 	bl	8004b58 <HAL_RTC_SetDate>
 8001f12:	42a8      	cmp	r0, r5
 8001f14:	d001      	beq.n	8001f1a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001f16:	f7ff ffbf 	bl	8001e98 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001f1a:	466b      	mov	r3, sp
 8001f1c:	831d      	strh	r5, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 8001f1e:	769d      	strb	r5, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8001f20:	23a0      	movs	r3, #160	; 0xa0
 8001f22:	051b      	lsls	r3, r3, #20
 8001f24:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8001f26:	2319      	movs	r3, #25
 8001f28:	221e      	movs	r2, #30
 8001f2a:	446b      	add	r3, sp
 8001f2c:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f2e:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f30:	2200      	movs	r2, #0
  sAlarm.Alarm = RTC_ALARM_A;
 8001f32:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f34:	0020      	movs	r0, r4
 8001f36:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8001f38:	9507      	str	r5, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f3a:	9509      	str	r5, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f3c:	950a      	str	r5, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f3e:	950b      	str	r5, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f40:	950d      	str	r5, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8001f42:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f44:	f002 fe74 	bl	8004c30 <HAL_RTC_SetAlarm_IT>
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8001f4c:	f7ff ffa4 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f50:	b011      	add	sp, #68	; 0x44
 8001f52:	bd30      	pop	{r4, r5, pc}
 8001f54:	200002e4 	.word	0x200002e4
 8001f58:	40002800 	.word	0x40002800
 8001f5c:	000003ff 	.word	0x000003ff

08001f60 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8001f60:	b510      	push	{r4, lr}
 8001f62:	0004      	movs	r4, r0
 8001f64:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	2238      	movs	r2, #56	; 0x38
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4668      	mov	r0, sp
 8001f6c:	f00c f913 	bl	800e196 <memset>
  if (rtcHandle->Instance == RTC)
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_RTC_MspInit+0x50>)
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d118      	bne.n	8001faa <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8001f78:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7a:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8001f7c:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f7e:	33fc      	adds	r3, #252	; 0xfc
 8001f80:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f82:	f001 ffdf 	bl	8003f44 <HAL_RCC_OscConfig>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8001f8a:	f7ff ff85 	bl	8001e98 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_RTC_MspInit+0x54>)
 8001f92:	02db      	lsls	r3, r3, #11
 8001f94:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f96:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	f001 fbe8 	bl	8003774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f001 fc0f 	bl	80037c8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8001faa:	b00e      	add	sp, #56	; 0x38
 8001fac:	bd10      	pop	{r4, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	40002800 	.word	0x40002800
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8001fb8:	4b01      	ldr	r3, [pc, #4]	; (8001fc0 <RTC_IF_GetTimerContext+0x8>)
 8001fba:	6818      	ldr	r0, [r3, #0]
}
 8001fbc:	4770      	bx	lr
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	20000308 	.word	0x20000308

08001fc4 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	4770      	bx	lr

08001fc8 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001fc8:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8001fca:	0e41      	lsrs	r1, r0, #25
 8001fcc:	227d      	movs	r2, #125	; 0x7d
 8001fce:	2300      	movs	r3, #0
 8001fd0:	01c0      	lsls	r0, r0, #7
 8001fd2:	f7fe fab7 	bl	8000544 <__aeabi_uldivmod>
}
 8001fd6:	bd10      	pop	{r4, pc}

08001fd8 <RTC_IF_Convert_Tick2ms>:
  return (uint32_t)((((uint64_t)timeMicroSec) * CONV_DENOM) / (CONV_NUMER * 1000));
}


uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8001fd8:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8001fda:	227d      	movs	r2, #125	; 0x7d
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	f7fe fad0 	bl	8000584 <__aeabi_lmul>
 8001fe4:	0649      	lsls	r1, r1, #25
 8001fe6:	09c0      	lsrs	r0, r0, #7
 8001fe8:	4308      	orrs	r0, r1
}
 8001fea:	bd10      	pop	{r4, pc}

08001fec <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001fec:	4806      	ldr	r0, [pc, #24]	; (8002008 <RTC_IF_StopTimer+0x1c>)
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <RTC_IF_StopTimer+0x20>)
 8001ff0:	6801      	ldr	r1, [r0, #0]
{
 8001ff2:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001ff4:	68ca      	ldr	r2, [r1, #12]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0049      	lsls	r1, r1, #1
 8002000:	f002 fbf6 	bl	80047f0 <HAL_RTC_DeactivateAlarm>
}
 8002004:	2000      	movs	r0, #0
 8002006:	bd10      	pop	{r4, pc}
 8002008:	200002e4 	.word	0x200002e4
 800200c:	fffffe7f 	.word	0xfffffe7f

08002010 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002012:	4e25      	ldr	r6, [pc, #148]	; (80020a8 <RTC_GetCalendarValue+0x98>)
{
 8002014:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002016:	2200      	movs	r2, #0
 8002018:	0030      	movs	r0, r6
{
 800201a:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800201c:	f002 fee8 	bl	8004df0 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002020:	4f22      	ldr	r7, [pc, #136]	; (80020ac <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8002022:	2200      	movs	r2, #0
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	0029      	movs	r1, r5
 8002028:	0030      	movs	r0, r6
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	f002 ff0a 	bl	8004e44 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002030:	2200      	movs	r2, #0
 8002032:	0021      	movs	r1, r4
 8002034:	0030      	movs	r0, r6
 8002036:	f002 fedb 	bl	8004df0 <HAL_RTC_GetTime>
 800203a:	466b      	mov	r3, sp
 800203c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203e:	889b      	ldrh	r3, [r3, #4]
 8002040:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8002042:	429a      	cmp	r2, r3
 8002044:	d1ec      	bne.n	8002020 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002046:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002048:	78ea      	ldrb	r2, [r5, #3]
 800204a:	4e19      	ldr	r6, [pc, #100]	; (80020b0 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800204c:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800204e:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002050:	400a      	ands	r2, r1
 8002052:	4253      	negs	r3, r2
 8002054:	415a      	adcs	r2, r3
 8002056:	4253      	negs	r3, r2
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800205a:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800205c:	4013      	ands	r3, r2
 800205e:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <RTC_GetCalendarValue+0xa8>)
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002060:	3603      	adds	r6, #3
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002062:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002064:	223d      	movs	r2, #61	; 0x3d
 8002066:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8002068:	007f      	lsls	r7, r7, #1
 800206a:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800206c:	3201      	adds	r2, #1
 800206e:	0fd0      	lsrs	r0, r2, #31
 8002070:	1880      	adds	r0, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 8002072:	78aa      	ldrb	r2, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002074:	08b6      	lsrs	r6, r6, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 8002076:	3a01      	subs	r2, #1
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002078:	1040      	asrs	r0, r0, #1
 800207a:	1996      	adds	r6, r2, r6
 800207c:	1986      	adds	r6, r0, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800207e:	400b      	ands	r3, r1

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8002080:	480e      	ldr	r0, [pc, #56]	; (80020bc <RTC_GetCalendarValue+0xac>)
  calendarValue += (RTC_DateStruct->Date - 1);
 8002082:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 8002084:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8002086:	20e1      	movs	r0, #225	; 0xe1
 8002088:	7822      	ldrb	r2, [r4, #0]
 800208a:	0100      	lsls	r0, r0, #4
 800208c:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800208e:	223c      	movs	r2, #60	; 0x3c
 8002090:	7861      	ldrb	r1, [r4, #1]
 8002092:	434a      	muls	r2, r1
 8002094:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8002096:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002098:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800209a:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 800209c:	6863      	ldr	r3, [r4, #4]
 800209e:	0280      	lsls	r0, r0, #10
 80020a0:	1ac0      	subs	r0, r0, r3
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <RTC_GetCalendarValue+0xb0>)
 80020a4:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 80020a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020a8:	200002e4 	.word	0x200002e4
 80020ac:	40002800 	.word	0x40002800
 80020b0:	000005b5 	.word	0x000005b5
 80020b4:	ffaaaab0 	.word	0xffaaaab0
 80020b8:	0099aaa0 	.word	0x0099aaa0
 80020bc:	00015180 	.word	0x00015180
 80020c0:	000003ff 	.word	0x000003ff

080020c4 <RTC_IF_SetTimerContext>:
{
 80020c4:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80020c6:	4c04      	ldr	r4, [pc, #16]	; (80020d8 <RTC_IF_SetTimerContext+0x14>)
 80020c8:	0020      	movs	r0, r4
 80020ca:	1d21      	adds	r1, r4, #4
 80020cc:	3018      	adds	r0, #24
 80020ce:	f7ff ff9f 	bl	8002010 <RTC_GetCalendarValue>
 80020d2:	6020      	str	r0, [r4, #0]
}
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	20000308 	.word	0x20000308

080020dc <RTC_IF_GetTimerElapsedTime>:
{
 80020dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80020de:	4668      	mov	r0, sp
 80020e0:	a901      	add	r1, sp, #4
 80020e2:	f7ff ff95 	bl	8002010 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80020e6:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <RTC_IF_GetTimerElapsedTime+0x14>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	1ac0      	subs	r0, r0, r3
}
 80020ec:	b007      	add	sp, #28
 80020ee:	bd00      	pop	{pc}
 80020f0:	20000308 	.word	0x20000308

080020f4 <RTC_IF_StartTimer>:
{
 80020f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f6:	b087      	sub	sp, #28
 80020f8:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80020fa:	f7ff ffef 	bl	80020dc <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 80020fe:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002100:	1a30      	subs	r0, r6, r0
 8002102:	2803      	cmp	r0, #3
 8002104:	d800      	bhi.n	8002108 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8002106:	2101      	movs	r1, #1
 8002108:	2002      	movs	r0, #2
 800210a:	f00b fb8d 	bl	800d828 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 800210e:	f00b fbb7 	bl	800d880 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8002112:	4c40      	ldr	r4, [pc, #256]	; (8002214 <RTC_IF_StartTimer+0x120>)
 8002114:	7923      	ldrb	r3, [r4, #4]
 8002116:	68a7      	ldr	r7, [r4, #8]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	7963      	ldrb	r3, [r4, #5]
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	79a3      	ldrb	r3, [r4, #6]
 8002120:	9302      	str	r3, [sp, #8]
 8002122:	79e3      	ldrb	r3, [r4, #7]
 8002124:	9303      	str	r3, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8002126:	7e63      	ldrb	r3, [r4, #25]
 8002128:	9304      	str	r3, [sp, #16]
 800212a:	7ee3      	ldrb	r3, [r4, #27]
 800212c:	7ea5      	ldrb	r5, [r4, #26]
 800212e:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8002130:	f7ff ff5c 	bl	8001fec <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002136:	05b2      	lsls	r2, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002138:	1bdf      	subs	r7, r3, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800213a:	0d92      	lsrs	r2, r2, #22
 800213c:	18ba      	adds	r2, r7, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 800213e:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002140:	4e36      	ldr	r6, [pc, #216]	; (800221c <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002142:	b292      	uxth	r2, r2
  rtcAlarmDays =  RTC_DateStruct.Date;
 8002144:	b2a8      	uxth	r0, r5
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002146:	42b3      	cmp	r3, r6
 8002148:	d844      	bhi.n	80021d4 <RTC_IF_StartTimer+0xe0>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800214a:	4669      	mov	r1, sp
 800214c:	880e      	ldrh	r6, [r1, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800214e:	21e1      	movs	r1, #225	; 0xe1
 8002150:	0109      	lsls	r1, r1, #4
 8002152:	428b      	cmp	r3, r1
 8002154:	d243      	bcs.n	80021de <RTC_IF_StartTimer+0xea>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8002156:	4669      	mov	r1, sp
 8002158:	888f      	ldrh	r7, [r1, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800215a:	2b3b      	cmp	r3, #59	; 0x3b
 800215c:	d844      	bhi.n	80021e8 <RTC_IF_StartTimer+0xf4>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800215e:	0a95      	lsrs	r5, r2, #10
 8002160:	02a9      	lsls	r1, r5, #10
 8002162:	1a52      	subs	r2, r2, r1
 8002164:	b292      	uxth	r2, r2
 8002166:	9200      	str	r2, [sp, #0]
 8002168:	9a02      	ldr	r2, [sp, #8]
 800216a:	18ad      	adds	r5, r5, r2
 800216c:	18ed      	adds	r5, r5, r3
 800216e:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8002170:	2d3b      	cmp	r5, #59	; 0x3b
 8002172:	d83d      	bhi.n	80021f0 <RTC_IF_StartTimer+0xfc>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8002174:	2f3b      	cmp	r7, #59	; 0x3b
 8002176:	d840      	bhi.n	80021fa <RTC_IF_StartTimer+0x106>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8002178:	2e17      	cmp	r6, #23
 800217a:	d843      	bhi.n	8002204 <RTC_IF_StartTimer+0x110>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800217c:	9a04      	ldr	r2, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 800217e:	9905      	ldr	r1, [sp, #20]
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <RTC_IF_StartTimer+0x12c>)
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002182:	3a01      	subs	r2, #1
  if (RTC_DateStruct.Year % 4 == 0)
 8002184:	0789      	lsls	r1, r1, #30
 8002186:	d142      	bne.n	800220e <RTC_IF_StartTimer+0x11a>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002188:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800218a:	4288      	cmp	r0, r1
 800218c:	d902      	bls.n	8002194 <RTC_IF_StartTimer+0xa0>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800218e:	f7fe f95b 	bl	8000448 <__aeabi_idivmod>
 8002192:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8002194:	9a00      	ldr	r2, [sp, #0]
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <RTC_IF_StartTimer+0x124>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8002198:	77a5      	strb	r5, [r4, #30]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 800219e:	23a0      	movs	r3, #160	; 0xa0
 80021a0:	051b      	lsls	r3, r3, #20
 80021a2:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80021a4:	0023      	movs	r3, r4
 80021a6:	333c      	adds	r3, #60	; 0x3c
 80021a8:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80021aa:	9b03      	ldr	r3, [sp, #12]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021ac:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80021ae:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80021b0:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80021b2:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80021b4:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80021b6:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80021b8:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80021ba:	481a      	ldr	r0, [pc, #104]	; (8002224 <RTC_IF_StartTimer+0x130>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80021bc:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80021be:	7726      	strb	r6, [r4, #28]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021c0:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80021c2:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80021c4:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021c6:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021c8:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80021ca:	f002 fd31 	bl	8004c30 <HAL_RTC_SetAlarm_IT>
}
 80021ce:	0028      	movs	r0, r5
 80021d0:	b007      	add	sp, #28
 80021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 80021d4:	4914      	ldr	r1, [pc, #80]	; (8002228 <RTC_IF_StartTimer+0x134>)
    rtcAlarmDays++;
 80021d6:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 80021d8:	185b      	adds	r3, r3, r1
    rtcAlarmDays++;
 80021da:	b280      	uxth	r0, r0
 80021dc:	e7b3      	b.n	8002146 <RTC_IF_StartTimer+0x52>
    timeoutValue -= SECONDS_IN_1HOUR;
 80021de:	4d13      	ldr	r5, [pc, #76]	; (800222c <RTC_IF_StartTimer+0x138>)
    rtcAlarmHours++;
 80021e0:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80021e2:	195b      	adds	r3, r3, r5
    rtcAlarmHours++;
 80021e4:	b2b6      	uxth	r6, r6
 80021e6:	e7b4      	b.n	8002152 <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 80021e8:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80021ea:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 80021ec:	b2bf      	uxth	r7, r7
 80021ee:	e7b4      	b.n	800215a <RTC_IF_StartTimer+0x66>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80021f0:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 80021f2:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80021f4:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 80021f6:	b2bf      	uxth	r7, r7
 80021f8:	e7ba      	b.n	8002170 <RTC_IF_StartTimer+0x7c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80021fa:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 80021fc:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80021fe:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8002200:	b2b6      	uxth	r6, r6
 8002202:	e7b7      	b.n	8002174 <RTC_IF_StartTimer+0x80>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002204:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 8002206:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002208:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 800220a:	b280      	uxth	r0, r0
 800220c:	e7b4      	b.n	8002178 <RTC_IF_StartTimer+0x84>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800220e:	189b      	adds	r3, r3, r2
 8002210:	7b19      	ldrb	r1, [r3, #12]
 8002212:	e7ba      	b.n	800218a <RTC_IF_StartTimer+0x96>
 8002214:	20000308 	.word	0x20000308
 8002218:	000003ff 	.word	0x000003ff
 800221c:	0001517f 	.word	0x0001517f
 8002220:	0800e2ec 	.word	0x0800e2ec
 8002224:	200002e4 	.word	0x200002e4
 8002228:	fffeae80 	.word	0xfffeae80
 800222c:	fffff1f0 	.word	0xfffff1f0

08002230 <RTC_IF_GetTime>:
{
 8002230:	b530      	push	{r4, r5, lr}
 8002232:	b087      	sub	sp, #28
 8002234:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8002236:	a901      	add	r1, sp, #4
 8002238:	4668      	mov	r0, sp
 800223a:	f7ff fee9 	bl	8002010 <RTC_GetCalendarValue>
 800223e:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002240:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002242:	227d      	movs	r2, #125	; 0x7d
 8002244:	2300      	movs	r3, #0
 8002246:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002248:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800224a:	f7fe f99b 	bl	8000584 <__aeabi_lmul>
 800224e:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8002250:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8002252:	0aa0      	lsrs	r0, r4, #10
}
 8002254:	b007      	add	sp, #28
 8002256:	bd30      	pop	{r4, r5, pc}

08002258 <RTC_IF_BkUp_Write_Seconds>:
{
 8002258:	b510      	push	{r4, lr}
 800225a:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800225c:	2100      	movs	r1, #0
 800225e:	4802      	ldr	r0, [pc, #8]	; (8002268 <RTC_IF_BkUp_Write_Seconds+0x10>)
 8002260:	f002 fe12 	bl	8004e88 <HAL_RTCEx_BKUPWrite>
}
 8002264:	bd10      	pop	{r4, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	200002e4 	.word	0x200002e4

0800226c <RTC_IF_BkUp_Write_SubSeconds>:
{
 800226c:	b510      	push	{r4, lr}
 800226e:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002270:	2101      	movs	r1, #1
 8002272:	4802      	ldr	r0, [pc, #8]	; (800227c <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8002274:	f002 fe08 	bl	8004e88 <HAL_RTCEx_BKUPWrite>
}
 8002278:	bd10      	pop	{r4, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	200002e4 	.word	0x200002e4

08002280 <RTC_IF_BkUp_Read_Seconds>:
{
 8002280:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002282:	2100      	movs	r1, #0
 8002284:	4801      	ldr	r0, [pc, #4]	; (800228c <RTC_IF_BkUp_Read_Seconds+0xc>)
 8002286:	f002 fe05 	bl	8004e94 <HAL_RTCEx_BKUPRead>
}
 800228a:	bd10      	pop	{r4, pc}
 800228c:	200002e4 	.word	0x200002e4

08002290 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8002290:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002292:	2101      	movs	r1, #1
 8002294:	4801      	ldr	r0, [pc, #4]	; (800229c <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8002296:	f002 fdfd 	bl	8004e94 <HAL_RTCEx_BKUPRead>
}
 800229a:	bd10      	pop	{r4, pc}
 800229c:	200002e4 	.word	0x200002e4

080022a0 <RTC_IF_Init>:
{
 80022a0:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80022a2:	4c11      	ldr	r4, [pc, #68]	; (80022e8 <RTC_IF_Init+0x48>)
{
 80022a4:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 80022a6:	3444      	adds	r4, #68	; 0x44
 80022a8:	7823      	ldrb	r3, [r4, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d119      	bne.n	80022e2 <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022ae:	3320      	adds	r3, #32
 80022b0:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022b2:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b4:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022b6:	025b      	lsls	r3, r3, #9
 80022b8:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ba:	f002 f9bb 	bl	8004634 <HAL_RCCEx_PeriphCLKConfig>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d000      	beq.n	80022c4 <RTC_IF_Init+0x24>
      while (1);
 80022c2:	e7fe      	b.n	80022c2 <RTC_IF_Init+0x22>
    MX_RTC_Init();
 80022c4:	f7ff fdea 	bl	8001e9c <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	4d08      	ldr	r5, [pc, #32]	; (80022ec <RTC_IF_Init+0x4c>)
 80022cc:	0049      	lsls	r1, r1, #1
 80022ce:	0028      	movs	r0, r5
 80022d0:	f002 fa8e 	bl	80047f0 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022d4:	0028      	movs	r0, r5
 80022d6:	f002 fde3 	bl	8004ea0 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 80022da:	f7ff fef3 	bl	80020c4 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 80022de:	2301      	movs	r3, #1
 80022e0:	7023      	strb	r3, [r4, #0]
}
 80022e2:	2000      	movs	r0, #0
 80022e4:	b00b      	add	sp, #44	; 0x2c
 80022e6:	bd30      	pop	{r4, r5, pc}
 80022e8:	20000308 	.word	0x20000308
 80022ec:	200002e4 	.word	0x200002e4

080022f0 <RTC_IF_GetTimerValue>:
{
 80022f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 80022f2:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <RTC_IF_GetTimerValue+0x1c>)
 80022f6:	3344      	adds	r3, #68	; 0x44
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4283      	cmp	r3, r0
 80022fc:	d003      	beq.n	8002306 <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80022fe:	4668      	mov	r0, sp
 8002300:	a901      	add	r1, sp, #4
 8002302:	f7ff fe85 	bl	8002010 <RTC_GetCalendarValue>
}
 8002306:	b007      	add	sp, #28
 8002308:	bd00      	pop	{pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	20000308 	.word	0x20000308

08002310 <RTC_IF_DelayMs>:
{
 8002310:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002312:	227d      	movs	r2, #125	; 0x7d
 8002314:	2300      	movs	r3, #0
 8002316:	0e41      	lsrs	r1, r0, #25
 8002318:	01c0      	lsls	r0, r0, #7
 800231a:	f7fe f913 	bl	8000544 <__aeabi_uldivmod>
 800231e:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8002320:	f7ff ffe6 	bl	80022f0 <RTC_IF_GetTimerValue>
 8002324:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8002326:	f7ff ffe3 	bl	80022f0 <RTC_IF_GetTimerValue>
 800232a:	1b40      	subs	r0, r0, r5
 800232c:	42a0      	cmp	r0, r4
 800232e:	d300      	bcc.n	8002332 <RTC_IF_DelayMs+0x22>
}
 8002330:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	e7f7      	b.n	8002326 <RTC_IF_DelayMs+0x16>
	...

08002338 <RTC_IF_DelayMicroSec>:
{
 8002338:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMicroSec) * CONV_DENOM) / (CONV_NUMER * 1000));
 800233a:	2300      	movs	r3, #0
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <RTC_IF_DelayMicroSec+0x28>)
 800233e:	0e41      	lsrs	r1, r0, #25
 8002340:	01c0      	lsls	r0, r0, #7
 8002342:	f7fe f8ff 	bl	8000544 <__aeabi_uldivmod>
 8002346:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8002348:	f7ff ffd2 	bl	80022f0 <RTC_IF_GetTimerValue>
 800234c:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800234e:	f7ff ffcf 	bl	80022f0 <RTC_IF_GetTimerValue>
 8002352:	1b40      	subs	r0, r0, r5
 8002354:	42a0      	cmp	r0, r4
 8002356:	d300      	bcc.n	800235a <RTC_IF_DelayMicroSec+0x22>
}
 8002358:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	e7f7      	b.n	800234e <RTC_IF_DelayMicroSec+0x16>
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	0001e848 	.word	0x0001e848

08002364 <HAL_RTC_AlarmAEventCallback>:
{
 8002364:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 8002366:	f00b fd79 	bl	800de5c <UTIL_TIMER_IRQ_Handler>
}
 800236a:	bd10      	pop	{r4, pc}

0800236c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800236c:	4770      	bx	lr
	...

08002370 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8002370:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002372:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002376:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 8002378:	f000 fd5c 	bl	8002e34 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc);
 800237c:	4807      	ldr	r0, [pc, #28]	; (800239c <PWR_EnterStopMode+0x2c>)
 800237e:	f7ff fc67 	bl	8001c50 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8002382:	2304      	movs	r3, #4
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <PWR_EnterStopMode+0x30>)
 8002386:	6811      	ldr	r1, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238c:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002390:	2101      	movs	r1, #1
 8002392:	0008      	movs	r0, r1
 8002394:	f001 fd3e 	bl	8003e14 <HAL_PWR_EnterSTOPMode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002398:	bd10      	pop	{r4, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	20000288 	.word	0x20000288
 80023a0:	40007000 	.word	0x40007000

080023a4 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80023a4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80023aa:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 80023ac:	2201      	movs	r2, #1
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <PWR_ExitStopMode+0x4c>)
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 80023b6:	2204      	movs	r2, #4
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	4211      	tst	r1, r2
 80023bc:	d0fc      	beq.n	80023b8 <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	0452      	lsls	r2, r2, #17
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	0492      	lsls	r2, r2, #18
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	4211      	tst	r1, r2
 80023d0:	d0fc      	beq.n	80023cc <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80023d2:	2203      	movs	r2, #3
 80023d4:	68d9      	ldr	r1, [r3, #12]
 80023d6:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80023d8:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80023da:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	400a      	ands	r2, r1
 80023e0:	2a0c      	cmp	r2, #12
 80023e2:	d1fb      	bne.n	80023dc <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80023e4:	f000 fc4c 	bl	8002c80 <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e8:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80023ec:	bd10      	pop	{r4, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	40021000 	.word	0x40021000

080023f4 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80023f4:	b510      	push	{r4, lr}

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80023f6:	2101      	movs	r1, #1
 80023f8:	2000      	movs	r0, #0
 80023fa:	f001 fcd3 	bl	8003da4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80023fe:	bd10      	pop	{r4, pc}

08002400 <PWR_ExitSleepMode>:
 8002400:	4770      	bx	lr

08002402 <PWR_ExitOffMode>:
 8002402:	4770      	bx	lr

08002404 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <HAL_MspInit+0x28>)
 8002408:	055b      	lsls	r3, r3, #21
 800240a:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 800240c:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	430b      	orrs	r3, r1
 8002410:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8002412:	f001 fcbf 	bl	8003d94 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8002416:	f001 fd43 	bl	8003ea0 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800241a:	2308      	movs	r3, #8
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_MspInit+0x2c>)
 800241e:	6811      	ldr	r1, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8002424:	f001 fd32 	bl	8003e8c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002428:	bd10      	pop	{r4, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40021000 	.word	0x40021000
 8002430:	40022000 	.word	0x40022000

08002434 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <NMI_Handler>

08002436 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <HardFault_Handler>

08002438 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002438:	4770      	bx	lr

0800243a <PendSV_Handler>:
 800243a:	4770      	bx	lr

0800243c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243e:	f000 fe39 	bl	80030b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002442:	bd10      	pop	{r4, pc}

08002444 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8002444:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <EXTI0_1_IRQHandler+0x10>)
 8002448:	f001 fb2c 	bl	8003aa4 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <EXTI0_1_IRQHandler+0x14>)
 800244e:	f001 fb29 	bl	8003aa4 <HAL_EXTI_IRQHandler>
#endif
}
 8002452:	bd10      	pop	{r4, pc}
 8002454:	200004e0 	.word	0x200004e0
 8002458:	200004d8 	.word	0x200004d8

0800245c <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800245c:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800245e:	2004      	movs	r0, #4
 8002460:	f001 fc8c 	bl	8003d7c <HAL_GPIO_EXTI_IRQHandler>
#endif
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 8002464:	bd10      	pop	{r4, pc}
	...

08002468 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8002468:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 800246a:	4803      	ldr	r0, [pc, #12]	; (8002478 <EXTI4_15_IRQHandler+0x10>)
 800246c:	f001 fb1a 	bl	8003aa4 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <EXTI4_15_IRQHandler+0x14>)
 8002472:	f001 fb17 	bl	8003aa4 <HAL_EXTI_IRQHandler>
#else
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
#endif
}
 8002476:	bd10      	pop	{r4, pc}
 8002478:	200004d0 	.word	0x200004d0
 800247c:	200004e8 	.word	0x200004e8

08002480 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002480:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8002484:	f001 fab5 	bl	80039f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002488:	bd10      	pop	{r4, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	20000350 	.word	0x20000350

08002490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002490:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002492:	4802      	ldr	r0, [pc, #8]	; (800249c <USART2_IRQHandler+0xc>)
 8002494:	f003 f83c 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002498:	bd10      	pop	{r4, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	20000398 	.word	0x20000398

080024a0 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 80024a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024a2:	4802      	ldr	r0, [pc, #8]	; (80024ac <RTC_IRQHandler+0xc>)
 80024a4:	f002 fa06 	bl	80048b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	200002e4 	.word	0x200002e4

080024b0 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 80024b0:	b40c      	push	{r2, r3}
 80024b2:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80024b4:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 80024b6:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 80024ba:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80024bc:	f00b fd14 	bl	800dee8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80024c0:	b003      	add	sp, #12
 80024c2:	bc08      	pop	{r3}
 80024c4:	b002      	add	sp, #8
 80024c6:	4718      	bx	r3
 80024c8:	0800eb7f 	.word	0x0800eb7f

080024cc <TimestampNow>:
{
 80024cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80024ce:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 80024d0:	ae02      	add	r6, sp, #8
 80024d2:	0030      	movs	r0, r6
{
 80024d4:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 80024d6:	f00b fb13 	bl	800db00 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80024da:	2204      	movs	r2, #4
 80024dc:	5eb3      	ldrsh	r3, [r6, r2]
 80024de:	2110      	movs	r1, #16
 80024e0:	0020      	movs	r0, r4
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <TimestampNow+0x2c>)
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	9b02      	ldr	r3, [sp, #8]
 80024e8:	f7ff ffe2 	bl	80024b0 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 80024ec:	0020      	movs	r0, r4
 80024ee:	f7fd fe0b 	bl	8000108 <strlen>
 80024f2:	8028      	strh	r0, [r5, #0]
}
 80024f4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	0800eb7f 	.word	0x0800eb7f

080024fc <SystemApp_Init>:
{
 80024fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002500:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	2704      	movs	r7, #4
{
 8002504:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 8002506:	f00b fb8b 	bl	800dc20 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	220c      	movs	r2, #12
 800250c:	2100      	movs	r1, #0
 800250e:	a807      	add	r0, sp, #28
 8002510:	f00b fe41 	bl	800e196 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002514:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4c2e      	ldr	r4, [pc, #184]	; (80025d0 <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251e:	432b      	orrs	r3, r5
 8002520:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	402b      	ands	r3, r5
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800252e:	4333      	orrs	r3, r6
 8002530:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002534:	4033      	ands	r3, r6
 8002536:	9302      	str	r3, [sp, #8]
 8002538:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800253c:	433b      	orrs	r3, r7
 800253e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002542:	403b      	ands	r3, r7
 8002544:	9303      	str	r3, [sp, #12]
 8002546:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800254a:	4313      	orrs	r3, r2
 800254c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800254e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002550:	4013      	ands	r3, r2
 8002552:	9304      	str	r3, [sp, #16]
 8002554:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002556:	2303      	movs	r3, #3
 8002558:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <SystemApp_Init+0xd8>)
 800255c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f001 fab3 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <SystemApp_Init+0xdc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002564:	a905      	add	r1, sp, #20
 8002566:	481d      	ldr	r0, [pc, #116]	; (80025dc <SystemApp_Init+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002568:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f001 faad 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256e:	a905      	add	r1, sp, #20
 8002570:	481b      	ldr	r0, [pc, #108]	; (80025e0 <SystemApp_Init+0xe4>)
 8002572:	f001 faa9 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002576:	a905      	add	r1, sp, #20
 8002578:	481a      	ldr	r0, [pc, #104]	; (80025e4 <SystemApp_Init+0xe8>)
 800257a:	f001 faa5 	bl	8003ac8 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800257e:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002580:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002582:	43ab      	bics	r3, r5
 8002584:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8002586:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002588:	43b3      	bics	r3, r6
 800258a:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800258c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800258e:	43bb      	bics	r3, r7
 8002590:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002594:	4393      	bics	r3, r2
 8002596:	62e3      	str	r3, [r4, #44]	; 0x2c
  DBG_Disable();
 8002598:	f000 f8ac 	bl	80026f4 <DBG_Disable>
  DBG_ProbesInit();
 800259c:	f000 f8ae 	bl	80026fc <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 80025a0:	f00b f822 	bl	800d5e8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80025a4:	4810      	ldr	r0, [pc, #64]	; (80025e8 <SystemApp_Init+0xec>)
 80025a6:	f00b f839 	bl	800d61c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80025aa:	0030      	movs	r0, r6
 80025ac:	f00b f83c 	bl	800d628 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80025b0:	f7ff fbbc 	bl	8001d2c <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 80025b4:	f000 fd14 	bl	8002fe0 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 80025b8:	f000 fb62 	bl	8002c80 <CMWX1ZZABZ0XX_RADIO_IoInit>
  EnvSensors_Init();
 80025bc:	f000 f89f 	bl	80026fe <EnvSensors_Init>
  UTIL_LPM_Init();
 80025c0:	f00b f92a 	bl	800d818 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80025c4:	0029      	movs	r1, r5
 80025c6:	0028      	movs	r0, r5
 80025c8:	f00b f944 	bl	800d854 <UTIL_LPM_SetOffMode>
}
 80025cc:	b00b      	add	sp, #44	; 0x2c
 80025ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	00009fff 	.word	0x00009fff
 80025d8:	0000ffff 	.word	0x0000ffff
 80025dc:	50000400 	.word	0x50000400
 80025e0:	50000800 	.word	0x50000800
 80025e4:	50001c00 	.word	0x50001c00
 80025e8:	080024cd 	.word	0x080024cd

080025ec <UTIL_SEQ_Idle>:
{
 80025ec:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 80025ee:	f00b f959 	bl	800d8a4 <UTIL_LPM_EnterLowPower>
}
 80025f2:	bd10      	pop	{r4, pc}

080025f4 <GetBatteryLevel>:
{
 80025f4:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80025f6:	f7ff fba1 	bl	8001d3c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <GetBatteryLevel+0x3c>)
    batteryLevel = LORAWAN_MAX_BAT;
 80025fc:	24fe      	movs	r4, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 80025fe:	4298      	cmp	r0, r3
 8002600:	d80d      	bhi.n	800261e <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8002602:	23e1      	movs	r3, #225	; 0xe1
    batteryLevel = 0;
 8002604:	2400      	movs	r4, #0
  else if (batteryLevelmV < VDD_MIN)
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4298      	cmp	r0, r3
 800260a:	d308      	bcc.n	800261e <GetBatteryLevel+0x2a>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <GetBatteryLevel+0x40>)
 800260e:	2196      	movs	r1, #150	; 0x96
 8002610:	18c0      	adds	r0, r0, r3
 8002612:	23fe      	movs	r3, #254	; 0xfe
 8002614:	00c9      	lsls	r1, r1, #3
 8002616:	4358      	muls	r0, r3
 8002618:	f7fd fda6 	bl	8000168 <__udivsi3>
 800261c:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 800261e:	2201      	movs	r2, #1
 8002620:	2100      	movs	r1, #0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <GetBatteryLevel+0x44>)
 8002624:	9400      	str	r4, [sp, #0]
 8002626:	2002      	movs	r0, #2
 8002628:	f00b f846 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800262c:	0020      	movs	r0, r4
 800262e:	bd16      	pop	{r1, r2, r4, pc}
 8002630:	00000bb8 	.word	0x00000bb8
 8002634:	fffff8f8 	.word	0xfffff8f8
 8002638:	0800eb88 	.word	0x0800eb88

0800263c <GetTemperatureLevel>:
{
 800263c:	b510      	push	{r4, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800263e:	f7ff fb93 	bl	8001d68 <SYS_GetTemperatureLevel>
 8002642:	0002      	movs	r2, r0
 8002644:	17c0      	asrs	r0, r0, #31
 8002646:	b2c0      	uxtb	r0, r0
 8002648:	1880      	adds	r0, r0, r2
 800264a:	1200      	asrs	r0, r0, #8
  return temperatureLevel;
 800264c:	b280      	uxth	r0, r0
}
 800264e:	bd10      	pop	{r4, pc}

08002650 <GetUniqueId>:
{
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	0004      	movs	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002654:	f000 fd3a 	bl	80030cc <HAL_GetUIDw0>
 8002658:	0005      	movs	r5, r0
 800265a:	f000 fd43 	bl	80030e4 <HAL_GetUIDw2>
 800265e:	182d      	adds	r5, r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 8002660:	f000 fd3a 	bl	80030d8 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 8002664:	0e2b      	lsrs	r3, r5, #24
 8002666:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 8002668:	0c2b      	lsrs	r3, r5, #16
 800266a:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 800266c:	0a2b      	lsrs	r3, r5, #8
 800266e:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 8002670:	0e03      	lsrs	r3, r0, #24
 8002672:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 8002674:	0c03      	lsrs	r3, r0, #16
 8002676:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 8002678:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 800267a:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 800267c:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 800267e:	7020      	strb	r0, [r4, #0]
}
 8002680:	bd70      	pop	{r4, r5, r6, pc}

08002682 <GetDevAddr>:
{
 8002682:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002684:	f000 fd22 	bl	80030cc <HAL_GetUIDw0>
 8002688:	0004      	movs	r4, r0
 800268a:	f000 fd25 	bl	80030d8 <HAL_GetUIDw1>
 800268e:	4044      	eors	r4, r0
 8002690:	f000 fd28 	bl	80030e4 <HAL_GetUIDw2>
 8002694:	4060      	eors	r0, r4
}
 8002696:	bd10      	pop	{r4, pc}

08002698 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002698:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800269a:	2101      	movs	r1, #1
 800269c:	2004      	movs	r0, #4
 800269e:	f00b f8c3 	bl	800d828 <UTIL_LPM_SetStopMode>
}
 80026a2:	bd10      	pop	{r4, pc}

080026a4 <UTIL_ADV_TRACE_PostSendHook>:
{
 80026a4:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80026a6:	2100      	movs	r1, #0
 80026a8:	2004      	movs	r0, #4
 80026aa:	f00b f8bd 	bl	800d828 <UTIL_LPM_SetStopMode>
}
 80026ae:	bd10      	pop	{r4, pc}

080026b0 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80026b0:	2000      	movs	r0, #0
 80026b2:	4770      	bx	lr

080026b4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80026b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 80026b6:	f7ff fe1b 	bl	80022f0 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80026ba:	bd10      	pop	{r4, pc}

080026bc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80026bc:	b507      	push	{r0, r1, r2, lr}
 80026be:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 80026c0:	9801      	ldr	r0, [sp, #4]
 80026c2:	f7ff fe25 	bl	8002310 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80026c6:	bd07      	pop	{r0, r1, r2, pc}

080026c8 <HAL_MSDelay>:

void HAL_MSDelay(__IO uint32_t Delay)
{
 80026c8:	b507      	push	{r0, r1, r2, lr}
 80026ca:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMicroSec(Delay);   /* based on RTC */
 80026cc:	9801      	ldr	r0, [sp, #4]
 80026ce:	f7ff fe33 	bl	8002338 <RTC_IF_DelayMicroSec>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80026d2:	bd07      	pop	{r0, r1, r2, pc}

080026d4 <DBG_ConfigForLpm.part.0>:
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
  {
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <DBG_ConfigForLpm.part.0+0x1c>)
void DBG_ConfigForLpm(uint8_t enableDbg)
 80026d8:	b510      	push	{r4, lr}
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 80026da:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80026dc:	03db      	lsls	r3, r3, #15
 80026de:	430b      	orrs	r3, r1
 80026e0:	6353      	str	r3, [r2, #52]	; 0x34

    HAL_DBGMCU_EnableDBGSleepMode();
 80026e2:	f000 fd05 	bl	80030f0 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 80026e6:	f000 fd0b 	bl	8003100 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 80026ea:	f000 fd11 	bl	8003110 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 80026ee:	bd10      	pop	{r4, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <DBG_Disable>:
{
 80026f4:	b510      	push	{r4, lr}
 80026f6:	f7ff ffed 	bl	80026d4 <DBG_ConfigForLpm.part.0>
}
 80026fa:	bd10      	pop	{r4, pc}

080026fc <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 80026fc:	4770      	bx	lr

080026fe <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 80026fe:	2000      	movs	r0, #0
 8002700:	4770      	bx	lr
	...

08002704 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance        = USART2;
 8002704:	480a      	ldr	r0, [pc, #40]	; (8002730 <MX_USART2_UART_Init+0x2c>)
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <MX_USART2_UART_Init+0x30>)
{
 8002708:	b510      	push	{r4, lr}
  huart2.Instance        = USART2;
 800270a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate   = USART_BAUDRATE;
 800270c:	23e1      	movs	r3, #225	; 0xe1
 800270e:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits   = UART_STOPBITS_1;
  huart2.Init.Parity     = UART_PARITY_NONE;
  huart2.Init.Mode       = UART_MODE_TX;
 8002710:	2208      	movs	r2, #8
  huart2.Init.BaudRate   = USART_BAUDRATE;
 8002712:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002714:	2300      	movs	r3, #0
  huart2.Init.Mode       = UART_MODE_TX;
 8002716:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002718:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits   = UART_STOPBITS_1;
 800271a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity     = UART_PARITY_NONE;
 800271c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800271e:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002720:	f003 fa8e 	bl	8005c40 <HAL_UART_Init>
 8002724:	2800      	cmp	r0, #0
 8002726:	d001      	beq.n	800272c <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 8002728:	f7ff fbb6 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800272c:	bd10      	pop	{r4, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	20000398 	.word	0x20000398
 8002734:	40004400 	.word	0x40004400

08002738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273a:	0005      	movs	r5, r0
 800273c:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273e:	2214      	movs	r2, #20
 8002740:	2100      	movs	r1, #0
 8002742:	a804      	add	r0, sp, #16
 8002744:	f00b fd27 	bl	800e196 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002748:	2224      	movs	r2, #36	; 0x24
 800274a:	2100      	movs	r1, #0
 800274c:	a809      	add	r0, sp, #36	; 0x24
 800274e:	f00b fd22 	bl	800e196 <memset>

  if (uartHandle->Instance == USART2)
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_UART_MspInit+0xf8>)
 8002754:	682a      	ldr	r2, [r5, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d168      	bne.n	800282c <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 800275a:	2201      	movs	r2, #1
 800275c:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800275e:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8002760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002762:	4311      	orrs	r1, r2
 8002764:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002766:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002768:	4011      	ands	r1, r2
 800276a:	9101      	str	r1, [sp, #4]
 800276c:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 800276e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002770:	4311      	orrs	r1, r2
 8002772:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002776:	4011      	ands	r1, r2
 8002778:	9102      	str	r1, [sp, #8]
 800277a:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002780:	0289      	lsls	r1, r1, #10
 8002782:	4308      	orrs	r0, r1
 8002784:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 8002786:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002788:	4310      	orrs	r0, r2
 800278a:	6318      	str	r0, [r3, #48]	; 0x30
 800278c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800278e:	4002      	ands	r2, r0
 8002790:	9203      	str	r2, [sp, #12]
 8002792:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002796:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8002798:	4311      	orrs	r1, r2
 800279a:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800279c:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800279e:	960c      	str	r6, [sp, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027a0:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a2:	f001 ff47 	bl	8004634 <HAL_RCCEx_PeriphCLKConfig>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d001      	beq.n	80027ae <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80027aa:	f7ff fb75 	bl	8001e98 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80027ae:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80027b4:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80027b6:	a904      	add	r1, sp, #16
 80027b8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80027bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 80027be:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80027c2:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80027c4:	f001 f980 	bl	8003ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80027c8:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80027ca:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80027cc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80027ce:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80027d0:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80027d2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80027d6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80027da:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80027dc:	f001 f974 	bl	8003ac8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80027e0:	4f15      	ldr	r7, [pc, #84]	; (8002838 <HAL_UART_MspInit+0x100>)
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_UART_MspInit+0x104>)
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027e4:	0038      	movs	r0, r7
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80027e6:	603b      	str	r3, [r7, #0]
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80027e8:	2310      	movs	r3, #16
 80027ea:	60bb      	str	r3, [r7, #8]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80027ec:	3370      	adds	r3, #112	; 0x70
    hdma_usart2_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 80027ee:	607e      	str	r6, [r7, #4]
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80027f0:	60fc      	str	r4, [r7, #12]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80027f2:	613b      	str	r3, [r7, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f4:	617c      	str	r4, [r7, #20]
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80027f6:	61bc      	str	r4, [r7, #24]
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 80027f8:	61fc      	str	r4, [r7, #28]
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80027fa:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027fc:	f001 f800 	bl	8003800 <HAL_DMA_Init>
 8002800:	42a0      	cmp	r0, r4
 8002802:	d001      	beq.n	8002808 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002804:	f7ff fb48 	bl	8001e98 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002808:	2201      	movs	r2, #1
 800280a:	2100      	movs	r1, #0
 800280c:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 800280e:	66ef      	str	r7, [r5, #108]	; 0x6c
 8002810:	62bd      	str	r5, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002812:	f000 ffaf 	bl	8003774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8002816:	200b      	movs	r0, #11
 8002818:	f000 ffd6 	bl	80037c8 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 800281c:	201c      	movs	r0, #28
 800281e:	2201      	movs	r2, #1
 8002820:	2100      	movs	r1, #0
 8002822:	f000 ffa7 	bl	8003774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8002826:	201c      	movs	r0, #28
 8002828:	f000 ffce 	bl	80037c8 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 800282c:	b013      	add	sp, #76	; 0x4c
 800282e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002830:	40004400 	.word	0x40004400
 8002834:	40021000 	.word	0x40021000
 8002838:	20000350 	.word	0x20000350
 800283c:	40020080 	.word	0x40020080

08002840 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_UART_MspDeInit+0x30>)
 8002842:	6802      	ldr	r2, [r0, #0]
{
 8002844:	b510      	push	{r4, lr}
 8002846:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8002848:	429a      	cmp	r2, r3
 800284a:	d10f      	bne.n	800286c <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 800284c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_UART_MspDeInit+0x34>)
 8002850:	4909      	ldr	r1, [pc, #36]	; (8002878 <HAL_UART_MspDeInit+0x38>)
 8002852:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002854:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8002856:	400b      	ands	r3, r1
 8002858:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 800285a:	210c      	movs	r1, #12
 800285c:	f001 f9fa 	bl	8003c54 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002860:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002862:	f001 f811 	bl	8003888 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002866:	201c      	movs	r0, #28
 8002868:	f000 ffba 	bl	80037e0 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800286c:	bd10      	pop	{r4, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40004400 	.word	0x40004400
 8002874:	40021000 	.word	0x40021000
 8002878:	fffdffff 	.word	0xfffdffff

0800287c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800287c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <vcom_Init+0x14>)
 8002880:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002882:	f7ff fa9f 	bl	8001dc4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002886:	f7ff ff3d 	bl	8002704 <MX_USART2_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800288a:	2000      	movs	r0, #0
 800288c:	bd10      	pop	{r4, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	2000041c 	.word	0x2000041c

08002894 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <vcom_DeInit+0x28>)
 8002898:	0292      	lsls	r2, r2, #10
 800289a:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 800289c:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 800289e:	430a      	orrs	r2, r1
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 80028a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028a4:	4906      	ldr	r1, [pc, #24]	; (80028c0 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 80028a8:	400a      	ands	r2, r1
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&huart2);
 80028ac:	f7ff ffc8 	bl	8002840 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80028b0:	200b      	movs	r0, #11
 80028b2:	f000 ff95 	bl	80037e0 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80028b6:	2000      	movs	r0, #0
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	40021000 	.word	0x40021000
 80028c0:	fffdffff 	.word	0xfffdffff
 80028c4:	20000398 	.word	0x20000398

080028c8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80028c8:	b510      	push	{r4, lr}
 80028ca:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80028cc:	0001      	movs	r1, r0
 80028ce:	4802      	ldr	r0, [pc, #8]	; (80028d8 <vcom_Trace_DMA+0x10>)
 80028d0:	f002 fd74 	bl	80053bc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80028d4:	2000      	movs	r0, #0
 80028d6:	bd10      	pop	{r4, pc}
 80028d8:	20000398 	.word	0x20000398

080028dc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80028dc:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80028de:	2180      	movs	r1, #128	; 0x80

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80028e0:	4c10      	ldr	r4, [pc, #64]	; (8002924 <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 80028e2:	4d11      	ldr	r5, [pc, #68]	; (8002928 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80028e4:	9a01      	ldr	r2, [sp, #4]
  RxCpltCallback = RxCb;
 80028e6:	6068      	str	r0, [r5, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80028e8:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80028ea:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80028ec:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80028ee:	f003 fa59 	bl	8005da4 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	0252      	lsls	r2, r2, #9
 80028f8:	69d9      	ldr	r1, [r3, #28]
 80028fa:	4211      	tst	r1, r2
 80028fc:	d1fc      	bne.n	80028f8 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	03d2      	lsls	r2, r2, #15
 8002902:	69d9      	ldr	r1, [r3, #28]
 8002904:	4211      	tst	r1, r2
 8002906:	d0fc      	beq.n	8002902 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002908:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800290a:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&huart2);
 8002910:	f003 fa90 	bl	8005e34 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002914:	0029      	movs	r1, r5
 8002916:	2201      	movs	r2, #1
 8002918:	0020      	movs	r0, r4
 800291a:	3108      	adds	r1, #8
 800291c:	f003 fa0c 	bl	8005d38 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002920:	2000      	movs	r0, #0
 8002922:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002924:	20000398 	.word	0x20000398
 8002928:	2000041c 	.word	0x2000041c

0800292c <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 800292c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800292e:	4b02      	ldr	r3, [pc, #8]	; (8002938 <HAL_UART_TxCpltCallback+0xc>)
 8002930:	2000      	movs	r0, #0
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002936:	bd10      	pop	{r4, pc}
 8002938:	2000041c 	.word	0x2000041c

0800293c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 800293c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 800293e:	4c0a      	ldr	r4, [pc, #40]	; (8002968 <HAL_UART_RxCpltCallback+0x2c>)
{
 8002940:	0005      	movs	r5, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8002942:	6863      	ldr	r3, [r4, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_UART_RxCpltCallback+0x1c>
 8002948:	1d02      	adds	r2, r0, #4
 800294a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800294c:	2a00      	cmp	r2, #0
 800294e:	d103      	bne.n	8002958 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002950:	0020      	movs	r0, r4
 8002952:	2101      	movs	r1, #1
 8002954:	3008      	adds	r0, #8
 8002956:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8002958:	0021      	movs	r1, r4
 800295a:	0028      	movs	r0, r5
 800295c:	2201      	movs	r2, #1
 800295e:	3108      	adds	r1, #8
 8002960:	f003 f9ea 	bl	8005d38 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002964:	bd70      	pop	{r4, r5, r6, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	2000041c 	.word	0x2000041c

0800296c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800296c:	480d      	ldr	r0, [pc, #52]	; (80029a4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800296e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002972:	490e      	ldr	r1, [pc, #56]	; (80029ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <LoopForever+0xe>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002988:	4c0b      	ldr	r4, [pc, #44]	; (80029b8 <LoopForever+0x16>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002996:	f000 fb4b 	bl	8003030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f00b fbcf 	bl	800e13c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299e:	f7ff fa71 	bl	8001e84 <main>

080029a2 <LoopForever>:

LoopForever:
    b LoopForever
 80029a2:	e7fe      	b.n	80029a2 <LoopForever>
   ldr   r0, =_estack
 80029a4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ac:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80029b0:	0800eeb8 	.word	0x0800eeb8
  ldr r2, =_sbss
 80029b4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80029b8:	20001818 	.word	0x20001818

080029bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC1_COMP_IRQHandler>
	...

080029c0 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80029c0:	23fa      	movs	r3, #250	; 0xfa
{
 80029c2:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80029c4:	009b      	lsls	r3, r3, #2
{
 80029c6:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	0013      	movs	r3, r2
 80029cc:	000a      	movs	r2, r1
 80029ce:	0001      	movs	r1, r0
 80029d0:	4804      	ldr	r0, [pc, #16]	; (80029e4 <BSP_SPI1_SendRecv+0x24>)
 80029d2:	f002 fb7f 	bl	80050d4 <HAL_SPI_TransmitReceive>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d101      	bne.n	80029de <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 80029da:	0020      	movs	r0, r4
  }
  return ret;
}
 80029dc:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80029de:	2006      	movs	r0, #6
 80029e0:	4240      	negs	r0, r0
  return ret;
 80029e2:	e7fb      	b.n	80029dc <BSP_SPI1_SendRecv+0x1c>
 80029e4:	20000428 	.word	0x20000428

080029e8 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <MX_SPI1_Init+0x54>)
{
 80029ea:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 80029ec:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80029ee:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80029f0:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 80029f6:	33fc      	adds	r3, #252	; 0xfc
 80029f8:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80029fa:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80029fc:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029fe:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a00:	6145      	str	r5, [r0, #20]
{
 8002a02:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002a04:	f001 fe06 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8002a08:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8002a0c:	490d      	ldr	r1, [pc, #52]	; (8002a44 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8002a0e:	4290      	cmp	r0, r2
 8002a10:	d80d      	bhi.n	8002a2e <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a12:	2300      	movs	r3, #0
 8002a14:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002a16:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a18:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002a1a:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002a1c:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8002a1e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002a20:	0020      	movs	r0, r4
 8002a22:	f002 faef 	bl	8005004 <HAL_SPI_Init>
 8002a26:	1e43      	subs	r3, r0, #1
 8002a28:	4198      	sbcs	r0, r3
  return ret;
 8002a2a:	b2c0      	uxtb	r0, r0
}
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8002a2e:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8002a30:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8002a32:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d0ec      	beq.n	8002a12 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8002a38:	0840      	lsrs	r0, r0, #1
 8002a3a:	e7e8      	b.n	8002a0e <MX_SPI1_Init+0x26>
 8002a3c:	40013000 	.word	0x40013000
 8002a40:	00989680 	.word	0x00989680
 8002a44:	0800e36c 	.word	0x0800e36c

08002a48 <BSP_SPI1_Init>:
{
 8002a48:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8002a4a:	4d1b      	ldr	r5, [pc, #108]	; (8002ab8 <BSP_SPI1_Init+0x70>)
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002a4e:	0028      	movs	r0, r5
{
 8002a50:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8002a52:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002a54:	f002 fc94 	bl	8005380 <HAL_SPI_GetState>
 8002a58:	1e04      	subs	r4, r0, #0
 8002a5a:	d002      	beq.n	8002a62 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002a5c:	2000      	movs	r0, #0
}
 8002a5e:	b007      	add	sp, #28
 8002a60:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	4a16      	ldr	r2, [pc, #88]	; (8002ac0 <BSP_SPI1_Init+0x78>)
 8002a66:	015b      	lsls	r3, r3, #5
 8002a68:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002a72:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002a74:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a78:	3301      	adds	r3, #1
 8002a7a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002a7c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002a7e:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002a80:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002a82:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002a84:	f001 f820 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002a88:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002a8a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002a8c:	a901      	add	r1, sp, #4
 8002a8e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002a90:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002a92:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002a94:	f001 f818 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002a98:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002a9a:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <BSP_SPI1_Init+0x7c>)
 8002a9c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002a9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002aa0:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002aa2:	f001 f811 	bl	8003ac8 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002aa6:	0028      	movs	r0, r5
 8002aa8:	f7ff ff9e 	bl	80029e8 <MX_SPI1_Init>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d0d5      	beq.n	8002a5c <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8002ab0:	2008      	movs	r0, #8
 8002ab2:	4240      	negs	r0, r0
  return ret;
 8002ab4:	e7d3      	b.n	8002a5e <BSP_SPI1_Init+0x16>
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	20000428 	.word	0x20000428
 8002abc:	40013000 	.word	0x40013000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	50000400 	.word	0x50000400

08002ac8 <BSP_ULT_TRIG_Init>:
uint32_t BSP_GetVersion(void)
{
  return __B_L072Z_LRWAN1_BSP_VERSION;
}

void BSP_ULT_TRIG_Init(){
 8002ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef  GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2201      	movs	r2, #1
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <BSP_ULT_TRIG_Init+0x38>)
	GPIO_InitStruct.Pin = GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad2:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ada:	4011      	ands	r1, r2
 8002adc:	9100      	str	r1, [sp, #0]
 8002ade:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	6359      	str	r1, [r3, #52]	; 0x34
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	3303      	adds	r3, #3
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af4:	9202      	str	r2, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f000 ffe6 	bl	8003ac8 <HAL_GPIO_Init>
}
 8002afc:	b007      	add	sp, #28
 8002afe:	bd00      	pop	{pc}
 8002b00:	40021000 	.word	0x40021000

08002b04 <BSP_ULT_TRIG_On>:

void BSP_ULT_TRIG_On(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002b04:	2201      	movs	r2, #1
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	20a0      	movs	r0, #160	; 0xa0
void BSP_ULT_TRIG_On(){
 8002b0a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002b0c:	4091      	lsls	r1, r2
 8002b0e:	05c0      	lsls	r0, r0, #23
 8002b10:	f001 f926 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8002b14:	bd10      	pop	{r4, pc}

08002b16 <BSP_ULT_TRIG_Off>:

void BSP_ULT_TRIG_Off(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	20a0      	movs	r0, #160	; 0xa0
void BSP_ULT_TRIG_Off(){
 8002b1a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	0049      	lsls	r1, r1, #1
 8002b20:	05c0      	lsls	r0, r0, #23
 8002b22:	f001 f91d 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8002b26:	bd10      	pop	{r4, pc}

08002b28 <BSP_ULT_ECHO_Init>:

void BSP_ULT_ECHO_Init(){
 8002b28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef  GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <BSP_ULT_ECHO_Init+0x34>)

	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	4311      	orrs	r1, r2
 8002b36:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3a:	4011      	ands	r1, r2
 8002b3c:	9100      	str	r1, [sp, #0]
 8002b3e:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b42:	430a      	orrs	r2, r1
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4c:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b50:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f000 ffb8 	bl	8003ac8 <HAL_GPIO_Init>
}
 8002b58:	b007      	add	sp, #28
 8002b5a:	bd00      	pop	{pc}
 8002b5c:	40021000 	.word	0x40021000

08002b60 <BSP_ULT_ECHO_Read>:

uint32_t BSP_ULT_ECHO_Read(){
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002b60:	2180      	movs	r1, #128	; 0x80
 8002b62:	20a0      	movs	r0, #160	; 0xa0
uint32_t BSP_ULT_ECHO_Read(){
 8002b64:	b510      	push	{r4, lr}
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002b66:	0089      	lsls	r1, r1, #2
 8002b68:	05c0      	lsls	r0, r0, #23
 8002b6a:	f001 f8f3 	bl	8003d54 <HAL_GPIO_ReadPin>
}
 8002b6e:	bd10      	pop	{r4, pc}

08002b70 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002b70:	b500      	push	{lr}
 8002b72:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002b74:	2803      	cmp	r0, #3
 8002b76:	d80c      	bhi.n	8002b92 <BSP_LED_Init+0x22>
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <BSP_LED_Init+0x78>)
 8002b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7c:	f7fd fad6 	bl	800012c <__gnu_thumb1_case_uqi>
 8002b80:	2b231b02 	.word	0x2b231b02
 8002b84:	2102      	movs	r1, #2
 8002b86:	430a      	orrs	r2, r1
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <BSP_LED_Init+0x7c>)
 8002b94:	0042      	lsls	r2, r0, #1
 8002b96:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002b98:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002b9a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	3303      	adds	r3, #3
 8002ba6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <BSP_LED_Init+0x80>)
 8002baa:	a905      	add	r1, sp, #20
 8002bac:	58c0      	ldr	r0, [r0, r3]
 8002bae:	f000 ff8b 	bl	8003ac8 <HAL_GPIO_Init>
}
 8002bb2:	b00b      	add	sp, #44	; 0x2c
 8002bb4:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	9302      	str	r3, [sp, #8]
 8002bc2:	9b02      	ldr	r3, [sp, #8]
 8002bc4:	e7e5      	b.n	8002b92 <BSP_LED_Init+0x22>
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	400b      	ands	r3, r1
 8002bd0:	9303      	str	r3, [sp, #12]
 8002bd2:	9b03      	ldr	r3, [sp, #12]
 8002bd4:	e7dd      	b.n	8002b92 <BSP_LED_Init+0x22>
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	400b      	ands	r3, r1
 8002be0:	9304      	str	r3, [sp, #16]
 8002be2:	9b04      	ldr	r3, [sp, #16]
 8002be4:	e7d5      	b.n	8002b92 <BSP_LED_Init+0x22>
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	40021000 	.word	0x40021000
 8002bec:	0800e38c 	.word	0x0800e38c
 8002bf0:	2000004c 	.word	0x2000004c

08002bf4 <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <BSP_LED_On+0x18>)
{
 8002bf6:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002bf8:	0042      	lsls	r2, r0, #1
 8002bfa:	5ad1      	ldrh	r1, [r2, r3]
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <BSP_LED_On+0x1c>)
 8002bfe:	0080      	lsls	r0, r0, #2
 8002c00:	2201      	movs	r2, #1
 8002c02:	58c0      	ldr	r0, [r0, r3]
 8002c04:	f001 f8ac 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	0800e38c 	.word	0x0800e38c
 8002c10:	2000004c 	.word	0x2000004c

08002c14 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <BSP_LED_Off+0x18>)
{
 8002c16:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c18:	0042      	lsls	r2, r0, #1
 8002c1a:	5ad1      	ldrh	r1, [r2, r3]
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <BSP_LED_Off+0x1c>)
 8002c1e:	0080      	lsls	r0, r0, #2
 8002c20:	2200      	movs	r2, #0
 8002c22:	58c0      	ldr	r0, [r0, r3]
 8002c24:	f001 f89c 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	0800e38c 	.word	0x0800e38c
 8002c30:	2000004c 	.word	0x2000004c

08002c34 <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <BSP_LED_Toggle+0x14>)
{
 8002c36:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c38:	0042      	lsls	r2, r0, #1
 8002c3a:	5ad1      	ldrh	r1, [r2, r3]
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <BSP_LED_Toggle+0x18>)
 8002c3e:	0080      	lsls	r0, r0, #2
 8002c40:	58c0      	ldr	r0, [r0, r3]
 8002c42:	f001 f893 	bl	8003d6c <HAL_GPIO_TogglePin>
}
 8002c46:	bd10      	pop	{r4, pc}
 8002c48:	0800e38c 	.word	0x0800e38c
 8002c4c:	2000004c 	.word	0x2000004c

08002c50 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8002c50:	2005      	movs	r0, #5
 8002c52:	4770      	bx	lr

08002c54 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8002c54:	0002      	movs	r2, r0
 8002c56:	b510      	push	{r4, lr}

  if (state == SET)
 8002c58:	2801      	cmp	r0, #1
 8002c5a:	d109      	bne.n	8002c70 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	20a0      	movs	r0, #160	; 0xa0
 8002c60:	0149      	lsls	r1, r1, #5
 8002c62:	05c0      	lsls	r0, r0, #23
 8002c64:	f001 f87c 	bl	8003d60 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8002c68:	2005      	movs	r0, #5
 8002c6a:	f7ff fd27 	bl	80026bc <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8002c6e:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	20a0      	movs	r0, #160	; 0xa0
 8002c74:	2200      	movs	r2, #0
 8002c76:	0149      	lsls	r1, r1, #5
 8002c78:	05c0      	lsls	r0, r0, #23
 8002c7a:	f001 f871 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8002c7e:	e7f6      	b.n	8002c6e <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08002c80 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8002c80:	2300      	movs	r3, #0
{
 8002c82:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c84:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002c86:	2204      	movs	r2, #4
{
 8002c88:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c8a:	4c65      	ldr	r4, [pc, #404]	; (8002e20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8002c8c:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002c90:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c92:	433b      	orrs	r3, r7
 8002c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002c98:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002c9a:	403b      	ands	r3, r7
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002ca0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ca2:	4e60      	ldr	r6, [pc, #384]	; (8002e24 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002ca4:	433b      	orrs	r3, r7
 8002ca6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ca8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002caa:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002cac:	403b      	ands	r3, r7
 8002cae:	9302      	str	r3, [sp, #8]
 8002cb0:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8002cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cb4:	433b      	orrs	r3, r7
 8002cb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cba:	403b      	ands	r3, r7
 8002cbc:	9303      	str	r3, [sp, #12]
 8002cbe:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002cc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002cc8:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002cca:	4013      	ands	r3, r2
 8002ccc:	9304      	str	r3, [sp, #16]
 8002cce:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cd0:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002cd2:	0001      	movs	r1, r0
 8002cd4:	4854      	ldr	r0, [pc, #336]	; (8002e28 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002cd6:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cd8:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 8002cda:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002cdc:	f000 fef4 	bl	8003ac8 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ce0:	4b52      	ldr	r3, [pc, #328]	; (8002e2c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002ce2:	a80c      	add	r0, sp, #48	; 0x30
 8002ce4:	0001      	movs	r1, r0
 8002ce6:	4850      	ldr	r0, [pc, #320]	; (8002e28 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ce8:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cea:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002cec:	f000 feec 	bl	8003ac8 <HAL_GPIO_Init>
 8002cf0:	a80c      	add	r0, sp, #48	; 0x30
 8002cf2:	0001      	movs	r1, r0
 8002cf4:	484c      	ldr	r0, [pc, #304]	; (8002e28 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002cf6:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cf8:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002cfa:	f000 fee5 	bl	8003ac8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002cfe:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002d00:	a80c      	add	r0, sp, #48	; 0x30
 8002d02:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002d04:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002d06:	484a      	ldr	r0, [pc, #296]	; (8002e30 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002d08:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002d0a:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002d0c:	f000 fedc 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d12:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002d14:	433b      	orrs	r3, r7
 8002d16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002d1c:	403b      	ands	r3, r7
 8002d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002d22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d24:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002d26:	432b      	orrs	r3, r5
 8002d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d2c:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002d2e:	402b      	ands	r3, r5
 8002d30:	930a      	str	r3, [sp, #40]	; 0x28
 8002d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002d34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d36:	432b      	orrs	r3, r5
 8002d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002d3e:	402b      	ands	r3, r5
 8002d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002d44:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d46:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002d48:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d4a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002d4c:	3380      	adds	r3, #128	; 0x80
 8002d4e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d52:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d54:	f000 feb8 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002d58:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d5a:	a811      	add	r0, sp, #68	; 0x44
 8002d5c:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002d5e:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002d62:	3340      	adds	r3, #64	; 0x40
 8002d64:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d66:	f000 feaf 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002d6a:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d6c:	a811      	add	r0, sp, #68	; 0x44
 8002d6e:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002d70:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d72:	482d      	ldr	r0, [pc, #180]	; (8002e28 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002d74:	3308      	adds	r3, #8
 8002d76:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d78:	f000 fea6 	bl	8003ac8 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8002d7c:	2080      	movs	r0, #128	; 0x80
 8002d7e:	0200      	lsls	r0, r0, #8
 8002d80:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d82:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 8002d84:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 8002d86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002d88:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8002d8a:	432b      	orrs	r3, r5
 8002d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002d90:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8002d92:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002d94:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 8002d96:	9305      	str	r3, [sp, #20]
 8002d98:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002d9a:	f000 fe95 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	002a      	movs	r2, r5
 8002da2:	0030      	movs	r0, r6
 8002da4:	0209      	lsls	r1, r1, #8
 8002da6:	f000 ffdb 	bl	8003d60 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8002daa:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002dac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002dae:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002db0:	432b      	orrs	r3, r5
 8002db2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002db4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002db6:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002db8:	402b      	ands	r3, r5
 8002dba:	9306      	str	r3, [sp, #24]
 8002dbc:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8002dbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dc0:	432b      	orrs	r3, r5
 8002dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dc6:	402b      	ands	r3, r5
 8002dc8:	9307      	str	r3, [sp, #28]
 8002dca:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8002dcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	9308      	str	r3, [sp, #32]
 8002dd8:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8002dda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002de0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002de2:	0014      	movs	r4, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	9311      	str	r3, [sp, #68]	; 0x44
 8002de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002dee:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002df0:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002df2:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002df4:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002df6:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df8:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002dfa:	f000 fe65 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8002dfe:	0030      	movs	r0, r6
 8002e00:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8002e02:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8002e04:	f000 fe60 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002e08:	a90c      	add	r1, sp, #48	; 0x30
 8002e0a:	4809      	ldr	r0, [pc, #36]	; (8002e30 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8002e0c:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002e0e:	f000 fe5b 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8002e12:	4807      	ldr	r0, [pc, #28]	; (8002e30 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8002e14:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8002e16:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8002e18:	f000 fe56 	bl	8003ac8 <HAL_GPIO_Init>
}
 8002e1c:	b017      	add	sp, #92	; 0x5c
 8002e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	10110000 	.word	0x10110000
 8002e28:	50000400 	.word	0x50000400
 8002e2c:	10310000 	.word	0x10310000
 8002e30:	50000800 	.word	0x50000800

08002e34 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8002e36:	2608      	movs	r6, #8
{
 8002e38:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8002e3a:	0032      	movs	r2, r6
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	a803      	add	r0, sp, #12
 8002e40:	f00b f9a9 	bl	800e196 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8002e44:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e46:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e48:	4c22      	ldr	r4, [pc, #136]	; (8002ed4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e4a:	4f23      	ldr	r7, [pc, #140]	; (8002ed8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e4c:	4669      	mov	r1, sp
 8002e4e:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8002e50:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e52:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e54:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e56:	f000 fe37 	bl	8003ac8 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e5c:	4669      	mov	r1, sp
 8002e5e:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e60:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e62:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e64:	f000 fe30 	bl	8003ac8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e68:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e6a:	4669      	mov	r1, sp
 8002e6c:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e6e:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e70:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e72:	f000 fe29 	bl	8003ac8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e76:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e78:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e7a:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e7c:	4818      	ldr	r0, [pc, #96]	; (8002ee0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e7e:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e80:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e82:	f000 fe21 	bl	8003ac8 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e86:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e88:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002e8c:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e8e:	05ed      	lsls	r5, r5, #23
 8002e90:	0028      	movs	r0, r5
 8002e92:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e94:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002e96:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e98:	f000 fe16 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002e9c:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002e9e:	0028      	movs	r0, r5
 8002ea0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002ea2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ea4:	f000 fe10 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ea8:	0020      	movs	r0, r4
 8002eaa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002eac:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002eae:	f000 fe0b 	bl	8003ac8 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8002eb2:	0039      	movs	r1, r7
 8002eb4:	0028      	movs	r0, r5
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f000 ff52 	bl	8003d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8002ebc:	0028      	movs	r0, r5
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2140      	movs	r1, #64	; 0x40
 8002ec2:	f000 ff4d 	bl	8003d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	0031      	movs	r1, r6
 8002eca:	0020      	movs	r0, r4
 8002ecc:	f000 ff48 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8002ed0:	b00b      	add	sp, #44	; 0x2c
 8002ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed4:	50000400 	.word	0x50000400
 8002ed8:	10110000 	.word	0x10110000
 8002edc:	10310000 	.word	0x10310000
 8002ee0:	50000800 	.word	0x50000800

08002ee4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 8002ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ee6:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eec:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eee:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8002ef0:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8002ef2:	4e11      	ldr	r6, [pc, #68]	; (8002f38 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 8002ef4:	4d11      	ldr	r5, [pc, #68]	; (8002f3c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 8002ef6:	00e3      	lsls	r3, r4, #3
 8002ef8:	18f6      	adds	r6, r6, r3
 8002efa:	00a7      	lsls	r7, r4, #2
 8002efc:	5979      	ldr	r1, [r7, r5]
 8002efe:	0030      	movs	r0, r6
 8002f00:	f000 fdc9 	bl	8003a96 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	2100      	movs	r1, #0
 8002f08:	59da      	ldr	r2, [r3, r7]
 8002f0a:	0030      	movs	r0, r6
 8002f0c:	f000 fdbc 	bl	8003a88 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8002f10:	002b      	movs	r3, r5
 8002f12:	3310      	adds	r3, #16
 8002f14:	56e6      	ldrsb	r6, [r4, r3]
 8002f16:	3514      	adds	r5, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	0030      	movs	r0, r6
 8002f1c:	5979      	ldr	r1, [r7, r5]
 8002f1e:	f000 fc29 	bl	8003774 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8002f22:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8002f24:	0030      	movs	r0, r6
 8002f26:	f000 fc4f 	bl	80037c8 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8002f2a:	2c04      	cmp	r4, #4
 8002f2c:	d1e1      	bne.n	8002ef2 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2e:	9b01      	ldr	r3, [sp, #4]
 8002f30:	f383 8810 	msr	PRIMASK, r3
}
 8002f34:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	200004d0 	.word	0x200004d0
 8002f3c:	0800e398 	.word	0x0800e398

08002f40 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 8002f40:	2000      	movs	r0, #0
 8002f42:	4770      	bx	lr

08002f44 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8002f44:	3801      	subs	r0, #1
{
 8002f46:	b510      	push	{r4, lr}
  switch (state)
 8002f48:	2803      	cmp	r0, #3
 8002f4a:	d811      	bhi.n	8002f70 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8002f4c:	f7fd f8ee 	bl	800012c <__gnu_thumb1_case_uqi>
 8002f50:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8002f54:	20a0      	movs	r0, #160	; 0xa0
 8002f56:	2201      	movs	r2, #1
 8002f58:	2102      	movs	r1, #2
 8002f5a:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002f5c:	f000 ff00 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8002f60:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8002f62:	2201      	movs	r2, #1
 8002f64:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002f66:	4809      	ldr	r0, [pc, #36]	; (8002f8c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8002f68:	e7f8      	b.n	8002f5c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8002f6a:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	e7fa      	b.n	8002f66 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8002f70:	20a0      	movs	r0, #160	; 0xa0
 8002f72:	2200      	movs	r2, #0
 8002f74:	2102      	movs	r1, #2
 8002f76:	05c0      	lsls	r0, r0, #23
 8002f78:	f000 fef2 	bl	8003d60 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2104      	movs	r1, #4
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8002f82:	f000 feed 	bl	8003d60 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002f86:	2200      	movs	r2, #0
 8002f88:	e7f0      	b.n	8002f6c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	50000800 	.word	0x50000800

08002f90 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 8002f90:	2001      	movs	r0, #1
 8002f92:	4770      	bx	lr

08002f94 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 8002f94:	b530      	push	{r4, r5, lr}
 8002f96:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8002f98:	220c      	movs	r2, #12
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	a803      	add	r0, sp, #12
 8002f9e:	f00b f8fa 	bl	800e196 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa2:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002fa4:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002fa6:	4d0d      	ldr	r5, [pc, #52]	; (8002fdc <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 8002fa8:	a901      	add	r1, sp, #4
 8002faa:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002fac:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fae:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8002fb0:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002fb2:	f000 fd89 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	0021      	movs	r1, r4
 8002fba:	0028      	movs	r0, r5
 8002fbc:	f000 fed0 	bl	8003d60 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002fc0:	0020      	movs	r0, r4
 8002fc2:	f7ff fb7b 	bl	80026bc <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002fc8:	0028      	movs	r0, r5
 8002fca:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 8002fcc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002fce:	f000 fd7b 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_Delay(6);
 8002fd2:	2006      	movs	r0, #6
 8002fd4:	f7ff fb72 	bl	80026bc <HAL_Delay>
}
 8002fd8:	b007      	add	sp, #28
 8002fda:	bd30      	pop	{r4, r5, pc}
 8002fdc:	50000800 	.word	0x50000800

08002fe0 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 8002fe0:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 8002fe2:	f7ff fd31 	bl	8002a48 <BSP_SPI1_Init>
}
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8002fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8002fea:	240e      	movs	r4, #14
{
 8002fec:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8002fee:	446c      	add	r4, sp
{
 8002ff0:	80d8      	strh	r0, [r3, #6]
 8002ff2:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	0021      	movs	r1, r4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff fce1 	bl	80029c0 <BSP_SPI1_SendRecv>
  return rxData;
 8002ffe:	8820      	ldrh	r0, [r4, #0]
}
 8003000:	b004      	add	sp, #16
 8003002:	bd10      	pop	{r4, pc}

08003004 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8003004:	0002      	movs	r2, r0
 8003006:	b510      	push	{r4, lr}
  if (state == 0)
 8003008:	2800      	cmp	r0, #0
 800300a:	d106      	bne.n	800301a <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	20a0      	movs	r0, #160	; 0xa0
 8003010:	0209      	lsls	r1, r1, #8
 8003012:	05c0      	lsls	r0, r0, #23
 8003014:	f000 fea4 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8003018:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800301a:	2201      	movs	r2, #1
 800301c:	e7f6      	b.n	800300c <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08003020 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8003020:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8003022:	2102      	movs	r1, #2
 8003024:	4801      	ldr	r0, [pc, #4]	; (800302c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8003026:	f000 fe95 	bl	8003d54 <HAL_GPIO_ReadPin>
}
 800302a:	bd10      	pop	{r4, pc}
 800302c:	50000400 	.word	0x50000400

08003030 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <SystemInit+0x44>)
 8003034:	0052      	lsls	r2, r2, #1
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	490e      	ldr	r1, [pc, #56]	; (8003078 <SystemInit+0x48>)
 8003040:	400a      	ands	r2, r1
 8003042:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	490d      	ldr	r1, [pc, #52]	; (800307c <SystemInit+0x4c>)
 8003048:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800304a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800304c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	438a      	bics	r2, r1
 8003052:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	490a      	ldr	r1, [pc, #40]	; (8003080 <SystemInit+0x50>)
 8003058:	400a      	ands	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	4909      	ldr	r1, [pc, #36]	; (8003084 <SystemInit+0x54>)
 8003060:	400a      	ands	r2, r1
 8003062:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <SystemInit+0x58>)
 800306c:	0512      	lsls	r2, r2, #20
 800306e:	609a      	str	r2, [r3, #8]
#endif
}
 8003070:	4770      	bx	lr
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	40021000 	.word	0x40021000
 8003078:	88ff400c 	.word	0x88ff400c
 800307c:	fef6fff6 	.word	0xfef6fff6
 8003080:	fffbffff 	.word	0xfffbffff
 8003084:	ff02ffff 	.word	0xff02ffff
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800308c:	2302      	movs	r3, #2
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <HAL_Init+0x24>)
{
 8003090:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003092:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003094:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003096:	430b      	orrs	r3, r1
 8003098:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800309a:	f7ff fb09 	bl	80026b0 <HAL_InitTick>
 800309e:	1e04      	subs	r4, r0, #0
 80030a0:	d103      	bne.n	80030aa <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030a2:	f7ff f9af 	bl	8002404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80030a6:	0020      	movs	r0, r4
 80030a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80030aa:	2401      	movs	r4, #1
 80030ac:	e7fb      	b.n	80030a6 <HAL_Init+0x1a>
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	40022000 	.word	0x40022000

080030b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030b4:	4a03      	ldr	r2, [pc, #12]	; (80030c4 <HAL_IncTick+0x10>)
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <HAL_IncTick+0x14>)
 80030b8:	6811      	ldr	r1, [r2, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	185b      	adds	r3, r3, r1
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	4770      	bx	lr
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	200004f0 	.word	0x200004f0
 80030c8:	20000064 	.word	0x20000064

080030cc <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80030cc:	4b01      	ldr	r3, [pc, #4]	; (80030d4 <HAL_GetUIDw0+0x8>)
 80030ce:	6818      	ldr	r0, [r3, #0]
}
 80030d0:	4770      	bx	lr
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	1ff80050 	.word	0x1ff80050

080030d8 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80030d8:	4b01      	ldr	r3, [pc, #4]	; (80030e0 <HAL_GetUIDw1+0x8>)
 80030da:	6818      	ldr	r0, [r3, #0]
}
 80030dc:	4770      	bx	lr
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	1ff80054 	.word	0x1ff80054

080030e4 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80030e4:	4b01      	ldr	r3, [pc, #4]	; (80030ec <HAL_GetUIDw2+0x8>)
 80030e6:	6818      	ldr	r0, [r3, #0]
}
 80030e8:	4770      	bx	lr
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	1ff80064 	.word	0x1ff80064

080030f0 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80030f0:	2301      	movs	r3, #1
 80030f2:	4a02      	ldr	r2, [pc, #8]	; (80030fc <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80030f4:	6851      	ldr	r1, [r2, #4]
 80030f6:	430b      	orrs	r3, r1
 80030f8:	6053      	str	r3, [r2, #4]
}
 80030fa:	4770      	bx	lr
 80030fc:	40015800 	.word	0x40015800

08003100 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003100:	2302      	movs	r3, #2
 8003102:	4a02      	ldr	r2, [pc, #8]	; (800310c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003104:	6851      	ldr	r1, [r2, #4]
 8003106:	430b      	orrs	r3, r1
 8003108:	6053      	str	r3, [r2, #4]
}
 800310a:	4770      	bx	lr
 800310c:	40015800 	.word	0x40015800

08003110 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003110:	2304      	movs	r3, #4
 8003112:	4a02      	ldr	r2, [pc, #8]	; (800311c <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003114:	6851      	ldr	r1, [r2, #4]
 8003116:	430b      	orrs	r3, r1
 8003118:	6053      	str	r3, [r2, #4]
}
 800311a:	4770      	bx	lr
 800311c:	40015800 	.word	0x40015800

08003120 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <ADC_DelayMicroSecond+0x24>)
{
 8003122:	b513      	push	{r0, r1, r4, lr}
 8003124:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003126:	4908      	ldr	r1, [pc, #32]	; (8003148 <ADC_DelayMicroSecond+0x28>)
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f7fd f81d 	bl	8000168 <__udivsi3>
 800312e:	4344      	muls	r4, r0
 8003130:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8003132:	9b01      	ldr	r3, [sp, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d100      	bne.n	800313a <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8003138:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800313a:	9b01      	ldr	r3, [sp, #4]
 800313c:	3b01      	subs	r3, #1
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	e7f7      	b.n	8003132 <ADC_DelayMicroSecond+0x12>
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	20000060 	.word	0x20000060
 8003148:	000f4240 	.word	0x000f4240

0800314c <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 800314c:	2103      	movs	r1, #3
 800314e:	6803      	ldr	r3, [r0, #0]
{
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003154:	6898      	ldr	r0, [r3, #8]
 8003156:	4008      	ands	r0, r1
 8003158:	2801      	cmp	r0, #1
 800315a:	d001      	beq.n	8003160 <ADC_Disable+0x14>
  return HAL_OK;
 800315c:	2000      	movs	r0, #0
}
 800315e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4202      	tst	r2, r0
 8003164:	d0fa      	beq.n	800315c <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003166:	2205      	movs	r2, #5
 8003168:	689d      	ldr	r5, [r3, #8]
 800316a:	4015      	ands	r5, r2
 800316c:	2d01      	cmp	r5, #1
 800316e:	d119      	bne.n	80031a4 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8003170:	6898      	ldr	r0, [r3, #8]
 8003172:	3a03      	subs	r2, #3
 8003174:	4302      	orrs	r2, r0
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800317a:	f7ff fa9b 	bl	80026b4 <HAL_GetTick>
 800317e:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	422b      	tst	r3, r5
 8003186:	d0e9      	beq.n	800315c <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003188:	f7ff fa94 	bl	80026b4 <HAL_GetTick>
 800318c:	1b80      	subs	r0, r0, r6
 800318e:	280a      	cmp	r0, #10
 8003190:	d9f6      	bls.n	8003180 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003192:	2310      	movs	r3, #16
 8003194:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003196:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003198:	4313      	orrs	r3, r2
 800319a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800319e:	431d      	orrs	r5, r3
 80031a0:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 80031a2:	e7dc      	b.n	800315e <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a4:	2310      	movs	r3, #16
 80031a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80031a8:	4313      	orrs	r3, r2
 80031aa:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031ae:	4303      	orrs	r3, r0
 80031b0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80031b2:	e7d4      	b.n	800315e <ADC_Disable+0x12>

080031b4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031b4:	2103      	movs	r1, #3
 80031b6:	6803      	ldr	r3, [r0, #0]
{
 80031b8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031ba:	689a      	ldr	r2, [r3, #8]
{
 80031bc:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031be:	400a      	ands	r2, r1
 80031c0:	2a01      	cmp	r2, #1
 80031c2:	d104      	bne.n	80031ce <ADC_Enable+0x1a>
 80031c4:	6819      	ldr	r1, [r3, #0]
 80031c6:	4211      	tst	r1, r2
 80031c8:	d001      	beq.n	80031ce <ADC_Enable+0x1a>
  return HAL_OK;
 80031ca:	2000      	movs	r0, #0
}
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <ADC_Enable+0x6c>)
 80031d2:	4211      	tst	r1, r2
 80031d4:	d008      	beq.n	80031e8 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d6:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80031dc:	4313      	orrs	r3, r2
 80031de:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031e2:	4303      	orrs	r3, r0
 80031e4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80031e6:	e7f1      	b.n	80031cc <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80031e8:	2501      	movs	r5, #1
 80031ea:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80031ec:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80031ee:	432a      	orrs	r2, r5
 80031f0:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80031f2:	f7ff ff95 	bl	8003120 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80031f6:	f7ff fa5d 	bl	80026b4 <HAL_GetTick>
 80031fa:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	422b      	tst	r3, r5
 8003202:	d1e2      	bne.n	80031ca <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003204:	f7ff fa56 	bl	80026b4 <HAL_GetTick>
 8003208:	1b80      	subs	r0, r0, r6
 800320a:	280a      	cmp	r0, #10
 800320c:	d9f6      	bls.n	80031fc <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	2310      	movs	r3, #16
 8003210:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003212:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003214:	4313      	orrs	r3, r2
 8003216:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800321a:	431d      	orrs	r5, r3
 800321c:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800321e:	e7d5      	b.n	80031cc <ADC_Enable+0x18>
 8003220:	80000017 	.word	0x80000017

08003224 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003224:	2204      	movs	r2, #4
 8003226:	6803      	ldr	r3, [r0, #0]
{
 8003228:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800322a:	6899      	ldr	r1, [r3, #8]
{
 800322c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800322e:	4211      	tst	r1, r2
 8003230:	d101      	bne.n	8003236 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8003232:	2000      	movs	r0, #0
}
 8003234:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	4211      	tst	r1, r2
 800323a:	d006      	beq.n	800324a <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800323c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800323e:	0792      	lsls	r2, r2, #30
 8003240:	d403      	bmi.n	800324a <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003242:	2210      	movs	r2, #16
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800324a:	f7ff fa33 	bl	80026b4 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800324e:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8003250:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	4233      	tst	r3, r6
 8003258:	d0eb      	beq.n	8003232 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800325a:	f7ff fa2b 	bl	80026b4 <HAL_GetTick>
 800325e:	1b40      	subs	r0, r0, r5
 8003260:	280a      	cmp	r0, #10
 8003262:	d9f6      	bls.n	8003252 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003268:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800326a:	4313      	orrs	r3, r2
 800326c:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003270:	4303      	orrs	r3, r0
 8003272:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003274:	e7de      	b.n	8003234 <ADC_ConversionStop+0x10>
	...

08003278 <HAL_ADC_Init>:
{
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800327c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800327e:	2c00      	cmp	r4, #0
 8003280:	d01b      	beq.n	80032ba <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003282:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8003288:	0022      	movs	r2, r4
 800328a:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800328c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 800328e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003290:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8003292:	f7fe fccd 	bl	8001c30 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003296:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003298:	06db      	lsls	r3, r3, #27
 800329a:	d406      	bmi.n	80032aa <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	2204      	movs	r2, #4
 80032a0:	6899      	ldr	r1, [r3, #8]
 80032a2:	0008      	movs	r0, r1
 80032a4:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80032a6:	4211      	tst	r1, r2
 80032a8:	d008      	beq.n	80032bc <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032aa:	2310      	movs	r3, #16
 80032ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80032ae:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b0:	4313      	orrs	r3, r2
 80032b2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80032b4:	2300      	movs	r3, #0
 80032b6:	3450      	adds	r4, #80	; 0x50
 80032b8:	7023      	strb	r3, [r4, #0]
}
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80032bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80032be:	4955      	ldr	r1, [pc, #340]	; (8003414 <HAL_ADC_Init+0x19c>)
 80032c0:	4011      	ands	r1, r2
 80032c2:	2202      	movs	r2, #2
 80032c4:	430a      	orrs	r2, r1
 80032c6:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032c8:	2203      	movs	r2, #3
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	4011      	ands	r1, r2
 80032ce:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_ADC_Init+0x1a0>)
 80032d0:	2901      	cmp	r1, #1
 80032d2:	d102      	bne.n	80032da <HAL_ADC_Init+0x62>
 80032d4:	681d      	ldr	r5, [r3, #0]
 80032d6:	420d      	tst	r5, r1
 80032d8:	d119      	bne.n	800330e <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80032da:	2680      	movs	r6, #128	; 0x80
 80032dc:	6861      	ldr	r1, [r4, #4]
 80032de:	05f6      	lsls	r6, r6, #23
 80032e0:	004d      	lsls	r5, r1, #1
 80032e2:	086d      	lsrs	r5, r5, #1
 80032e4:	42b5      	cmp	r5, r6
 80032e6:	d003      	beq.n	80032f0 <HAL_ADC_Init+0x78>
 80032e8:	2580      	movs	r5, #128	; 0x80
 80032ea:	062d      	lsls	r5, r5, #24
 80032ec:	42a9      	cmp	r1, r5
 80032ee:	d176      	bne.n	80033de <HAL_ADC_Init+0x166>
 80032f0:	691d      	ldr	r5, [r3, #16]
 80032f2:	00ad      	lsls	r5, r5, #2
 80032f4:	08ad      	lsrs	r5, r5, #2
 80032f6:	611d      	str	r5, [r3, #16]
 80032f8:	691d      	ldr	r5, [r3, #16]
 80032fa:	4329      	orrs	r1, r5
 80032fc:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80032fe:	2518      	movs	r5, #24
 8003300:	68d9      	ldr	r1, [r3, #12]
 8003302:	43a9      	bics	r1, r5
 8003304:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003306:	68d9      	ldr	r1, [r3, #12]
 8003308:	68a5      	ldr	r5, [r4, #8]
 800330a:	4329      	orrs	r1, r5
 800330c:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800330e:	6811      	ldr	r1, [r2, #0]
 8003310:	4d42      	ldr	r5, [pc, #264]	; (800341c <HAL_ADC_Init+0x1a4>)
 8003312:	4029      	ands	r1, r5
 8003314:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003316:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003318:	6815      	ldr	r5, [r2, #0]
 800331a:	0649      	lsls	r1, r1, #25
 800331c:	4329      	orrs	r1, r5
 800331e:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	6899      	ldr	r1, [r3, #8]
 8003324:	0552      	lsls	r2, r2, #21
 8003326:	4211      	tst	r1, r2
 8003328:	d102      	bne.n	8003330 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800332a:	6899      	ldr	r1, [r3, #8]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	493b      	ldr	r1, [pc, #236]	; (8003420 <HAL_ADC_Init+0x1a8>)
 8003334:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003336:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003338:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800333a:	68dd      	ldr	r5, [r3, #12]
 800333c:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800333e:	2902      	cmp	r1, #2
 8003340:	d100      	bne.n	8003344 <HAL_ADC_Init+0xcc>
 8003342:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003344:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003346:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003348:	4332      	orrs	r2, r6
 800334a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800334c:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800334e:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003350:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003352:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003354:	69e5      	ldr	r5, [r4, #28]
 8003356:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003358:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800335a:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800335c:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800335e:	0025      	movs	r5, r4
 8003360:	352c      	adds	r5, #44	; 0x2c
 8003362:	782d      	ldrb	r5, [r5, #0]
 8003364:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003366:	432a      	orrs	r2, r5
 8003368:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800336a:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800336c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800336e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003370:	30ff      	adds	r0, #255	; 0xff
 8003372:	4282      	cmp	r2, r0
 8003374:	d004      	beq.n	8003380 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003376:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003378:	68d8      	ldr	r0, [r3, #12]
 800337a:	432a      	orrs	r2, r5
 800337c:	4302      	orrs	r2, r0
 800337e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003380:	1ca2      	adds	r2, r4, #2
 8003382:	7fd2      	ldrb	r2, [r2, #31]
 8003384:	2a01      	cmp	r2, #1
 8003386:	d106      	bne.n	8003396 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003388:	2900      	cmp	r1, #0
 800338a:	d134      	bne.n	80033f6 <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	68d9      	ldr	r1, [r3, #12]
 8003390:	0252      	lsls	r2, r2, #9
 8003392:	430a      	orrs	r2, r1
 8003394:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003396:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003398:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800339a:	2901      	cmp	r1, #1
 800339c:	d133      	bne.n	8003406 <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800339e:	4821      	ldr	r0, [pc, #132]	; (8003424 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80033a0:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80033a2:	4002      	ands	r2, r0
 80033a4:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80033a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033a8:	6918      	ldr	r0, [r3, #16]
 80033aa:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80033ac:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80033ae:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80033b0:	4302      	orrs	r2, r0
 80033b2:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	4311      	orrs	r1, r2
 80033b8:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80033ba:	2107      	movs	r1, #7
 80033bc:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80033be:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80033c0:	438a      	bics	r2, r1
 80033c2:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80033c8:	430a      	orrs	r2, r1
 80033ca:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80033cc:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80033ce:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80033d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033d2:	4393      	bics	r3, r2
 80033d4:	001a      	movs	r2, r3
 80033d6:	2301      	movs	r3, #1
 80033d8:	4313      	orrs	r3, r2
 80033da:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80033dc:	e76d      	b.n	80032ba <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80033de:	691d      	ldr	r5, [r3, #16]
 80033e0:	4e11      	ldr	r6, [pc, #68]	; (8003428 <HAL_ADC_Init+0x1b0>)
 80033e2:	00ad      	lsls	r5, r5, #2
 80033e4:	08ad      	lsrs	r5, r5, #2
 80033e6:	611d      	str	r5, [r3, #16]
 80033e8:	6815      	ldr	r5, [r2, #0]
 80033ea:	4035      	ands	r5, r6
 80033ec:	6015      	str	r5, [r2, #0]
 80033ee:	6815      	ldr	r5, [r2, #0]
 80033f0:	4329      	orrs	r1, r5
 80033f2:	6011      	str	r1, [r2, #0]
 80033f4:	e783      	b.n	80032fe <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f6:	2120      	movs	r1, #32
 80033f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033fa:	4301      	orrs	r1, r0
 80033fc:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003400:	430a      	orrs	r2, r1
 8003402:	65a2      	str	r2, [r4, #88]	; 0x58
 8003404:	e7c7      	b.n	8003396 <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003406:	2101      	movs	r1, #1
 8003408:	420a      	tst	r2, r1
 800340a:	d0d6      	beq.n	80033ba <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	438a      	bics	r2, r1
 8003410:	611a      	str	r2, [r3, #16]
 8003412:	e7d2      	b.n	80033ba <HAL_ADC_Init+0x142>
 8003414:	fffffefd 	.word	0xfffffefd
 8003418:	40012708 	.word	0x40012708
 800341c:	fdffffff 	.word	0xfdffffff
 8003420:	fffe0219 	.word	0xfffe0219
 8003424:	fffffc03 	.word	0xfffffc03
 8003428:	ffc3ffff 	.word	0xffc3ffff

0800342c <HAL_ADC_DeInit>:
{
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003430:	2501      	movs	r5, #1
  if(hadc == NULL)
 8003432:	2800      	cmp	r0, #0
 8003434:	d011      	beq.n	800345a <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003436:	2302      	movs	r3, #2
 8003438:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800343a:	4313      	orrs	r3, r2
 800343c:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800343e:	f7ff fef1 	bl	8003224 <ADC_ConversionStop>
 8003442:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8003444:	d137      	bne.n	80034b6 <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8003446:	0020      	movs	r0, r4
 8003448:	f7ff fe80 	bl	800314c <ADC_Disable>
 800344c:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 800344e:	2801      	cmp	r0, #1
 8003450:	d105      	bne.n	800345e <HAL_ADC_DeInit+0x32>
{
 8003452:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8003454:	2300      	movs	r3, #0
 8003456:	3450      	adds	r4, #80	; 0x50
 8003458:	7023      	strb	r3, [r4, #0]
}
 800345a:	0028      	movs	r0, r5
 800345c:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 800345e:	2301      	movs	r3, #1
 8003460:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	4915      	ldr	r1, [pc, #84]	; (80034bc <HAL_ADC_DeInit+0x90>)
 8003466:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8003468:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800346a:	400a      	ands	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 800346e:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003470:	4914      	ldr	r1, [pc, #80]	; (80034c4 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003472:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	400a      	ands	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	4912      	ldr	r1, [pc, #72]	; (80034c8 <HAL_ADC_DeInit+0x9c>)
 800347e:	400a      	ands	r2, r1
 8003480:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	4911      	ldr	r1, [pc, #68]	; (80034cc <HAL_ADC_DeInit+0xa0>)
 8003486:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003488:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800348a:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	438a      	bics	r2, r1
 8003490:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003492:	6a1a      	ldr	r2, [r3, #32]
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_ADC_DeInit+0xa4>)
 8003496:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003498:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800349a:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800349c:	33b4      	adds	r3, #180	; 0xb4
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	438a      	bics	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	438a      	bics	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 80034aa:	f7fe fbd1 	bl	8001c50 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80034ae:	2300      	movs	r3, #0
 80034b0:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 80034b2:	6563      	str	r3, [r4, #84]	; 0x54
 80034b4:	e7ce      	b.n	8003454 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 80034b6:	2801      	cmp	r0, #1
 80034b8:	d0cb      	beq.n	8003452 <HAL_ADC_DeInit+0x26>
 80034ba:	e7d2      	b.n	8003462 <HAL_ADC_DeInit+0x36>
 80034bc:	fffff760 	.word	0xfffff760
 80034c0:	0000089f 	.word	0x0000089f
 80034c4:	efffffff 	.word	0xefffffff
 80034c8:	833e0200 	.word	0x833e0200
 80034cc:	3ffffc02 	.word	0x3ffffc02
 80034d0:	f000f000 	.word	0xf000f000

080034d4 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d4:	6803      	ldr	r3, [r0, #0]
{
 80034d6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d8:	689b      	ldr	r3, [r3, #8]
{
 80034da:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80034dc:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034de:	075b      	lsls	r3, r3, #29
 80034e0:	d41a      	bmi.n	8003518 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80034e2:	0025      	movs	r5, r4
 80034e4:	3550      	adds	r5, #80	; 0x50
 80034e6:	782b      	ldrb	r3, [r5, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d015      	beq.n	8003518 <HAL_ADC_Start+0x44>
 80034ec:	2301      	movs	r3, #1
 80034ee:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80034f0:	69e3      	ldr	r3, [r4, #28]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d111      	bne.n	800351a <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80034f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034f8:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80034fa:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80034fc:	401a      	ands	r2, r3
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003504:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8003506:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8003508:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800350a:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003510:	6899      	ldr	r1, [r3, #8]
 8003512:	3a18      	subs	r2, #24
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800351a:	0020      	movs	r0, r4
 800351c:	f7ff fe4a 	bl	80031b4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003520:	2800      	cmp	r0, #0
 8003522:	d0e8      	beq.n	80034f6 <HAL_ADC_Start+0x22>
 8003524:	e7f8      	b.n	8003518 <HAL_ADC_Start+0x44>
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	fffff0fe 	.word	0xfffff0fe

0800352c <HAL_ADC_Stop>:
{
 800352c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800352e:	0006      	movs	r6, r0
 8003530:	3650      	adds	r6, #80	; 0x50
 8003532:	7833      	ldrb	r3, [r6, #0]
{
 8003534:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003536:	2002      	movs	r0, #2
 8003538:	2b01      	cmp	r3, #1
 800353a:	d012      	beq.n	8003562 <HAL_ADC_Stop+0x36>
 800353c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800353e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8003540:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003542:	f7ff fe6f 	bl	8003224 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003546:	2800      	cmp	r0, #0
 8003548:	d109      	bne.n	800355e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800354a:	0020      	movs	r0, r4
 800354c:	f7ff fdfe 	bl	800314c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003550:	2800      	cmp	r0, #0
 8003552:	d104      	bne.n	800355e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8003554:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003556:	4a03      	ldr	r2, [pc, #12]	; (8003564 <HAL_ADC_Stop+0x38>)
 8003558:	4013      	ands	r3, r2
 800355a:	431d      	orrs	r5, r3
 800355c:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800355e:	2300      	movs	r3, #0
 8003560:	7033      	strb	r3, [r6, #0]
}
 8003562:	bd70      	pop	{r4, r5, r6, pc}
 8003564:	fffffefe 	.word	0xfffffefe

08003568 <HAL_ADC_PollForConversion>:
{
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800356a:	6946      	ldr	r6, [r0, #20]
{
 800356c:	0004      	movs	r4, r0
 800356e:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003570:	2e08      	cmp	r6, #8
 8003572:	d00d      	beq.n	8003590 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003574:	6803      	ldr	r3, [r0, #0]
 8003576:	2001      	movs	r0, #1
 8003578:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800357a:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800357c:	4203      	tst	r3, r0
 800357e:	d007      	beq.n	8003590 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003580:	2320      	movs	r3, #32
 8003582:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003584:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003586:	4313      	orrs	r3, r2
 8003588:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800358a:	2300      	movs	r3, #0
 800358c:	7023      	strb	r3, [r4, #0]
}
 800358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003590:	f7ff f890 	bl	80026b4 <HAL_GetTick>
 8003594:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4216      	tst	r6, r2
 800359c:	d024      	beq.n	80035e8 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	430a      	orrs	r2, r1
 80035a6:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035a8:	22c0      	movs	r2, #192	; 0xc0
 80035aa:	68d9      	ldr	r1, [r3, #12]
 80035ac:	0112      	lsls	r2, r2, #4
 80035ae:	4211      	tst	r1, r2
 80035b0:	d113      	bne.n	80035da <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035b2:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035b4:	7fd2      	ldrb	r2, [r2, #31]
 80035b6:	2a00      	cmp	r2, #0
 80035b8:	d10f      	bne.n	80035da <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	0712      	lsls	r2, r2, #28
 80035be:	d50c      	bpl.n	80035da <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	0752      	lsls	r2, r2, #29
 80035c4:	d423      	bmi.n	800360e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035c6:	210c      	movs	r1, #12
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	438a      	bics	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80035ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80035d0:	4913      	ldr	r1, [pc, #76]	; (8003620 <HAL_ADC_PollForConversion+0xb8>)
 80035d2:	4011      	ands	r1, r2
 80035d4:	2201      	movs	r2, #1
 80035d6:	430a      	orrs	r2, r1
 80035d8:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80035da:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80035dc:	69a2      	ldr	r2, [r4, #24]
 80035de:	4282      	cmp	r2, r0
 80035e0:	d1d5      	bne.n	800358e <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035e2:	220c      	movs	r2, #12
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e7d2      	b.n	800358e <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80035e8:	1c6a      	adds	r2, r5, #1
 80035ea:	d0d5      	beq.n	8003598 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035ec:	2d00      	cmp	r5, #0
 80035ee:	d108      	bne.n	8003602 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035f0:	2304      	movs	r3, #4
 80035f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80035f4:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035f6:	4313      	orrs	r3, r2
 80035f8:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80035fa:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80035fc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80035fe:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003600:	e7c5      	b.n	800358e <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003602:	f7ff f857 	bl	80026b4 <HAL_GetTick>
 8003606:	1bc0      	subs	r0, r0, r7
 8003608:	42a8      	cmp	r0, r5
 800360a:	d9c4      	bls.n	8003596 <HAL_ADC_PollForConversion+0x2e>
 800360c:	e7f0      	b.n	80035f0 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360e:	2220      	movs	r2, #32
 8003610:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003612:	430a      	orrs	r2, r1
 8003614:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003616:	2201      	movs	r2, #1
 8003618:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800361a:	430a      	orrs	r2, r1
 800361c:	65a2      	str	r2, [r4, #88]	; 0x58
 800361e:	e7dc      	b.n	80035da <HAL_ADC_PollForConversion+0x72>
 8003620:	fffffefe 	.word	0xfffffefe

08003624 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003628:	4770      	bx	lr
	...

0800362c <HAL_ADC_ConfigChannel>:
{
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800362e:	0004      	movs	r4, r0
 8003630:	3450      	adds	r4, #80	; 0x50
 8003632:	7822      	ldrb	r2, [r4, #0]
{
 8003634:	0003      	movs	r3, r0
 8003636:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8003638:	2002      	movs	r0, #2
 800363a:	2a01      	cmp	r2, #1
 800363c:	d00b      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x2a>
 800363e:	3801      	subs	r0, #1
 8003640:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	6891      	ldr	r1, [r2, #8]
 8003646:	0749      	lsls	r1, r1, #29
 8003648:	d506      	bpl.n	8003658 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364a:	2220      	movs	r2, #32
 800364c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800364e:	430a      	orrs	r2, r1
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003652:	2300      	movs	r3, #0
 8003654:	7023      	strb	r3, [r4, #0]
}
 8003656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003658:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800365a:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 800365c:	4e19      	ldr	r6, [pc, #100]	; (80036c4 <HAL_ADC_ConfigChannel+0x98>)
 800365e:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003660:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003662:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003664:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003666:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 8003668:	42b7      	cmp	r7, r6
 800366a:	d019      	beq.n	80036a0 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800366c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800366e:	4301      	orrs	r1, r0
 8003670:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_ADC_ConfigChannel+0x9c>)
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800367e:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8003680:	430b      	orrs	r3, r1
 8003682:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003684:	f7ff fd4c 	bl	8003120 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	039b      	lsls	r3, r3, #14
 800368c:	d505      	bpl.n	800369a <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_ADC_ConfigChannel+0x9c>)
 8003692:	03db      	lsls	r3, r3, #15
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003698:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800369a:	2000      	movs	r0, #0
 800369c:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800369e:	e7da      	b.n	8003656 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80036a0:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80036a2:	438d      	bics	r5, r1
 80036a4:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80036aa:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_ADC_ConfigChannel+0x9c>)
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <HAL_ADC_ConfigChannel+0xa0>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	400b      	ands	r3, r1
 80036b2:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80036b4:	0383      	lsls	r3, r0, #14
 80036b6:	d5f0      	bpl.n	800369a <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80036b8:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <HAL_ADC_ConfigChannel+0x9c>)
 80036ba:	4905      	ldr	r1, [pc, #20]	; (80036d0 <HAL_ADC_ConfigChannel+0xa4>)
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	400b      	ands	r3, r1
 80036c0:	e7ea      	b.n	8003698 <HAL_ADC_ConfigChannel+0x6c>
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	00001001 	.word	0x00001001
 80036c8:	40012708 	.word	0x40012708
 80036cc:	ff7fffff 	.word	0xff7fffff
 80036d0:	ffbfffff 	.word	0xffbfffff

080036d4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d6:	0005      	movs	r5, r0
 80036d8:	3550      	adds	r5, #80	; 0x50
 80036da:	782b      	ldrb	r3, [r5, #0]
{
 80036dc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80036de:	2002      	movs	r0, #2
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d044      	beq.n	800376e <HAL_ADCEx_Calibration_Start+0x9a>
 80036e4:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036e6:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80036e8:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	6898      	ldr	r0, [r3, #8]
 80036ee:	4010      	ands	r0, r2
 80036f0:	2801      	cmp	r0, #1
 80036f2:	d109      	bne.n	8003708 <HAL_ADCEx_Calibration_Start+0x34>
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4202      	tst	r2, r0
 80036f8:	d006      	beq.n	8003708 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fa:	2320      	movs	r3, #32
 80036fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80036fe:	4313      	orrs	r3, r2
 8003700:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003702:	2300      	movs	r3, #0
 8003704:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8003706:	e032      	b.n	800376e <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8003708:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800370a:	4919      	ldr	r1, [pc, #100]	; (8003770 <HAL_ADCEx_Calibration_Start+0x9c>)
 800370c:	4011      	ands	r1, r2
 800370e:	2202      	movs	r2, #2
 8003710:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003712:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8003714:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003716:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	438a      	bics	r2, r1
 800371c:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	0612      	lsls	r2, r2, #24
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8003728:	f7fe ffc4 	bl	80026b4 <HAL_GetTick>
 800372c:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	2a00      	cmp	r2, #0
 8003734:	db0c      	blt.n	8003750 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003736:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003738:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800373a:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800373c:	430e      	orrs	r6, r1
 800373e:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003740:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003742:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8003744:	4393      	bics	r3, r2
 8003746:	001a      	movs	r2, r3
 8003748:	2301      	movs	r3, #1
 800374a:	4313      	orrs	r3, r2
 800374c:	6563      	str	r3, [r4, #84]	; 0x54
 800374e:	e7d8      	b.n	8003702 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003750:	f7fe ffb0 	bl	80026b4 <HAL_GetTick>
 8003754:	1bc0      	subs	r0, r0, r7
 8003756:	280a      	cmp	r0, #10
 8003758:	d9e9      	bls.n	800372e <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 800375a:	2212      	movs	r2, #18
 800375c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800375e:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8003760:	4393      	bics	r3, r2
 8003762:	001a      	movs	r2, r3
 8003764:	2310      	movs	r3, #16
 8003766:	4313      	orrs	r3, r2
 8003768:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800376a:	2300      	movs	r3, #0
 800376c:	702b      	strb	r3, [r5, #0]
}
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003770:	fffffefd 	.word	0xfffffefd

08003774 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003774:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003776:	25ff      	movs	r5, #255	; 0xff
 8003778:	2403      	movs	r4, #3
 800377a:	002a      	movs	r2, r5
 800377c:	4004      	ands	r4, r0
 800377e:	00e4      	lsls	r4, r4, #3
 8003780:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003782:	0189      	lsls	r1, r1, #6
 8003784:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003786:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003788:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800378a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800378c:	2800      	cmp	r0, #0
 800378e:	db0a      	blt.n	80037a6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003790:	24c0      	movs	r4, #192	; 0xc0
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_NVIC_SetPriority+0x4c>)
 8003794:	0880      	lsrs	r0, r0, #2
 8003796:	0080      	lsls	r0, r0, #2
 8003798:	18c0      	adds	r0, r0, r3
 800379a:	00a4      	lsls	r4, r4, #2
 800379c:	5903      	ldr	r3, [r0, r4]
 800379e:	401a      	ands	r2, r3
 80037a0:	4311      	orrs	r1, r2
 80037a2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80037a4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a6:	200f      	movs	r0, #15
 80037a8:	4003      	ands	r3, r0
 80037aa:	3b08      	subs	r3, #8
 80037ac:	4805      	ldr	r0, [pc, #20]	; (80037c4 <HAL_NVIC_SetPriority+0x50>)
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	181b      	adds	r3, r3, r0
 80037b4:	69d8      	ldr	r0, [r3, #28]
 80037b6:	4002      	ands	r2, r0
 80037b8:	4311      	orrs	r1, r2
 80037ba:	61d9      	str	r1, [r3, #28]
 80037bc:	e7f2      	b.n	80037a4 <HAL_NVIC_SetPriority+0x30>
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	e000e100 	.word	0xe000e100
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037c8:	2800      	cmp	r0, #0
 80037ca:	db05      	blt.n	80037d8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037cc:	231f      	movs	r3, #31
 80037ce:	4018      	ands	r0, r3
 80037d0:	3b1e      	subs	r3, #30
 80037d2:	4083      	lsls	r3, r0
 80037d4:	4a01      	ldr	r2, [pc, #4]	; (80037dc <HAL_NVIC_EnableIRQ+0x14>)
 80037d6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80037d8:	4770      	bx	lr
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	e000e100 	.word	0xe000e100

080037e0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037e0:	2800      	cmp	r0, #0
 80037e2:	db09      	blt.n	80037f8 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e4:	231f      	movs	r3, #31
 80037e6:	4018      	ands	r0, r3
 80037e8:	3b1e      	subs	r3, #30
 80037ea:	4083      	lsls	r3, r0
 80037ec:	4a03      	ldr	r2, [pc, #12]	; (80037fc <HAL_NVIC_DisableIRQ+0x1c>)
 80037ee:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037f4:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80037f8:	4770      	bx	lr
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	e000e104 	.word	0xe000e104

08003800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003804:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003806:	2c00      	cmp	r4, #0
 8003808:	d035      	beq.n	8003876 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800380a:	6825      	ldr	r5, [r4, #0]
 800380c:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <HAL_DMA_Init+0x78>)
 800380e:	2114      	movs	r1, #20
 8003810:	18e8      	adds	r0, r5, r3
 8003812:	f7fc fca9 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003818:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800381a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003820:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003822:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003824:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003826:	4b16      	ldr	r3, [pc, #88]	; (8003880 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003828:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800382a:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 800382c:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003830:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003832:	433b      	orrs	r3, r7
 8003834:	6967      	ldr	r7, [r4, #20]
 8003836:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003838:	69a7      	ldr	r7, [r4, #24]
 800383a:	433b      	orrs	r3, r7
 800383c:	69e7      	ldr	r7, [r4, #28]
 800383e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003840:	6a27      	ldr	r7, [r4, #32]
 8003842:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003844:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003846:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	4299      	cmp	r1, r3
 800384e:	d00c      	beq.n	800386a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003850:	251c      	movs	r5, #28
 8003852:	4028      	ands	r0, r5
 8003854:	3d0d      	subs	r5, #13
 8003856:	4085      	lsls	r5, r0
 8003858:	490a      	ldr	r1, [pc, #40]	; (8003884 <HAL_DMA_Init+0x84>)
 800385a:	680b      	ldr	r3, [r1, #0]
 800385c:	43ab      	bics	r3, r5
 800385e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003860:	6863      	ldr	r3, [r4, #4]
 8003862:	680d      	ldr	r5, [r1, #0]
 8003864:	4083      	lsls	r3, r0
 8003866:	432b      	orrs	r3, r5
 8003868:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800386c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003870:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003872:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003874:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003878:	bffdfff8 	.word	0xbffdfff8
 800387c:	40020000 	.word	0x40020000
 8003880:	ffff800f 	.word	0xffff800f
 8003884:	400200a8 	.word	0x400200a8

08003888 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	2501      	movs	r5, #1
 800388c:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 800388e:	0028      	movs	r0, r5
  if (NULL == hdma )
 8003890:	2c00      	cmp	r4, #0
 8003892:	d021      	beq.n	80038d8 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003894:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003896:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8003898:	6833      	ldr	r3, [r6, #0]
 800389a:	43ab      	bics	r3, r5
 800389c:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <HAL_DMA_DeInit+0x54>)
 80038a0:	18f0      	adds	r0, r6, r3
 80038a2:	f7fc fc61 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038a6:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038a8:	0083      	lsls	r3, r0, #2
 80038aa:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ac:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 80038ae:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038b0:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038b2:	390d      	subs	r1, #13
 80038b4:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80038b8:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 80038ba:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 80038bc:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038be:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038c0:	4d08      	ldr	r5, [pc, #32]	; (80038e4 <HAL_DMA_DeInit+0x5c>)
 80038c2:	682a      	ldr	r2, [r5, #0]
 80038c4:	438a      	bics	r2, r1
 80038c6:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 80038c8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80038ca:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80038cc:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80038ce:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d0:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038d2:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 80038d4:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 80038d6:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80038d8:	bd70      	pop	{r4, r5, r6, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	bffdfff8 	.word	0xbffdfff8
 80038e0:	40020000 	.word	0x40020000
 80038e4:	400200a8 	.word	0x400200a8

080038e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ea:	1d45      	adds	r5, r0, #5
{
 80038ec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80038ee:	7feb      	ldrb	r3, [r5, #31]
{
 80038f0:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80038f2:	2002      	movs	r0, #2
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d029      	beq.n	800394c <HAL_DMA_Start_IT+0x64>
 80038f8:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80038fa:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 80038fc:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80038fe:	7ffb      	ldrb	r3, [r7, #31]
 8003900:	2600      	movs	r6, #0
 8003902:	469c      	mov	ip, r3
 8003904:	4660      	mov	r0, ip
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2801      	cmp	r0, #1
 800390a:	d12a      	bne.n	8003962 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800390c:	3001      	adds	r0, #1
 800390e:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003910:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003912:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003914:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003916:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003918:	361c      	adds	r6, #28
 800391a:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 800391c:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800391e:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8003920:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003922:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003924:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392a:	68a3      	ldr	r3, [r4, #8]
 800392c:	2b10      	cmp	r3, #16
 800392e:	d10e      	bne.n	800394e <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003930:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003932:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003934:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393a:	230e      	movs	r3, #14
 800393c:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800393e:	4313      	orrs	r3, r2
 8003940:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8003942:	2301      	movs	r3, #1
 8003944:	6802      	ldr	r2, [r0, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2000      	movs	r0, #0
}
 800394c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800394e:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003950:	60c2      	str	r2, [r0, #12]
 8003952:	e7ef      	b.n	8003934 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003954:	2204      	movs	r2, #4
 8003956:	6803      	ldr	r3, [r0, #0]
 8003958:	4393      	bics	r3, r2
 800395a:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800395c:	6802      	ldr	r2, [r0, #0]
 800395e:	230a      	movs	r3, #10
 8003960:	e7ed      	b.n	800393e <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8003962:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003964:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003966:	e7f1      	b.n	800394c <HAL_DMA_Start_IT+0x64>

08003968 <HAL_DMA_Abort>:
{
 8003968:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396a:	1d85      	adds	r5, r0, #6
 800396c:	7feb      	ldrb	r3, [r5, #31]
 800396e:	1d44      	adds	r4, r0, #5
 8003970:	2b02      	cmp	r3, #2
 8003972:	d005      	beq.n	8003980 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003974:	2304      	movs	r3, #4
 8003976:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003978:	2300      	movs	r3, #0
    return HAL_ERROR;
 800397a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800397c:	77e3      	strb	r3, [r4, #31]
}
 800397e:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003980:	210e      	movs	r1, #14
 8003982:	6803      	ldr	r3, [r0, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	438a      	bics	r2, r1
 8003988:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800398a:	2201      	movs	r2, #1
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	4391      	bics	r1, r2
 8003990:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003992:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003994:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003996:	201c      	movs	r0, #28
 8003998:	4003      	ands	r3, r0
 800399a:	0010      	movs	r0, r2
 800399c:	4098      	lsls	r0, r3
 800399e:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80039a0:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80039a2:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 80039a4:	77e0      	strb	r0, [r4, #31]
    return status;
 80039a6:	e7ea      	b.n	800397e <HAL_DMA_Abort+0x16>

080039a8 <HAL_DMA_Abort_IT>:
{
 80039a8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039aa:	1d84      	adds	r4, r0, #6
 80039ac:	7fe3      	ldrb	r3, [r4, #31]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d004      	beq.n	80039bc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b2:	2304      	movs	r3, #4
 80039b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80039b6:	3b03      	subs	r3, #3
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039bc:	210e      	movs	r1, #14
 80039be:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039c0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	438a      	bics	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80039c8:	2201      	movs	r2, #1
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	4391      	bics	r1, r2
 80039ce:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039d0:	231c      	movs	r3, #28
 80039d2:	402b      	ands	r3, r5
 80039d4:	0015      	movs	r5, r2
 80039d6:	409d      	lsls	r5, r3
 80039d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80039da:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039dc:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039de:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80039e0:	2400      	movs	r4, #0
 80039e2:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80039e4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80039e8:	42a2      	cmp	r2, r4
 80039ea:	d0e5      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80039ec:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	0023      	movs	r3, r4
 80039f0:	e7e2      	b.n	80039b8 <HAL_DMA_Abort_IT+0x10>

080039f2 <HAL_DMA_IRQHandler>:
{
 80039f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80039f4:	221c      	movs	r2, #28
 80039f6:	2704      	movs	r7, #4
 80039f8:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80039fc:	4032      	ands	r2, r6
 80039fe:	003e      	movs	r6, r7
 8003a00:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a02:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003a04:	6803      	ldr	r3, [r0, #0]
 8003a06:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a08:	4235      	tst	r5, r6
 8003a0a:	d00d      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x36>
 8003a0c:	423c      	tst	r4, r7
 8003a0e:	d00b      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	0692      	lsls	r2, r2, #26
 8003a14:	d402      	bmi.n	8003a1c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	43ba      	bics	r2, r7
 8003a1a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003a1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003a1e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d019      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003a24:	4798      	blx	r3
  return;
 8003a26:	e017      	b.n	8003a58 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a28:	2702      	movs	r7, #2
 8003a2a:	003e      	movs	r6, r7
 8003a2c:	4096      	lsls	r6, r2
 8003a2e:	4235      	tst	r5, r6
 8003a30:	d013      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x68>
 8003a32:	423c      	tst	r4, r7
 8003a34:	d011      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	0692      	lsls	r2, r2, #26
 8003a3a:	d406      	bmi.n	8003a4a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a3c:	240a      	movs	r4, #10
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	43a2      	bics	r2, r4
 8003a42:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003a44:	2201      	movs	r2, #1
 8003a46:	1d83      	adds	r3, r0, #6
 8003a48:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a4e:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003a50:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003a52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d1e5      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x32>
}
 8003a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003a5a:	2608      	movs	r6, #8
 8003a5c:	0037      	movs	r7, r6
 8003a5e:	4097      	lsls	r7, r2
 8003a60:	423d      	tst	r5, r7
 8003a62:	d0f9      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x66>
 8003a64:	4234      	tst	r4, r6
 8003a66:	d0f7      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a68:	250e      	movs	r5, #14
 8003a6a:	681c      	ldr	r4, [r3, #0]
 8003a6c:	43ac      	bics	r4, r5
 8003a6e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a70:	2301      	movs	r3, #1
 8003a72:	001c      	movs	r4, r3
 8003a74:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003a76:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a78:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a7a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	1d43      	adds	r3, r0, #5
 8003a82:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003a84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a86:	e7e5      	b.n	8003a54 <HAL_DMA_IRQHandler+0x62>

08003a88 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003a88:	0003      	movs	r3, r0
 8003a8a:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003a8c:	d101      	bne.n	8003a92 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003a8e:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8003a90:	4770      	bx	lr
      status = HAL_ERROR;
 8003a92:	2001      	movs	r0, #1
 8003a94:	e7fc      	b.n	8003a90 <HAL_EXTI_RegisterCallback+0x8>

08003a96 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003a96:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8003a98:	2001      	movs	r0, #1
  if (hexti == NULL)
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8003a9e:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8003aa0:	6019      	str	r1, [r3, #0]
  }
}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003aa4:	221f      	movs	r2, #31
 8003aa6:	6803      	ldr	r3, [r0, #0]
{
 8003aa8:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003aaa:	401a      	ands	r2, r3
 8003aac:	2301      	movs	r3, #1
 8003aae:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <HAL_EXTI_IRQHandler+0x20>)
 8003ab2:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8003ab4:	420b      	tst	r3, r1
 8003ab6:	d004      	beq.n	8003ac2 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003ab8:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003aba:	6843      	ldr	r3, [r0, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d000      	beq.n	8003ac2 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8003ac0:	4798      	blx	r3
    }
  }
}
 8003ac2:	bd10      	pop	{r4, pc}
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ac8:	4a5a      	ldr	r2, [pc, #360]	; (8003c34 <HAL_GPIO_Init+0x16c>)
{
 8003aca:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003acc:	1882      	adds	r2, r0, r2
 8003ace:	1e54      	subs	r4, r2, #1
 8003ad0:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003ad2:	2300      	movs	r3, #0
{
 8003ad4:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ad6:	3205      	adds	r2, #5
{
 8003ad8:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ada:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003adc:	9a02      	ldr	r2, [sp, #8]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	0014      	movs	r4, r2
 8003ae2:	40dc      	lsrs	r4, r3
 8003ae4:	d101      	bne.n	8003aea <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003ae6:	b007      	add	sp, #28
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003aea:	2101      	movs	r1, #1
 8003aec:	000d      	movs	r5, r1
 8003aee:	0014      	movs	r4, r2
 8003af0:	409d      	lsls	r5, r3
 8003af2:	402c      	ands	r4, r5
 8003af4:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 8003af6:	422a      	tst	r2, r5
 8003af8:	d100      	bne.n	8003afc <HAL_GPIO_Init+0x34>
 8003afa:	e099      	b.n	8003c30 <HAL_GPIO_Init+0x168>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003afc:	9a02      	ldr	r2, [sp, #8]
 8003afe:	005f      	lsls	r7, r3, #1
 8003b00:	6854      	ldr	r4, [r2, #4]
 8003b02:	2210      	movs	r2, #16
 8003b04:	0026      	movs	r6, r4
 8003b06:	4396      	bics	r6, r2
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003b08:	3a0d      	subs	r2, #13
 8003b0a:	40ba      	lsls	r2, r7
 8003b0c:	43d2      	mvns	r2, r2
 8003b0e:	9203      	str	r2, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b10:	0032      	movs	r2, r6
 8003b12:	3a01      	subs	r2, #1
 8003b14:	9604      	str	r6, [sp, #16]
 8003b16:	428a      	cmp	r2, r1
 8003b18:	d80f      	bhi.n	8003b3a <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 8003b1a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003b1c:	9a03      	ldr	r2, [sp, #12]
 8003b1e:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b20:	9a02      	ldr	r2, [sp, #8]
 8003b22:	68d2      	ldr	r2, [r2, #12]
 8003b24:	40ba      	lsls	r2, r7
 8003b26:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8003b28:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b2a:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b2c:	43aa      	bics	r2, r5
 8003b2e:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b30:	0922      	lsrs	r2, r4, #4
 8003b32:	400a      	ands	r2, r1
 8003b34:	409a      	lsls	r2, r3
 8003b36:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003b38:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003b3a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b3c:	9a03      	ldr	r2, [sp, #12]
 8003b3e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b40:	9a02      	ldr	r2, [sp, #8]
 8003b42:	6892      	ldr	r2, [r2, #8]
 8003b44:	40ba      	lsls	r2, r7
 8003b46:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8003b48:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b4a:	9a04      	ldr	r2, [sp, #16]
 8003b4c:	2a02      	cmp	r2, #2
 8003b4e:	d10e      	bne.n	8003b6e <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b50:	2507      	movs	r5, #7
 8003b52:	210f      	movs	r1, #15
 8003b54:	401d      	ands	r5, r3
 8003b56:	00ad      	lsls	r5, r5, #2
 8003b58:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	0092      	lsls	r2, r2, #2
 8003b5e:	1882      	adds	r2, r0, r2
 8003b60:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b62:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003b64:	9902      	ldr	r1, [sp, #8]
 8003b66:	6909      	ldr	r1, [r1, #16]
 8003b68:	40a9      	lsls	r1, r5
 8003b6a:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003b6c:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8003b6e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b70:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b72:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b74:	402a      	ands	r2, r5
 8003b76:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b78:	0022      	movs	r2, r4
 8003b7a:	4032      	ands	r2, r6
 8003b7c:	40ba      	lsls	r2, r7
 8003b7e:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 8003b80:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b82:	00e2      	lsls	r2, r4, #3
 8003b84:	d554      	bpl.n	8003c30 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b86:	2701      	movs	r7, #1
 8003b88:	4d2b      	ldr	r5, [pc, #172]	; (8003c38 <HAL_GPIO_Init+0x170>)
 8003b8a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003b8c:	433a      	orrs	r2, r7
 8003b8e:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b90:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <HAL_GPIO_Init+0x174>)
 8003b92:	089d      	lsrs	r5, r3, #2
 8003b94:	00ad      	lsls	r5, r5, #2
 8003b96:	18ad      	adds	r5, r5, r2
 8003b98:	68aa      	ldr	r2, [r5, #8]
 8003b9a:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	4032      	ands	r2, r6
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	9203      	str	r2, [sp, #12]
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	9903      	ldr	r1, [sp, #12]
 8003ba8:	408a      	lsls	r2, r1
 8003baa:	4661      	mov	r1, ip
 8003bac:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003bae:	22a0      	movs	r2, #160	; 0xa0
 8003bb0:	05d2      	lsls	r2, r2, #23
 8003bb2:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003bb4:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4560      	cmp	r0, ip
 8003bba:	d011      	beq.n	8003be0 <HAL_GPIO_Init+0x118>
 8003bbc:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <HAL_GPIO_Init+0x178>)
 8003bbe:	4694      	mov	ip, r2
 8003bc0:	003a      	movs	r2, r7
 8003bc2:	4560      	cmp	r0, ip
 8003bc4:	d00c      	beq.n	8003be0 <HAL_GPIO_Init+0x118>
 8003bc6:	4f1f      	ldr	r7, [pc, #124]	; (8003c44 <HAL_GPIO_Init+0x17c>)
 8003bc8:	1892      	adds	r2, r2, r2
 8003bca:	42b8      	cmp	r0, r7
 8003bcc:	d008      	beq.n	8003be0 <HAL_GPIO_Init+0x118>
 8003bce:	4f1e      	ldr	r7, [pc, #120]	; (8003c48 <HAL_GPIO_Init+0x180>)
 8003bd0:	0032      	movs	r2, r6
 8003bd2:	42b8      	cmp	r0, r7
 8003bd4:	d004      	beq.n	8003be0 <HAL_GPIO_Init+0x118>
 8003bd6:	4e1d      	ldr	r6, [pc, #116]	; (8003c4c <HAL_GPIO_Init+0x184>)
 8003bd8:	3201      	adds	r2, #1
 8003bda:	42b0      	cmp	r0, r6
 8003bdc:	d000      	beq.n	8003be0 <HAL_GPIO_Init+0x118>
 8003bde:	9a05      	ldr	r2, [sp, #20]
 8003be0:	9903      	ldr	r1, [sp, #12]
 8003be2:	408a      	lsls	r2, r1
 8003be4:	9904      	ldr	r1, [sp, #16]
 8003be6:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003be8:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bea:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 8003bec:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_GPIO_Init+0x188>)
        temp &= ~((uint32_t)iocurrent);
 8003bf0:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8003bf2:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 8003bf4:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bf6:	03e1      	lsls	r1, r4, #15
 8003bf8:	d401      	bmi.n	8003bfe <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8003bfa:	003e      	movs	r6, r7
 8003bfc:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8003bfe:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8003c00:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 8003c02:	9e01      	ldr	r6, [sp, #4]
 8003c04:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c06:	03a1      	lsls	r1, r4, #14
 8003c08:	d401      	bmi.n	8003c0e <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	003e      	movs	r6, r7
 8003c0c:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8003c0e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8003c10:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 8003c12:	9e01      	ldr	r6, [sp, #4]
 8003c14:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c16:	02e1      	lsls	r1, r4, #11
 8003c18:	d401      	bmi.n	8003c1e <HAL_GPIO_Init+0x156>
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	003e      	movs	r6, r7
 8003c1c:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8003c1e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8003c20:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8003c22:	9f01      	ldr	r7, [sp, #4]
 8003c24:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c26:	02a1      	lsls	r1, r4, #10
 8003c28:	d401      	bmi.n	8003c2e <HAL_GPIO_Init+0x166>
        temp &= ~((uint32_t)iocurrent);
 8003c2a:	402e      	ands	r6, r5
 8003c2c:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8003c2e:	60d7      	str	r7, [r2, #12]
    position++;
 8003c30:	3301      	adds	r3, #1
 8003c32:	e753      	b.n	8003adc <HAL_GPIO_Init+0x14>
 8003c34:	afffe400 	.word	0xafffe400
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	50000400 	.word	0x50000400
 8003c44:	50000800 	.word	0x50000800
 8003c48:	50000c00 	.word	0x50000c00
 8003c4c:	50001000 	.word	0x50001000
 8003c50:	40010400 	.word	0x40010400

08003c54 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c54:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003c56:	4a38      	ldr	r2, [pc, #224]	; (8003d38 <HAL_GPIO_DeInit+0xe4>)
{
 8003c58:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003c5a:	1882      	adds	r2, r0, r2
{
 8003c5c:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003c5e:	1e51      	subs	r1, r2, #1
 8003c60:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 8003c62:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003c64:	3205      	adds	r2, #5
 8003c66:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8003c68:	9a02      	ldr	r2, [sp, #8]
 8003c6a:	40da      	lsrs	r2, r3
 8003c6c:	d101      	bne.n	8003c72 <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8003c6e:	b007      	add	sp, #28
 8003c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8003c72:	2701      	movs	r7, #1
 8003c74:	003a      	movs	r2, r7
 8003c76:	409a      	lsls	r2, r3
 8003c78:	9c02      	ldr	r4, [sp, #8]
 8003c7a:	9201      	str	r2, [sp, #4]
 8003c7c:	4014      	ands	r4, r2
    if (iocurrent)
 8003c7e:	9901      	ldr	r1, [sp, #4]
 8003c80:	9a02      	ldr	r2, [sp, #8]
 8003c82:	420a      	tst	r2, r1
 8003c84:	d056      	beq.n	8003d34 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c86:	4a2d      	ldr	r2, [pc, #180]	; (8003d3c <HAL_GPIO_DeInit+0xe8>)
 8003c88:	0899      	lsrs	r1, r3, #2
 8003c8a:	0089      	lsls	r1, r1, #2
 8003c8c:	1889      	adds	r1, r1, r2
 8003c8e:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003c90:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c92:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003c94:	2203      	movs	r2, #3
 8003c96:	4015      	ands	r5, r2
 8003c98:	00ad      	lsls	r5, r5, #2
 8003c9a:	320c      	adds	r2, #12
 8003c9c:	40aa      	lsls	r2, r5
 8003c9e:	9203      	str	r2, [sp, #12]
 8003ca0:	4032      	ands	r2, r6
 8003ca2:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003ca4:	22a0      	movs	r2, #160	; 0xa0
 8003ca6:	05d2      	lsls	r2, r2, #23
 8003ca8:	4694      	mov	ip, r2
 8003caa:	2200      	movs	r2, #0
 8003cac:	4560      	cmp	r0, ip
 8003cae:	d011      	beq.n	8003cd4 <HAL_GPIO_DeInit+0x80>
 8003cb0:	4a23      	ldr	r2, [pc, #140]	; (8003d40 <HAL_GPIO_DeInit+0xec>)
 8003cb2:	4694      	mov	ip, r2
 8003cb4:	003a      	movs	r2, r7
 8003cb6:	4560      	cmp	r0, ip
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_GPIO_DeInit+0x80>
 8003cba:	4f22      	ldr	r7, [pc, #136]	; (8003d44 <HAL_GPIO_DeInit+0xf0>)
 8003cbc:	1892      	adds	r2, r2, r2
 8003cbe:	42b8      	cmp	r0, r7
 8003cc0:	d008      	beq.n	8003cd4 <HAL_GPIO_DeInit+0x80>
 8003cc2:	4f21      	ldr	r7, [pc, #132]	; (8003d48 <HAL_GPIO_DeInit+0xf4>)
 8003cc4:	3201      	adds	r2, #1
 8003cc6:	42b8      	cmp	r0, r7
 8003cc8:	d004      	beq.n	8003cd4 <HAL_GPIO_DeInit+0x80>
 8003cca:	4e20      	ldr	r6, [pc, #128]	; (8003d4c <HAL_GPIO_DeInit+0xf8>)
 8003ccc:	3201      	adds	r2, #1
 8003cce:	42b0      	cmp	r0, r6
 8003cd0:	d000      	beq.n	8003cd4 <HAL_GPIO_DeInit+0x80>
 8003cd2:	9a05      	ldr	r2, [sp, #20]
 8003cd4:	40aa      	lsls	r2, r5
 8003cd6:	9d04      	ldr	r5, [sp, #16]
 8003cd8:	42aa      	cmp	r2, r5
 8003cda:	d110      	bne.n	8003cfe <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_GPIO_DeInit+0xfc>)
 8003cde:	6815      	ldr	r5, [r2, #0]
 8003ce0:	43a5      	bics	r5, r4
 8003ce2:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ce4:	6855      	ldr	r5, [r2, #4]
 8003ce6:	43a5      	bics	r5, r4
 8003ce8:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003cea:	6895      	ldr	r5, [r2, #8]
 8003cec:	43a5      	bics	r5, r4
 8003cee:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003cf0:	68d5      	ldr	r5, [r2, #12]
 8003cf2:	43a5      	bics	r5, r4
 8003cf4:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003cf6:	688a      	ldr	r2, [r1, #8]
 8003cf8:	9c03      	ldr	r4, [sp, #12]
 8003cfa:	43a2      	bics	r2, r4
 8003cfc:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003cfe:	2103      	movs	r1, #3
 8003d00:	005c      	lsls	r4, r3, #1
 8003d02:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d04:	2407      	movs	r4, #7
 8003d06:	260f      	movs	r6, #15
 8003d08:	401c      	ands	r4, r3
 8003d0a:	00a4      	lsls	r4, r4, #2
 8003d0c:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003d0e:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003d10:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003d12:	430a      	orrs	r2, r1
 8003d14:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d16:	08da      	lsrs	r2, r3, #3
 8003d18:	0092      	lsls	r2, r2, #2
 8003d1a:	1882      	adds	r2, r0, r2
 8003d1c:	6a15      	ldr	r5, [r2, #32]
 8003d1e:	43b5      	bics	r5, r6
 8003d20:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d22:	68c2      	ldr	r2, [r0, #12]
 8003d24:	438a      	bics	r2, r1
 8003d26:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003d28:	6842      	ldr	r2, [r0, #4]
 8003d2a:	43a2      	bics	r2, r4
 8003d2c:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003d2e:	6882      	ldr	r2, [r0, #8]
 8003d30:	438a      	bics	r2, r1
 8003d32:	6082      	str	r2, [r0, #8]
    position++;
 8003d34:	3301      	adds	r3, #1
 8003d36:	e797      	b.n	8003c68 <HAL_GPIO_DeInit+0x14>
 8003d38:	afffe400 	.word	0xafffe400
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	50000400 	.word	0x50000400
 8003d44:	50000800 	.word	0x50000800
 8003d48:	50000c00 	.word	0x50000c00
 8003d4c:	50001000 	.word	0x50001000
 8003d50:	40010400 	.word	0x40010400

08003d54 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d54:	6900      	ldr	r0, [r0, #16]
 8003d56:	4008      	ands	r0, r1
 8003d58:	1e43      	subs	r3, r0, #1
 8003d5a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003d5c:	b2c0      	uxtb	r0, r0
}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d64:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003d66:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003d68:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003d6a:	e7fc      	b.n	8003d66 <HAL_GPIO_WritePin+0x6>

08003d6c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d6c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d6e:	0013      	movs	r3, r2
 8003d70:	400b      	ands	r3, r1
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	4391      	bics	r1, r2
 8003d76:	4319      	orrs	r1, r3
 8003d78:	6181      	str	r1, [r0, #24]
}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003d7e:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	4210      	tst	r0, r2
 8003d84:	d002      	beq.n	8003d8c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d86:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d88:	f7fd fe8a 	bl	8001aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	40010400 	.word	0x40010400

08003d94 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8003d94:	2110      	movs	r1, #16
 8003d96:	4a02      	ldr	r2, [pc, #8]	; (8003da0 <HAL_PWR_DisablePVD+0xc>)
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	438b      	bics	r3, r1
 8003d9c:	6013      	str	r3, [r2, #0]
}
 8003d9e:	4770      	bx	lr
 8003da0:	40007000 	.word	0x40007000

08003da4 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8003da6:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003daa:	681e      	ldr	r6, [r3, #0]
{
 8003dac:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003dae:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003db0:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003db2:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003db4:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003db6:	0080      	lsls	r0, r0, #2
 8003db8:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003dba:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003dbc:	4206      	tst	r6, r0
 8003dbe:	d005      	beq.n	8003dcc <HAL_PWR_EnterSLEEPMode+0x28>
 8003dc0:	2a00      	cmp	r2, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	4e11      	ldr	r6, [pc, #68]	; (8003e0c <HAL_PWR_EnterSLEEPMode+0x68>)
 8003dc8:	4030      	ands	r0, r6
 8003dca:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003dcc:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003dce:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003dd0:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003dd2:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003dd4:	4d0e      	ldr	r5, [pc, #56]	; (8003e10 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8003dd6:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003dd8:	6928      	ldr	r0, [r5, #16]
 8003dda:	3601      	adds	r6, #1
 8003ddc:	43b0      	bics	r0, r6
 8003dde:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003de0:	2901      	cmp	r1, #1
 8003de2:	d10b      	bne.n	8003dfc <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003de4:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8003de6:	2c00      	cmp	r4, #0
 8003de8:	d006      	beq.n	8003df8 <HAL_PWR_EnterSLEEPMode+0x54>
 8003dea:	2a00      	cmp	r2, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003dee:	2280      	movs	r2, #128	; 0x80
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8003df8:	46c0      	nop			; (mov r8, r8)

}
 8003dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003dfc:	bf40      	sev
    __WFE();
 8003dfe:	bf20      	wfe
    __WFE();
 8003e00:	bf20      	wfe
 8003e02:	e7f0      	b.n	8003de6 <HAL_PWR_EnterSLEEPMode+0x42>
 8003e04:	40007000 	.word	0x40007000
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	fffffdff 	.word	0xfffffdff
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_PWR_EnterSTOPMode+0x68>)
{
 8003e16:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003e1a:	681e      	ldr	r6, [r3, #0]
{
 8003e1c:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003e1e:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003e20:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003e22:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003e24:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003e26:	0080      	lsls	r0, r0, #2
 8003e28:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003e2a:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003e2c:	4206      	tst	r6, r0
 8003e2e:	d005      	beq.n	8003e3c <HAL_PWR_EnterSTOPMode+0x28>
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	4e13      	ldr	r6, [pc, #76]	; (8003e84 <HAL_PWR_EnterSTOPMode+0x70>)
 8003e38:	4030      	ands	r0, r6
 8003e3a:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003e3c:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003e3e:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003e40:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003e42:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003e44:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 8003e46:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003e48:	480f      	ldr	r0, [pc, #60]	; (8003e88 <HAL_PWR_EnterSTOPMode+0x74>)
 8003e4a:	6906      	ldr	r6, [r0, #16]
 8003e4c:	4335      	orrs	r5, r6
 8003e4e:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003e50:	2901      	cmp	r1, #1
 8003e52:	d10e      	bne.n	8003e72 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003e54:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003e56:	2504      	movs	r5, #4
 8003e58:	6901      	ldr	r1, [r0, #16]
 8003e5a:	43a9      	bics	r1, r5
 8003e5c:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003e5e:	2c00      	cmp	r4, #0
 8003e60:	d006      	beq.n	8003e70 <HAL_PWR_EnterSTOPMode+0x5c>
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	d004      	beq.n	8003e70 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
  }
}
 8003e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003e72:	bf40      	sev
    __WFE();
 8003e74:	bf20      	wfe
    __WFE();
 8003e76:	bf20      	wfe
 8003e78:	e7ed      	b.n	8003e56 <HAL_PWR_EnterSTOPMode+0x42>
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	40010000 	.word	0x40010000
 8003e84:	fffffdff 	.word	0xfffffdff
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <HAL_PWREx_EnableFastWakeUp+0x10>)
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	6811      	ldr	r1, [r2, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	4770      	bx	lr
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	40007000 	.word	0x40007000

08003ea0 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	4a03      	ldr	r2, [pc, #12]	; (8003eb0 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	6811      	ldr	r1, [r2, #0]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	4770      	bx	lr
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	40007000 	.word	0x40007000

08003eb4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eb4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003eb8:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003eba:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003ebc:	4022      	ands	r2, r4
 8003ebe:	2a08      	cmp	r2, #8
 8003ec0:	d031      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x72>
 8003ec2:	2a0c      	cmp	r2, #12
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x26>
 8003ec6:	2a04      	cmp	r2, #4
 8003ec8:	d125      	bne.n	8003f16 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003eca:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ece:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003ed0:	17c0      	asrs	r0, r0, #31
 8003ed2:	4018      	ands	r0, r3
 8003ed4:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x80>)
 8003ed6:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003eda:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003edc:	4816      	ldr	r0, [pc, #88]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ede:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ee0:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ee2:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ee4:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ee6:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ee8:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eea:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003eec:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eee:	4211      	tst	r1, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ef2:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x88>)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	f7fc fb44 	bl	8000584 <__aeabi_lmul>
 8003efc:	0022      	movs	r2, r4
 8003efe:	2300      	movs	r3, #0
 8003f00:	f7fc fb20 	bl	8000544 <__aeabi_uldivmod>
 8003f04:	e7e8      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	2310      	movs	r3, #16
 8003f0a:	421a      	tst	r2, r3
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003f10:	e7f0      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f12:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x80>)
 8003f14:	e7ee      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f16:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f18:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f1a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f20:	3301      	adds	r3, #1
 8003f22:	4098      	lsls	r0, r3
      break;
 8003f24:	e7d8      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003f26:	4805      	ldr	r0, [pc, #20]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x88>)
 8003f28:	e7d6      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x24>
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	ff48e500 	.word	0xff48e500
 8003f34:	00f42400 	.word	0x00f42400
 8003f38:	0800e3bc 	.word	0x0800e3bc
 8003f3c:	007a1200 	.word	0x007a1200
 8003f40:	003d0900 	.word	0x003d0900

08003f44 <HAL_RCC_OscConfig>:
{
 8003f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f46:	0005      	movs	r5, r0
 8003f48:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d05a      	beq.n	8004004 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4e:	230c      	movs	r3, #12
 8003f50:	4cb8      	ldr	r4, [pc, #736]	; (8004234 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f52:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f54:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f56:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f58:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	025b      	lsls	r3, r3, #9
 8003f5e:	0019      	movs	r1, r3
 8003f60:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	07d2      	lsls	r2, r2, #31
 8003f64:	d442      	bmi.n	8003fec <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	079b      	lsls	r3, r3, #30
 8003f6a:	d500      	bpl.n	8003f6e <HAL_RCC_OscConfig+0x2a>
 8003f6c:	e08b      	b.n	8004086 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f6e:	682b      	ldr	r3, [r5, #0]
 8003f70:	06db      	lsls	r3, r3, #27
 8003f72:	d529      	bpl.n	8003fc8 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f74:	2e00      	cmp	r6, #0
 8003f76:	d000      	beq.n	8003f7a <HAL_RCC_OscConfig+0x36>
 8003f78:	e0e4      	b.n	8004144 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	059b      	lsls	r3, r3, #22
 8003f7e:	d502      	bpl.n	8003f86 <HAL_RCC_OscConfig+0x42>
 8003f80:	69eb      	ldr	r3, [r5, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d03e      	beq.n	8004004 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f86:	6862      	ldr	r2, [r4, #4]
 8003f88:	49ab      	ldr	r1, [pc, #684]	; (8004238 <HAL_RCC_OscConfig+0x2f4>)
 8003f8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f92:	6861      	ldr	r1, [r4, #4]
 8003f94:	6a2a      	ldr	r2, [r5, #32]
 8003f96:	0209      	lsls	r1, r1, #8
 8003f98:	0a09      	lsrs	r1, r1, #8
 8003f9a:	0612      	lsls	r2, r2, #24
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003fa0:	2280      	movs	r2, #128	; 0x80
 8003fa2:	0b5b      	lsrs	r3, r3, #13
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	0212      	lsls	r2, r2, #8
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003fac:	68e1      	ldr	r1, [r4, #12]
 8003fae:	060a      	lsls	r2, r1, #24
 8003fb0:	49a2      	ldr	r1, [pc, #648]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8003fb2:	0f12      	lsrs	r2, r2, #28
 8003fb4:	5c8a      	ldrb	r2, [r1, r2]
 8003fb6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003fb8:	4aa1      	ldr	r2, [pc, #644]	; (8004240 <HAL_RCC_OscConfig+0x2fc>)
 8003fba:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003fbc:	4ba1      	ldr	r3, [pc, #644]	; (8004244 <HAL_RCC_OscConfig+0x300>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	f7fe fb76 	bl	80026b0 <HAL_InitTick>
        if(status != HAL_OK)
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d134      	bne.n	8004032 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	071b      	lsls	r3, r3, #28
 8003fcc:	d500      	bpl.n	8003fd0 <HAL_RCC_OscConfig+0x8c>
 8003fce:	e0f0      	b.n	80041b2 <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	075b      	lsls	r3, r3, #29
 8003fd4:	d500      	bpl.n	8003fd8 <HAL_RCC_OscConfig+0x94>
 8003fd6:	e112      	b.n	80041fe <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	069b      	lsls	r3, r3, #26
 8003fdc:	d500      	bpl.n	8003fe0 <HAL_RCC_OscConfig+0x9c>
 8003fde:	e196      	b.n	800430e <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d000      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xa4>
 8003fe6:	e1c5      	b.n	8004374 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e022      	b.n	8004032 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fec:	2e08      	cmp	r6, #8
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ff0:	2e0c      	cmp	r6, #12
 8003ff2:	d109      	bne.n	8004008 <HAL_RCC_OscConfig+0xc4>
 8003ff4:	2f00      	cmp	r7, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	039b      	lsls	r3, r3, #14
 8003ffc:	d5b3      	bpl.n	8003f66 <HAL_RCC_OscConfig+0x22>
 8003ffe:	686b      	ldr	r3, [r5, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1b0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8004004:	2001      	movs	r0, #1
 8004006:	e014      	b.n	8004032 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004008:	686a      	ldr	r2, [r5, #4]
 800400a:	428a      	cmp	r2, r1
 800400c:	d113      	bne.n	8004036 <HAL_RCC_OscConfig+0xf2>
 800400e:	6822      	ldr	r2, [r4, #0]
 8004010:	4313      	orrs	r3, r2
 8004012:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004014:	f7fe fb4e 	bl	80026b4 <HAL_GetTick>
 8004018:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800401a:	2280      	movs	r2, #128	; 0x80
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	0292      	lsls	r2, r2, #10
 8004020:	4213      	tst	r3, r2
 8004022:	d1a0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004024:	f7fe fb46 	bl	80026b4 <HAL_GetTick>
 8004028:	9b00      	ldr	r3, [sp, #0]
 800402a:	1ac0      	subs	r0, r0, r3
 800402c:	2864      	cmp	r0, #100	; 0x64
 800402e:	d9f4      	bls.n	800401a <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8004030:	2003      	movs	r0, #3
}
 8004032:	b005      	add	sp, #20
 8004034:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004036:	21a0      	movs	r1, #160	; 0xa0
 8004038:	02c9      	lsls	r1, r1, #11
 800403a:	428a      	cmp	r2, r1
 800403c:	d105      	bne.n	800404a <HAL_RCC_OscConfig+0x106>
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	6821      	ldr	r1, [r4, #0]
 8004042:	02d2      	lsls	r2, r2, #11
 8004044:	430a      	orrs	r2, r1
 8004046:	6022      	str	r2, [r4, #0]
 8004048:	e7e1      	b.n	800400e <HAL_RCC_OscConfig+0xca>
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	487e      	ldr	r0, [pc, #504]	; (8004248 <HAL_RCC_OscConfig+0x304>)
 800404e:	4001      	ands	r1, r0
 8004050:	6021      	str	r1, [r4, #0]
 8004052:	6821      	ldr	r1, [r4, #0]
 8004054:	400b      	ands	r3, r1
 8004056:	9303      	str	r3, [sp, #12]
 8004058:	9b03      	ldr	r3, [sp, #12]
 800405a:	497c      	ldr	r1, [pc, #496]	; (800424c <HAL_RCC_OscConfig+0x308>)
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	400b      	ands	r3, r1
 8004060:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004062:	2a00      	cmp	r2, #0
 8004064:	d1d6      	bne.n	8004014 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8004066:	f7fe fb25 	bl	80026b4 <HAL_GetTick>
 800406a:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	0292      	lsls	r2, r2, #10
 8004072:	4213      	tst	r3, r2
 8004074:	d100      	bne.n	8004078 <HAL_RCC_OscConfig+0x134>
 8004076:	e776      	b.n	8003f66 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004078:	f7fe fb1c 	bl	80026b4 <HAL_GetTick>
 800407c:	9b00      	ldr	r3, [sp, #0]
 800407e:	1ac0      	subs	r0, r0, r3
 8004080:	2864      	cmp	r0, #100	; 0x64
 8004082:	d9f3      	bls.n	800406c <HAL_RCC_OscConfig+0x128>
 8004084:	e7d4      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004086:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8004088:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800408a:	4213      	tst	r3, r2
 800408c:	d003      	beq.n	8004096 <HAL_RCC_OscConfig+0x152>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800408e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004090:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004092:	4311      	orrs	r1, r2
 8004094:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004096:	2e04      	cmp	r6, #4
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800409a:	2e0c      	cmp	r6, #12
 800409c:	d124      	bne.n	80040e8 <HAL_RCC_OscConfig+0x1a4>
 800409e:	2f00      	cmp	r7, #0
 80040a0:	d122      	bne.n	80040e8 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	0752      	lsls	r2, r2, #29
 80040a6:	d501      	bpl.n	80040ac <HAL_RCC_OscConfig+0x168>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ab      	beq.n	8004004 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ac:	6861      	ldr	r1, [r4, #4]
 80040ae:	692a      	ldr	r2, [r5, #16]
 80040b0:	4867      	ldr	r0, [pc, #412]	; (8004250 <HAL_RCC_OscConfig+0x30c>)
 80040b2:	0212      	lsls	r2, r2, #8
 80040b4:	4001      	ands	r1, r0
 80040b6:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040b8:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040bc:	6822      	ldr	r2, [r4, #0]
 80040be:	438a      	bics	r2, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040c4:	f7ff fef6 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 80040c8:	68e3      	ldr	r3, [r4, #12]
 80040ca:	4a5c      	ldr	r2, [pc, #368]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	0f1b      	lsrs	r3, r3, #28
 80040d0:	5cd3      	ldrb	r3, [r2, r3]
 80040d2:	40d8      	lsrs	r0, r3
 80040d4:	4b5a      	ldr	r3, [pc, #360]	; (8004240 <HAL_RCC_OscConfig+0x2fc>)
 80040d6:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80040d8:	4b5a      	ldr	r3, [pc, #360]	; (8004244 <HAL_RCC_OscConfig+0x300>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	f7fe fae8 	bl	80026b0 <HAL_InitTick>
      if(status != HAL_OK)
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d100      	bne.n	80040e6 <HAL_RCC_OscConfig+0x1a2>
 80040e4:	e743      	b.n	8003f6e <HAL_RCC_OscConfig+0x2a>
 80040e6:	e7a4      	b.n	8004032 <HAL_RCC_OscConfig+0xee>
      if(hsi_state != RCC_HSI_OFF)
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d019      	beq.n	8004120 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040ec:	2109      	movs	r1, #9
 80040ee:	6822      	ldr	r2, [r4, #0]
 80040f0:	438a      	bics	r2, r1
 80040f2:	4313      	orrs	r3, r2
 80040f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040f6:	f7fe fadd 	bl	80026b4 <HAL_GetTick>
 80040fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040fc:	2204      	movs	r2, #4
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	4213      	tst	r3, r2
 8004102:	d007      	beq.n	8004114 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	6862      	ldr	r2, [r4, #4]
 8004106:	692b      	ldr	r3, [r5, #16]
 8004108:	4951      	ldr	r1, [pc, #324]	; (8004250 <HAL_RCC_OscConfig+0x30c>)
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	400a      	ands	r2, r1
 800410e:	4313      	orrs	r3, r2
 8004110:	6063      	str	r3, [r4, #4]
 8004112:	e72c      	b.n	8003f6e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004114:	f7fe face 	bl	80026b4 <HAL_GetTick>
 8004118:	1bc0      	subs	r0, r0, r7
 800411a:	2802      	cmp	r0, #2
 800411c:	d9ee      	bls.n	80040fc <HAL_RCC_OscConfig+0x1b8>
 800411e:	e787      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8004120:	2201      	movs	r2, #1
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	4393      	bics	r3, r2
 8004126:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004128:	f7fe fac4 	bl	80026b4 <HAL_GetTick>
 800412c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800412e:	2204      	movs	r2, #4
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	4213      	tst	r3, r2
 8004134:	d100      	bne.n	8004138 <HAL_RCC_OscConfig+0x1f4>
 8004136:	e71a      	b.n	8003f6e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004138:	f7fe fabc 	bl	80026b4 <HAL_GetTick>
 800413c:	1bc0      	subs	r0, r0, r7
 800413e:	2802      	cmp	r0, #2
 8004140:	d9f5      	bls.n	800412e <HAL_RCC_OscConfig+0x1ea>
 8004142:	e775      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004144:	69eb      	ldr	r3, [r5, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d020      	beq.n	800418c <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	6822      	ldr	r2, [r4, #0]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4313      	orrs	r3, r2
 8004152:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004154:	f7fe faae 	bl	80026b4 <HAL_GetTick>
 8004158:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	4213      	tst	r3, r2
 8004162:	d00d      	beq.n	8004180 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	4a34      	ldr	r2, [pc, #208]	; (8004238 <HAL_RCC_OscConfig+0x2f4>)
 8004168:	4013      	ands	r3, r2
 800416a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800416c:	4313      	orrs	r3, r2
 800416e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004170:	6862      	ldr	r2, [r4, #4]
 8004172:	6a2b      	ldr	r3, [r5, #32]
 8004174:	0212      	lsls	r2, r2, #8
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	0a12      	lsrs	r2, r2, #8
 800417a:	4313      	orrs	r3, r2
 800417c:	6063      	str	r3, [r4, #4]
 800417e:	e723      	b.n	8003fc8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004180:	f7fe fa98 	bl	80026b4 <HAL_GetTick>
 8004184:	1bc0      	subs	r0, r0, r7
 8004186:	2802      	cmp	r0, #2
 8004188:	d9e7      	bls.n	800415a <HAL_RCC_OscConfig+0x216>
 800418a:	e751      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	4a31      	ldr	r2, [pc, #196]	; (8004254 <HAL_RCC_OscConfig+0x310>)
 8004190:	4013      	ands	r3, r2
 8004192:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004194:	f7fe fa8e 	bl	80026b4 <HAL_GetTick>
 8004198:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	0092      	lsls	r2, r2, #2
 80041a0:	4213      	tst	r3, r2
 80041a2:	d100      	bne.n	80041a6 <HAL_RCC_OscConfig+0x262>
 80041a4:	e710      	b.n	8003fc8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041a6:	f7fe fa85 	bl	80026b4 <HAL_GetTick>
 80041aa:	1bc0      	subs	r0, r0, r7
 80041ac:	2802      	cmp	r0, #2
 80041ae:	d9f4      	bls.n	800419a <HAL_RCC_OscConfig+0x256>
 80041b0:	e73e      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b2:	696a      	ldr	r2, [r5, #20]
 80041b4:	2301      	movs	r3, #1
 80041b6:	2a00      	cmp	r2, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80041ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041bc:	4313      	orrs	r3, r2
 80041be:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80041c0:	f7fe fa78 	bl	80026b4 <HAL_GetTick>
 80041c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041c6:	2202      	movs	r2, #2
 80041c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041ca:	4213      	tst	r3, r2
 80041cc:	d000      	beq.n	80041d0 <HAL_RCC_OscConfig+0x28c>
 80041ce:	e6ff      	b.n	8003fd0 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fe fa70 	bl	80026b4 <HAL_GetTick>
 80041d4:	1bc0      	subs	r0, r0, r7
 80041d6:	2802      	cmp	r0, #2
 80041d8:	d9f5      	bls.n	80041c6 <HAL_RCC_OscConfig+0x282>
 80041da:	e729      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 80041dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041de:	439a      	bics	r2, r3
 80041e0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80041e2:	f7fe fa67 	bl	80026b4 <HAL_GetTick>
 80041e6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041e8:	2202      	movs	r2, #2
 80041ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041ec:	4213      	tst	r3, r2
 80041ee:	d100      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2ae>
 80041f0:	e6ee      	b.n	8003fd0 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f2:	f7fe fa5f 	bl	80026b4 <HAL_GetTick>
 80041f6:	1bc0      	subs	r0, r0, r7
 80041f8:	2802      	cmp	r0, #2
 80041fa:	d9f5      	bls.n	80041e8 <HAL_RCC_OscConfig+0x2a4>
 80041fc:	e718      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004200:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004202:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004204:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004206:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004208:	421a      	tst	r2, r3
 800420a:	d104      	bne.n	8004216 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800420c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800420e:	4313      	orrs	r3, r2
 8004210:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004212:	2301      	movs	r3, #1
 8004214:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	4f0f      	ldr	r7, [pc, #60]	; (8004258 <HAL_RCC_OscConfig+0x314>)
 800421a:	0052      	lsls	r2, r2, #1
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	4213      	tst	r3, r2
 8004220:	d01c      	beq.n	800425c <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	68ab      	ldr	r3, [r5, #8]
 8004226:	0052      	lsls	r2, r2, #1
 8004228:	4293      	cmp	r3, r2
 800422a:	d12b      	bne.n	8004284 <HAL_RCC_OscConfig+0x340>
 800422c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800422e:	4313      	orrs	r3, r2
 8004230:	6523      	str	r3, [r4, #80]	; 0x50
 8004232:	e04c      	b.n	80042ce <HAL_RCC_OscConfig+0x38a>
 8004234:	40021000 	.word	0x40021000
 8004238:	ffff1fff 	.word	0xffff1fff
 800423c:	0800e3c5 	.word	0x0800e3c5
 8004240:	20000060 	.word	0x20000060
 8004244:	20000068 	.word	0x20000068
 8004248:	fffeffff 	.word	0xfffeffff
 800424c:	fffbffff 	.word	0xfffbffff
 8004250:	ffffe0ff 	.word	0xffffe0ff
 8004254:	fffffeff 	.word	0xfffffeff
 8004258:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425c:	2280      	movs	r2, #128	; 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	0052      	lsls	r2, r2, #1
 8004262:	4313      	orrs	r3, r2
 8004264:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004266:	f7fe fa25 	bl	80026b4 <HAL_GetTick>
 800426a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	2280      	movs	r2, #128	; 0x80
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	0052      	lsls	r2, r2, #1
 8004272:	4213      	tst	r3, r2
 8004274:	d1d5      	bne.n	8004222 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fe fa1d 	bl	80026b4 <HAL_GetTick>
 800427a:	9b01      	ldr	r3, [sp, #4]
 800427c:	1ac0      	subs	r0, r0, r3
 800427e:	2864      	cmp	r0, #100	; 0x64
 8004280:	d9f4      	bls.n	800426c <HAL_RCC_OscConfig+0x328>
 8004282:	e6d5      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <HAL_RCC_OscConfig+0x372>
 8004288:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800428a:	4a6b      	ldr	r2, [pc, #428]	; (8004438 <HAL_RCC_OscConfig+0x4f4>)
 800428c:	4013      	ands	r3, r2
 800428e:	6523      	str	r3, [r4, #80]	; 0x50
 8004290:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004292:	4a6a      	ldr	r2, [pc, #424]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004294:	4013      	ands	r3, r2
 8004296:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004298:	f7fe fa0c 	bl	80026b4 <HAL_GetTick>
 800429c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042a2:	0092      	lsls	r2, r2, #2
 80042a4:	4213      	tst	r3, r2
 80042a6:	d01a      	beq.n	80042de <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fe fa04 	bl	80026b4 <HAL_GetTick>
 80042ac:	4b64      	ldr	r3, [pc, #400]	; (8004440 <HAL_RCC_OscConfig+0x4fc>)
 80042ae:	1bc0      	subs	r0, r0, r7
 80042b0:	4298      	cmp	r0, r3
 80042b2:	d9f4      	bls.n	800429e <HAL_RCC_OscConfig+0x35a>
 80042b4:	e6bc      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b6:	21a0      	movs	r1, #160	; 0xa0
 80042b8:	00c9      	lsls	r1, r1, #3
 80042ba:	428b      	cmp	r3, r1
 80042bc:	d118      	bne.n	80042f0 <HAL_RCC_OscConfig+0x3ac>
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6523      	str	r3, [r4, #80]	; 0x50
 80042c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042ca:	431a      	orrs	r2, r3
 80042cc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80042ce:	f7fe f9f1 	bl	80026b4 <HAL_GetTick>
 80042d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042d8:	0092      	lsls	r2, r2, #2
 80042da:	4213      	tst	r3, r2
 80042dc:	d010      	beq.n	8004300 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80042de:	9b00      	ldr	r3, [sp, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d000      	beq.n	80042e6 <HAL_RCC_OscConfig+0x3a2>
 80042e4:	e678      	b.n	8003fd8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042e8:	4a56      	ldr	r2, [pc, #344]	; (8004444 <HAL_RCC_OscConfig+0x500>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80042ee:	e673      	b.n	8003fd8 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042f2:	4a51      	ldr	r2, [pc, #324]	; (8004438 <HAL_RCC_OscConfig+0x4f4>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	6523      	str	r3, [r4, #80]	; 0x50
 80042f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042fa:	4a50      	ldr	r2, [pc, #320]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	e797      	b.n	8004230 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fe f9d8 	bl	80026b4 <HAL_GetTick>
 8004304:	4b4e      	ldr	r3, [pc, #312]	; (8004440 <HAL_RCC_OscConfig+0x4fc>)
 8004306:	1bc0      	subs	r0, r0, r7
 8004308:	4298      	cmp	r0, r3
 800430a:	d9e3      	bls.n	80042d4 <HAL_RCC_OscConfig+0x390>
 800430c:	e690      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800430e:	69a9      	ldr	r1, [r5, #24]
 8004310:	2301      	movs	r3, #1
 8004312:	4a4d      	ldr	r2, [pc, #308]	; (8004448 <HAL_RCC_OscConfig+0x504>)
 8004314:	2900      	cmp	r1, #0
 8004316:	d018      	beq.n	800434a <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8004318:	68a1      	ldr	r1, [r4, #8]
 800431a:	4319      	orrs	r1, r3
 800431c:	60a1      	str	r1, [r4, #8]
 800431e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004320:	430b      	orrs	r3, r1
 8004322:	6363      	str	r3, [r4, #52]	; 0x34
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	6a11      	ldr	r1, [r2, #32]
 8004328:	019b      	lsls	r3, r3, #6
 800432a:	430b      	orrs	r3, r1
 800432c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800432e:	f7fe f9c1 	bl	80026b4 <HAL_GetTick>
 8004332:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004334:	2202      	movs	r2, #2
 8004336:	68a3      	ldr	r3, [r4, #8]
 8004338:	4213      	tst	r3, r2
 800433a:	d000      	beq.n	800433e <HAL_RCC_OscConfig+0x3fa>
 800433c:	e650      	b.n	8003fe0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800433e:	f7fe f9b9 	bl	80026b4 <HAL_GetTick>
 8004342:	1bc0      	subs	r0, r0, r7
 8004344:	2802      	cmp	r0, #2
 8004346:	d9f5      	bls.n	8004334 <HAL_RCC_OscConfig+0x3f0>
 8004348:	e672      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 800434a:	68a1      	ldr	r1, [r4, #8]
 800434c:	4399      	bics	r1, r3
 800434e:	60a1      	str	r1, [r4, #8]
 8004350:	6a13      	ldr	r3, [r2, #32]
 8004352:	493e      	ldr	r1, [pc, #248]	; (800444c <HAL_RCC_OscConfig+0x508>)
 8004354:	400b      	ands	r3, r1
 8004356:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004358:	f7fe f9ac 	bl	80026b4 <HAL_GetTick>
 800435c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800435e:	2202      	movs	r2, #2
 8004360:	68a3      	ldr	r3, [r4, #8]
 8004362:	4213      	tst	r3, r2
 8004364:	d100      	bne.n	8004368 <HAL_RCC_OscConfig+0x424>
 8004366:	e63b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004368:	f7fe f9a4 	bl	80026b4 <HAL_GetTick>
 800436c:	1bc0      	subs	r0, r0, r7
 800436e:	2802      	cmp	r0, #2
 8004370:	d9f5      	bls.n	800435e <HAL_RCC_OscConfig+0x41a>
 8004372:	e65d      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004374:	2e0c      	cmp	r6, #12
 8004376:	d043      	beq.n	8004400 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004378:	4a35      	ldr	r2, [pc, #212]	; (8004450 <HAL_RCC_OscConfig+0x50c>)
 800437a:	2b02      	cmp	r3, #2
 800437c:	d12e      	bne.n	80043dc <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 800437e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004380:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004382:	4013      	ands	r3, r2
 8004384:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004386:	f7fe f995 	bl	80026b4 <HAL_GetTick>
 800438a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800438c:	04bf      	lsls	r7, r7, #18
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	423b      	tst	r3, r7
 8004392:	d11d      	bne.n	80043d0 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004394:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004396:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004398:	68e2      	ldr	r2, [r4, #12]
 800439a:	430b      	orrs	r3, r1
 800439c:	492d      	ldr	r1, [pc, #180]	; (8004454 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800439e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a0:	400a      	ands	r2, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043a6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	045b      	lsls	r3, r3, #17
 80043b2:	4313      	orrs	r3, r2
 80043b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043b6:	f7fe f97d 	bl	80026b4 <HAL_GetTick>
 80043ba:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	4233      	tst	r3, r6
 80043c0:	d000      	beq.n	80043c4 <HAL_RCC_OscConfig+0x480>
 80043c2:	e611      	b.n	8003fe8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fe f976 	bl	80026b4 <HAL_GetTick>
 80043c8:	1b40      	subs	r0, r0, r5
 80043ca:	2802      	cmp	r0, #2
 80043cc:	d9f6      	bls.n	80043bc <HAL_RCC_OscConfig+0x478>
 80043ce:	e62f      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fe f970 	bl	80026b4 <HAL_GetTick>
 80043d4:	1b80      	subs	r0, r0, r6
 80043d6:	2802      	cmp	r0, #2
 80043d8:	d9d9      	bls.n	800438e <HAL_RCC_OscConfig+0x44a>
 80043da:	e629      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 80043dc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043de:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4013      	ands	r3, r2
 80043e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043e4:	f7fe f966 	bl	80026b4 <HAL_GetTick>
 80043e8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043ea:	04b6      	lsls	r6, r6, #18
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	4233      	tst	r3, r6
 80043f0:	d100      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4b0>
 80043f2:	e5f9      	b.n	8003fe8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fe f95e 	bl	80026b4 <HAL_GetTick>
 80043f8:	1b40      	subs	r0, r0, r5
 80043fa:	2802      	cmp	r0, #2
 80043fc:	d9f6      	bls.n	80043ec <HAL_RCC_OscConfig+0x4a8>
 80043fe:	e617      	b.n	8004030 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8004400:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004402:	2b01      	cmp	r3, #1
 8004404:	d100      	bne.n	8004408 <HAL_RCC_OscConfig+0x4c4>
 8004406:	e614      	b.n	8004032 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004408:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800440a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800440e:	0252      	lsls	r2, r2, #9
 8004410:	401a      	ands	r2, r3
 8004412:	428a      	cmp	r2, r1
 8004414:	d000      	beq.n	8004418 <HAL_RCC_OscConfig+0x4d4>
 8004416:	e5f5      	b.n	8004004 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004418:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800441c:	0392      	lsls	r2, r2, #14
 800441e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004420:	428a      	cmp	r2, r1
 8004422:	d000      	beq.n	8004426 <HAL_RCC_OscConfig+0x4e2>
 8004424:	e5ee      	b.n	8004004 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004426:	22c0      	movs	r2, #192	; 0xc0
 8004428:	0412      	lsls	r2, r2, #16
 800442a:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800442c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800442e:	4293      	cmp	r3, r2
 8004430:	d100      	bne.n	8004434 <HAL_RCC_OscConfig+0x4f0>
 8004432:	e5d9      	b.n	8003fe8 <HAL_RCC_OscConfig+0xa4>
 8004434:	e5e6      	b.n	8004004 <HAL_RCC_OscConfig+0xc0>
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	fffffeff 	.word	0xfffffeff
 800443c:	fffffbff 	.word	0xfffffbff
 8004440:	00001388 	.word	0x00001388
 8004444:	efffffff 	.word	0xefffffff
 8004448:	40010000 	.word	0x40010000
 800444c:	ffffdfff 	.word	0xffffdfff
 8004450:	feffffff 	.word	0xfeffffff
 8004454:	ff02ffff 	.word	0xff02ffff

08004458 <HAL_RCC_ClockConfig>:
{
 8004458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800445a:	1e04      	subs	r4, r0, #0
 800445c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004460:	2001      	movs	r0, #1
}
 8004462:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004464:	2501      	movs	r5, #1
 8004466:	4e5b      	ldr	r6, [pc, #364]	; (80045d4 <HAL_RCC_ClockConfig+0x17c>)
 8004468:	9a01      	ldr	r2, [sp, #4]
 800446a:	6833      	ldr	r3, [r6, #0]
 800446c:	402b      	ands	r3, r5
 800446e:	4293      	cmp	r3, r2
 8004470:	d331      	bcc.n	80044d6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	0793      	lsls	r3, r2, #30
 8004476:	d443      	bmi.n	8004500 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004478:	07d3      	lsls	r3, r2, #31
 800447a:	d449      	bmi.n	8004510 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800447c:	2501      	movs	r5, #1
 800447e:	6833      	ldr	r3, [r6, #0]
 8004480:	9a01      	ldr	r2, [sp, #4]
 8004482:	402b      	ands	r3, r5
 8004484:	4293      	cmp	r3, r2
 8004486:	d909      	bls.n	800449c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004488:	6833      	ldr	r3, [r6, #0]
 800448a:	43ab      	bics	r3, r5
 800448c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800448e:	f7fe f911 	bl	80026b4 <HAL_GetTick>
 8004492:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	422b      	tst	r3, r5
 8004498:	d000      	beq.n	800449c <HAL_RCC_ClockConfig+0x44>
 800449a:	e08c      	b.n	80045b6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	4d4e      	ldr	r5, [pc, #312]	; (80045d8 <HAL_RCC_ClockConfig+0x180>)
 80044a0:	0753      	lsls	r3, r2, #29
 80044a2:	d500      	bpl.n	80044a6 <HAL_RCC_ClockConfig+0x4e>
 80044a4:	e08f      	b.n	80045c6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	0713      	lsls	r3, r2, #28
 80044a8:	d506      	bpl.n	80044b8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044aa:	68e9      	ldr	r1, [r5, #12]
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <HAL_RCC_ClockConfig+0x184>)
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	400a      	ands	r2, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044b8:	f7ff fcfc 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 80044bc:	68eb      	ldr	r3, [r5, #12]
 80044be:	4a48      	ldr	r2, [pc, #288]	; (80045e0 <HAL_RCC_ClockConfig+0x188>)
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	0f1b      	lsrs	r3, r3, #28
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	40d8      	lsrs	r0, r3
 80044c8:	4b46      	ldr	r3, [pc, #280]	; (80045e4 <HAL_RCC_ClockConfig+0x18c>)
 80044ca:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80044cc:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <HAL_RCC_ClockConfig+0x190>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	f7fe f8ee 	bl	80026b0 <HAL_InitTick>
  if(status != HAL_OK)
 80044d4:	e7c5      	b.n	8004462 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	6833      	ldr	r3, [r6, #0]
 80044d8:	9a01      	ldr	r2, [sp, #4]
 80044da:	43ab      	bics	r3, r5
 80044dc:	4313      	orrs	r3, r2
 80044de:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80044e0:	f7fe f8e8 	bl	80026b4 <HAL_GetTick>
 80044e4:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	6833      	ldr	r3, [r6, #0]
 80044e8:	9a01      	ldr	r2, [sp, #4]
 80044ea:	402b      	ands	r3, r5
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d0c0      	beq.n	8004472 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fe f8e0 	bl	80026b4 <HAL_GetTick>
 80044f4:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <HAL_RCC_ClockConfig+0x194>)
 80044f6:	1bc0      	subs	r0, r0, r7
 80044f8:	4298      	cmp	r0, r3
 80044fa:	d9f4      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80044fc:	2003      	movs	r0, #3
 80044fe:	e7b0      	b.n	8004462 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004500:	20f0      	movs	r0, #240	; 0xf0
 8004502:	4935      	ldr	r1, [pc, #212]	; (80045d8 <HAL_RCC_ClockConfig+0x180>)
 8004504:	68cb      	ldr	r3, [r1, #12]
 8004506:	4383      	bics	r3, r0
 8004508:	68a0      	ldr	r0, [r4, #8]
 800450a:	4303      	orrs	r3, r0
 800450c:	60cb      	str	r3, [r1, #12]
 800450e:	e7b3      	b.n	8004478 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004510:	4d31      	ldr	r5, [pc, #196]	; (80045d8 <HAL_RCC_ClockConfig+0x180>)
 8004512:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004514:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004516:	2a02      	cmp	r2, #2
 8004518:	d118      	bne.n	800454c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800451a:	039b      	lsls	r3, r3, #14
 800451c:	d5a0      	bpl.n	8004460 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451e:	2103      	movs	r1, #3
 8004520:	68eb      	ldr	r3, [r5, #12]
 8004522:	438b      	bics	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004528:	f7fe f8c4 	bl	80026b4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800452e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004530:	2b02      	cmp	r3, #2
 8004532:	d118      	bne.n	8004566 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004534:	220c      	movs	r2, #12
 8004536:	68eb      	ldr	r3, [r5, #12]
 8004538:	4013      	ands	r3, r2
 800453a:	2b08      	cmp	r3, #8
 800453c:	d09e      	beq.n	800447c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453e:	f7fe f8b9 	bl	80026b4 <HAL_GetTick>
 8004542:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <HAL_RCC_ClockConfig+0x194>)
 8004544:	1bc0      	subs	r0, r0, r7
 8004546:	4298      	cmp	r0, r3
 8004548:	d9f4      	bls.n	8004534 <HAL_RCC_ClockConfig+0xdc>
 800454a:	e7d7      	b.n	80044fc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800454c:	2a03      	cmp	r2, #3
 800454e:	d102      	bne.n	8004556 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	d4e4      	bmi.n	800451e <HAL_RCC_ClockConfig+0xc6>
 8004554:	e784      	b.n	8004460 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004556:	2a01      	cmp	r2, #1
 8004558:	d102      	bne.n	8004560 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800455a:	075b      	lsls	r3, r3, #29
 800455c:	d4df      	bmi.n	800451e <HAL_RCC_ClockConfig+0xc6>
 800455e:	e77f      	b.n	8004460 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004560:	059b      	lsls	r3, r3, #22
 8004562:	d4dc      	bmi.n	800451e <HAL_RCC_ClockConfig+0xc6>
 8004564:	e77c      	b.n	8004460 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004566:	2b03      	cmp	r3, #3
 8004568:	d10b      	bne.n	8004582 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800456a:	220c      	movs	r2, #12
 800456c:	68eb      	ldr	r3, [r5, #12]
 800456e:	4013      	ands	r3, r2
 8004570:	4293      	cmp	r3, r2
 8004572:	d083      	beq.n	800447c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004574:	f7fe f89e 	bl	80026b4 <HAL_GetTick>
 8004578:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <HAL_RCC_ClockConfig+0x194>)
 800457a:	1bc0      	subs	r0, r0, r7
 800457c:	4298      	cmp	r0, r3
 800457e:	d9f4      	bls.n	800456a <HAL_RCC_ClockConfig+0x112>
 8004580:	e7bc      	b.n	80044fc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004582:	2b01      	cmp	r3, #1
 8004584:	d011      	beq.n	80045aa <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004586:	220c      	movs	r2, #12
 8004588:	68eb      	ldr	r3, [r5, #12]
 800458a:	4213      	tst	r3, r2
 800458c:	d100      	bne.n	8004590 <HAL_RCC_ClockConfig+0x138>
 800458e:	e775      	b.n	800447c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004590:	f7fe f890 	bl	80026b4 <HAL_GetTick>
 8004594:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_RCC_ClockConfig+0x194>)
 8004596:	1bc0      	subs	r0, r0, r7
 8004598:	4298      	cmp	r0, r3
 800459a:	d9f4      	bls.n	8004586 <HAL_RCC_ClockConfig+0x12e>
 800459c:	e7ae      	b.n	80044fc <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459e:	f7fe f889 	bl	80026b4 <HAL_GetTick>
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCC_ClockConfig+0x194>)
 80045a4:	1bc0      	subs	r0, r0, r7
 80045a6:	4298      	cmp	r0, r3
 80045a8:	d8a8      	bhi.n	80044fc <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045aa:	220c      	movs	r2, #12
 80045ac:	68eb      	ldr	r3, [r5, #12]
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d1f4      	bne.n	800459e <HAL_RCC_ClockConfig+0x146>
 80045b4:	e762      	b.n	800447c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b6:	f7fe f87d 	bl	80026b4 <HAL_GetTick>
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_RCC_ClockConfig+0x194>)
 80045bc:	1bc0      	subs	r0, r0, r7
 80045be:	4298      	cmp	r0, r3
 80045c0:	d800      	bhi.n	80045c4 <HAL_RCC_ClockConfig+0x16c>
 80045c2:	e767      	b.n	8004494 <HAL_RCC_ClockConfig+0x3c>
 80045c4:	e79a      	b.n	80044fc <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c6:	68eb      	ldr	r3, [r5, #12]
 80045c8:	4909      	ldr	r1, [pc, #36]	; (80045f0 <HAL_RCC_ClockConfig+0x198>)
 80045ca:	400b      	ands	r3, r1
 80045cc:	68e1      	ldr	r1, [r4, #12]
 80045ce:	430b      	orrs	r3, r1
 80045d0:	60eb      	str	r3, [r5, #12]
 80045d2:	e768      	b.n	80044a6 <HAL_RCC_ClockConfig+0x4e>
 80045d4:	40022000 	.word	0x40022000
 80045d8:	40021000 	.word	0x40021000
 80045dc:	ffffc7ff 	.word	0xffffc7ff
 80045e0:	0800e3c5 	.word	0x0800e3c5
 80045e4:	20000060 	.word	0x20000060
 80045e8:	20000068 	.word	0x20000068
 80045ec:	00001388 	.word	0x00001388
 80045f0:	fffff8ff 	.word	0xfffff8ff

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x14>)
 80045f6:	4a05      	ldr	r2, [pc, #20]	; (800460c <HAL_RCC_GetPCLK1Freq+0x18>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	055b      	lsls	r3, r3, #21
 80045fc:	0f5b      	lsrs	r3, r3, #29
 80045fe:	5cd3      	ldrb	r3, [r2, r3]
 8004600:	4a03      	ldr	r2, [pc, #12]	; (8004610 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004602:	6810      	ldr	r0, [r2, #0]
 8004604:	40d8      	lsrs	r0, r3
}
 8004606:	4770      	bx	lr
 8004608:	40021000 	.word	0x40021000
 800460c:	0800e3d5 	.word	0x0800e3d5
 8004610:	20000060 	.word	0x20000060

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004616:	4a05      	ldr	r2, [pc, #20]	; (800462c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	049b      	lsls	r3, r3, #18
 800461c:	0f5b      	lsrs	r3, r3, #29
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	4a03      	ldr	r2, [pc, #12]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004622:	6810      	ldr	r0, [r2, #0]
 8004624:	40d8      	lsrs	r0, r3
}
 8004626:	4770      	bx	lr
 8004628:	40021000 	.word	0x40021000
 800462c:	0800e3d5 	.word	0x0800e3d5
 8004630:	20000060 	.word	0x20000060

08004634 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004634:	6803      	ldr	r3, [r0, #0]
{
 8004636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004638:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800463a:	069b      	lsls	r3, r3, #26
 800463c:	d53e      	bpl.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x88>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004640:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004642:	4c60      	ldr	r4, [pc, #384]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004644:	055b      	lsls	r3, r3, #21
 8004646:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004648:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	421a      	tst	r2, r3
 800464c:	d104      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004650:	4313      	orrs	r3, r2
 8004652:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004654:	2301      	movs	r3, #1
 8004656:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	2780      	movs	r7, #128	; 0x80
 800465a:	4e5b      	ldr	r6, [pc, #364]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800465c:	007f      	lsls	r7, r7, #1
 800465e:	6833      	ldr	r3, [r6, #0]
 8004660:	423b      	tst	r3, r7
 8004662:	d06d      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004664:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004666:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004668:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800466a:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800466c:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800466e:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004670:	029b      	lsls	r3, r3, #10
 8004672:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004674:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004676:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004678:	428a      	cmp	r2, r1
 800467a:	d000      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800467c:	e071      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800467e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004680:	0011      	movs	r1, r2
 8004682:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004684:	421a      	tst	r2, r3
 8004686:	d000      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004688:	e074      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x140>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800468a:	6869      	ldr	r1, [r5, #4]
 800468c:	23c0      	movs	r3, #192	; 0xc0
 800468e:	000a      	movs	r2, r1
 8004690:	029b      	lsls	r3, r3, #10
 8004692:	401a      	ands	r2, r3
 8004694:	429a      	cmp	r2, r3
 8004696:	d107      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	484c      	ldr	r0, [pc, #304]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800469c:	4003      	ands	r3, r0
 800469e:	20c0      	movs	r0, #192	; 0xc0
 80046a0:	0380      	lsls	r0, r0, #14
 80046a2:	4001      	ands	r1, r0
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80046aa:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046ac:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ae:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d103      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046b6:	4a46      	ldr	r2, [pc, #280]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	07da      	lsls	r2, r3, #31
 80046c0:	d506      	bpl.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c2:	2003      	movs	r0, #3
 80046c4:	493f      	ldr	r1, [pc, #252]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80046c6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80046c8:	4382      	bics	r2, r0
 80046ca:	68a8      	ldr	r0, [r5, #8]
 80046cc:	4302      	orrs	r2, r0
 80046ce:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d0:	079a      	lsls	r2, r3, #30
 80046d2:	d506      	bpl.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046d4:	200c      	movs	r0, #12
 80046d6:	493b      	ldr	r1, [pc, #236]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80046d8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80046da:	4382      	bics	r2, r0
 80046dc:	68e8      	ldr	r0, [r5, #12]
 80046de:	4302      	orrs	r2, r0
 80046e0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046e2:	075a      	lsls	r2, r3, #29
 80046e4:	d506      	bpl.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046e6:	4937      	ldr	r1, [pc, #220]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80046e8:	483a      	ldr	r0, [pc, #232]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80046ea:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80046ec:	4002      	ands	r2, r0
 80046ee:	6928      	ldr	r0, [r5, #16]
 80046f0:	4302      	orrs	r2, r0
 80046f2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f4:	071a      	lsls	r2, r3, #28
 80046f6:	d506      	bpl.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f8:	4932      	ldr	r1, [pc, #200]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80046fa:	4837      	ldr	r0, [pc, #220]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046fc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80046fe:	4002      	ands	r2, r0
 8004700:	6968      	ldr	r0, [r5, #20]
 8004702:	4302      	orrs	r2, r0
 8004704:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004706:	05da      	lsls	r2, r3, #23
 8004708:	d506      	bpl.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800470a:	492e      	ldr	r1, [pc, #184]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800470c:	4833      	ldr	r0, [pc, #204]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800470e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004710:	4002      	ands	r2, r0
 8004712:	69a8      	ldr	r0, [r5, #24]
 8004714:	4302      	orrs	r2, r0
 8004716:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004718:	065a      	lsls	r2, r3, #25
 800471a:	d506      	bpl.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471c:	4929      	ldr	r1, [pc, #164]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800471e:	4830      	ldr	r0, [pc, #192]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004720:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004722:	4002      	ands	r2, r0
 8004724:	6a28      	ldr	r0, [r5, #32]
 8004726:	4302      	orrs	r2, r0
 8004728:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800472a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	d517      	bpl.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004730:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004732:	492c      	ldr	r1, [pc, #176]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004734:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004736:	400b      	ands	r3, r1
 8004738:	69e9      	ldr	r1, [r5, #28]
 800473a:	430b      	orrs	r3, r1
 800473c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800473e:	e00f      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004740:	6833      	ldr	r3, [r6, #0]
 8004742:	433b      	orrs	r3, r7
 8004744:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004746:	f7fd ffb5 	bl	80026b4 <HAL_GetTick>
 800474a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	423b      	tst	r3, r7
 8004750:	d188      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fd ffaf 	bl	80026b4 <HAL_GetTick>
 8004756:	9b01      	ldr	r3, [sp, #4]
 8004758:	1ac0      	subs	r0, r0, r3
 800475a:	2864      	cmp	r0, #100	; 0x64
 800475c:	d9f6      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x118>
          return HAL_TIMEOUT;
 800475e:	2003      	movs	r0, #3
}
 8004760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004762:	429e      	cmp	r6, r3
 8004764:	d000      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004766:	e78a      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004768:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 800476a:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800476c:	0392      	lsls	r2, r2, #14
 800476e:	d400      	bmi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004770:	e785      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004772:	e7f5      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004774:	42b1      	cmp	r1, r6
 8004776:	d100      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x146>
 8004778:	e787      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x56>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	069b      	lsls	r3, r3, #26
 800477e:	d400      	bmi.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004780:	e783      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004782:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004784:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004786:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004788:	0312      	lsls	r2, r2, #12
 800478a:	4302      	orrs	r2, r0
 800478c:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800478e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004792:	4815      	ldr	r0, [pc, #84]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004794:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004796:	4002      	ands	r2, r0
 8004798:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800479a:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800479c:	05cb      	lsls	r3, r1, #23
 800479e:	d400      	bmi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80047a0:	e773      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x56>
        tickstart = HAL_GetTick();
 80047a2:	f7fd ff87 	bl	80026b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047a6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80047a8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047aa:	00bf      	lsls	r7, r7, #2
 80047ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047ae:	423b      	tst	r3, r7
 80047b0:	d000      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80047b2:	e76a      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x56>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fd ff7e 	bl	80026b4 <HAL_GetTick>
 80047b8:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ba:	1b80      	subs	r0, r0, r6
 80047bc:	4298      	cmp	r0, r3
 80047be:	d9f5      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x178>
 80047c0:	e7cd      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	ffcfffff 	.word	0xffcfffff
 80047d0:	efffffff 	.word	0xefffffff
 80047d4:	fffff3ff 	.word	0xfffff3ff
 80047d8:	ffffcfff 	.word	0xffffcfff
 80047dc:	fffcffff 	.word	0xfffcffff
 80047e0:	fbffffff 	.word	0xfbffffff
 80047e4:	fff3ffff 	.word	0xfff3ffff
 80047e8:	fff7ffff 	.word	0xfff7ffff
 80047ec:	00001388 	.word	0x00001388

080047f0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80047f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f2:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047f4:	1c45      	adds	r5, r0, #1
 80047f6:	7feb      	ldrb	r3, [r5, #31]
{
 80047f8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80047fa:	0038      	movs	r0, r7
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d027      	beq.n	8004850 <HAL_RTC_DeactivateAlarm+0x60>
 8004800:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004802:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004804:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8004806:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004808:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
 800480e:	3a77      	subs	r2, #119	; 0x77
 8004810:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004812:	32ad      	adds	r2, #173	; 0xad
 8004814:	4291      	cmp	r1, r2
 8004816:	d12a      	bne.n	800486e <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	4922      	ldr	r1, [pc, #136]	; (80048a4 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800481c:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800481e:	400a      	ands	r2, r1
 8004820:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	4920      	ldr	r1, [pc, #128]	; (80048a8 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004826:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004828:	400a      	ands	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800482c:	f7fd ff42 	bl	80026b4 <HAL_GetTick>
 8004830:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004832:	2201      	movs	r2, #1
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	401a      	ands	r2, r3
 800483a:	9201      	str	r2, [sp, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	4213      	tst	r3, r2
 8004840:	d007      	beq.n	8004852 <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004842:	22ff      	movs	r2, #255	; 0xff
 8004844:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004846:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004848:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800484a:	2301      	movs	r3, #1
 800484c:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800484e:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8004850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004852:	f7fd ff2f 	bl	80026b4 <HAL_GetTick>
 8004856:	9b00      	ldr	r3, [sp, #0]
 8004858:	1ac0      	subs	r0, r0, r3
 800485a:	42b8      	cmp	r0, r7
 800485c:	d9e9      	bls.n	8004832 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800485e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004860:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004866:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 800486c:	e7f0      	b.n	8004850 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	490e      	ldr	r1, [pc, #56]	; (80048ac <HAL_RTC_DeactivateAlarm+0xbc>)
 8004872:	400a      	ands	r2, r1
 8004874:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	490d      	ldr	r1, [pc, #52]	; (80048b0 <HAL_RTC_DeactivateAlarm+0xc0>)
 800487a:	400a      	ands	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800487e:	f7fd ff19 	bl	80026b4 <HAL_GetTick>
 8004882:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	001a      	movs	r2, r3
 800488a:	403a      	ands	r2, r7
 800488c:	9201      	str	r2, [sp, #4]
 800488e:	423b      	tst	r3, r7
 8004890:	d1d7      	bne.n	8004842 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004892:	f7fd ff0f 	bl	80026b4 <HAL_GetTick>
 8004896:	9b00      	ldr	r3, [sp, #0]
 8004898:	1ac0      	subs	r0, r0, r3
 800489a:	23fa      	movs	r3, #250	; 0xfa
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4298      	cmp	r0, r3
 80048a0:	d9f0      	bls.n	8004884 <HAL_RTC_DeactivateAlarm+0x94>
 80048a2:	e7dc      	b.n	800485e <HAL_RTC_DeactivateAlarm+0x6e>
 80048a4:	fffffeff 	.word	0xfffffeff
 80048a8:	ffffefff 	.word	0xffffefff
 80048ac:	fffffdff 	.word	0xfffffdff
 80048b0:	ffffdfff 	.word	0xffffdfff

080048b4 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80048b4:	6803      	ldr	r3, [r0, #0]
{
 80048b6:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80048b8:	689a      	ldr	r2, [r3, #8]
{
 80048ba:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80048bc:	04d2      	lsls	r2, r2, #19
 80048be:	d50a      	bpl.n	80048d6 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	05db      	lsls	r3, r3, #23
 80048c4:	d507      	bpl.n	80048d6 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80048c6:	f7fd fd4d 	bl	8002364 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80048ca:	6821      	ldr	r1, [r4, #0]
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <HAL_RTC_AlarmIRQHandler+0x54>)
 80048ce:	68ca      	ldr	r2, [r1, #12]
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	0492      	lsls	r2, r2, #18
 80048dc:	d50b      	bpl.n	80048f6 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	059b      	lsls	r3, r3, #22
 80048e2:	d508      	bpl.n	80048f6 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80048e4:	0020      	movs	r0, r4
 80048e6:	f000 faf5 	bl	8004ed4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80048ea:	6821      	ldr	r1, [r4, #0]
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <HAL_RTC_AlarmIRQHandler+0x58>)
 80048ee:	68ca      	ldr	r2, [r1, #12]
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80048f6:	2280      	movs	r2, #128	; 0x80
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80048fa:	0292      	lsls	r2, r2, #10
 80048fc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048fe:	2301      	movs	r3, #1
 8004900:	3402      	adds	r4, #2
 8004902:	77e3      	strb	r3, [r4, #31]
}
 8004904:	bd10      	pop	{r4, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	fffffe7f 	.word	0xfffffe7f
 800490c:	fffffd7f 	.word	0xfffffd7f
 8004910:	40010400 	.word	0x40010400

08004914 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004914:	21a0      	movs	r1, #160	; 0xa0
 8004916:	6802      	ldr	r2, [r0, #0]
{
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800491a:	68d3      	ldr	r3, [r2, #12]
{
 800491c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800491e:	438b      	bics	r3, r1
 8004920:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004922:	f7fd fec7 	bl	80026b4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004926:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004928:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800492a:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800492c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4233      	tst	r3, r6
 8004934:	d001      	beq.n	800493a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004936:	2000      	movs	r0, #0
}
 8004938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800493a:	f7fd febb 	bl	80026b4 <HAL_GetTick>
 800493e:	1b40      	subs	r0, r0, r5
 8004940:	42b8      	cmp	r0, r7
 8004942:	d9f4      	bls.n	800492e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004944:	2003      	movs	r0, #3
 8004946:	e7f7      	b.n	8004938 <HAL_RTC_WaitForSynchro+0x24>

08004948 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800494a:	2640      	movs	r6, #64	; 0x40
 800494c:	6803      	ldr	r3, [r0, #0]
{
 800494e:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	4232      	tst	r2, r6
 8004954:	d001      	beq.n	800495a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004956:	2000      	movs	r0, #0
}
 8004958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800495a:	2201      	movs	r2, #1
 800495c:	4252      	negs	r2, r2
 800495e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004960:	f7fd fea8 	bl	80026b4 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004964:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004966:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004968:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4233      	tst	r3, r6
 8004970:	d1f1      	bne.n	8004956 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004972:	f7fd fe9f 	bl	80026b4 <HAL_GetTick>
 8004976:	1b40      	subs	r0, r0, r5
 8004978:	42b8      	cmp	r0, r7
 800497a:	d9f6      	bls.n	800496a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800497c:	2003      	movs	r0, #3
 800497e:	e7eb      	b.n	8004958 <RTC_EnterInitMode+0x10>

08004980 <HAL_RTC_Init>:
{
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004984:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8004986:	2800      	cmp	r0, #0
 8004988:	d01a      	beq.n	80049c0 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800498a:	1c86      	adds	r6, r0, #2
 800498c:	7ff3      	ldrb	r3, [r6, #31]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d103      	bne.n	800499c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8004994:	1943      	adds	r3, r0, r5
 8004996:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8004998:	f7fd fae2 	bl	8001f60 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800499c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800499e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049a0:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049a2:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049a4:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24
 80049a8:	3a77      	subs	r2, #119	; 0x77
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049ac:	f7ff ffcc 	bl	8004948 <RTC_EnterInitMode>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	1e05      	subs	r5, r0, #0
 80049b4:	d006      	beq.n	80049c4 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049b6:	22ff      	movs	r2, #255	; 0xff
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049ba:	2304      	movs	r3, #4
 80049bc:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 80049be:	2501      	movs	r5, #1
}
 80049c0:	0028      	movs	r0, r5
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	491b      	ldr	r1, [pc, #108]	; (8004a34 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049c8:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80049ca:	400a      	ands	r2, r1
 80049cc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	6899      	ldr	r1, [r3, #8]
 80049d2:	4302      	orrs	r2, r0
 80049d4:	69a0      	ldr	r0, [r4, #24]
 80049d6:	4302      	orrs	r2, r0
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049dc:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80049de:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80049e2:	68a2      	ldr	r2, [r4, #8]
 80049e4:	6919      	ldr	r1, [r3, #16]
 80049e6:	0412      	lsls	r2, r2, #16
 80049e8:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80049ea:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80049ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	438a      	bics	r2, r1
 80049f2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80049f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049f6:	397d      	subs	r1, #125	; 0x7d
 80049f8:	438a      	bics	r2, r1
 80049fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80049fc:	69e2      	ldr	r2, [r4, #28]
 80049fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a00:	4302      	orrs	r2, r0
 8004a02:	430a      	orrs	r2, r1
 8004a04:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	069b      	lsls	r3, r3, #26
 8004a0a:	d40c      	bmi.n	8004a26 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a0c:	0020      	movs	r0, r4
 8004a0e:	f7ff ff81 	bl	8004914 <HAL_RTC_WaitForSynchro>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a16:	22ff      	movs	r2, #255	; 0xff
 8004a18:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8004a1a:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a1e:	2304      	movs	r3, #4
 8004a20:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004a22:	77e5      	strb	r5, [r4, #31]
 8004a24:	e7cb      	b.n	80049be <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8004a30:	e7c6      	b.n	80049c0 <HAL_RTC_Init+0x40>
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	ff8fffbf 	.word	0xff8fffbf

08004a38 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004a38:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8004a3a:	2809      	cmp	r0, #9
 8004a3c:	d803      	bhi.n	8004a46 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	4318      	orrs	r0, r3
 8004a42:	b2c0      	uxtb	r0, r0
}
 8004a44:	4770      	bx	lr
    Param -= 10U;
 8004a46:	380a      	subs	r0, #10
    bcdhigh++;
 8004a48:	3301      	adds	r3, #1
    Param -= 10U;
 8004a4a:	b2c0      	uxtb	r0, r0
 8004a4c:	e7f5      	b.n	8004a3a <RTC_ByteToBcd2+0x2>
	...

08004a50 <HAL_RTC_SetTime>:
{
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004a52:	1c43      	adds	r3, r0, #1
{
 8004a54:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004a56:	9301      	str	r3, [sp, #4]
{
 8004a58:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004a5a:	7fd9      	ldrb	r1, [r3, #31]
 8004a5c:	2302      	movs	r3, #2
{
 8004a5e:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004a60:	001f      	movs	r7, r3
 8004a62:	2901      	cmp	r1, #1
 8004a64:	d036      	beq.n	8004ad4 <HAL_RTC_SetTime+0x84>
 8004a66:	2101      	movs	r1, #1
 8004a68:	1840      	adds	r0, r0, r1
 8004a6a:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a6c:	18e9      	adds	r1, r5, r3
 8004a6e:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a70:	682f      	ldr	r7, [r5, #0]
 8004a72:	7820      	ldrb	r0, [r4, #0]
 8004a74:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a76:	9102      	str	r1, [sp, #8]
 8004a78:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8004a7a:	2a00      	cmp	r2, #0
 8004a7c:	d12d      	bne.n	8004ada <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	0011      	movs	r1, r2
 8004a82:	4019      	ands	r1, r3
 8004a84:	421a      	tst	r2, r3
 8004a86:	d100      	bne.n	8004a8a <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8004a88:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a8a:	f7ff ffd5 	bl	8004a38 <RTC_ByteToBcd2>
 8004a8e:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a90:	0030      	movs	r0, r6
 8004a92:	f7ff ffd1 	bl	8004a38 <RTC_ByteToBcd2>
 8004a96:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004a98:	78a0      	ldrb	r0, [r4, #2]
 8004a9a:	f7ff ffcd 	bl	8004a38 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a9e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004aa0:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004aa2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004aa4:	4303      	orrs	r3, r0
 8004aa6:	0412      	lsls	r2, r2, #16
 8004aa8:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004aaa:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004aac:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aae:	23ca      	movs	r3, #202	; 0xca
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	3b77      	subs	r3, #119	; 0x77
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ab6:	0028      	movs	r0, r5
 8004ab8:	f7ff ff46 	bl	8004948 <RTC_EnterInitMode>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	1e07      	subs	r7, r0, #0
 8004ac0:	d019      	beq.n	8004af6 <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac2:	22ff      	movs	r2, #255	; 0xff
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	9a02      	ldr	r2, [sp, #8]
 8004aca:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004acc:	2300      	movs	r3, #0
 8004ace:	9a01      	ldr	r2, [sp, #4]
 8004ad0:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8004ad2:	2701      	movs	r7, #1
}
 8004ad4:	0038      	movs	r0, r7
 8004ad6:	b005      	add	sp, #20
 8004ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0011      	movs	r1, r2
 8004ade:	4019      	ands	r1, r3
 8004ae0:	421a      	tst	r2, r3
 8004ae2:	d100      	bne.n	8004ae6 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8004ae4:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ae6:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004ae8:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004aea:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004aec:	78e3      	ldrb	r3, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8004aee:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004af0:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004af2:	4306      	orrs	r6, r0
 8004af4:	e7da      	b.n	8004aac <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004af6:	4816      	ldr	r0, [pc, #88]	; (8004b50 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004af8:	4916      	ldr	r1, [pc, #88]	; (8004b54 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004afa:	4006      	ands	r6, r0
 8004afc:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004afe:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b00:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b02:	400a      	ands	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b06:	68e2      	ldr	r2, [r4, #12]
 8004b08:	6899      	ldr	r1, [r3, #8]
 8004b0a:	4302      	orrs	r2, r0
 8004b0c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b0e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b10:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	438a      	bics	r2, r1
 8004b16:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	069b      	lsls	r3, r3, #26
 8004b1c:	d40d      	bmi.n	8004b3a <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b1e:	0028      	movs	r0, r5
 8004b20:	f7ff fef8 	bl	8004914 <HAL_RTC_WaitForSynchro>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b28:	22ff      	movs	r2, #255	; 0xff
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b2e:	2304      	movs	r3, #4
 8004b30:	9a02      	ldr	r2, [sp, #8]
 8004b32:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004b34:	9b01      	ldr	r3, [sp, #4]
 8004b36:	77df      	strb	r7, [r3, #31]
 8004b38:	e7cb      	b.n	8004ad2 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b3a:	22ff      	movs	r2, #255	; 0xff
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004b40:	2301      	movs	r3, #1
 8004b42:	9a02      	ldr	r2, [sp, #8]
 8004b44:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004b46:	2300      	movs	r3, #0
 8004b48:	9a01      	ldr	r2, [sp, #4]
 8004b4a:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8004b4c:	e7c2      	b.n	8004ad4 <HAL_RTC_SetTime+0x84>
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	007f7f7f 	.word	0x007f7f7f
 8004b54:	fffbffff 	.word	0xfffbffff

08004b58 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8004b58:	2302      	movs	r3, #2
{
 8004b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004b5c:	1c47      	adds	r7, r0, #1
{
 8004b5e:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8004b60:	7ff9      	ldrb	r1, [r7, #31]
{
 8004b62:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004b64:	001d      	movs	r5, r3
{
 8004b66:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004b68:	2901      	cmp	r1, #1
 8004b6a:	d036      	beq.n	8004bda <HAL_RTC_SetDate+0x82>
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b70:	18c1      	adds	r1, r0, r3
 8004b72:	77cb      	strb	r3, [r1, #31]
 8004b74:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004b76:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b78:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004b7a:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b7c:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004b7e:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004b80:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	d14c      	bne.n	8004c20 <HAL_RTC_SetDate+0xc8>
 8004b86:	3210      	adds	r2, #16
 8004b88:	4213      	tst	r3, r2
 8004b8a:	d002      	beq.n	8004b92 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	330a      	adds	r3, #10
 8004b90:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b92:	f7ff ff51 	bl	8004a38 <RTC_ByteToBcd2>
 8004b96:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b98:	7870      	ldrb	r0, [r6, #1]
 8004b9a:	f7ff ff4d 	bl	8004a38 <RTC_ByteToBcd2>
 8004b9e:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004ba0:	0028      	movs	r0, r5
 8004ba2:	f7ff ff49 	bl	8004a38 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ba6:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ba8:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004baa:	041d      	lsls	r5, r3, #16
 8004bac:	9b02      	ldr	r3, [sp, #8]
 8004bae:	4318      	orrs	r0, r3
 8004bb0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb2:	22ca      	movs	r2, #202	; 0xca
 8004bb4:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bb6:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004bba:	3a77      	subs	r2, #119	; 0x77
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bbe:	f7ff fec3 	bl	8004948 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004bc2:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	1e05      	subs	r5, r0, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bca:	22ff      	movs	r2, #255	; 0xff
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bce:	2304      	movs	r3, #4
 8004bd0:	9a01      	ldr	r2, [sp, #4]
 8004bd2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004bd8:	2501      	movs	r5, #1
}
 8004bda:	0028      	movs	r0, r5
 8004bdc:	b005      	add	sp, #20
 8004bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004be0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004be2:	4812      	ldr	r0, [pc, #72]	; (8004c2c <HAL_RTC_SetDate+0xd4>)
 8004be4:	4006      	ands	r6, r0
 8004be6:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	438a      	bics	r2, r1
 8004bec:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	069b      	lsls	r3, r3, #26
 8004bf2:	d40c      	bmi.n	8004c0e <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bf4:	0020      	movs	r0, r4
 8004bf6:	f7ff fe8d 	bl	8004914 <HAL_RTC_WaitForSynchro>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bfe:	22ff      	movs	r2, #255	; 0xff
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c04:	2304      	movs	r3, #4
 8004c06:	9a01      	ldr	r2, [sp, #4]
 8004c08:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004c0a:	77fd      	strb	r5, [r7, #31]
 8004c0c:	e7e4      	b.n	8004bd8 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c0e:	22ff      	movs	r2, #255	; 0xff
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004c14:	2301      	movs	r3, #1
 8004c16:	9a01      	ldr	r2, [sp, #4]
 8004c18:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004c1e:	e7dc      	b.n	8004bda <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c20:	9a02      	ldr	r2, [sp, #8]
 8004c22:	0406      	lsls	r6, r0, #16
 8004c24:	4316      	orrs	r6, r2
 8004c26:	4335      	orrs	r5, r6
                  (((uint32_t)sDate->Month) << 8U) | \
 8004c28:	021e      	lsls	r6, r3, #8
 8004c2a:	e7c2      	b.n	8004bb2 <HAL_RTC_SetDate+0x5a>
 8004c2c:	00ffff3f 	.word	0x00ffff3f

08004c30 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004c30:	2302      	movs	r3, #2
{
 8004c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c34:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004c36:	1c41      	adds	r1, r0, #1
 8004c38:	7fce      	ldrb	r6, [r1, #31]
{
 8004c3a:	0004      	movs	r4, r0
 8004c3c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004c3e:	0018      	movs	r0, r3
 8004c40:	2e01      	cmp	r6, #1
 8004c42:	d100      	bne.n	8004c46 <HAL_RTC_SetAlarm_IT+0x16>
 8004c44:	e095      	b.n	8004d72 <HAL_RTC_SetAlarm_IT+0x142>
 8004c46:	3801      	subs	r0, #1
 8004c48:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c4a:	18e1      	adds	r1, r4, r3
 8004c4c:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8004c4e:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c50:	6826      	ldr	r6, [r4, #0]
 8004c52:	9101      	str	r1, [sp, #4]
 8004c54:	7828      	ldrb	r0, [r5, #0]
 8004c56:	78af      	ldrb	r7, [r5, #2]
 8004c58:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	d165      	bne.n	8004d2a <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c5e:	68b2      	ldr	r2, [r6, #8]
 8004c60:	0011      	movs	r1, r2
 8004c62:	4019      	ands	r1, r3
 8004c64:	421a      	tst	r2, r3
 8004c66:	d100      	bne.n	8004c6a <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c68:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c6a:	f7ff fee5 	bl	8004a38 <RTC_ByteToBcd2>
 8004c6e:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c70:	9801      	ldr	r0, [sp, #4]
 8004c72:	f7ff fee1 	bl	8004a38 <RTC_ByteToBcd2>
 8004c76:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004c78:	0038      	movs	r0, r7
 8004c7a:	f7ff fedd 	bl	8004a38 <RTC_ByteToBcd2>
 8004c7e:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004c80:	1c6b      	adds	r3, r5, #1
 8004c82:	7fd8      	ldrb	r0, [r3, #31]
 8004c84:	f7ff fed8 	bl	8004a38 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c88:	696a      	ldr	r2, [r5, #20]
 8004c8a:	69eb      	ldr	r3, [r5, #28]
 8004c8c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004c8e:	78ea      	ldrb	r2, [r5, #3]
 8004c90:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c92:	4313      	orrs	r3, r2
 8004c94:	431f      	orrs	r7, r3
 8004c96:	9b02      	ldr	r3, [sp, #8]
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c9c:	9b01      	ldr	r3, [sp, #4]
 8004c9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ca0:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ca2:	69aa      	ldr	r2, [r5, #24]
 8004ca4:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004ca6:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cac:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004cae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cb0:	6273      	str	r3, [r6, #36]	; 0x24
 8004cb2:	3b77      	subs	r3, #119	; 0x77
 8004cb4:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004cb6:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004cb8:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d15b      	bne.n	8004d76 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004cbe:	68b3      	ldr	r3, [r6, #8]
 8004cc0:	4a41      	ldr	r2, [pc, #260]	; (8004dc8 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004cc2:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004cc8:	68f2      	ldr	r2, [r6, #12]
 8004cca:	4b40      	ldr	r3, [pc, #256]	; (8004dcc <HAL_RTC_SetAlarm_IT+0x19c>)
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004cd2:	f7fd fcef 	bl	80026b4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cd6:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004cd8:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cda:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	0011      	movs	r1, r2
 8004ce2:	4029      	ands	r1, r5
 8004ce4:	9103      	str	r1, [sp, #12]
 8004ce6:	422a      	tst	r2, r5
 8004ce8:	d034      	beq.n	8004d54 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004cea:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004cec:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004cee:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	6899      	ldr	r1, [r3, #8]
 8004cf4:	0052      	lsls	r2, r2, #1
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004cfa:	2280      	movs	r2, #128	; 0x80
 8004cfc:	6899      	ldr	r1, [r3, #8]
 8004cfe:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004d04:	2280      	movs	r2, #128	; 0x80
 8004d06:	4b32      	ldr	r3, [pc, #200]	; (8004dd0 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8004d08:	0292      	lsls	r2, r2, #10
 8004d0a:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8004d0c:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004d0e:	4311      	orrs	r1, r2
 8004d10:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004d12:	6899      	ldr	r1, [r3, #8]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004d1e:	3afe      	subs	r2, #254	; 0xfe
 8004d20:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8004d22:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8004d24:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8004d26:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8004d28:	e023      	b.n	8004d72 <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d2a:	68b2      	ldr	r2, [r6, #8]
 8004d2c:	0011      	movs	r1, r2
 8004d2e:	4019      	ands	r1, r3
 8004d30:	421a      	tst	r2, r3
 8004d32:	d100      	bne.n	8004d36 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d34:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d36:	69eb      	ldr	r3, [r5, #28]
 8004d38:	696a      	ldr	r2, [r5, #20]
 8004d3a:	0400      	lsls	r0, r0, #16
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d40:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d42:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d44:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d46:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d48:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d4a:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d4c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d4e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d50:	7fd8      	ldrb	r0, [r3, #31]
 8004d52:	e7a6      	b.n	8004ca2 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d54:	f7fd fcae 	bl	80026b4 <HAL_GetTick>
 8004d58:	9b02      	ldr	r3, [sp, #8]
 8004d5a:	1ac0      	subs	r0, r0, r3
 8004d5c:	42b0      	cmp	r0, r6
 8004d5e:	d9bd      	bls.n	8004cdc <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d60:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d62:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d68:	1ca3      	adds	r3, r4, #2
 8004d6a:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8004d6c:	9b03      	ldr	r3, [sp, #12]
 8004d6e:	3401      	adds	r4, #1
 8004d70:	77e3      	strb	r3, [r4, #31]
}
 8004d72:	b005      	add	sp, #20
 8004d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d76:	68b3      	ldr	r3, [r6, #8]
 8004d78:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d7a:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004d80:	68f2      	ldr	r2, [r6, #12]
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004d8a:	f7fd fc93 	bl	80026b4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d8e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004d90:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d92:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	0011      	movs	r1, r2
 8004d9a:	4029      	ands	r1, r5
 8004d9c:	9103      	str	r1, [sp, #12]
 8004d9e:	422a      	tst	r2, r5
 8004da0:	d00b      	beq.n	8004dba <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004da2:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004da4:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004da6:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004da8:	2280      	movs	r2, #128	; 0x80
 8004daa:	6899      	ldr	r1, [r3, #8]
 8004dac:	0092      	lsls	r2, r2, #2
 8004dae:	430a      	orrs	r2, r1
 8004db0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004db2:	2280      	movs	r2, #128	; 0x80
 8004db4:	6899      	ldr	r1, [r3, #8]
 8004db6:	0192      	lsls	r2, r2, #6
 8004db8:	e7a2      	b.n	8004d00 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dba:	f7fd fc7b 	bl	80026b4 <HAL_GetTick>
 8004dbe:	9b02      	ldr	r3, [sp, #8]
 8004dc0:	1ac0      	subs	r0, r0, r3
 8004dc2:	42b0      	cmp	r0, r6
 8004dc4:	d9e6      	bls.n	8004d94 <HAL_RTC_SetAlarm_IT+0x164>
 8004dc6:	e7cb      	b.n	8004d60 <HAL_RTC_SetAlarm_IT+0x130>
 8004dc8:	fffffeff 	.word	0xfffffeff
 8004dcc:	fffffe7f 	.word	0xfffffe7f
 8004dd0:	40010400 	.word	0x40010400
 8004dd4:	fffffdff 	.word	0xfffffdff
 8004dd8:	fffffd7f 	.word	0xfffffd7f

08004ddc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004ddc:	0902      	lsrs	r2, r0, #4
{
 8004dde:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004de0:	200a      	movs	r0, #10
 8004de2:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004de4:	220f      	movs	r2, #15
 8004de6:	4013      	ands	r3, r2
 8004de8:	18c0      	adds	r0, r0, r3
 8004dea:	b2c0      	uxtb	r0, r0
}
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_RTC_GetTime>:
{
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004df4:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004df6:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004df8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004dfa:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004dfc:	690b      	ldr	r3, [r1, #16]
 8004dfe:	045b      	lsls	r3, r3, #17
 8004e00:	0c5b      	lsrs	r3, r3, #17
 8004e02:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e04:	680b      	ldr	r3, [r1, #0]
 8004e06:	490e      	ldr	r1, [pc, #56]	; (8004e40 <HAL_RTC_GetTime+0x50>)
 8004e08:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004e0a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004e0c:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004e0e:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004e10:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004e12:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004e14:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004e16:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004e18:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004e1a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004e1c:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004e1e:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	d10a      	bne.n	8004e3a <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e24:	f7ff ffda 	bl	8004ddc <RTC_Bcd2ToByte>
 8004e28:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e2a:	0030      	movs	r0, r6
 8004e2c:	f7ff ffd6 	bl	8004ddc <RTC_Bcd2ToByte>
 8004e30:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e32:	0028      	movs	r0, r5
 8004e34:	f7ff ffd2 	bl	8004ddc <RTC_Bcd2ToByte>
 8004e38:	70a0      	strb	r0, [r4, #2]
}
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	007f7f7f 	.word	0x007f7f7f

08004e44 <HAL_RTC_GetDate>:
{
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004e48:	6803      	ldr	r3, [r0, #0]
 8004e4a:	490e      	ldr	r1, [pc, #56]	; (8004e84 <HAL_RTC_GetDate+0x40>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004e50:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004e52:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e54:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004e56:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004e58:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004e5a:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004e5c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004e5e:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e60:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004e62:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8004e64:	2a00      	cmp	r2, #0
 8004e66:	d10a      	bne.n	8004e7e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004e68:	f7ff ffb8 	bl	8004ddc <RTC_Bcd2ToByte>
 8004e6c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004e6e:	0028      	movs	r0, r5
 8004e70:	f7ff ffb4 	bl	8004ddc <RTC_Bcd2ToByte>
 8004e74:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e76:	0030      	movs	r0, r6
 8004e78:	f7ff ffb0 	bl	8004ddc <RTC_Bcd2ToByte>
 8004e7c:	70a0      	strb	r0, [r4, #2]
}
 8004e7e:	2000      	movs	r0, #0
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	00ffff3f 	.word	0x00ffff3f

08004e88 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e88:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004e8a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e8c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004e8e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004e90:	600a      	str	r2, [r1, #0]
}
 8004e92:	4770      	bx	lr

08004e94 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e94:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004e96:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e98:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004e9a:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004e9c:	6808      	ldr	r0, [r1, #0]
}
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ea0:	2202      	movs	r2, #2
{
 8004ea2:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8004ea4:	1c41      	adds	r1, r0, #1
 8004ea6:	7fcc      	ldrb	r4, [r1, #31]
{
 8004ea8:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8004eaa:	0010      	movs	r0, r2
 8004eac:	2c01      	cmp	r4, #1
 8004eae:	d010      	beq.n	8004ed2 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eb0:	1898      	adds	r0, r3, r2
 8004eb2:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	32c8      	adds	r2, #200	; 0xc8
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004eba:	3a77      	subs	r2, #119	; 0x77
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8004ebe:	689c      	ldr	r4, [r3, #8]
 8004ec0:	3a33      	subs	r2, #51	; 0x33
 8004ec2:	4322      	orrs	r2, r4
 8004ec4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ec6:	22ff      	movs	r2, #255	; 0xff
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ece:	2000      	movs	r0, #0
 8004ed0:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <HAL_RTCEx_AlarmBEventCallback>:
 8004ed4:	4770      	bx	lr
	...

08004ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eda:	001f      	movs	r7, r3
 8004edc:	b085      	sub	sp, #20
 8004ede:	000e      	movs	r6, r1
 8004ee0:	9201      	str	r2, [sp, #4]
 8004ee2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ee4:	f7fd fbe6 	bl	80026b4 <HAL_GetTick>
 8004ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eea:	19dd      	adds	r5, r3, r7
 8004eec:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004eee:	f7fd fbe1 	bl	80026b4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ef2:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 8004ef4:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	015b      	lsls	r3, r3, #5
 8004efa:	0d1b      	lsrs	r3, r3, #20
 8004efc:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004efe:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004f00:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f02:	6893      	ldr	r3, [r2, #8]
 8004f04:	4033      	ands	r3, r6
 8004f06:	1b9b      	subs	r3, r3, r6
 8004f08:	4259      	negs	r1, r3
 8004f0a:	414b      	adcs	r3, r1
 8004f0c:	9901      	ldr	r1, [sp, #4]
 8004f0e:	428b      	cmp	r3, r1
 8004f10:	d101      	bne.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004f12:	2000      	movs	r0, #0
 8004f14:	e032      	b.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	1c7b      	adds	r3, r7, #1
 8004f18:	d0f3      	beq.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f1a:	f7fd fbcb 	bl	80026b4 <HAL_GetTick>
 8004f1e:	9b00      	ldr	r3, [sp, #0]
 8004f20:	1ac0      	subs	r0, r0, r3
 8004f22:	42a8      	cmp	r0, r5
 8004f24:	d32c      	bcc.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f26:	21e0      	movs	r1, #224	; 0xe0
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f30:	2282      	movs	r2, #130	; 0x82
 8004f32:	6861      	ldr	r1, [r4, #4]
 8004f34:	0052      	lsls	r2, r2, #1
 8004f36:	4291      	cmp	r1, r2
 8004f38:	d10c      	bne.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x7c>
 8004f3a:	2180      	movs	r1, #128	; 0x80
 8004f3c:	68a2      	ldr	r2, [r4, #8]
 8004f3e:	0209      	lsls	r1, r1, #8
 8004f40:	428a      	cmp	r2, r1
 8004f42:	d003      	beq.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f44:	2180      	movs	r1, #128	; 0x80
 8004f46:	00c9      	lsls	r1, r1, #3
 8004f48:	428a      	cmp	r2, r1
 8004f4a:	d103      	bne.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8004f4c:	2140      	movs	r1, #64	; 0x40
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	438a      	bics	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f54:	2180      	movs	r1, #128	; 0x80
 8004f56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f58:	0189      	lsls	r1, r1, #6
 8004f5a:	428a      	cmp	r2, r1
 8004f5c:	d106      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	480c      	ldr	r0, [pc, #48]	; (8004f94 <SPI_WaitFlagStateUntilTimeout+0xbc>)
 8004f62:	4001      	ands	r1, r0
 8004f64:	6019      	str	r1, [r3, #0]
 8004f66:	6819      	ldr	r1, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004f6c:	0023      	movs	r3, r4
 8004f6e:	2201      	movs	r2, #1
 8004f70:	3351      	adds	r3, #81	; 0x51
 8004f72:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004f74:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004f76:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004f78:	3450      	adds	r4, #80	; 0x50
 8004f7a:	7023      	strb	r3, [r4, #0]
}
 8004f7c:	b005      	add	sp, #20
 8004f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004f80:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004f82:	1e5a      	subs	r2, r3, #1
 8004f84:	4193      	sbcs	r3, r2
 8004f86:	425b      	negs	r3, r3
 8004f88:	401d      	ands	r5, r3
      count--;
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	e7b6      	b.n	8004efe <SPI_WaitFlagStateUntilTimeout+0x26>
 8004f90:	20000060 	.word	0x20000060
 8004f94:	ffffdfff 	.word	0xffffdfff

08004f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <SPI_EndRxTxTransaction+0x60>)
{
 8004f9c:	0004      	movs	r4, r0
 8004f9e:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	4916      	ldr	r1, [pc, #88]	; (8004ffc <SPI_EndRxTxTransaction+0x64>)
{
 8004fa4:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa6:	f7fb f8df 	bl	8000168 <__udivsi3>
 8004faa:	23fa      	movs	r3, #250	; 0xfa
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4343      	muls	r3, r0
 8004fb0:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb2:	2382      	movs	r3, #130	; 0x82
 8004fb4:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fb6:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4299      	cmp	r1, r3
 8004fbc:	d10f      	bne.n	8004fde <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fbe:	002b      	movs	r3, r5
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	9600      	str	r6, [sp, #0]
 8004fc8:	f7ff ff86 	bl	8004ed8 <SPI_WaitFlagStateUntilTimeout>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d010      	beq.n	8004ff2 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd0:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004fd2:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004fda:	b004      	add	sp, #16
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8004fde:	9b03      	ldr	r3, [sp, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d006      	beq.n	8004ff2 <SPI_EndRxTxTransaction+0x5a>
      count--;
 8004fe4:	9b03      	ldr	r3, [sp, #12]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	4213      	tst	r3, r2
 8004ff0:	d1f5      	bne.n	8004fde <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e7f1      	b.n	8004fda <SPI_EndRxTxTransaction+0x42>
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	20000060 	.word	0x20000060
 8004ffc:	016e3600 	.word	0x016e3600

08005000 <HAL_SPI_MspInit>:
}
 8005000:	4770      	bx	lr
	...

08005004 <HAL_SPI_Init>:
{
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005008:	2001      	movs	r0, #1
  if (hspi == NULL)
 800500a:	2c00      	cmp	r4, #0
 800500c:	d05b      	beq.n	80050c6 <HAL_SPI_Init+0xc2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800500e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d159      	bne.n	80050c8 <HAL_SPI_Init+0xc4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005014:	2282      	movs	r2, #130	; 0x82
 8005016:	6861      	ldr	r1, [r4, #4]
 8005018:	0052      	lsls	r2, r2, #1
 800501a:	4291      	cmp	r1, r2
 800501c:	d000      	beq.n	8005020 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800501e:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005020:	0025      	movs	r5, r4
 8005022:	3551      	adds	r5, #81	; 0x51
 8005024:	782b      	ldrb	r3, [r5, #0]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 800502c:	0023      	movs	r3, r4
 800502e:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8005030:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005032:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8005034:	f7ff ffe4 	bl	8005000 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005038:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800503a:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800503c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800503e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005040:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8005042:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	6867      	ldr	r7, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8005046:	4393      	bics	r3, r2
 8005048:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800504a:	2382      	movs	r3, #130	; 0x82
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	403b      	ands	r3, r7
 8005050:	2784      	movs	r7, #132	; 0x84
 8005052:	68a6      	ldr	r6, [r4, #8]
 8005054:	023f      	lsls	r7, r7, #8
 8005056:	4037      	ands	r7, r6
 8005058:	433b      	orrs	r3, r7
 800505a:	2780      	movs	r7, #128	; 0x80
 800505c:	68e6      	ldr	r6, [r4, #12]
 800505e:	013f      	lsls	r7, r7, #4
 8005060:	4037      	ands	r7, r6
 8005062:	433b      	orrs	r3, r7
 8005064:	4667      	mov	r7, ip
 8005066:	6926      	ldr	r6, [r4, #16]
 8005068:	69a2      	ldr	r2, [r4, #24]
 800506a:	4037      	ands	r7, r6
 800506c:	2601      	movs	r6, #1
 800506e:	433b      	orrs	r3, r7
 8005070:	6967      	ldr	r7, [r4, #20]
 8005072:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005074:	403e      	ands	r6, r7
 8005076:	4333      	orrs	r3, r6
 8005078:	2680      	movs	r6, #128	; 0x80
 800507a:	00b6      	lsls	r6, r6, #2
 800507c:	4016      	ands	r6, r2
 800507e:	4333      	orrs	r3, r6
 8005080:	2638      	movs	r6, #56	; 0x38
 8005082:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005084:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005086:	403e      	ands	r6, r7
 8005088:	4333      	orrs	r3, r6
 800508a:	2680      	movs	r6, #128	; 0x80
 800508c:	6a27      	ldr	r7, [r4, #32]
 800508e:	403e      	ands	r6, r7
 8005090:	4333      	orrs	r3, r6
 8005092:	2680      	movs	r6, #128	; 0x80
 8005094:	0007      	movs	r7, r0
 8005096:	01b6      	lsls	r6, r6, #6
 8005098:	4037      	ands	r7, r6
 800509a:	433b      	orrs	r3, r7
 800509c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800509e:	2304      	movs	r3, #4
 80050a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80050a2:	401a      	ands	r2, r3
 80050a4:	330c      	adds	r3, #12
 80050a6:	403b      	ands	r3, r7
 80050a8:	431a      	orrs	r2, r3
 80050aa:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050ac:	42b0      	cmp	r0, r6
 80050ae:	d102      	bne.n	80050b6 <HAL_SPI_Init+0xb2>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80050b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050b6:	69cb      	ldr	r3, [r1, #28]
 80050b8:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ba:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050bc:	4013      	ands	r3, r2
 80050be:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80050c0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050c2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050c4:	702b      	strb	r3, [r5, #0]
}
 80050c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050c8:	2300      	movs	r3, #0
 80050ca:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050cc:	6163      	str	r3, [r4, #20]
 80050ce:	e7a7      	b.n	8005020 <HAL_SPI_Init+0x1c>
 80050d0:	fffff7ff 	.word	0xfffff7ff

080050d4 <HAL_SPI_TransmitReceive>:
{
 80050d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d6:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 80050d8:	0003      	movs	r3, r0
{
 80050da:	b087      	sub	sp, #28
 80050dc:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 80050de:	3350      	adds	r3, #80	; 0x50
 80050e0:	781a      	ldrb	r2, [r3, #0]
{
 80050e2:	0004      	movs	r4, r0
 80050e4:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 80050e6:	2502      	movs	r5, #2
 80050e8:	2a01      	cmp	r2, #1
 80050ea:	d100      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x1a>
 80050ec:	e0a8      	b.n	8005240 <HAL_SPI_TransmitReceive+0x16c>
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80050f2:	f7fd fadf 	bl	80026b4 <HAL_GetTick>
  tmp_state           = hspi->State;
 80050f6:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80050f8:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 80050fa:	3351      	adds	r3, #81	; 0x51
 80050fc:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80050fe:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005100:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005102:	2b01      	cmp	r3, #1
 8005104:	d00b      	beq.n	800511e <HAL_SPI_TransmitReceive+0x4a>
 8005106:	2382      	movs	r3, #130	; 0x82
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4299      	cmp	r1, r3
 800510c:	d000      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x3c>
 800510e:	e090      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d000      	beq.n	8005118 <HAL_SPI_TransmitReceive+0x44>
 8005116:	e08c      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
 8005118:	2a04      	cmp	r2, #4
 800511a:	d000      	beq.n	800511e <HAL_SPI_TransmitReceive+0x4a>
 800511c:	e089      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
    errorcode = HAL_ERROR;
 800511e:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005120:	2e00      	cmp	r6, #0
 8005122:	d100      	bne.n	8005126 <HAL_SPI_TransmitReceive+0x52>
 8005124:	e085      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d100      	bne.n	800512e <HAL_SPI_TransmitReceive+0x5a>
 800512c:	e081      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
 800512e:	2f00      	cmp	r7, #0
 8005130:	d100      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x60>
 8005132:	e07e      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005134:	0023      	movs	r3, r4
 8005136:	3351      	adds	r3, #81	; 0x51
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	2a04      	cmp	r2, #4
 800513c:	d001      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800513e:	2205      	movs	r2, #5
 8005140:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005142:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005144:	2080      	movs	r0, #128	; 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005146:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005148:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800514a:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800514c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 800514e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005150:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005152:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 8005154:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_RESET_CRC(hspi);
 8005156:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005158:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800515a:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800515c:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800515e:	0180      	lsls	r0, r0, #6
 8005160:	4282      	cmp	r2, r0
 8005162:	d106      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x9e>
    SPI_RESET_CRC(hspi);
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	4d84      	ldr	r5, [pc, #528]	; (8005378 <HAL_SPI_TransmitReceive+0x2a4>)
 8005168:	4028      	ands	r0, r5
 800516a:	6018      	str	r0, [r3, #0]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	4302      	orrs	r2, r0
 8005170:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005172:	2240      	movs	r2, #64	; 0x40
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	4210      	tst	r0, r2
 8005178:	d102      	bne.n	8005180 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	4302      	orrs	r2, r0
 800517e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005180:	2280      	movs	r2, #128	; 0x80
 8005182:	68e0      	ldr	r0, [r4, #12]
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	4290      	cmp	r0, r2
 8005188:	d000      	beq.n	800518c <HAL_SPI_TransmitReceive+0xb8>
 800518a:	e072      	b.n	8005272 <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800518c:	2900      	cmp	r1, #0
 800518e:	d001      	beq.n	8005194 <HAL_SPI_TransmitReceive+0xc0>
 8005190:	2f01      	cmp	r7, #1
 8005192:	d107      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005194:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005196:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005198:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800519a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800519c:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80051a4:	2680      	movs	r6, #128	; 0x80
        txallowed = 1U;
 80051a6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051a8:	2702      	movs	r7, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80051aa:	01b6      	lsls	r6, r6, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d118      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x110>
 80051b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d115      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	429a      	cmp	r2, r3
 80051c0:	d000      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0xf0>
 80051c2:	e0b5      	b.n	8005330 <HAL_SPI_TransmitReceive+0x25c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80051c4:	2201      	movs	r2, #1
 80051c6:	9b02      	ldr	r3, [sp, #8]
 80051c8:	0011      	movs	r1, r2
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	0020      	movs	r0, r4
 80051ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051d0:	f7ff fe82 	bl	8004ed8 <SPI_WaitFlagStateUntilTimeout>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d100      	bne.n	80051da <HAL_SPI_TransmitReceive+0x106>
 80051d8:	e0a8      	b.n	800532c <HAL_SPI_TransmitReceive+0x258>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80051da:	2302      	movs	r3, #2
 80051dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051de:	4313      	orrs	r3, r2
 80051e0:	6563      	str	r3, [r4, #84]	; 0x54
 80051e2:	e025      	b.n	8005230 <HAL_SPI_TransmitReceive+0x15c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	423a      	tst	r2, r7
 80051ea:	d005      	beq.n	80051f8 <HAL_SPI_TransmitReceive+0x124>
 80051ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_TransmitReceive+0x124>
 80051f2:	2d01      	cmp	r5, #1
 80051f4:	d027      	beq.n	8005246 <HAL_SPI_TransmitReceive+0x172>
{
 80051f6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051f8:	6898      	ldr	r0, [r3, #8]
 80051fa:	2101      	movs	r1, #1
 80051fc:	0002      	movs	r2, r0
 80051fe:	400a      	ands	r2, r1
 8005200:	4208      	tst	r0, r1
 8005202:	d00c      	beq.n	800521e <HAL_SPI_TransmitReceive+0x14a>
 8005204:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005206:	2900      	cmp	r1, #0
 8005208:	d009      	beq.n	800521e <HAL_SPI_TransmitReceive+0x14a>
        txallowed = 1U;
 800520a:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800520c:	68d9      	ldr	r1, [r3, #12]
 800520e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005210:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005212:	3302      	adds	r3, #2
 8005214:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005216:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005218:	3b01      	subs	r3, #1
 800521a:	b29b      	uxth	r3, r3
 800521c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800521e:	f7fd fa49 	bl	80026b4 <HAL_GetTick>
 8005222:	9b02      	ldr	r3, [sp, #8]
 8005224:	1ac0      	subs	r0, r0, r3
 8005226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005228:	4298      	cmp	r0, r3
 800522a:	d3bf      	bcc.n	80051ac <HAL_SPI_TransmitReceive+0xd8>
 800522c:	3301      	adds	r3, #1
 800522e:	d0bd      	beq.n	80051ac <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8005230:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005232:	0023      	movs	r3, r4
 8005234:	2201      	movs	r2, #1
 8005236:	3351      	adds	r3, #81	; 0x51
 8005238:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800523a:	2300      	movs	r3, #0
 800523c:	3450      	adds	r4, #80	; 0x50
 800523e:	7023      	strb	r3, [r4, #0]
}
 8005240:	0028      	movs	r0, r5
 8005242:	b007      	add	sp, #28
 8005244:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005246:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005248:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800524a:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800524c:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800524e:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005250:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005252:	3a01      	subs	r2, #1
 8005254:	b292      	uxth	r2, r2
 8005256:	86e2      	strh	r2, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005258:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800525a:	b295      	uxth	r5, r2
 800525c:	2a00      	cmp	r2, #0
 800525e:	d1ca      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x122>
 8005260:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005262:	42b2      	cmp	r2, r6
 8005264:	d1c7      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x122>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005266:	2280      	movs	r2, #128	; 0x80
 8005268:	6819      	ldr	r1, [r3, #0]
 800526a:	0152      	lsls	r2, r2, #5
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e7c2      	b.n	80051f8 <HAL_SPI_TransmitReceive+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005272:	2900      	cmp	r1, #0
 8005274:	d001      	beq.n	800527a <HAL_SPI_TransmitReceive+0x1a6>
 8005276:	2f01      	cmp	r7, #1
 8005278:	d108      	bne.n	800528c <HAL_SPI_TransmitReceive+0x1b8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800527a:	7832      	ldrb	r2, [r6, #0]
 800527c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800527e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005280:	3301      	adds	r3, #1
 8005282:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005284:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005286:	3b01      	subs	r3, #1
 8005288:	b29b      	uxth	r3, r3
 800528a:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800528c:	2680      	movs	r6, #128	; 0x80
        txallowed = 1U;
 800528e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005290:	2702      	movs	r7, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005292:	01b6      	lsls	r6, r6, #6
 8005294:	e027      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	423a      	tst	r2, r7
 800529c:	d005      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x1d6>
 800529e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80052a0:	2a00      	cmp	r2, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x1d6>
 80052a4:	2d01      	cmp	r5, #1
 80052a6:	d025      	beq.n	80052f4 <HAL_SPI_TransmitReceive+0x220>
        txallowed = 1U;
 80052a8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	2101      	movs	r1, #1
 80052ae:	6898      	ldr	r0, [r3, #8]
 80052b0:	0002      	movs	r2, r0
 80052b2:	400a      	ands	r2, r1
 80052b4:	4208      	tst	r0, r1
 80052b6:	d00d      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x200>
 80052b8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80052ba:	2900      	cmp	r1, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x200>
        txallowed = 1U;
 80052be:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80052c4:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 80052c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052c8:	3301      	adds	r3, #1
 80052ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80052cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052d4:	f7fd f9ee 	bl	80026b4 <HAL_GetTick>
 80052d8:	9b02      	ldr	r3, [sp, #8]
 80052da:	1ac0      	subs	r0, r0, r3
 80052dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052de:	4298      	cmp	r0, r3
 80052e0:	d320      	bcc.n	8005324 <HAL_SPI_TransmitReceive+0x250>
 80052e2:	3301      	adds	r3, #1
 80052e4:	d1a4      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1d4      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x1c2>
 80052ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1d1      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x1c2>
 80052f2:	e761      	b.n	80051b8 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80052fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052fc:	3301      	adds	r3, #1
 80052fe:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005300:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005302:	3b01      	subs	r3, #1
 8005304:	b29b      	uxth	r3, r3
 8005306:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005308:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800530a:	b29d      	uxth	r5, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1cb      	bne.n	80052a8 <HAL_SPI_TransmitReceive+0x1d4>
 8005310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005312:	42b3      	cmp	r3, r6
 8005314:	d1c8      	bne.n	80052a8 <HAL_SPI_TransmitReceive+0x1d4>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005316:	2380      	movs	r3, #128	; 0x80
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	015b      	lsls	r3, r3, #5
 800531c:	6811      	ldr	r1, [r2, #0]
 800531e:	430b      	orrs	r3, r1
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e7c2      	b.n	80052aa <HAL_SPI_TransmitReceive+0x1d6>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1dd      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x212>
 800532a:	e781      	b.n	8005230 <HAL_SPI_TransmitReceive+0x15c>
    READ_REG(hspi->Instance->DR);
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005330:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005332:	2500      	movs	r5, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005334:	6893      	ldr	r3, [r2, #8]
 8005336:	06db      	lsls	r3, r3, #27
 8005338:	d506      	bpl.n	8005348 <HAL_SPI_TransmitReceive+0x274>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800533a:	2302      	movs	r3, #2
 800533c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800533e:	3501      	adds	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005340:	430b      	orrs	r3, r1
 8005342:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <HAL_SPI_TransmitReceive+0x2a8>)
 8005346:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005348:	0020      	movs	r0, r4
 800534a:	9a02      	ldr	r2, [sp, #8]
 800534c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800534e:	f7ff fe23 	bl	8004f98 <SPI_EndRxTxTransaction>
 8005352:	2800      	cmp	r0, #0
 8005354:	d003      	beq.n	800535e <HAL_SPI_TransmitReceive+0x28a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005356:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005358:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800535a:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 800535c:	e769      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800535e:	68a3      	ldr	r3, [r4, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d000      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x292>
 8005364:	e765      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005366:	9305      	str	r3, [sp, #20]
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	9205      	str	r2, [sp, #20]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	9b05      	ldr	r3, [sp, #20]
 8005374:	e75d      	b.n	8005232 <HAL_SPI_TransmitReceive+0x15e>
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	ffffdfff 	.word	0xffffdfff
 800537c:	0000ffef 	.word	0x0000ffef

08005380 <HAL_SPI_GetState>:
  return hspi->State;
 8005380:	3051      	adds	r0, #81	; 0x51
 8005382:	7800      	ldrb	r0, [r0, #0]
 8005384:	b2c0      	uxtb	r0, r0
}
 8005386:	4770      	bx	lr

08005388 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005388:	6803      	ldr	r3, [r0, #0]
 800538a:	490b      	ldr	r1, [pc, #44]	; (80053b8 <UART_EndRxTransfer+0x30>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	400a      	ands	r2, r1
 8005390:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	3123      	adds	r1, #35	; 0x23
 8005396:	31ff      	adds	r1, #255	; 0xff
 8005398:	438a      	bics	r2, r1
 800539a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800539e:	428a      	cmp	r2, r1
 80053a0:	d103      	bne.n	80053aa <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	310f      	adds	r1, #15
 80053a6:	438a      	bics	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053aa:	2320      	movs	r3, #32
 80053ac:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ae:	2300      	movs	r3, #0
 80053b0:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053b2:	6643      	str	r3, [r0, #100]	; 0x64
}
 80053b4:	4770      	bx	lr
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	fffffedf 	.word	0xfffffedf

080053bc <HAL_UART_Transmit_DMA>:
{
 80053bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053be:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80053c0:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80053c2:	0004      	movs	r4, r0
    return HAL_BUSY;
 80053c4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80053c6:	2a20      	cmp	r2, #32
 80053c8:	d13a      	bne.n	8005440 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 80053ca:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d037      	beq.n	8005440 <HAL_UART_Transmit_DMA+0x84>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d035      	beq.n	8005440 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d4:	2280      	movs	r2, #128	; 0x80
 80053d6:	68a0      	ldr	r0, [r4, #8]
 80053d8:	0152      	lsls	r2, r2, #5
 80053da:	4290      	cmp	r0, r2
 80053dc:	d106      	bne.n	80053ec <HAL_UART_Transmit_DMA+0x30>
 80053de:	6922      	ldr	r2, [r4, #16]
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	d103      	bne.n	80053ec <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 80053e4:	3201      	adds	r2, #1
      return HAL_ERROR;
 80053e6:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 80053e8:	4211      	tst	r1, r2
 80053ea:	d129      	bne.n	8005440 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 80053ec:	0025      	movs	r5, r4
 80053ee:	3574      	adds	r5, #116	; 0x74
 80053f0:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 80053f2:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	d023      	beq.n	8005440 <HAL_UART_Transmit_DMA+0x84>
 80053f8:	2201      	movs	r2, #1
 80053fa:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 80053fc:	0022      	movs	r2, r4
 80053fe:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8005400:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005402:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8005404:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8005406:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005408:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800540a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540c:	1d27      	adds	r7, r4, #4
 800540e:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005410:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8005412:	42b0      	cmp	r0, r6
 8005414:	d015      	beq.n	8005442 <HAL_UART_Transmit_DMA+0x86>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005416:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8005418:	6386      	str	r6, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800541a:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800541c:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <HAL_UART_Transmit_DMA+0x9c>)
 800541e:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005420:	4a0e      	ldr	r2, [pc, #56]	; (800545c <HAL_UART_Transmit_DMA+0xa0>)
 8005422:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005424:	4a0e      	ldr	r2, [pc, #56]	; (8005460 <HAL_UART_Transmit_DMA+0xa4>)
 8005426:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005428:	9a01      	ldr	r2, [sp, #4]
 800542a:	3228      	adds	r2, #40	; 0x28
 800542c:	f7fe fa5c 	bl	80038e8 <HAL_DMA_Start_IT>
 8005430:	42b0      	cmp	r0, r6
 8005432:	d006      	beq.n	8005442 <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005434:	2310      	movs	r3, #16
        return HAL_ERROR;
 8005436:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005438:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800543a:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 800543c:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800543e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8005440:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005442:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8005444:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005446:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8005448:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800544a:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800544c:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800544e:	6899      	ldr	r1, [r3, #8]
 8005450:	1892      	adds	r2, r2, r2
 8005452:	430a      	orrs	r2, r1
 8005454:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8005456:	e7f3      	b.n	8005440 <HAL_UART_Transmit_DMA+0x84>
 8005458:	08005465 	.word	0x08005465
 800545c:	0800549b 	.word	0x0800549b
 8005460:	080054a7 	.word	0x080054a7

08005464 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005464:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005466:	681b      	ldr	r3, [r3, #0]
{
 8005468:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	2320      	movs	r3, #32
 800546e:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005470:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005472:	4019      	ands	r1, r3
 8005474:	421a      	tst	r2, r3
 8005476:	d10c      	bne.n	8005492 <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8005478:	0003      	movs	r3, r0
 800547a:	3352      	adds	r3, #82	; 0x52
 800547c:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800547e:	2180      	movs	r1, #128	; 0x80
 8005480:	6803      	ldr	r3, [r0, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	438a      	bics	r2, r1
 8005486:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005488:	2240      	movs	r2, #64	; 0x40
 800548a:	6819      	ldr	r1, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005490:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8005492:	f7fd fa4b 	bl	800292c <HAL_UART_TxCpltCallback>
}
 8005496:	e7fb      	b.n	8005490 <UART_DMATransmitCplt+0x2c>

08005498 <HAL_UART_TxHalfCpltCallback>:
 8005498:	4770      	bx	lr

0800549a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800549a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800549c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800549e:	f7ff fffb 	bl	8005498 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a2:	bd10      	pop	{r4, pc}

080054a4 <HAL_UART_ErrorCallback>:
 80054a4:	4770      	bx	lr

080054a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054a6:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054a8:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054aa:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80054ac:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054ae:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054b0:	6898      	ldr	r0, [r3, #8]
 80054b2:	0600      	lsls	r0, r0, #24
 80054b4:	d50b      	bpl.n	80054ce <UART_DMAError+0x28>
 80054b6:	2a21      	cmp	r2, #33	; 0x21
 80054b8:	d109      	bne.n	80054ce <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80054ba:	0022      	movs	r2, r4
 80054bc:	2000      	movs	r0, #0
 80054be:	3252      	adds	r2, #82	; 0x52
 80054c0:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	30c0      	adds	r0, #192	; 0xc0
 80054c6:	4382      	bics	r2, r0
 80054c8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80054ca:	2220      	movs	r2, #32
 80054cc:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	065b      	lsls	r3, r3, #25
 80054d2:	d508      	bpl.n	80054e6 <UART_DMAError+0x40>
 80054d4:	2922      	cmp	r1, #34	; 0x22
 80054d6:	d106      	bne.n	80054e6 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80054d8:	0023      	movs	r3, r4
 80054da:	2200      	movs	r2, #0
 80054dc:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 80054de:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80054e0:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 80054e2:	f7ff ff51 	bl	8005388 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054e6:	2310      	movs	r3, #16
 80054e8:	1d22      	adds	r2, r4, #4
 80054ea:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ec:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054ee:	430b      	orrs	r3, r1
 80054f0:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80054f2:	f7ff ffd7 	bl	80054a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f6:	bd10      	pop	{r4, pc}

080054f8 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	0002      	movs	r2, r0
{
 80054fe:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005500:	325a      	adds	r2, #90	; 0x5a
 8005502:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005504:	3a08      	subs	r2, #8
 8005506:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005508:	f7ff ffcc 	bl	80054a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800550c:	bd10      	pop	{r4, pc}

0800550e <HAL_UARTEx_RxEventCallback>:
}
 800550e:	4770      	bx	lr

08005510 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005510:	6803      	ldr	r3, [r0, #0]
{
 8005512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005514:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005516:	4a85      	ldr	r2, [pc, #532]	; (800572c <HAL_UART_IRQHandler+0x21c>)
{
 8005518:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800551a:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800551c:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 800551e:	4211      	tst	r1, r2
 8005520:	d10b      	bne.n	800553a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005522:	2220      	movs	r2, #32
 8005524:	4211      	tst	r1, r2
 8005526:	d100      	bne.n	800552a <HAL_UART_IRQHandler+0x1a>
 8005528:	e076      	b.n	8005618 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800552a:	4210      	tst	r0, r2
 800552c:	d100      	bne.n	8005530 <HAL_UART_IRQHandler+0x20>
 800552e:	e073      	b.n	8005618 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8005530:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8005532:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8005534:	2b00      	cmp	r3, #0
 8005536:	d165      	bne.n	8005604 <HAL_UART_IRQHandler+0xf4>
 8005538:	e065      	b.n	8005606 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800553a:	2201      	movs	r2, #1
 800553c:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800553e:	4d7c      	ldr	r5, [pc, #496]	; (8005730 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005540:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005542:	4005      	ands	r5, r0
 8005544:	433d      	orrs	r5, r7
 8005546:	d067      	beq.n	8005618 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005548:	1d25      	adds	r5, r4, #4
 800554a:	4211      	tst	r1, r2
 800554c:	d005      	beq.n	800555a <HAL_UART_IRQHandler+0x4a>
 800554e:	05c6      	lsls	r6, r0, #23
 8005550:	d503      	bpl.n	800555a <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005552:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005554:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005556:	4332      	orrs	r2, r6
 8005558:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800555a:	2202      	movs	r2, #2
 800555c:	4211      	tst	r1, r2
 800555e:	d006      	beq.n	800556e <HAL_UART_IRQHandler+0x5e>
 8005560:	2f00      	cmp	r7, #0
 8005562:	d004      	beq.n	800556e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005564:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005566:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005568:	1892      	adds	r2, r2, r2
 800556a:	4332      	orrs	r2, r6
 800556c:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800556e:	2204      	movs	r2, #4
 8005570:	4211      	tst	r1, r2
 8005572:	d006      	beq.n	8005582 <HAL_UART_IRQHandler+0x72>
 8005574:	2f00      	cmp	r7, #0
 8005576:	d004      	beq.n	8005582 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005578:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800557a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800557c:	3a02      	subs	r2, #2
 800557e:	4332      	orrs	r2, r6
 8005580:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005582:	2208      	movs	r2, #8
 8005584:	4211      	tst	r1, r2
 8005586:	d007      	beq.n	8005598 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005588:	2620      	movs	r6, #32
 800558a:	4006      	ands	r6, r0
 800558c:	433e      	orrs	r6, r7
 800558e:	d003      	beq.n	8005598 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005590:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005592:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005594:	4332      	orrs	r2, r6
 8005596:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005598:	2280      	movs	r2, #128	; 0x80
 800559a:	0112      	lsls	r2, r2, #4
 800559c:	4211      	tst	r1, r2
 800559e:	d006      	beq.n	80055ae <HAL_UART_IRQHandler+0x9e>
 80055a0:	0146      	lsls	r6, r0, #5
 80055a2:	d504      	bpl.n	80055ae <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055a6:	2320      	movs	r3, #32
 80055a8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80055aa:	4313      	orrs	r3, r2
 80055ac:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ae:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d028      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055b4:	2320      	movs	r3, #32
 80055b6:	4219      	tst	r1, r3
 80055b8:	d006      	beq.n	80055c8 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ba:	4218      	tst	r0, r3
 80055bc:	d004      	beq.n	80055c8 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 80055be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 80055c4:	0020      	movs	r0, r4
 80055c6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055c8:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80055ca:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055cc:	2740      	movs	r7, #64	; 0x40
 80055ce:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055d0:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055d2:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055d4:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80055d6:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055d8:	431e      	orrs	r6, r3
 80055da:	d019      	beq.n	8005610 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 80055dc:	f7ff fed4 	bl	8005388 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	423a      	tst	r2, r7
 80055e6:	d00f      	beq.n	8005608 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e8:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80055ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ec:	43ba      	bics	r2, r7
 80055ee:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d009      	beq.n	8005608 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055f4:	4b4f      	ldr	r3, [pc, #316]	; (8005734 <HAL_UART_IRQHandler+0x224>)
 80055f6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055f8:	f7fe f9d6 	bl	80039a8 <HAL_DMA_Abort_IT>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d002      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005600:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005602:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005604:	4798      	blx	r3
}
 8005606:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8005608:	0020      	movs	r0, r4
 800560a:	f7ff ff4b 	bl	80054a4 <HAL_UART_ErrorCallback>
 800560e:	e7fa      	b.n	8005606 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8005610:	f7ff ff48 	bl	80054a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	67ee      	str	r6, [r5, #124]	; 0x7c
 8005616:	e7f6      	b.n	8005606 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800561a:	2d01      	cmp	r5, #1
 800561c:	d161      	bne.n	80056e2 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800561e:	2210      	movs	r2, #16
 8005620:	4211      	tst	r1, r2
 8005622:	d05e      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005624:	4210      	tst	r0, r2
 8005626:	d05c      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005628:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562a:	6899      	ldr	r1, [r3, #8]
 800562c:	2640      	movs	r6, #64	; 0x40
 800562e:	000f      	movs	r7, r1
 8005630:	4037      	ands	r7, r6
 8005632:	4231      	tst	r1, r6
 8005634:	d038      	beq.n	80056a8 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005636:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005638:	680f      	ldr	r7, [r1, #0]
 800563a:	9100      	str	r1, [sp, #0]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8005640:	2900      	cmp	r1, #0
 8005642:	d0e0      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005644:	2058      	movs	r0, #88	; 0x58
 8005646:	4684      	mov	ip, r0
 8005648:	44a4      	add	ip, r4
 800564a:	4660      	mov	r0, ip
 800564c:	8800      	ldrh	r0, [r0, #0]
 800564e:	4288      	cmp	r0, r1
 8005650:	d9d9      	bls.n	8005606 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8005652:	205a      	movs	r0, #90	; 0x5a
 8005654:	4684      	mov	ip, r0
 8005656:	44a4      	add	ip, r4
 8005658:	4660      	mov	r0, ip
 800565a:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800565c:	683f      	ldr	r7, [r7, #0]
 800565e:	2120      	movs	r1, #32
 8005660:	0038      	movs	r0, r7
 8005662:	4008      	ands	r0, r1
 8005664:	9001      	str	r0, [sp, #4]
 8005666:	420f      	tst	r7, r1
 8005668:	d112      	bne.n	8005690 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800566a:	681f      	ldr	r7, [r3, #0]
 800566c:	4832      	ldr	r0, [pc, #200]	; (8005738 <HAL_UART_IRQHandler+0x228>)
 800566e:	4007      	ands	r7, r0
 8005670:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005674:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	43af      	bics	r7, r5
 8005678:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	689d      	ldr	r5, [r3, #8]
 800567c:	43b5      	bics	r5, r6
 800567e:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8005680:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	9901      	ldr	r1, [sp, #4]
 8005684:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005686:	6819      	ldr	r1, [r3, #0]
 8005688:	4391      	bics	r1, r2
 800568a:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800568c:	f7fe f96c 	bl	8003968 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005690:	0023      	movs	r3, r4
 8005692:	0022      	movs	r2, r4
 8005694:	335a      	adds	r3, #90	; 0x5a
 8005696:	3258      	adds	r2, #88	; 0x58
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	8811      	ldrh	r1, [r2, #0]
 800569c:	1ac9      	subs	r1, r1, r3
 800569e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056a0:	0020      	movs	r0, r4
 80056a2:	f7ff ff34 	bl	800550e <HAL_UARTEx_RxEventCallback>
 80056a6:	e7ae      	b.n	8005606 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056a8:	0026      	movs	r6, r4
 80056aa:	365a      	adds	r6, #90	; 0x5a
 80056ac:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 80056ae:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b0:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80056b2:	2900      	cmp	r1, #0
 80056b4:	d0a7      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b6:	0021      	movs	r1, r4
 80056b8:	3158      	adds	r1, #88	; 0x58
 80056ba:	8809      	ldrh	r1, [r1, #0]
 80056bc:	1a09      	subs	r1, r1, r0
 80056be:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80056c0:	2900      	cmp	r1, #0
 80056c2:	d0a0      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	4e1d      	ldr	r6, [pc, #116]	; (800573c <HAL_UART_IRQHandler+0x22c>)
 80056c8:	4030      	ands	r0, r6
 80056ca:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056cc:	6898      	ldr	r0, [r3, #8]
 80056ce:	43a8      	bics	r0, r5
 80056d0:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80056d2:	2020      	movs	r0, #32
 80056d4:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d6:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 80056da:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056dc:	4390      	bics	r0, r2
 80056de:	6018      	str	r0, [r3, #0]
 80056e0:	e7de      	b.n	80056a0 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	0352      	lsls	r2, r2, #13
 80056e6:	4211      	tst	r1, r2
 80056e8:	d006      	beq.n	80056f8 <HAL_UART_IRQHandler+0x1e8>
 80056ea:	0275      	lsls	r5, r6, #9
 80056ec:	d504      	bpl.n	80056f8 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 80056ee:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056f0:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80056f2:	f000 fb55 	bl	8005da0 <HAL_UARTEx_WakeupCallback>
    return;
 80056f6:	e786      	b.n	8005606 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056f8:	2280      	movs	r2, #128	; 0x80
 80056fa:	4211      	tst	r1, r2
 80056fc:	d003      	beq.n	8005706 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056fe:	4210      	tst	r0, r2
 8005700:	d001      	beq.n	8005706 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8005702:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005704:	e715      	b.n	8005532 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005706:	2540      	movs	r5, #64	; 0x40
 8005708:	4229      	tst	r1, r5
 800570a:	d100      	bne.n	800570e <HAL_UART_IRQHandler+0x1fe>
 800570c:	e77b      	b.n	8005606 <HAL_UART_IRQHandler+0xf6>
 800570e:	4228      	tst	r0, r5
 8005710:	d100      	bne.n	8005714 <HAL_UART_IRQHandler+0x204>
 8005712:	e778      	b.n	8005606 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005714:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005716:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005718:	43aa      	bics	r2, r5
 800571a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800571c:	2320      	movs	r3, #32
 800571e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8005724:	f7fd f902 	bl	800292c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005728:	e76d      	b.n	8005606 <HAL_UART_IRQHandler+0xf6>
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	0000080f 	.word	0x0000080f
 8005730:	04000120 	.word	0x04000120
 8005734:	080054f9 	.word	0x080054f9
 8005738:	fffffeff 	.word	0xfffffeff
 800573c:	fffffedf 	.word	0xfffffedf

08005740 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005740:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8005742:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005744:	6803      	ldr	r3, [r0, #0]
{
 8005746:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005748:	2a22      	cmp	r2, #34	; 0x22
 800574a:	d134      	bne.n	80057b6 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 800574c:	0002      	movs	r2, r0
 800574e:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005752:	8812      	ldrh	r2, [r2, #0]
 8005754:	4013      	ands	r3, r2
 8005756:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005758:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800575a:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800575c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800575e:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8005760:	3301      	adds	r3, #1
 8005762:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005764:	8813      	ldrh	r3, [r2, #0]
 8005766:	3b01      	subs	r3, #1
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800576c:	8813      	ldrh	r3, [r2, #0]
 800576e:	b299      	uxth	r1, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11b      	bne.n	80057ac <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005774:	6803      	ldr	r3, [r0, #0]
 8005776:	4812      	ldr	r0, [pc, #72]	; (80057c0 <UART_RxISR_8BIT+0x80>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4002      	ands	r2, r0
 800577c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	3023      	adds	r0, #35	; 0x23
 8005782:	30ff      	adds	r0, #255	; 0xff
 8005784:	4382      	bics	r2, r0
 8005786:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005788:	2220      	movs	r2, #32
 800578a:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 800578e:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005790:	4282      	cmp	r2, r0
 8005792:	d10c      	bne.n	80057ae <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	2110      	movs	r1, #16
 8005796:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005798:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	438a      	bics	r2, r1
 800579c:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800579e:	0023      	movs	r3, r4
 80057a0:	3358      	adds	r3, #88	; 0x58
 80057a2:	8819      	ldrh	r1, [r3, #0]
 80057a4:	f7ff feb3 	bl	800550e <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	2300      	movs	r3, #0
 80057aa:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057ac:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80057ae:	0020      	movs	r0, r4
 80057b0:	f7fd f8c4 	bl	800293c <HAL_UART_RxCpltCallback>
 80057b4:	e7f8      	b.n	80057a8 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057b6:	2208      	movs	r2, #8
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	619a      	str	r2, [r3, #24]
}
 80057be:	e7f5      	b.n	80057ac <UART_RxISR_8BIT+0x6c>
 80057c0:	fffffedf 	.word	0xfffffedf

080057c4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057c4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80057c6:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057c8:	6803      	ldr	r3, [r0, #0]
{
 80057ca:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057cc:	2a22      	cmp	r2, #34	; 0x22
 80057ce:	d131      	bne.n	8005834 <UART_RxISR_16BIT+0x70>
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057d0:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 80057d2:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80057d6:	8800      	ldrh	r0, [r0, #0]
 80057d8:	4001      	ands	r1, r0
 80057da:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80057dc:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 80057de:	3202      	adds	r2, #2
    huart->RxXferCount--;
 80057e0:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 80057e2:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 80057e4:	880a      	ldrh	r2, [r1, #0]
 80057e6:	3a01      	subs	r2, #1
 80057e8:	b292      	uxth	r2, r2
 80057ea:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 80057ec:	880a      	ldrh	r2, [r1, #0]
 80057ee:	b291      	uxth	r1, r2
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	d11a      	bne.n	800582a <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4812      	ldr	r0, [pc, #72]	; (8005840 <UART_RxISR_16BIT+0x7c>)
 80057f8:	4002      	ands	r2, r0
 80057fa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	3023      	adds	r0, #35	; 0x23
 8005800:	30ff      	adds	r0, #255	; 0xff
 8005802:	4382      	bics	r2, r0
 8005804:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005806:	2220      	movs	r2, #32
 8005808:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580a:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 800580c:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580e:	4282      	cmp	r2, r0
 8005810:	d10c      	bne.n	800582c <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	2110      	movs	r1, #16
 8005814:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005816:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005818:	438a      	bics	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800581c:	0023      	movs	r3, r4
 800581e:	3358      	adds	r3, #88	; 0x58
 8005820:	8819      	ldrh	r1, [r3, #0]
 8005822:	f7ff fe74 	bl	800550e <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005826:	2300      	movs	r3, #0
 8005828:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800582a:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800582c:	0020      	movs	r0, r4
 800582e:	f7fd f885 	bl	800293c <HAL_UART_RxCpltCallback>
 8005832:	e7f8      	b.n	8005826 <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005834:	2208      	movs	r2, #8
 8005836:	6999      	ldr	r1, [r3, #24]
 8005838:	430a      	orrs	r2, r1
 800583a:	619a      	str	r2, [r3, #24]
}
 800583c:	e7f5      	b.n	800582a <UART_RxISR_16BIT+0x66>
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	fffffedf 	.word	0xfffffedf

08005844 <UART_SetConfig>:
{
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005848:	6925      	ldr	r5, [r4, #16]
 800584a:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800584c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800584e:	4329      	orrs	r1, r5
 8005850:	6965      	ldr	r5, [r4, #20]
 8005852:	69c3      	ldr	r3, [r0, #28]
 8005854:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005856:	6810      	ldr	r0, [r2, #0]
 8005858:	4d79      	ldr	r5, [pc, #484]	; (8005a40 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800585a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800585c:	4028      	ands	r0, r5
 800585e:	4301      	orrs	r1, r0
 8005860:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005862:	6851      	ldr	r1, [r2, #4]
 8005864:	4877      	ldr	r0, [pc, #476]	; (8005a44 <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005866:	4d78      	ldr	r5, [pc, #480]	; (8005a48 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005868:	4001      	ands	r1, r0
 800586a:	68e0      	ldr	r0, [r4, #12]
 800586c:	4301      	orrs	r1, r0
 800586e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005870:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005872:	42aa      	cmp	r2, r5
 8005874:	d001      	beq.n	800587a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8005876:	6a21      	ldr	r1, [r4, #32]
 8005878:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800587a:	6891      	ldr	r1, [r2, #8]
 800587c:	4e73      	ldr	r6, [pc, #460]	; (8005a4c <UART_SetConfig+0x208>)
 800587e:	4031      	ands	r1, r6
 8005880:	4301      	orrs	r1, r0
 8005882:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005884:	4972      	ldr	r1, [pc, #456]	; (8005a50 <UART_SetConfig+0x20c>)
 8005886:	428a      	cmp	r2, r1
 8005888:	d10f      	bne.n	80058aa <UART_SetConfig+0x66>
 800588a:	2103      	movs	r1, #3
 800588c:	4a71      	ldr	r2, [pc, #452]	; (8005a54 <UART_SetConfig+0x210>)
 800588e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005890:	400a      	ands	r2, r1
 8005892:	3a01      	subs	r2, #1
 8005894:	4970      	ldr	r1, [pc, #448]	; (8005a58 <UART_SetConfig+0x214>)
 8005896:	2a02      	cmp	r2, #2
 8005898:	d910      	bls.n	80058bc <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	0212      	lsls	r2, r2, #8
 800589e:	4293      	cmp	r3, r2
 80058a0:	d000      	beq.n	80058a4 <UART_SetConfig+0x60>
 80058a2:	e0a3      	b.n	80059ec <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a4:	f7fe feb6 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 80058a8:	e0c5      	b.n	8005a36 <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058aa:	496c      	ldr	r1, [pc, #432]	; (8005a5c <UART_SetConfig+0x218>)
 80058ac:	428a      	cmp	r2, r1
 80058ae:	d118      	bne.n	80058e2 <UART_SetConfig+0x9e>
 80058b0:	200c      	movs	r0, #12
 80058b2:	4a68      	ldr	r2, [pc, #416]	; (8005a54 <UART_SetConfig+0x210>)
 80058b4:	4968      	ldr	r1, [pc, #416]	; (8005a58 <UART_SetConfig+0x214>)
 80058b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058b8:	3103      	adds	r1, #3
 80058ba:	4002      	ands	r2, r0
 80058bc:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	0212      	lsls	r2, r2, #8
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d000      	beq.n	80058c8 <UART_SetConfig+0x84>
 80058c6:	e083      	b.n	80059d0 <UART_SetConfig+0x18c>
    switch (clocksource)
 80058c8:	2808      	cmp	r0, #8
 80058ca:	d824      	bhi.n	8005916 <UART_SetConfig+0xd2>
 80058cc:	f7fa fc38 	bl	8000140 <__gnu_thumb1_case_shi>
 80058d0:	ffea00b1 	.word	0xffea00b1
 80058d4:	0023005c 	.word	0x0023005c
 80058d8:	0023007d 	.word	0x0023007d
 80058dc:	00230023 	.word	0x00230023
 80058e0:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e2:	495f      	ldr	r1, [pc, #380]	; (8005a60 <UART_SetConfig+0x21c>)
 80058e4:	428a      	cmp	r2, r1
 80058e6:	d100      	bne.n	80058ea <UART_SetConfig+0xa6>
 80058e8:	e09f      	b.n	8005a2a <UART_SetConfig+0x1e6>
 80058ea:	495e      	ldr	r1, [pc, #376]	; (8005a64 <UART_SetConfig+0x220>)
 80058ec:	428a      	cmp	r2, r1
 80058ee:	d100      	bne.n	80058f2 <UART_SetConfig+0xae>
 80058f0:	e09b      	b.n	8005a2a <UART_SetConfig+0x1e6>
 80058f2:	42aa      	cmp	r2, r5
 80058f4:	d10f      	bne.n	8005916 <UART_SetConfig+0xd2>
 80058f6:	21c0      	movs	r1, #192	; 0xc0
 80058f8:	2080      	movs	r0, #128	; 0x80
 80058fa:	4a56      	ldr	r2, [pc, #344]	; (8005a54 <UART_SetConfig+0x210>)
 80058fc:	0109      	lsls	r1, r1, #4
 80058fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005900:	0100      	lsls	r0, r0, #4
 8005902:	400b      	ands	r3, r1
 8005904:	4283      	cmp	r3, r0
 8005906:	d016      	beq.n	8005936 <UART_SetConfig+0xf2>
 8005908:	d807      	bhi.n	800591a <UART_SetConfig+0xd6>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_SetConfig+0xe0>
 800590e:	2280      	movs	r2, #128	; 0x80
 8005910:	00d2      	lsls	r2, r2, #3
 8005912:	4293      	cmp	r3, r2
 8005914:	d035      	beq.n	8005982 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005916:	2001      	movs	r0, #1
 8005918:	e009      	b.n	800592e <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591a:	428b      	cmp	r3, r1
 800591c:	d1fb      	bne.n	8005916 <UART_SetConfig+0xd2>
 800591e:	2080      	movs	r0, #128	; 0x80
 8005920:	0200      	lsls	r0, r0, #8
 8005922:	e012      	b.n	800594a <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005924:	f7fe fe66 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005928:	2800      	cmp	r0, #0
 800592a:	d10e      	bne.n	800594a <UART_SetConfig+0x106>
 800592c:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005932:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8005934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005936:	2310      	movs	r3, #16
 8005938:	6810      	ldr	r0, [r2, #0]
 800593a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800593c:	4243      	negs	r3, r0
 800593e:	4158      	adcs	r0, r3
 8005940:	4b49      	ldr	r3, [pc, #292]	; (8005a68 <UART_SetConfig+0x224>)
 8005942:	4240      	negs	r0, r0
 8005944:	4018      	ands	r0, r3
 8005946:	4b49      	ldr	r3, [pc, #292]	; (8005a6c <UART_SetConfig+0x228>)
 8005948:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800594a:	2203      	movs	r2, #3
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	435a      	muls	r2, r3
 8005950:	4290      	cmp	r0, r2
 8005952:	d3e0      	bcc.n	8005916 <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005954:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005956:	4290      	cmp	r0, r2
 8005958:	d8dd      	bhi.n	8005916 <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800595a:	2700      	movs	r7, #0
 800595c:	0e02      	lsrs	r2, r0, #24
 800595e:	0201      	lsls	r1, r0, #8
 8005960:	085e      	lsrs	r6, r3, #1
 8005962:	1989      	adds	r1, r1, r6
 8005964:	417a      	adcs	r2, r7
 8005966:	0008      	movs	r0, r1
 8005968:	0011      	movs	r1, r2
 800596a:	001a      	movs	r2, r3
 800596c:	003b      	movs	r3, r7
 800596e:	f7fa fde9 	bl	8000544 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005972:	4b3f      	ldr	r3, [pc, #252]	; (8005a70 <UART_SetConfig+0x22c>)
 8005974:	18c2      	adds	r2, r0, r3
 8005976:	4b3f      	ldr	r3, [pc, #252]	; (8005a74 <UART_SetConfig+0x230>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005978:	429a      	cmp	r2, r3
 800597a:	d8cc      	bhi.n	8005916 <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	60d8      	str	r0, [r3, #12]
 8005980:	e7d4      	b.n	800592c <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005982:	f7fe fa97 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
        break;
 8005986:	e7cf      	b.n	8005928 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005988:	4b32      	ldr	r3, [pc, #200]	; (8005a54 <UART_SetConfig+0x210>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800598a:	4a38      	ldr	r2, [pc, #224]	; (8005a6c <UART_SetConfig+0x228>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	2310      	movs	r3, #16
 8005990:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005992:	4243      	negs	r3, r0
 8005994:	4158      	adcs	r0, r3
 8005996:	4b34      	ldr	r3, [pc, #208]	; (8005a68 <UART_SetConfig+0x224>)
 8005998:	4240      	negs	r0, r0
 800599a:	4003      	ands	r3, r0
 800599c:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800599e:	0058      	lsls	r0, r3, #1
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	6861      	ldr	r1, [r4, #4]
 80059a4:	085b      	lsrs	r3, r3, #1
 80059a6:	18c0      	adds	r0, r0, r3
 80059a8:	f7fa fbde 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ac:	4932      	ldr	r1, [pc, #200]	; (8005a78 <UART_SetConfig+0x234>)
 80059ae:	b282      	uxth	r2, r0
 80059b0:	3a10      	subs	r2, #16
 80059b2:	0403      	lsls	r3, r0, #16
 80059b4:	428a      	cmp	r2, r1
 80059b6:	d8ae      	bhi.n	8005916 <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b8:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ba:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059bc:	4390      	bics	r0, r2
 80059be:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80059c0:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059c2:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80059c4:	4318      	orrs	r0, r3
 80059c6:	60d0      	str	r0, [r2, #12]
 80059c8:	e7b0      	b.n	800592c <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 80059ca:	f7fe fa73 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 80059ce:	e032      	b.n	8005a36 <UART_SetConfig+0x1f2>
    switch (clocksource)
 80059d0:	2808      	cmp	r0, #8
 80059d2:	d8a0      	bhi.n	8005916 <UART_SetConfig+0xd2>
 80059d4:	f7fa fba0 	bl	8000118 <__gnu_thumb1_case_sqi>
 80059d8:	9f0d0a05 	.word	0x9f0d0a05
 80059dc:	9f9f9f23 	.word	0x9f9f9f23
 80059e0:	26          	.byte	0x26
 80059e1:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e2:	f7fe fe07 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0a0      	beq.n	800592c <UART_SetConfig+0xe8>
 80059ea:	e00d      	b.n	8005a08 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ec:	f7fe fe12 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
        break;
 80059f0:	e7f9      	b.n	80059e6 <UART_SetConfig+0x1a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059f2:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <UART_SetConfig+0x210>)
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	2310      	movs	r3, #16
 80059f8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80059fa:	4243      	negs	r3, r0
 80059fc:	4158      	adcs	r0, r3
 80059fe:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <UART_SetConfig+0x224>)
 8005a00:	4240      	negs	r0, r0
 8005a02:	4018      	ands	r0, r3
 8005a04:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <UART_SetConfig+0x228>)
 8005a06:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	6861      	ldr	r1, [r4, #4]
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	1818      	adds	r0, r3, r0
 8005a10:	f7fa fbaa 	bl	8000168 <__udivsi3>
 8005a14:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a16:	0002      	movs	r2, r0
 8005a18:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <UART_SetConfig+0x234>)
 8005a1a:	3a10      	subs	r2, #16
 8005a1c:	e7ac      	b.n	8005978 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1e:	f7fe fa49 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
        break;
 8005a22:	e7e0      	b.n	80059e6 <UART_SetConfig+0x1a2>
    switch (clocksource)
 8005a24:	2080      	movs	r0, #128	; 0x80
 8005a26:	0200      	lsls	r0, r0, #8
 8005a28:	e7ee      	b.n	8005a08 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	0212      	lsls	r2, r2, #8
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d1d7      	bne.n	80059e2 <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a32:	f7fe fddf 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a36:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8005a38:	d100      	bne.n	8005a3c <UART_SetConfig+0x1f8>
 8005a3a:	e777      	b.n	800592c <UART_SetConfig+0xe8>
 8005a3c:	e7af      	b.n	800599e <UART_SetConfig+0x15a>
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	efff69f3 	.word	0xefff69f3
 8005a44:	ffffcfff 	.word	0xffffcfff
 8005a48:	40004800 	.word	0x40004800
 8005a4c:	fffff4ff 	.word	0xfffff4ff
 8005a50:	40013800 	.word	0x40013800
 8005a54:	40021000 	.word	0x40021000
 8005a58:	0800e3dd 	.word	0x0800e3dd
 8005a5c:	40004400 	.word	0x40004400
 8005a60:	40004c00 	.word	0x40004c00
 8005a64:	40005000 	.word	0x40005000
 8005a68:	00b71b00 	.word	0x00b71b00
 8005a6c:	003d0900 	.word	0x003d0900
 8005a70:	fffffd00 	.word	0xfffffd00
 8005a74:	000ffcff 	.word	0x000ffcff
 8005a78:	0000ffef 	.word	0x0000ffef

08005a7c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005a7e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a80:	07da      	lsls	r2, r3, #31
 8005a82:	d506      	bpl.n	8005a92 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a84:	6801      	ldr	r1, [r0, #0]
 8005a86:	4c28      	ldr	r4, [pc, #160]	; (8005b28 <UART_AdvFeatureConfig+0xac>)
 8005a88:	684a      	ldr	r2, [r1, #4]
 8005a8a:	4022      	ands	r2, r4
 8005a8c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005a8e:	4322      	orrs	r2, r4
 8005a90:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a92:	079a      	lsls	r2, r3, #30
 8005a94:	d506      	bpl.n	8005aa4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a96:	6801      	ldr	r1, [r0, #0]
 8005a98:	4c24      	ldr	r4, [pc, #144]	; (8005b2c <UART_AdvFeatureConfig+0xb0>)
 8005a9a:	684a      	ldr	r2, [r1, #4]
 8005a9c:	4022      	ands	r2, r4
 8005a9e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005aa0:	4322      	orrs	r2, r4
 8005aa2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aa4:	075a      	lsls	r2, r3, #29
 8005aa6:	d506      	bpl.n	8005ab6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aa8:	6801      	ldr	r1, [r0, #0]
 8005aaa:	4c21      	ldr	r4, [pc, #132]	; (8005b30 <UART_AdvFeatureConfig+0xb4>)
 8005aac:	684a      	ldr	r2, [r1, #4]
 8005aae:	4022      	ands	r2, r4
 8005ab0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005ab2:	4322      	orrs	r2, r4
 8005ab4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ab6:	071a      	lsls	r2, r3, #28
 8005ab8:	d506      	bpl.n	8005ac8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aba:	6801      	ldr	r1, [r0, #0]
 8005abc:	4c1d      	ldr	r4, [pc, #116]	; (8005b34 <UART_AdvFeatureConfig+0xb8>)
 8005abe:	684a      	ldr	r2, [r1, #4]
 8005ac0:	4022      	ands	r2, r4
 8005ac2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005ac4:	4322      	orrs	r2, r4
 8005ac6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ac8:	06da      	lsls	r2, r3, #27
 8005aca:	d506      	bpl.n	8005ada <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005acc:	6801      	ldr	r1, [r0, #0]
 8005ace:	4c1a      	ldr	r4, [pc, #104]	; (8005b38 <UART_AdvFeatureConfig+0xbc>)
 8005ad0:	688a      	ldr	r2, [r1, #8]
 8005ad2:	4022      	ands	r2, r4
 8005ad4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005ad6:	4322      	orrs	r2, r4
 8005ad8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ada:	069a      	lsls	r2, r3, #26
 8005adc:	d506      	bpl.n	8005aec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ade:	6801      	ldr	r1, [r0, #0]
 8005ae0:	4c16      	ldr	r4, [pc, #88]	; (8005b3c <UART_AdvFeatureConfig+0xc0>)
 8005ae2:	688a      	ldr	r2, [r1, #8]
 8005ae4:	4022      	ands	r2, r4
 8005ae6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005ae8:	4322      	orrs	r2, r4
 8005aea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aec:	065a      	lsls	r2, r3, #25
 8005aee:	d510      	bpl.n	8005b12 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005af0:	6801      	ldr	r1, [r0, #0]
 8005af2:	4d13      	ldr	r5, [pc, #76]	; (8005b40 <UART_AdvFeatureConfig+0xc4>)
 8005af4:	684a      	ldr	r2, [r1, #4]
 8005af6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005af8:	402a      	ands	r2, r5
 8005afa:	4322      	orrs	r2, r4
 8005afc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	0352      	lsls	r2, r2, #13
 8005b02:	4294      	cmp	r4, r2
 8005b04:	d105      	bne.n	8005b12 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b06:	684a      	ldr	r2, [r1, #4]
 8005b08:	4c0e      	ldr	r4, [pc, #56]	; (8005b44 <UART_AdvFeatureConfig+0xc8>)
 8005b0a:	4022      	ands	r2, r4
 8005b0c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005b0e:	4322      	orrs	r2, r4
 8005b10:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b12:	061b      	lsls	r3, r3, #24
 8005b14:	d506      	bpl.n	8005b24 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b16:	6802      	ldr	r2, [r0, #0]
 8005b18:	490b      	ldr	r1, [pc, #44]	; (8005b48 <UART_AdvFeatureConfig+0xcc>)
 8005b1a:	6853      	ldr	r3, [r2, #4]
 8005b1c:	400b      	ands	r3, r1
 8005b1e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6053      	str	r3, [r2, #4]
}
 8005b24:	bd30      	pop	{r4, r5, pc}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	fffdffff 	.word	0xfffdffff
 8005b2c:	fffeffff 	.word	0xfffeffff
 8005b30:	fffbffff 	.word	0xfffbffff
 8005b34:	ffff7fff 	.word	0xffff7fff
 8005b38:	ffffefff 	.word	0xffffefff
 8005b3c:	ffffdfff 	.word	0xffffdfff
 8005b40:	ffefffff 	.word	0xffefffff
 8005b44:	ff9fffff 	.word	0xff9fffff
 8005b48:	fff7ffff 	.word	0xfff7ffff

08005b4c <UART_WaitOnFlagUntilTimeout>:
{
 8005b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b4e:	2780      	movs	r7, #128	; 0x80
{
 8005b50:	0004      	movs	r4, r0
 8005b52:	000d      	movs	r5, r1
 8005b54:	0016      	movs	r6, r2
 8005b56:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b58:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	69d3      	ldr	r3, [r2, #28]
 8005b5e:	402b      	ands	r3, r5
 8005b60:	1b5b      	subs	r3, r3, r5
 8005b62:	4259      	negs	r1, r3
 8005b64:	414b      	adcs	r3, r1
 8005b66:	42b3      	cmp	r3, r6
 8005b68:	d001      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e01c      	b.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	9b08      	ldr	r3, [sp, #32]
 8005b70:	3301      	adds	r3, #1
 8005b72:	d0f3      	beq.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fc fd9e 	bl	80026b4 <HAL_GetTick>
 8005b78:	9b01      	ldr	r3, [sp, #4]
 8005b7a:	9a08      	ldr	r2, [sp, #32]
 8005b7c:	1ac0      	subs	r0, r0, r3
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	4290      	cmp	r0, r2
 8005b82:	d801      	bhi.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x3c>
 8005b84:	2a00      	cmp	r2, #0
 8005b86:	d110      	bne.n	8005baa <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4913      	ldr	r1, [pc, #76]	; (8005bd8 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	31a3      	adds	r1, #163	; 0xa3
 8005b94:	31ff      	adds	r1, #255	; 0xff
 8005b96:	438a      	bics	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005b9a:	2320      	movs	r3, #32
 8005b9c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005ba0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8005ba2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005ba4:	3474      	adds	r4, #116	; 0x74
 8005ba6:	7023      	strb	r3, [r4, #0]
}
 8005ba8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005baa:	2104      	movs	r1, #4
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	420a      	tst	r2, r1
 8005bb0:	d0d3      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	423a      	tst	r2, r7
 8005bb6:	d0d0      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb8:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4906      	ldr	r1, [pc, #24]	; (8005bd8 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	31a3      	adds	r1, #163	; 0xa3
 8005bc6:	31ff      	adds	r1, #255	; 0xff
 8005bc8:	438a      	bics	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005bcc:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bce:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8005bd0:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bd4:	67d3      	str	r3, [r2, #124]	; 0x7c
 8005bd6:	e7e3      	b.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x54>
 8005bd8:	fffffe5f 	.word	0xfffffe5f

08005bdc <UART_CheckIdleState>:
{
 8005bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bde:	2600      	movs	r6, #0
{
 8005be0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be2:	1d03      	adds	r3, r0, #4
 8005be4:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005be6:	f7fc fd65 	bl	80026b4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005bec:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	071b      	lsls	r3, r3, #28
 8005bf2:	d416      	bmi.n	8005c22 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	075b      	lsls	r3, r3, #29
 8005bfa:	d50a      	bpl.n	8005c12 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <UART_CheckIdleState+0x60>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	0020      	movs	r0, r4
 8005c06:	002b      	movs	r3, r5
 8005c08:	03c9      	lsls	r1, r1, #15
 8005c0a:	f7ff ff9f 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d112      	bne.n	8005c38 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8005c12:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c14:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005c16:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c18:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005c1c:	3474      	adds	r4, #116	; 0x74
 8005c1e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005c20:	e00b      	b.n	8005c3a <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c22:	2180      	movs	r1, #128	; 0x80
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <UART_CheckIdleState+0x60>)
 8005c26:	0032      	movs	r2, r6
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	0389      	lsls	r1, r1, #14
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	0020      	movs	r0, r4
 8005c30:	f7ff ff8c 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d0dd      	beq.n	8005bf4 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005c38:	2003      	movs	r0, #3
}
 8005c3a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005c3c:	01ffffff 	.word	0x01ffffff

08005c40 <HAL_UART_Init>:
{
 8005c40:	b510      	push	{r4, lr}
 8005c42:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005c46:	2001      	movs	r0, #1
}
 8005c48:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005c50:	0002      	movs	r2, r0
 8005c52:	3274      	adds	r2, #116	; 0x74
 8005c54:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005c56:	f7fc fd6f 	bl	8002738 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005c5a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c60:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005c62:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c64:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005c66:	438b      	bics	r3, r1
 8005c68:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c6a:	f7ff fdeb 	bl	8005844 <UART_SetConfig>
 8005c6e:	2801      	cmp	r0, #1
 8005c70:	d0e9      	beq.n	8005c46 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005c78:	0020      	movs	r0, r4
 8005c7a:	f7ff feff 	bl	8005a7c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	4907      	ldr	r1, [pc, #28]	; (8005ca0 <HAL_UART_Init+0x60>)
 8005c82:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005c84:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c86:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c88:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	438a      	bics	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005c92:	2201      	movs	r2, #1
 8005c94:	6819      	ldr	r1, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005c9a:	f7ff ff9f 	bl	8005bdc <UART_CheckIdleState>
 8005c9e:	e7d3      	b.n	8005c48 <HAL_UART_Init+0x8>
 8005ca0:	ffffb7ff 	.word	0xffffb7ff

08005ca4 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	3358      	adds	r3, #88	; 0x58
{
 8005ca8:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005caa:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 8005cac:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 8005cae:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8005cb0:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8005cb2:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8005cb4:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8005cb6:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005cb8:	0164      	lsls	r4, r4, #5
 8005cba:	3304      	adds	r3, #4
 8005cbc:	42a1      	cmp	r1, r4
 8005cbe:	d124      	bne.n	8005d0a <UART_Start_Receive_IT+0x66>
 8005cc0:	6902      	ldr	r2, [r0, #16]
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	d11f      	bne.n	8005d06 <UART_Start_Receive_IT+0x62>
 8005cc6:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <UART_Start_Receive_IT+0x88>)
 8005cc8:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cca:	2200      	movs	r2, #0
 8005ccc:	1d03      	adds	r3, r0, #4
 8005cce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cd0:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd2:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cd4:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd6:	6894      	ldr	r4, [r2, #8]
 8005cd8:	3b21      	subs	r3, #33	; 0x21
 8005cda:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cdc:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cde:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce0:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8005ce2:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce4:	42a1      	cmp	r1, r4
 8005ce6:	d103      	bne.n	8005cf0 <UART_Start_Receive_IT+0x4c>
 8005ce8:	6901      	ldr	r1, [r0, #16]
 8005cea:	2900      	cmp	r1, #0
 8005cec:	d100      	bne.n	8005cf0 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 8005cee:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <UART_Start_Receive_IT+0x90>)
 8005cf0:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	3374      	adds	r3, #116	; 0x74
 8005cf8:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005cfa:	2390      	movs	r3, #144	; 0x90
 8005cfc:	6811      	ldr	r1, [r2, #0]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6013      	str	r3, [r2, #0]
}
 8005d04:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8005d06:	22ff      	movs	r2, #255	; 0xff
 8005d08:	e7de      	b.n	8005cc8 <UART_Start_Receive_IT+0x24>
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	d104      	bne.n	8005d18 <UART_Start_Receive_IT+0x74>
 8005d0e:	6902      	ldr	r2, [r0, #16]
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	d0f8      	beq.n	8005d06 <UART_Start_Receive_IT+0x62>
 8005d14:	227f      	movs	r2, #127	; 0x7f
 8005d16:	e7d7      	b.n	8005cc8 <UART_Start_Receive_IT+0x24>
 8005d18:	2480      	movs	r4, #128	; 0x80
 8005d1a:	0564      	lsls	r4, r4, #21
 8005d1c:	42a1      	cmp	r1, r4
 8005d1e:	d1d3      	bne.n	8005cc8 <UART_Start_Receive_IT+0x24>
 8005d20:	6902      	ldr	r2, [r0, #16]
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	d0f6      	beq.n	8005d14 <UART_Start_Receive_IT+0x70>
 8005d26:	223f      	movs	r2, #63	; 0x3f
 8005d28:	e7ce      	b.n	8005cc8 <UART_Start_Receive_IT+0x24>
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	000001ff 	.word	0x000001ff
 8005d30:	08005741 	.word	0x08005741
 8005d34:	080057c5 	.word	0x080057c5

08005d38 <HAL_UART_Receive_IT>:
{
 8005d38:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d3a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d3e:	2c20      	cmp	r4, #32
 8005d40:	d129      	bne.n	8005d96 <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 8005d42:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d026      	beq.n	8005d96 <HAL_UART_Receive_IT+0x5e>
 8005d48:	2a00      	cmp	r2, #0
 8005d4a:	d024      	beq.n	8005d96 <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	6884      	ldr	r4, [r0, #8]
 8005d50:	015b      	lsls	r3, r3, #5
 8005d52:	429c      	cmp	r4, r3
 8005d54:	d106      	bne.n	8005d64 <HAL_UART_Receive_IT+0x2c>
 8005d56:	6903      	ldr	r3, [r0, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d5c:	2401      	movs	r4, #1
      return HAL_ERROR;
 8005d5e:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d60:	4221      	tst	r1, r4
 8005d62:	d118      	bne.n	8005d96 <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 8005d64:	0004      	movs	r4, r0
 8005d66:	3474      	adds	r4, #116	; 0x74
 8005d68:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8005d6c:	2d01      	cmp	r5, #1
 8005d6e:	d012      	beq.n	8005d96 <HAL_UART_Receive_IT+0x5e>
 8005d70:	3b01      	subs	r3, #1
 8005d72:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d76:	4c09      	ldr	r4, [pc, #36]	; (8005d9c <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d78:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d7a:	6803      	ldr	r3, [r0, #0]
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d007      	beq.n	8005d90 <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d80:	685c      	ldr	r4, [r3, #4]
 8005d82:	0224      	lsls	r4, r4, #8
 8005d84:	d504      	bpl.n	8005d90 <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d86:	2480      	movs	r4, #128	; 0x80
 8005d88:	681d      	ldr	r5, [r3, #0]
 8005d8a:	04e4      	lsls	r4, r4, #19
 8005d8c:	432c      	orrs	r4, r5
 8005d8e:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8005d90:	f7ff ff88 	bl	8005ca4 <UART_Start_Receive_IT>
 8005d94:	0003      	movs	r3, r0
}
 8005d96:	0018      	movs	r0, r3
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	40004800 	.word	0x40004800

08005da0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005da0:	4770      	bx	lr
	...

08005da4 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005da4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da6:	0005      	movs	r5, r0
{
 8005da8:	b085      	sub	sp, #20
 8005daa:	9203      	str	r2, [sp, #12]
 8005dac:	9102      	str	r1, [sp, #8]
  __HAL_LOCK(huart);
 8005dae:	3574      	adds	r5, #116	; 0x74
 8005db0:	782b      	ldrb	r3, [r5, #0]
{
 8005db2:	0004      	movs	r4, r0
 8005db4:	000f      	movs	r7, r1
 8005db6:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8005db8:	2002      	movs	r0, #2
{
 8005dba:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d030      	beq.n	8005e22 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc0:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8005dc2:	3801      	subs	r0, #1
 8005dc4:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005dc6:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	6819      	ldr	r1, [r3, #0]
 8005dcc:	4381      	bics	r1, r0
 8005dce:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005dd0:	6899      	ldr	r1, [r3, #8]
 8005dd2:	4816      	ldr	r0, [pc, #88]	; (8005e2c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
 8005dd4:	4001      	ands	r1, r0
 8005dd6:	4339      	orrs	r1, r7
 8005dd8:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005dda:	2f00      	cmp	r7, #0
 8005ddc:	d10c      	bne.n	8005df8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x54>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005dde:	6859      	ldr	r1, [r3, #4]
 8005de0:	3210      	adds	r2, #16
 8005de2:	4391      	bics	r1, r2
 8005de4:	88b2      	ldrh	r2, [r6, #4]
 8005de6:	79b0      	ldrb	r0, [r6, #6]
 8005de8:	4311      	orrs	r1, r2
 8005dea:	6059      	str	r1, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	0600      	lsls	r0, r0, #24
 8005df0:	0212      	lsls	r2, r2, #8
 8005df2:	0a12      	lsrs	r2, r2, #8
 8005df4:	4302      	orrs	r2, r0
 8005df6:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8005df8:	2201      	movs	r2, #1
 8005dfa:	6819      	ldr	r1, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005e00:	f7fc fc58 	bl	80026b4 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e04:	2180      	movs	r1, #128	; 0x80
 8005e06:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>)
  tickstart = HAL_GetTick();
 8005e08:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e0a:	9200      	str	r2, [sp, #0]
 8005e0c:	0020      	movs	r0, r4
 8005e0e:	2200      	movs	r2, #0
 8005e10:	03c9      	lsls	r1, r1, #15
 8005e12:	f7ff fe9b 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	702b      	strb	r3, [r5, #0]
}
 8005e22:	b005      	add	sp, #20
 8005e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 8005e26:	2003      	movs	r0, #3
 8005e28:	e7f9      	b.n	8005e1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	ffcfffff 	.word	0xffcfffff
 8005e30:	01ffffff 	.word	0x01ffffff

08005e34 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8005e34:	0001      	movs	r1, r0
 8005e36:	2302      	movs	r3, #2
{
 8005e38:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8005e3a:	3174      	adds	r1, #116	; 0x74
 8005e3c:	780c      	ldrb	r4, [r1, #0]
{
 8005e3e:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8005e40:	0018      	movs	r0, r3
 8005e42:	2c01      	cmp	r4, #1
 8005e44:	d005      	beq.n	8005e52 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	6810      	ldr	r0, [r2, #0]
 8005e4a:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8005e4c:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005e4e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8005e50:	7008      	strb	r0, [r1, #0]
}
 8005e52:	bd10      	pop	{r4, pc}

08005e54 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8005e54:	b510      	push	{r4, lr}
 8005e56:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8005e58:	2210      	movs	r2, #16
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	30f1      	adds	r0, #241	; 0xf1
 8005e5e:	f006 f8be 	bl	800bfde <memset1>
    ctx->M_n = 0;
 8005e62:	0023      	movs	r3, r4
 8005e64:	2100      	movs	r1, #0
 8005e66:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8005e68:	22f0      	movs	r2, #240	; 0xf0
 8005e6a:	0020      	movs	r0, r4
    ctx->M_n = 0;
 8005e6c:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8005e6e:	f006 f8b6 	bl	800bfde <memset1>
}
 8005e72:	bd10      	pop	{r4, pc}

08005e74 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8005e74:	b510      	push	{r4, lr}
 8005e76:	0002      	movs	r2, r0
 8005e78:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8005e7a:	2110      	movs	r1, #16
 8005e7c:	f000 f99e 	bl	80061bc <lorawan_aes_set_key>
}
 8005e80:	bd10      	pop	{r4, pc}

08005e82 <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8005e82:	0003      	movs	r3, r0
{
 8005e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e86:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 8005e88:	33fc      	adds	r3, #252	; 0xfc
 8005e8a:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8005e8c:	1ca3      	adds	r3, r4, #2
{
 8005e8e:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8005e90:	33ff      	adds	r3, #255	; 0xff
{
 8005e92:	000e      	movs	r6, r1
 8005e94:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8005e96:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d036      	beq.n	8005f0a <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 8005e9c:	2710      	movs	r7, #16
 8005e9e:	1a3f      	subs	r7, r7, r0
 8005ea0:	9700      	str	r7, [sp, #0]
 8005ea2:	4297      	cmp	r7, r2
 8005ea4:	d900      	bls.n	8005ea8 <AES_CMAC_Update+0x26>
 8005ea6:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8005ea8:	466b      	mov	r3, sp
 8005eaa:	881a      	ldrh	r2, [r3, #0]
 8005eac:	1ca3      	adds	r3, r4, #2
 8005eae:	33ff      	adds	r3, #255	; 0xff
 8005eb0:	0031      	movs	r1, r6
 8005eb2:	1818      	adds	r0, r3, r0
 8005eb4:	f006 f87e 	bl	800bfb4 <memcpy1>
        ctx->M_n += mlen;
 8005eb8:	0022      	movs	r2, r4
 8005eba:	32fc      	adds	r2, #252	; 0xfc
 8005ebc:	6991      	ldr	r1, [r2, #24]
 8005ebe:	9b00      	ldr	r3, [sp, #0]
 8005ec0:	185b      	adds	r3, r3, r1
 8005ec2:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8005ec4:	2b0f      	cmp	r3, #15
 8005ec6:	d929      	bls.n	8005f1c <AES_CMAC_Update+0x9a>
 8005ec8:	42af      	cmp	r7, r5
 8005eca:	d227      	bcs.n	8005f1c <AES_CMAC_Update+0x9a>
 8005ecc:	0023      	movs	r3, r4
 8005ece:	1ca1      	adds	r1, r4, #2
 8005ed0:	33f1      	adds	r3, #241	; 0xf1
 8005ed2:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	7c18      	ldrb	r0, [r3, #16]
 8005ed8:	4042      	eors	r2, r0
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	428b      	cmp	r3, r1
 8005ee0:	d1f8      	bne.n	8005ed4 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8005ee2:	0027      	movs	r7, r4
 8005ee4:	37f1      	adds	r7, #241	; 0xf1
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	0039      	movs	r1, r7
 8005eea:	a802      	add	r0, sp, #8
 8005eec:	f006 f862 	bl	800bfb4 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8005ef0:	a902      	add	r1, sp, #8
 8005ef2:	0022      	movs	r2, r4
 8005ef4:	0008      	movs	r0, r1
 8005ef6:	f000 f9e9 	bl	80062cc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8005efa:	2210      	movs	r2, #16
 8005efc:	0038      	movs	r0, r7
 8005efe:	a902      	add	r1, sp, #8
 8005f00:	f006 f858 	bl	800bfb4 <memcpy1>

        data += mlen;
 8005f04:	9b00      	ldr	r3, [sp, #0]
 8005f06:	18f6      	adds	r6, r6, r3
        len -= mlen;
 8005f08:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 8005f0a:	2d10      	cmp	r5, #16
 8005f0c:	d808      	bhi.n	8005f20 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8005f0e:	0031      	movs	r1, r6
 8005f10:	9801      	ldr	r0, [sp, #4]
 8005f12:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 8005f14:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 8005f16:	f006 f84d 	bl	800bfb4 <memcpy1>
    ctx->M_n = len;
 8005f1a:	61a5      	str	r5, [r4, #24]
}
 8005f1c:	b007      	add	sp, #28
 8005f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f20:	0023      	movs	r3, r4
 8005f22:	0032      	movs	r2, r6
 8005f24:	1ca0      	adds	r0, r4, #2
 8005f26:	33f1      	adds	r3, #241	; 0xf1
 8005f28:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 8005f2a:	7819      	ldrb	r1, [r3, #0]
 8005f2c:	7817      	ldrb	r7, [r2, #0]
 8005f2e:	3201      	adds	r2, #1
 8005f30:	4079      	eors	r1, r7
 8005f32:	7019      	strb	r1, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	4283      	cmp	r3, r0
 8005f38:	d1f7      	bne.n	8005f2a <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8005f3a:	0027      	movs	r7, r4
 8005f3c:	37f1      	adds	r7, #241	; 0xf1
 8005f3e:	2210      	movs	r2, #16
 8005f40:	0039      	movs	r1, r7
 8005f42:	a802      	add	r0, sp, #8
 8005f44:	f006 f836 	bl	800bfb4 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8005f48:	a902      	add	r1, sp, #8
 8005f4a:	0022      	movs	r2, r4
 8005f4c:	0008      	movs	r0, r1
 8005f4e:	f000 f9bd 	bl	80062cc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8005f52:	2210      	movs	r2, #16
 8005f54:	0038      	movs	r0, r7
 8005f56:	a902      	add	r1, sp, #8
 8005f58:	f006 f82c 	bl	800bfb4 <memcpy1>
        data += 16;
 8005f5c:	3610      	adds	r6, #16
        len -= 16;
 8005f5e:	3d10      	subs	r5, #16
 8005f60:	e7d3      	b.n	8005f0a <AES_CMAC_Update+0x88>

08005f62 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8005f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f64:	000c      	movs	r4, r1
 8005f66:	b08b      	sub	sp, #44	; 0x2c
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8005f68:	2210      	movs	r2, #16
 8005f6a:	2100      	movs	r1, #0
{
 8005f6c:	9001      	str	r0, [sp, #4]
    memset1( K, '\0', 16 );
 8005f6e:	a802      	add	r0, sp, #8
 8005f70:	f006 f835 	bl	800bfde <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8005f74:	a902      	add	r1, sp, #8
 8005f76:	0022      	movs	r2, r4
 8005f78:	0008      	movs	r0, r1
 8005f7a:	f000 f9a7 	bl	80062cc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8005f7e:	ab02      	add	r3, sp, #8
 8005f80:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8005f82:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 8005f84:	2a7f      	cmp	r2, #127	; 0x7f
 8005f86:	d940      	bls.n	800600a <AES_CMAC_Final+0xa8>
        LSHIFT( K, K );
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	7858      	ldrb	r0, [r3, #1]
 8005f8c:	0052      	lsls	r2, r2, #1
 8005f8e:	09c0      	lsrs	r0, r0, #7
 8005f90:	4302      	orrs	r2, r0
 8005f92:	3101      	adds	r1, #1
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	290f      	cmp	r1, #15
 8005f9a:	d1f5      	bne.n	8005f88 <AES_CMAC_Final+0x26>
 8005f9c:	ab02      	add	r3, sp, #8
 8005f9e:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 8005fa0:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 8005fa2:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8005fa4:	425b      	negs	r3, r3
 8005fa6:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 8005fa8:	0027      	movs	r7, r4
 8005faa:	37fc      	adds	r7, #252	; 0xfc
 8005fac:	69b8      	ldr	r0, [r7, #24]
        LSHIFT( K, K );
 8005fae:	aa02      	add	r2, sp, #8
 8005fb0:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 8005fb2:	2810      	cmp	r0, #16
 8005fb4:	d137      	bne.n	8006026 <AES_CMAC_Final+0xc4>
 8005fb6:	0020      	movs	r0, r4
 8005fb8:	1ca3      	adds	r3, r4, #2
 8005fba:	3012      	adds	r0, #18
 8005fbc:	33ff      	adds	r3, #255	; 0xff
 8005fbe:	aa02      	add	r2, sp, #8
 8005fc0:	30ff      	adds	r0, #255	; 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8005fc2:	7819      	ldrb	r1, [r3, #0]
 8005fc4:	7815      	ldrb	r5, [r2, #0]
 8005fc6:	3201      	adds	r2, #1
 8005fc8:	4069      	eors	r1, r5
 8005fca:	7019      	strb	r1, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4298      	cmp	r0, r3
 8005fd0:	d1f7      	bne.n	8005fc2 <AES_CMAC_Final+0x60>
 8005fd2:	0023      	movs	r3, r4
 8005fd4:	33f1      	adds	r3, #241	; 0xf1
 8005fd6:	0019      	movs	r1, r3
 8005fd8:	1ca0      	adds	r0, r4, #2
 8005fda:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8005fdc:	781a      	ldrb	r2, [r3, #0]
 8005fde:	7c1d      	ldrb	r5, [r3, #16]
 8005fe0:	406a      	eors	r2, r5
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4283      	cmp	r3, r0
 8005fe8:	d1f8      	bne.n	8005fdc <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8005fea:	a806      	add	r0, sp, #24
 8005fec:	2210      	movs	r2, #16
 8005fee:	f005 ffe1 	bl	800bfb4 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8005ff2:	0022      	movs	r2, r4
 8005ff4:	9901      	ldr	r1, [sp, #4]
 8005ff6:	a806      	add	r0, sp, #24
 8005ff8:	f000 f968 	bl	80062cc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	2100      	movs	r1, #0
 8006000:	a802      	add	r0, sp, #8
 8006002:	f005 ffec 	bl	800bfde <memset1>
}
 8006006:	b00b      	add	sp, #44	; 0x2c
 8006008:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	7858      	ldrb	r0, [r3, #1]
 800600e:	0052      	lsls	r2, r2, #1
 8006010:	09c0      	lsrs	r0, r0, #7
 8006012:	4302      	orrs	r2, r0
 8006014:	3101      	adds	r1, #1
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	290f      	cmp	r1, #15
 800601c:	d1f5      	bne.n	800600a <AES_CMAC_Final+0xa8>
 800601e:	ab02      	add	r3, sp, #8
 8006020:	7bdb      	ldrb	r3, [r3, #15]
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	e7c0      	b.n	8005fa8 <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 8006026:	ab02      	add	r3, sp, #8
 8006028:	781a      	ldrb	r2, [r3, #0]
            LSHIFT( K, K );
 800602a:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 800602c:	2a7f      	cmp	r2, #127	; 0x7f
 800602e:	d933      	bls.n	8006098 <AES_CMAC_Final+0x136>
            LSHIFT( K, K );
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	785d      	ldrb	r5, [r3, #1]
 8006034:	0052      	lsls	r2, r2, #1
 8006036:	09ed      	lsrs	r5, r5, #7
 8006038:	432a      	orrs	r2, r5
 800603a:	3101      	adds	r1, #1
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	3301      	adds	r3, #1
 8006040:	290f      	cmp	r1, #15
 8006042:	d1f5      	bne.n	8006030 <AES_CMAC_Final+0xce>
 8006044:	ab02      	add	r3, sp, #8
 8006046:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 8006048:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 800604a:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 800604c:	425b      	negs	r3, r3
 800604e:	4053      	eors	r3, r2
            LSHIFT( K, K );
 8006050:	aa02      	add	r2, sp, #8
 8006052:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 8006054:	2280      	movs	r2, #128	; 0x80
 8006056:	1823      	adds	r3, r4, r0
 8006058:	33ff      	adds	r3, #255	; 0xff
            ctx->M_last[ctx->M_n] = 0;
 800605a:	1c46      	adds	r6, r0, #1
 800605c:	2500      	movs	r5, #0
        ctx->M_last[ctx->M_n] = 0x80;
 800605e:	709a      	strb	r2, [r3, #2]
            ctx->M_last[ctx->M_n] = 0;
 8006060:	2e10      	cmp	r6, #16
 8006062:	d801      	bhi.n	8006068 <AES_CMAC_Final+0x106>
 8006064:	350f      	adds	r5, #15
 8006066:	1a2d      	subs	r5, r5, r0
 8006068:	3003      	adds	r0, #3
 800606a:	30ff      	adds	r0, #255	; 0xff
 800606c:	002a      	movs	r2, r5
 800606e:	2100      	movs	r1, #0
 8006070:	1820      	adds	r0, r4, r0
 8006072:	f008 f890 	bl	800e196 <memset>
 8006076:	0020      	movs	r0, r4
        while( ++ctx->M_n < 16 )
 8006078:	19ad      	adds	r5, r5, r6
 800607a:	1ca3      	adds	r3, r4, #2
 800607c:	3012      	adds	r0, #18
 800607e:	61bd      	str	r5, [r7, #24]
 8006080:	33ff      	adds	r3, #255	; 0xff
 8006082:	aa02      	add	r2, sp, #8
 8006084:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 8006086:	7819      	ldrb	r1, [r3, #0]
 8006088:	7815      	ldrb	r5, [r2, #0]
 800608a:	3201      	adds	r2, #1
 800608c:	4069      	eors	r1, r5
 800608e:	7019      	strb	r1, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	4298      	cmp	r0, r3
 8006094:	d1f7      	bne.n	8006086 <AES_CMAC_Final+0x124>
 8006096:	e79c      	b.n	8005fd2 <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	785d      	ldrb	r5, [r3, #1]
 800609c:	0052      	lsls	r2, r2, #1
 800609e:	09ed      	lsrs	r5, r5, #7
 80060a0:	432a      	orrs	r2, r5
 80060a2:	3101      	adds	r1, #1
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	290f      	cmp	r1, #15
 80060aa:	d1f5      	bne.n	8006098 <AES_CMAC_Final+0x136>
 80060ac:	ab02      	add	r3, sp, #8
 80060ae:	7bdb      	ldrb	r3, [r3, #15]
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	e7cd      	b.n	8006050 <AES_CMAC_Final+0xee>

080060b4 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80060b4:	780a      	ldrb	r2, [r1, #0]
 80060b6:	7803      	ldrb	r3, [r0, #0]
 80060b8:	4053      	eors	r3, r2
 80060ba:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80060bc:	784a      	ldrb	r2, [r1, #1]
 80060be:	7843      	ldrb	r3, [r0, #1]
 80060c0:	4053      	eors	r3, r2
 80060c2:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80060c4:	788a      	ldrb	r2, [r1, #2]
 80060c6:	7883      	ldrb	r3, [r0, #2]
 80060c8:	4053      	eors	r3, r2
 80060ca:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80060cc:	78ca      	ldrb	r2, [r1, #3]
 80060ce:	78c3      	ldrb	r3, [r0, #3]
 80060d0:	4053      	eors	r3, r2
 80060d2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80060d4:	790a      	ldrb	r2, [r1, #4]
 80060d6:	7903      	ldrb	r3, [r0, #4]
 80060d8:	4053      	eors	r3, r2
 80060da:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80060dc:	794a      	ldrb	r2, [r1, #5]
 80060de:	7943      	ldrb	r3, [r0, #5]
 80060e0:	4053      	eors	r3, r2
 80060e2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80060e4:	798a      	ldrb	r2, [r1, #6]
 80060e6:	7983      	ldrb	r3, [r0, #6]
 80060e8:	4053      	eors	r3, r2
 80060ea:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80060ec:	79ca      	ldrb	r2, [r1, #7]
 80060ee:	79c3      	ldrb	r3, [r0, #7]
 80060f0:	4053      	eors	r3, r2
 80060f2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80060f4:	7a0a      	ldrb	r2, [r1, #8]
 80060f6:	7a03      	ldrb	r3, [r0, #8]
 80060f8:	4053      	eors	r3, r2
 80060fa:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80060fc:	7a4a      	ldrb	r2, [r1, #9]
 80060fe:	7a43      	ldrb	r3, [r0, #9]
 8006100:	4053      	eors	r3, r2
 8006102:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8006104:	7a8a      	ldrb	r2, [r1, #10]
 8006106:	7a83      	ldrb	r3, [r0, #10]
 8006108:	4053      	eors	r3, r2
 800610a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800610c:	7aca      	ldrb	r2, [r1, #11]
 800610e:	7ac3      	ldrb	r3, [r0, #11]
 8006110:	4053      	eors	r3, r2
 8006112:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8006114:	7b0a      	ldrb	r2, [r1, #12]
 8006116:	7b03      	ldrb	r3, [r0, #12]
 8006118:	4053      	eors	r3, r2
 800611a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800611c:	7b4a      	ldrb	r2, [r1, #13]
 800611e:	7b43      	ldrb	r3, [r0, #13]
 8006120:	4053      	eors	r3, r2
 8006122:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8006124:	7b8a      	ldrb	r2, [r1, #14]
 8006126:	7b83      	ldrb	r3, [r0, #14]
 8006128:	4053      	eors	r3, r2
 800612a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800612c:	7bca      	ldrb	r2, [r1, #15]
 800612e:	7bc3      	ldrb	r3, [r0, #15]
 8006130:	4053      	eors	r3, r2
 8006132:	73c3      	strb	r3, [r0, #15]
#endif
}
 8006134:	4770      	bx	lr

08006136 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8006136:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8006138:	780b      	ldrb	r3, [r1, #0]
 800613a:	7814      	ldrb	r4, [r2, #0]
 800613c:	4063      	eors	r3, r4
 800613e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8006140:	7854      	ldrb	r4, [r2, #1]
 8006142:	784b      	ldrb	r3, [r1, #1]
 8006144:	4063      	eors	r3, r4
 8006146:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8006148:	7894      	ldrb	r4, [r2, #2]
 800614a:	788b      	ldrb	r3, [r1, #2]
 800614c:	4063      	eors	r3, r4
 800614e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8006150:	78d4      	ldrb	r4, [r2, #3]
 8006152:	78cb      	ldrb	r3, [r1, #3]
 8006154:	4063      	eors	r3, r4
 8006156:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8006158:	7914      	ldrb	r4, [r2, #4]
 800615a:	790b      	ldrb	r3, [r1, #4]
 800615c:	4063      	eors	r3, r4
 800615e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006160:	7954      	ldrb	r4, [r2, #5]
 8006162:	794b      	ldrb	r3, [r1, #5]
 8006164:	4063      	eors	r3, r4
 8006166:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8006168:	7994      	ldrb	r4, [r2, #6]
 800616a:	798b      	ldrb	r3, [r1, #6]
 800616c:	4063      	eors	r3, r4
 800616e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8006170:	79d4      	ldrb	r4, [r2, #7]
 8006172:	79cb      	ldrb	r3, [r1, #7]
 8006174:	4063      	eors	r3, r4
 8006176:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8006178:	7a14      	ldrb	r4, [r2, #8]
 800617a:	7a0b      	ldrb	r3, [r1, #8]
 800617c:	4063      	eors	r3, r4
 800617e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8006180:	7a4b      	ldrb	r3, [r1, #9]
 8006182:	7a54      	ldrb	r4, [r2, #9]
 8006184:	4063      	eors	r3, r4
 8006186:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8006188:	7a8b      	ldrb	r3, [r1, #10]
 800618a:	7a94      	ldrb	r4, [r2, #10]
 800618c:	4063      	eors	r3, r4
 800618e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8006190:	7ad4      	ldrb	r4, [r2, #11]
 8006192:	7acb      	ldrb	r3, [r1, #11]
 8006194:	4063      	eors	r3, r4
 8006196:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8006198:	7b14      	ldrb	r4, [r2, #12]
 800619a:	7b0b      	ldrb	r3, [r1, #12]
 800619c:	4063      	eors	r3, r4
 800619e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80061a0:	7b54      	ldrb	r4, [r2, #13]
 80061a2:	7b4b      	ldrb	r3, [r1, #13]
 80061a4:	4063      	eors	r3, r4
 80061a6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80061a8:	7b94      	ldrb	r4, [r2, #14]
 80061aa:	7b8b      	ldrb	r3, [r1, #14]
 80061ac:	4063      	eors	r3, r4
 80061ae:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80061b0:	7bcb      	ldrb	r3, [r1, #15]
 80061b2:	7bd2      	ldrb	r2, [r2, #15]
 80061b4:	4053      	eors	r3, r2
 80061b6:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80061b8:	bd10      	pop	{r4, pc}
	...

080061bc <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 80061bc:	000b      	movs	r3, r1
{
 80061be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c0:	3b10      	subs	r3, #16
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	000f      	movs	r7, r1
 80061c6:	0014      	movs	r4, r2
 80061c8:	b087      	sub	sp, #28
 80061ca:	2b10      	cmp	r3, #16
 80061cc:	d805      	bhi.n	80061da <lorawan_aes_set_key+0x1e>
 80061ce:	2201      	movs	r2, #1
 80061d0:	409a      	lsls	r2, r3
 80061d2:	0013      	movs	r3, r2
 80061d4:	4a3b      	ldr	r2, [pc, #236]	; (80062c4 <lorawan_aes_set_key+0x108>)
 80061d6:	4213      	tst	r3, r2
 80061d8:	d105      	bne.n	80061e6 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80061da:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 80061dc:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 80061de:	34f0      	adds	r4, #240	; 0xf0
 80061e0:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80061e2:	b007      	add	sp, #28
 80061e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 80061e6:	2300      	movs	r3, #0
 80061e8:	429f      	cmp	r7, r3
 80061ea:	d155      	bne.n	8006298 <lorawan_aes_set_key+0xdc>
    hi = (keylen + 28) << 2;
 80061ec:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 80061ee:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 80061f0:	331c      	adds	r3, #28
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	3b01      	subs	r3, #1
 80061fc:	32f0      	adds	r2, #240	; 0xf0
 80061fe:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006200:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8006202:	003d      	movs	r5, r7
            t0 = s_box(t0);
 8006204:	4e30      	ldr	r6, [pc, #192]	; (80062c8 <lorawan_aes_set_key+0x10c>)
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006206:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8006208:	1963      	adds	r3, r4, r5
 800620a:	1f1a      	subs	r2, r3, #4
 800620c:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 800620e:	0039      	movs	r1, r7
        t0 = ctx->ksch[cc - 4];
 8006210:	9200      	str	r2, [sp, #0]
        t1 = ctx->ksch[cc - 3];
 8006212:	1eda      	subs	r2, r3, #3
 8006214:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8006216:	0028      	movs	r0, r5
        t1 = ctx->ksch[cc - 3];
 8006218:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 800621a:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 800621c:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 800621e:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 8006220:	781b      	ldrb	r3, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 8006222:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8006224:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8006226:	f7fa f825 	bl	8000274 <__aeabi_uidivmod>
 800622a:	b2c9      	uxtb	r1, r1
 800622c:	2900      	cmp	r1, #0
 800622e:	d137      	bne.n	80062a0 <lorawan_aes_set_key+0xe4>
            t0 = s_box(t1) ^ rc;
 8006230:	9b01      	ldr	r3, [sp, #4]
            rc = f2(rc);
 8006232:	311b      	adds	r1, #27
            t0 = s_box(t1) ^ rc;
 8006234:	5cf2      	ldrb	r2, [r6, r3]
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	405a      	eors	r2, r3
            t1 = s_box(t2);
 800623a:	9b02      	ldr	r3, [sp, #8]
 800623c:	5cf3      	ldrb	r3, [r6, r3]
 800623e:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8006240:	9b03      	ldr	r3, [sp, #12]
 8006242:	5cf3      	ldrb	r3, [r6, r3]
 8006244:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 8006246:	9b00      	ldr	r3, [sp, #0]
            t0 = s_box(t1) ^ rc;
 8006248:	9200      	str	r2, [sp, #0]
            t3 = s_box(tt);
 800624a:	5cf3      	ldrb	r3, [r6, r3]
 800624c:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 800624e:	9b04      	ldr	r3, [sp, #16]
 8006250:	09db      	lsrs	r3, r3, #7
 8006252:	434b      	muls	r3, r1
 8006254:	9904      	ldr	r1, [sp, #16]
 8006256:	0049      	lsls	r1, r1, #1
 8006258:	404b      	eors	r3, r1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800625e:	1beb      	subs	r3, r5, r7
 8006260:	b2db      	uxtb	r3, r3
 8006262:	5ce2      	ldrb	r2, [r4, r3]
 8006264:	9900      	ldr	r1, [sp, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006266:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006268:	4051      	eors	r1, r2
 800626a:	5561      	strb	r1, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800626c:	785a      	ldrb	r2, [r3, #1]
 800626e:	9801      	ldr	r0, [sp, #4]
 8006270:	1c69      	adds	r1, r5, #1
 8006272:	4050      	eors	r0, r2
 8006274:	b2c9      	uxtb	r1, r1
 8006276:	5460      	strb	r0, [r4, r1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8006278:	789a      	ldrb	r2, [r3, #2]
 800627a:	9802      	ldr	r0, [sp, #8]
 800627c:	1961      	adds	r1, r4, r5
 800627e:	4050      	eors	r0, r2
 8006280:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006282:	78db      	ldrb	r3, [r3, #3]
 8006284:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006286:	3504      	adds	r5, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006288:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800628a:	9b05      	ldr	r3, [sp, #20]
 800628c:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800628e:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006290:	42ab      	cmp	r3, r5
 8006292:	d8b9      	bhi.n	8006208 <lorawan_aes_set_key+0x4c>
    return 0;
 8006294:	2000      	movs	r0, #0
 8006296:	e7a4      	b.n	80061e2 <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 8006298:	5cc2      	ldrb	r2, [r0, r3]
 800629a:	54e2      	strb	r2, [r4, r3]
 800629c:	3301      	adds	r3, #1
 800629e:	e7a3      	b.n	80061e8 <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 80062a0:	2f18      	cmp	r7, #24
 80062a2:	d9dc      	bls.n	800625e <lorawan_aes_set_key+0xa2>
 80062a4:	2910      	cmp	r1, #16
 80062a6:	d1da      	bne.n	800625e <lorawan_aes_set_key+0xa2>
            t0 = s_box(t0);
 80062a8:	9b00      	ldr	r3, [sp, #0]
 80062aa:	5cf3      	ldrb	r3, [r6, r3]
 80062ac:	9300      	str	r3, [sp, #0]
            t1 = s_box(t1);
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	5cf3      	ldrb	r3, [r6, r3]
 80062b2:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 80062b4:	9b02      	ldr	r3, [sp, #8]
 80062b6:	5cf3      	ldrb	r3, [r6, r3]
 80062b8:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	5cf3      	ldrb	r3, [r6, r3]
 80062be:	9303      	str	r3, [sp, #12]
 80062c0:	e7cd      	b.n	800625e <lorawan_aes_set_key+0xa2>
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	00010101 	.word	0x00010101
 80062c8:	0800e5ed 	.word	0x0800e5ed

080062cc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 80062cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ce:	b099      	sub	sp, #100	; 0x64
 80062d0:	9210      	str	r2, [sp, #64]	; 0x40
 80062d2:	9113      	str	r1, [sp, #76]	; 0x4c
    if( ctx->rnd )
 80062d4:	32f0      	adds	r2, #240	; 0xf0
 80062d6:	7812      	ldrb	r2, [r2, #0]
{
 80062d8:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 80062da:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 80062dc:	2a00      	cmp	r2, #0
 80062de:	d072      	beq.n	80063c6 <lorawan_aes_encrypt+0xfa>
        copy_and_key( s1, in, ctx->ksch );
 80062e0:	0019      	movs	r1, r3
 80062e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062e4:	a814      	add	r0, sp, #80	; 0x50
 80062e6:	f7ff ff26 	bl	8006136 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80062ea:	2301      	movs	r3, #1
 80062ec:	9301      	str	r3, [sp, #4]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80062ee:	9b01      	ldr	r3, [sp, #4]
 80062f0:	011a      	lsls	r2, r3, #4
 80062f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062f4:	189b      	adds	r3, r3, r2
 80062f6:	9312      	str	r3, [sp, #72]	; 0x48
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80062f8:	ab14      	add	r3, sp, #80	; 0x50
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	9302      	str	r3, [sp, #8]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80062fe:	ab14      	add	r3, sp, #80	; 0x50
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	9303      	str	r3, [sp, #12]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8006304:	ab14      	add	r3, sp, #80	; 0x50
 8006306:	789b      	ldrb	r3, [r3, #2]
 8006308:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800630a:	ab14      	add	r3, sp, #80	; 0x50
 800630c:	78db      	ldrb	r3, [r3, #3]
 800630e:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8006310:	ab14      	add	r3, sp, #80	; 0x50
 8006312:	791b      	ldrb	r3, [r3, #4]
 8006314:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8006316:	ab14      	add	r3, sp, #80	; 0x50
 8006318:	795c      	ldrb	r4, [r3, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800631a:	799b      	ldrb	r3, [r3, #6]
 800631c:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800631e:	ab14      	add	r3, sp, #80	; 0x50
 8006320:	79db      	ldrb	r3, [r3, #7]
 8006322:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8006324:	ab14      	add	r3, sp, #80	; 0x50
 8006326:	7a1b      	ldrb	r3, [r3, #8]
 8006328:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800632a:	ab14      	add	r3, sp, #80	; 0x50
 800632c:	7a5b      	ldrb	r3, [r3, #9]
 800632e:	930a      	str	r3, [sp, #40]	; 0x28
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8006330:	ab14      	add	r3, sp, #80	; 0x50
 8006332:	7a9f      	ldrb	r7, [r3, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8006334:	7adb      	ldrb	r3, [r3, #11]
 8006336:	930b      	str	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8006338:	ab14      	add	r3, sp, #80	; 0x50
 800633a:	7b1b      	ldrb	r3, [r3, #12]
 800633c:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800633e:	ab14      	add	r3, sp, #80	; 0x50
 8006340:	7b5b      	ldrb	r3, [r3, #13]
 8006342:	930d      	str	r3, [sp, #52]	; 0x34
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8006344:	ab14      	add	r3, sp, #80	; 0x50
 8006346:	7b9b      	ldrb	r3, [r3, #14]
 8006348:	930e      	str	r3, [sp, #56]	; 0x38
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800634a:	ab14      	add	r3, sp, #80	; 0x50
 800634c:	7bdb      	ldrb	r3, [r3, #15]
        for( r = 1 ; r < ctx->rnd ; ++r )
 800634e:	9901      	ldr	r1, [sp, #4]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8006350:	930f      	str	r3, [sp, #60]	; 0x3c
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006352:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006354:	33f0      	adds	r3, #240	; 0xf0
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	4b74      	ldr	r3, [pc, #464]	; (800652c <lorawan_aes_encrypt+0x260>)
 800635a:	428a      	cmp	r2, r1
 800635c:	d835      	bhi.n	80063ca <lorawan_aes_encrypt+0xfe>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800635e:	9a02      	ldr	r2, [sp, #8]
 8006360:	a914      	add	r1, sp, #80	; 0x50
 8006362:	5c9a      	ldrb	r2, [r3, r2]
 8006364:	700a      	strb	r2, [r1, #0]
 8006366:	9a06      	ldr	r2, [sp, #24]
 8006368:	5c9a      	ldrb	r2, [r3, r2]
 800636a:	710a      	strb	r2, [r1, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800636c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800636e:	5c9a      	ldrb	r2, [r3, r2]
 8006370:	720a      	strb	r2, [r1, #8]
 8006372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006374:	5c9a      	ldrb	r2, [r3, r2]
 8006376:	730a      	strb	r2, [r1, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006378:	5d1a      	ldrb	r2, [r3, r4]
 800637a:	704a      	strb	r2, [r1, #1]
 800637c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800637e:	5c9a      	ldrb	r2, [r3, r2]
 8006380:	714a      	strb	r2, [r1, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8006382:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006384:	5c9a      	ldrb	r2, [r3, r2]
 8006386:	724a      	strb	r2, [r1, #9]
 8006388:	9a03      	ldr	r2, [sp, #12]
 800638a:	5c9a      	ldrb	r2, [r3, r2]
 800638c:	734a      	strb	r2, [r1, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800638e:	5dda      	ldrb	r2, [r3, r7]
 8006390:	708a      	strb	r2, [r1, #2]
 8006392:	9a04      	ldr	r2, [sp, #16]
 8006394:	5c9a      	ldrb	r2, [r3, r2]
 8006396:	728a      	strb	r2, [r1, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8006398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800639a:	5c9a      	ldrb	r2, [r3, r2]
 800639c:	718a      	strb	r2, [r1, #6]
 800639e:	9a07      	ldr	r2, [sp, #28]
 80063a0:	5c9a      	ldrb	r2, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80063a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80063a4:	738a      	strb	r2, [r1, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80063a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063a8:	5c9a      	ldrb	r2, [r3, r2]
 80063aa:	73ca      	strb	r2, [r1, #15]
 80063ac:	9a08      	ldr	r2, [sp, #32]
 80063ae:	5c9a      	ldrb	r2, [r3, r2]
 80063b0:	72ca      	strb	r2, [r1, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80063b2:	9a05      	ldr	r2, [sp, #20]
 80063b4:	5c9a      	ldrb	r2, [r3, r2]
 80063b6:	71ca      	strb	r2, [r1, #7]
 80063b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ba:	5c9b      	ldrb	r3, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80063bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80063be:	70cb      	strb	r3, [r1, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80063c0:	f7ff feb9 	bl	8006136 <copy_and_key>
    return 0;
 80063c4:	2000      	movs	r0, #0
}
 80063c6:	b019      	add	sp, #100	; 0x64
 80063c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80063ca:	5dda      	ldrb	r2, [r3, r7]
 80063cc:	4958      	ldr	r1, [pc, #352]	; (8006530 <lorawan_aes_encrypt+0x264>)
 80063ce:	9211      	str	r2, [sp, #68]	; 0x44
 80063d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063d2:	9d02      	ldr	r5, [sp, #8]
 80063d4:	5c98      	ldrb	r0, [r3, r2]
 80063d6:	4a57      	ldr	r2, [pc, #348]	; (8006534 <lorawan_aes_encrypt+0x268>)
 80063d8:	5d56      	ldrb	r6, [r2, r5]
 80063da:	5d0d      	ldrb	r5, [r1, r4]
 80063dc:	406e      	eors	r6, r5
 80063de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80063e0:	406e      	eors	r6, r5
 80063e2:	4046      	eors	r6, r0
 80063e4:	ad14      	add	r5, sp, #80	; 0x50
 80063e6:	702e      	strb	r6, [r5, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80063e8:	9d02      	ldr	r5, [sp, #8]
 80063ea:	5d5e      	ldrb	r6, [r3, r5]
 80063ec:	5d15      	ldrb	r5, [r2, r4]
 80063ee:	4070      	eors	r0, r6
 80063f0:	4068      	eors	r0, r5
 80063f2:	5dcd      	ldrb	r5, [r1, r7]
 80063f4:	4068      	eors	r0, r5
 80063f6:	ad14      	add	r5, sp, #80	; 0x50
 80063f8:	7068      	strb	r0, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80063fa:	5d18      	ldrb	r0, [r3, r4]
 80063fc:	5dd4      	ldrb	r4, [r2, r7]
 80063fe:	4046      	eors	r6, r0
 8006400:	4066      	eors	r6, r4
 8006402:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8006404:	5d0c      	ldrb	r4, [r1, r4]
 8006406:	4066      	eors	r6, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006408:	9c11      	ldr	r4, [sp, #68]	; 0x44
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800640a:	70ae      	strb	r6, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800640c:	4060      	eors	r0, r4
 800640e:	9c02      	ldr	r4, [sp, #8]
 8006410:	5d0f      	ldrb	r7, [r1, r4]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006412:	9c06      	ldr	r4, [sp, #24]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006414:	4047      	eors	r7, r0
 8006416:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006418:	5c10      	ldrb	r0, [r2, r0]
 800641a:	4078      	eors	r0, r7
 800641c:	70e8      	strb	r0, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800641e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006420:	5c1d      	ldrb	r5, [r3, r0]
 8006422:	9805      	ldr	r0, [sp, #20]
 8006424:	5c18      	ldrb	r0, [r3, r0]
 8006426:	5d14      	ldrb	r4, [r2, r4]
 8006428:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800642a:	5d8e      	ldrb	r6, [r1, r6]
 800642c:	4074      	eors	r4, r6
 800642e:	406c      	eors	r4, r5
 8006430:	4044      	eors	r4, r0
 8006432:	ae14      	add	r6, sp, #80	; 0x50
 8006434:	7134      	strb	r4, [r6, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006436:	9c06      	ldr	r4, [sp, #24]
 8006438:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800643a:	5d1c      	ldrb	r4, [r3, r4]
 800643c:	5d96      	ldrb	r6, [r2, r6]
 800643e:	4060      	eors	r0, r4
 8006440:	4070      	eors	r0, r6
 8006442:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006444:	5d8e      	ldrb	r6, [r1, r6]
 8006446:	4070      	eors	r0, r6
 8006448:	ae14      	add	r6, sp, #80	; 0x50
 800644a:	7170      	strb	r0, [r6, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800644c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800644e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006450:	5c18      	ldrb	r0, [r3, r0]
 8006452:	5d96      	ldrb	r6, [r2, r6]
 8006454:	4044      	eors	r4, r0
 8006456:	4074      	eors	r4, r6
 8006458:	9e05      	ldr	r6, [sp, #20]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800645a:	4068      	eors	r0, r5
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800645c:	5d8e      	ldrb	r6, [r1, r6]
 800645e:	4074      	eors	r4, r6
 8006460:	ae14      	add	r6, sp, #80	; 0x50
 8006462:	71b4      	strb	r4, [r6, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006464:	9c06      	ldr	r4, [sp, #24]
 8006466:	5d0d      	ldrb	r5, [r1, r4]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006468:	9c09      	ldr	r4, [sp, #36]	; 0x24
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800646a:	4045      	eors	r5, r0
 800646c:	9805      	ldr	r0, [sp, #20]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800646e:	5d14      	ldrb	r4, [r2, r4]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006470:	5c10      	ldrb	r0, [r2, r0]
 8006472:	4068      	eors	r0, r5
 8006474:	71f0      	strb	r0, [r6, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006476:	9804      	ldr	r0, [sp, #16]
 8006478:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800647a:	5c1d      	ldrb	r5, [r3, r0]
 800647c:	5d8e      	ldrb	r6, [r1, r6]
 800647e:	9808      	ldr	r0, [sp, #32]
 8006480:	4074      	eors	r4, r6
 8006482:	5c18      	ldrb	r0, [r3, r0]
 8006484:	406c      	eors	r4, r5
 8006486:	4044      	eors	r4, r0
 8006488:	ae14      	add	r6, sp, #80	; 0x50
 800648a:	7234      	strb	r4, [r6, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800648c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800648e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006490:	5d1c      	ldrb	r4, [r3, r4]
 8006492:	5d96      	ldrb	r6, [r2, r6]
 8006494:	4060      	eors	r0, r4
 8006496:	4070      	eors	r0, r6
 8006498:	9e04      	ldr	r6, [sp, #16]
 800649a:	5d8e      	ldrb	r6, [r1, r6]
 800649c:	4070      	eors	r0, r6
 800649e:	ae14      	add	r6, sp, #80	; 0x50
 80064a0:	7270      	strb	r0, [r6, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80064a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80064a4:	9e04      	ldr	r6, [sp, #16]
 80064a6:	5c18      	ldrb	r0, [r3, r0]
 80064a8:	5d96      	ldrb	r6, [r2, r6]
 80064aa:	4044      	eors	r4, r0
 80064ac:	4074      	eors	r4, r6
 80064ae:	9e08      	ldr	r6, [sp, #32]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80064b0:	4068      	eors	r0, r5
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80064b2:	5d8e      	ldrb	r6, [r1, r6]
 80064b4:	4074      	eors	r4, r6
 80064b6:	ae14      	add	r6, sp, #80	; 0x50
 80064b8:	72b4      	strb	r4, [r6, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80064ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80064bc:	5d0d      	ldrb	r5, [r1, r4]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80064be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80064c0:	4045      	eors	r5, r0
 80064c2:	9808      	ldr	r0, [sp, #32]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80064c4:	5d14      	ldrb	r4, [r2, r4]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80064c6:	5c10      	ldrb	r0, [r2, r0]
 80064c8:	4068      	eors	r0, r5
 80064ca:	72f0      	strb	r0, [r6, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80064cc:	9807      	ldr	r0, [sp, #28]
 80064ce:	9e03      	ldr	r6, [sp, #12]
 80064d0:	5c1d      	ldrb	r5, [r3, r0]
 80064d2:	5d8e      	ldrb	r6, [r1, r6]
 80064d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80064d6:	4074      	eors	r4, r6
 80064d8:	5c18      	ldrb	r0, [r3, r0]
 80064da:	406c      	eors	r4, r5
 80064dc:	4044      	eors	r4, r0
 80064de:	ae14      	add	r6, sp, #80	; 0x50
 80064e0:	7334      	strb	r4, [r6, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80064e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80064e4:	9e03      	ldr	r6, [sp, #12]
 80064e6:	5d1c      	ldrb	r4, [r3, r4]
 80064e8:	5d96      	ldrb	r6, [r2, r6]
 80064ea:	4060      	eors	r0, r4
 80064ec:	4070      	eors	r0, r6
 80064ee:	9e07      	ldr	r6, [sp, #28]
 80064f0:	5d8e      	ldrb	r6, [r1, r6]
 80064f2:	4070      	eors	r0, r6
 80064f4:	ae14      	add	r6, sp, #80	; 0x50
 80064f6:	7370      	strb	r0, [r6, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80064f8:	9803      	ldr	r0, [sp, #12]
 80064fa:	5c1b      	ldrb	r3, [r3, r0]
 80064fc:	9807      	ldr	r0, [sp, #28]
 80064fe:	405c      	eors	r4, r3
 8006500:	5c10      	ldrb	r0, [r2, r0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006502:	406b      	eors	r3, r5
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006504:	4044      	eors	r4, r0
 8006506:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006508:	5c08      	ldrb	r0, [r1, r0]
 800650a:	4044      	eors	r4, r0
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800650c:	980c      	ldr	r0, [sp, #48]	; 0x30
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800650e:	73b4      	strb	r4, [r6, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006510:	5c0d      	ldrb	r5, [r1, r0]
 8006512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006514:	406b      	eors	r3, r5
 8006516:	5c55      	ldrb	r5, [r2, r1]
    xor_block(d, k);
 8006518:	0030      	movs	r0, r6
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800651a:	406b      	eors	r3, r5
 800651c:	73f3      	strb	r3, [r6, #15]
    xor_block(d, k);
 800651e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006520:	f7ff fdc8 	bl	80060b4 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006524:	9b01      	ldr	r3, [sp, #4]
 8006526:	3301      	adds	r3, #1
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e6df      	b.n	80062ec <lorawan_aes_encrypt+0x20>
 800652c:	0800e5ed 	.word	0x0800e5ed
 8006530:	0800e3ed 	.word	0x0800e3ed
 8006534:	0800e4ed 	.word	0x0800e4ed

08006538 <SecureElementGetKeyByID>:
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <SecureElementGetKeyByID+0x2c>)
{
 800653a:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (SeNvm->KeyList[i].KeyID == keyID)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	2511      	movs	r5, #17
 8006540:	0016      	movs	r6, r2
 8006542:	2300      	movs	r3, #0
 8006544:	3610      	adds	r6, #16
 8006546:	002c      	movs	r4, r5
 8006548:	435c      	muls	r4, r3
 800654a:	5d37      	ldrb	r7, [r6, r4]
 800654c:	4287      	cmp	r7, r0
 800654e:	d104      	bne.n	800655a <SecureElementGetKeyByID+0x22>
        {
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
 8006550:	2000      	movs	r0, #0
            *keyItem = &(SeNvm->KeyList[i]);
 8006552:	3410      	adds	r4, #16
 8006554:	1912      	adds	r2, r2, r4
 8006556:	600a      	str	r2, [r1, #0]
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8006558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800655a:	3301      	adds	r3, #1
 800655c:	2b0a      	cmp	r3, #10
 800655e:	d1f2      	bne.n	8006546 <SecureElementGetKeyByID+0xe>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006560:	2003      	movs	r0, #3
 8006562:	e7f9      	b.n	8006558 <SecureElementGetKeyByID+0x20>
 8006564:	200004f4 	.word	0x200004f4

08006568 <ComputeCmac>:
{
 8006568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800656a:	b0cf      	sub	sp, #316	; 0x13c
 800656c:	0006      	movs	r6, r0
 800656e:	000d      	movs	r5, r1
 8006570:	0017      	movs	r7, r2
        return SECURE_ELEMENT_ERROR_NPE;
 8006572:	2402      	movs	r4, #2
{
 8006574:	9301      	str	r3, [sp, #4]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8006576:	2900      	cmp	r1, #0
 8006578:	d023      	beq.n	80065c2 <ComputeCmac+0x5a>
 800657a:	9b54      	ldr	r3, [sp, #336]	; 0x150
 800657c:	2b00      	cmp	r3, #0
 800657e:	d020      	beq.n	80065c2 <ComputeCmac+0x5a>
    AES_CMAC_Init( aesCmacCtx );
 8006580:	a808      	add	r0, sp, #32
 8006582:	f7ff fc67 	bl	8005e54 <AES_CMAC_Init>
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8006586:	9801      	ldr	r0, [sp, #4]
 8006588:	a903      	add	r1, sp, #12
 800658a:	f7ff ffd5 	bl	8006538 <SecureElementGetKeyByID>
 800658e:	1e04      	subs	r4, r0, #0
    if( retval == SECURE_ELEMENT_SUCCESS )
 8006590:	d117      	bne.n	80065c2 <ComputeCmac+0x5a>
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	a808      	add	r0, sp, #32
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	f7ff fc6c 	bl	8005e74 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800659c:	2e00      	cmp	r6, #0
 800659e:	d004      	beq.n	80065aa <ComputeCmac+0x42>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 80065a0:	2210      	movs	r2, #16
 80065a2:	0031      	movs	r1, r6
 80065a4:	a808      	add	r0, sp, #32
 80065a6:	f7ff fc6c 	bl	8005e82 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80065aa:	003a      	movs	r2, r7
 80065ac:	0029      	movs	r1, r5
 80065ae:	a808      	add	r0, sp, #32
 80065b0:	f7ff fc67 	bl	8005e82 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 80065b4:	a908      	add	r1, sp, #32
 80065b6:	a804      	add	r0, sp, #16
 80065b8:	f7ff fcd3 	bl	8005f62 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 80065bc:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80065be:	9a04      	ldr	r2, [sp, #16]
 80065c0:	601a      	str	r2, [r3, #0]
}
 80065c2:	0020      	movs	r0, r4
 80065c4:	b04f      	add	sp, #316	; 0x13c
 80065c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065c8 <PrintKey>:
{
 80065c8:	b510      	push	{r4, lr}
 80065ca:	b092      	sub	sp, #72	; 0x48
    retval = SecureElementGetKeyByID(key, &keyItem);
 80065cc:	a911      	add	r1, sp, #68	; 0x44
{
 80065ce:	0004      	movs	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 80065d0:	f7ff ffb2 	bl	8006538 <SecureElementGetKeyByID>
 80065d4:	1e01      	subs	r1, r0, #0
    if (retval == SECURE_ELEMENT_SUCCESS)
 80065d6:	d12e      	bne.n	8006636 <PrintKey+0x6e>
        if (key == APP_KEY)
 80065d8:	2c00      	cmp	r4, #0
 80065da:	d12e      	bne.n	800663a <PrintKey+0x72>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 80065dc:	0022      	movs	r2, r4
 80065de:	0021      	movs	r1, r4
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <PrintKey+0x84>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 80065e2:	2002      	movs	r0, #2
 80065e4:	f007 f868 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80065e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065ea:	2002      	movs	r0, #2
 80065ec:	7c1a      	ldrb	r2, [r3, #16]
 80065ee:	920f      	str	r2, [sp, #60]	; 0x3c
 80065f0:	7bda      	ldrb	r2, [r3, #15]
 80065f2:	920e      	str	r2, [sp, #56]	; 0x38
 80065f4:	7b9a      	ldrb	r2, [r3, #14]
 80065f6:	920d      	str	r2, [sp, #52]	; 0x34
 80065f8:	7b5a      	ldrb	r2, [r3, #13]
 80065fa:	920c      	str	r2, [sp, #48]	; 0x30
 80065fc:	7b1a      	ldrb	r2, [r3, #12]
 80065fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8006600:	7ada      	ldrb	r2, [r3, #11]
 8006602:	920a      	str	r2, [sp, #40]	; 0x28
 8006604:	7a9a      	ldrb	r2, [r3, #10]
 8006606:	9209      	str	r2, [sp, #36]	; 0x24
 8006608:	7a5a      	ldrb	r2, [r3, #9]
 800660a:	9208      	str	r2, [sp, #32]
 800660c:	7a1a      	ldrb	r2, [r3, #8]
 800660e:	9207      	str	r2, [sp, #28]
 8006610:	79da      	ldrb	r2, [r3, #7]
 8006612:	9206      	str	r2, [sp, #24]
 8006614:	799a      	ldrb	r2, [r3, #6]
 8006616:	9205      	str	r2, [sp, #20]
 8006618:	795a      	ldrb	r2, [r3, #5]
 800661a:	9204      	str	r2, [sp, #16]
 800661c:	791a      	ldrb	r2, [r3, #4]
 800661e:	9203      	str	r2, [sp, #12]
 8006620:	78da      	ldrb	r2, [r3, #3]
 8006622:	9202      	str	r2, [sp, #8]
 8006624:	789a      	ldrb	r2, [r3, #2]
 8006626:	9201      	str	r2, [sp, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	0011      	movs	r1, r2
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <PrintKey+0x88>)
 8006632:	f007 f841 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8006636:	b012      	add	sp, #72	; 0x48
 8006638:	bd10      	pop	{r4, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <PrintKey+0x8c>)
        else if (key == NWK_KEY)
 800663c:	2c01      	cmp	r4, #1
 800663e:	d003      	beq.n	8006648 <PrintKey+0x80>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <PrintKey+0x90>)
        else if (key == APP_S_KEY)
 8006642:	2c03      	cmp	r4, #3
 8006644:	d000      	beq.n	8006648 <PrintKey+0x80>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8006646:	4b05      	ldr	r3, [pc, #20]	; (800665c <PrintKey+0x94>)
 8006648:	000a      	movs	r2, r1
 800664a:	e7ca      	b.n	80065e2 <PrintKey+0x1a>
 800664c:	0800eb93 	.word	0x0800eb93
 8006650:	0800ebe7 	.word	0x0800ebe7
 8006654:	0800eba8 	.word	0x0800eba8
 8006658:	0800ebbd 	.word	0x0800ebbd
 800665c:	0800ebd2 	.word	0x0800ebd2

08006660 <SecureElementInit>:
{
 8006660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006662:	b0b1      	sub	sp, #196	; 0xc4
    SecureElementNvmData_t seNvmInit =
 8006664:	22b0      	movs	r2, #176	; 0xb0
 8006666:	2100      	movs	r1, #0
{
 8006668:	0005      	movs	r5, r0
    SecureElementNvmData_t seNvmInit =
 800666a:	a804      	add	r0, sp, #16
 800666c:	f007 fd93 	bl	800e196 <memset>
 8006670:	2208      	movs	r2, #8
 8006672:	4934      	ldr	r1, [pc, #208]	; (8006744 <SecureElementInit+0xe4>)
 8006674:	4668      	mov	r0, sp
 8006676:	f007 fd85 	bl	800e184 <memcpy>
 800667a:	2208      	movs	r2, #8
 800667c:	4932      	ldr	r1, [pc, #200]	; (8006748 <SecureElementInit+0xe8>)
 800667e:	a802      	add	r0, sp, #8
 8006680:	f007 fd80 	bl	800e184 <memcpy>
 8006684:	2011      	movs	r0, #17
 8006686:	4c31      	ldr	r4, [pc, #196]	; (800674c <SecureElementInit+0xec>)
 8006688:	2210      	movs	r2, #16
 800668a:	0021      	movs	r1, r4
 800668c:	4468      	add	r0, sp
 800668e:	f007 fd79 	bl	800e184 <memcpy>
 8006692:	466b      	mov	r3, sp
 8006694:	2701      	movs	r7, #1
 8006696:	2022      	movs	r0, #34	; 0x22
 8006698:	3302      	adds	r3, #2
 800669a:	0021      	movs	r1, r4
 800669c:	2210      	movs	r2, #16
 800669e:	77df      	strb	r7, [r3, #31]
 80066a0:	4468      	add	r0, sp
 80066a2:	f007 fd6f 	bl	800e184 <memcpy>
 80066a6:	2332      	movs	r3, #50	; 0x32
 80066a8:	2402      	movs	r4, #2
 80066aa:	2033      	movs	r0, #51	; 0x33
 80066ac:	446b      	add	r3, sp
 80066ae:	2210      	movs	r2, #16
 80066b0:	4927      	ldr	r1, [pc, #156]	; (8006750 <SecureElementInit+0xf0>)
 80066b2:	701c      	strb	r4, [r3, #0]
 80066b4:	4468      	add	r0, sp
 80066b6:	f007 fd65 	bl	800e184 <memcpy>
 80066ba:	2343      	movs	r3, #67	; 0x43
 80066bc:	2603      	movs	r6, #3
 80066be:	446b      	add	r3, sp
 80066c0:	2210      	movs	r2, #16
 80066c2:	701e      	strb	r6, [r3, #0]
 80066c4:	4923      	ldr	r1, [pc, #140]	; (8006754 <SecureElementInit+0xf4>)
 80066c6:	a811      	add	r0, sp, #68	; 0x44
 80066c8:	f007 fd5c 	bl	800e184 <memcpy>
 80066cc:	2204      	movs	r2, #4
 80066ce:	ab15      	add	r3, sp, #84	; 0x54
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	2365      	movs	r3, #101	; 0x65
 80066d4:	327b      	adds	r2, #123	; 0x7b
 80066d6:	446b      	add	r3, sp
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	2376      	movs	r3, #118	; 0x76
 80066dc:	19d2      	adds	r2, r2, r7
 80066de:	446b      	add	r3, sp
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	2387      	movs	r3, #135	; 0x87
 80066e4:	19d2      	adds	r2, r2, r7
 80066e6:	446b      	add	r3, sp
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	ab26      	add	r3, sp, #152	; 0x98
 80066ec:	19d2      	adds	r2, r2, r7
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	23a9      	movs	r3, #169	; 0xa9
 80066f2:	19d2      	adds	r2, r2, r7
 80066f4:	446b      	add	r3, sp
        return SECURE_ELEMENT_ERROR_NPE;
 80066f6:	0020      	movs	r0, r4
    SecureElementNvmData_t seNvmInit =
 80066f8:	701a      	strb	r2, [r3, #0]
    if( nvm == NULL )
 80066fa:	2d00      	cmp	r5, #0
 80066fc:	d01f      	beq.n	800673e <SecureElementInit+0xde>
    SeNvm = nvm;
 80066fe:	4b16      	ldr	r3, [pc, #88]	; (8006758 <SecureElementInit+0xf8>)
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8006700:	4669      	mov	r1, sp
 8006702:	0028      	movs	r0, r5
 8006704:	323d      	adds	r2, #61	; 0x3d
    SeNvm = nvm;
 8006706:	601d      	str	r5, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8006708:	f005 fc54 	bl	800bfb4 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800670c:	2200      	movs	r2, #0
 800670e:	4b13      	ldr	r3, [pc, #76]	; (800675c <SecureElementInit+0xfc>)
 8006710:	0011      	movs	r1, r2
 8006712:	0020      	movs	r0, r4
 8006714:	f006 ffd0 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8006718:	2000      	movs	r0, #0
 800671a:	f7ff ff55 	bl	80065c8 <PrintKey>
    PrintKey(NWK_KEY);
 800671e:	0038      	movs	r0, r7
 8006720:	f7ff ff52 	bl	80065c8 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8006724:	2200      	movs	r2, #0
 8006726:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <SecureElementInit+0x100>)
 8006728:	0011      	movs	r1, r2
 800672a:	0020      	movs	r0, r4
 800672c:	f006 ffc4 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8006730:	0030      	movs	r0, r6
 8006732:	f7ff ff49 	bl	80065c8 <PrintKey>
    PrintKey(NWK_S_KEY);
 8006736:	0020      	movs	r0, r4
 8006738:	f7ff ff46 	bl	80065c8 <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 800673c:	2000      	movs	r0, #0
}
 800673e:	b031      	add	sp, #196	; 0xc4
 8006740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	0800ec63 	.word	0x0800ec63
 8006748:	0800ec6c 	.word	0x0800ec6c
 800674c:	0800ec75 	.word	0x0800ec75
 8006750:	0800e6ed 	.word	0x0800e6ed
 8006754:	0800ec86 	.word	0x0800ec86
 8006758:	200004f4 	.word	0x200004f4
 800675c:	0800ec39 	.word	0x0800ec39
 8006760:	0800ec4e 	.word	0x0800ec4e

08006764 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 8006764:	b513      	push	{r0, r1, r4, lr}
 8006766:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006768:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800676a:	2b7e      	cmp	r3, #126	; 0x7e
 800676c:	d804      	bhi.n	8006778 <SecureElementComputeAesCmac+0x14>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800676e:	9804      	ldr	r0, [sp, #16]
 8006770:	9000      	str	r0, [sp, #0]
 8006772:	0020      	movs	r0, r4
 8006774:	f7ff fef8 	bl	8006568 <ComputeCmac>
}
 8006778:	bd16      	pop	{r1, r2, r4, pc}

0800677a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800677a:	b530      	push	{r4, r5, lr}
 800677c:	0004      	movs	r4, r0
 800677e:	0015      	movs	r5, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006780:	2002      	movs	r0, #2
{
 8006782:	b085      	sub	sp, #20
    if( buffer == NULL )
 8006784:	2c00      	cmp	r4, #0
 8006786:	d00e      	beq.n	80067a6 <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 8006788:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800678a:	aa03      	add	r2, sp, #12
 800678c:	9200      	str	r2, [sp, #0]
 800678e:	000a      	movs	r2, r1
 8006790:	0021      	movs	r1, r4
    uint32_t              compCmac = 0;
 8006792:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8006794:	f7ff fee8 	bl	8006568 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006798:	2800      	cmp	r0, #0
 800679a:	d104      	bne.n	80067a6 <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	1b58      	subs	r0, r3, r5
 80067a0:	1e43      	subs	r3, r0, #1
 80067a2:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 80067a4:	b2c0      	uxtb	r0, r0
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 80067a6:	b005      	add	sp, #20
 80067a8:	bd30      	pop	{r4, r5, pc}

080067aa <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 80067aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ac:	b0c1      	sub	sp, #260	; 0x104
 80067ae:	000e      	movs	r6, r1
 80067b0:	0015      	movs	r5, r2
 80067b2:	001f      	movs	r7, r3
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80067b4:	2402      	movs	r4, #2
{
 80067b6:	9001      	str	r0, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d01b      	beq.n	80067f4 <SecureElementAesEncrypt+0x4a>
 80067bc:	2f00      	cmp	r7, #0
 80067be:	d019      	beq.n	80067f4 <SecureElementAesEncrypt+0x4a>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80067c0:	230f      	movs	r3, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80067c2:	3403      	adds	r4, #3
    if( ( size % 16 ) != 0 )
 80067c4:	4019      	ands	r1, r3
 80067c6:	421e      	tst	r6, r3
 80067c8:	d114      	bne.n	80067f4 <SecureElementAesEncrypt+0x4a>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80067ca:	22f0      	movs	r2, #240	; 0xf0
 80067cc:	a803      	add	r0, sp, #12
 80067ce:	f005 fc06 	bl	800bfde <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80067d2:	0028      	movs	r0, r5
 80067d4:	a902      	add	r1, sp, #8
 80067d6:	f7ff feaf 	bl	8006538 <SecureElementGetKeyByID>
 80067da:	1e04      	subs	r4, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 80067dc:	d10a      	bne.n	80067f4 <SecureElementAesEncrypt+0x4a>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80067de:	9b02      	ldr	r3, [sp, #8]
 80067e0:	2110      	movs	r1, #16
 80067e2:	1c58      	adds	r0, r3, #1
 80067e4:	aa03      	add	r2, sp, #12
 80067e6:	f7ff fce9 	bl	80061bc <lorawan_aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 80067ea:	0035      	movs	r5, r6
 80067ec:	1b70      	subs	r0, r6, r5
 80067ee:	b2c0      	uxtb	r0, r0
 80067f0:	2d00      	cmp	r5, #0
 80067f2:	d102      	bne.n	80067fa <SecureElementAesEncrypt+0x50>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 80067f4:	0020      	movs	r0, r4
 80067f6:	b041      	add	sp, #260	; 0x104
 80067f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	1839      	adds	r1, r7, r0
 80067fe:	aa03      	add	r2, sp, #12
 8006800:	1818      	adds	r0, r3, r0
            size  = size - 16;
 8006802:	3d10      	subs	r5, #16
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8006804:	f7ff fd62 	bl	80062cc <lorawan_aes_encrypt>
            size  = size - 16;
 8006808:	b2ad      	uxth	r5, r5
 800680a:	e7ef      	b.n	80067ec <SecureElementAesEncrypt+0x42>

0800680c <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800680c:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 800680e:	4e19      	ldr	r6, [pc, #100]	; (8006874 <SecureElementSetKey.part.0+0x68>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006810:	000d      	movs	r5, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006812:	6832      	ldr	r2, [r6, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	0011      	movs	r1, r2
 8006818:	2411      	movs	r4, #17
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800681a:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
 800681c:	3110      	adds	r1, #16
 800681e:	0027      	movs	r7, r4
 8006820:	435f      	muls	r7, r3
 8006822:	5dcf      	ldrb	r7, [r1, r7]
 8006824:	3301      	adds	r3, #1
 8006826:	4287      	cmp	r7, r0
 8006828:	d11f      	bne.n	800686a <SecureElementSetKey.part.0+0x5e>
            if ( keyID == MC_KEY_0 )
 800682a:	435c      	muls	r4, r3
 800682c:	2880      	cmp	r0, #128	; 0x80
 800682e:	d115      	bne.n	800685c <SecureElementSetKey.part.0+0x50>
                uint8_t               decryptedKey[16] = { 0 };
 8006830:	2100      	movs	r1, #0
 8006832:	220c      	movs	r2, #12
 8006834:	a801      	add	r0, sp, #4
 8006836:	9100      	str	r1, [sp, #0]
 8006838:	f007 fcad 	bl	800e196 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800683c:	227f      	movs	r2, #127	; 0x7f
 800683e:	2110      	movs	r1, #16
 8006840:	0028      	movs	r0, r5
 8006842:	466b      	mov	r3, sp
 8006844:	f7ff ffb1 	bl	80067aa <SecureElementAesEncrypt>
 8006848:	0005      	movs	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800684a:	6830      	ldr	r0, [r6, #0]
 800684c:	2210      	movs	r2, #16
 800684e:	4669      	mov	r1, sp
 8006850:	1900      	adds	r0, r0, r4
 8006852:	f005 fbaf 	bl	800bfb4 <memcpy1>
}
 8006856:	0028      	movs	r0, r5
 8006858:	b005      	add	sp, #20
 800685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800685c:	0029      	movs	r1, r5
 800685e:	1910      	adds	r0, r2, r4
 8006860:	2210      	movs	r2, #16
 8006862:	f005 fba7 	bl	800bfb4 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8006866:	2500      	movs	r5, #0
 8006868:	e7f5      	b.n	8006856 <SecureElementSetKey.part.0+0x4a>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800686a:	2b0a      	cmp	r3, #10
 800686c:	d1d7      	bne.n	800681e <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800686e:	2503      	movs	r5, #3
 8006870:	e7f1      	b.n	8006856 <SecureElementSetKey.part.0+0x4a>
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	200004f4 	.word	0x200004f4

08006878 <SecureElementSetKey>:
{
 8006878:	0003      	movs	r3, r0
 800687a:	b510      	push	{r4, lr}
        return SECURE_ELEMENT_ERROR_NPE;
 800687c:	2002      	movs	r0, #2
    if( key == NULL )
 800687e:	2900      	cmp	r1, #0
 8006880:	d002      	beq.n	8006888 <SecureElementSetKey+0x10>
 8006882:	0018      	movs	r0, r3
 8006884:	f7ff ffc2 	bl	800680c <SecureElementSetKey.part.0>
}
 8006888:	bd10      	pop	{r4, pc}

0800688a <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800688a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800688c:	0005      	movs	r5, r0
 800688e:	000e      	movs	r6, r1
 8006890:	0014      	movs	r4, r2
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006892:	2002      	movs	r0, #2
    if( input == NULL )
 8006894:	2d00      	cmp	r5, #0
 8006896:	d016      	beq.n	80068c6 <SecureElementDeriveAndStoreKey+0x3c>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8006898:	2a7f      	cmp	r2, #127	; 0x7f
 800689a:	d102      	bne.n	80068a2 <SecureElementDeriveAndStoreKey+0x18>
    {
        if( rootKeyID != MC_ROOT_KEY )
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800689c:	3001      	adds	r0, #1
        if( rootKeyID != MC_ROOT_KEY )
 800689e:	2904      	cmp	r1, #4
 80068a0:	d111      	bne.n	80068c6 <SecureElementDeriveAndStoreKey+0x3c>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 80068a2:	2100      	movs	r1, #0
 80068a4:	220c      	movs	r2, #12
 80068a6:	a801      	add	r0, sp, #4
 80068a8:	9100      	str	r1, [sp, #0]
 80068aa:	f007 fc74 	bl	800e196 <memset>
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 80068ae:	466b      	mov	r3, sp
 80068b0:	0032      	movs	r2, r6
 80068b2:	2110      	movs	r1, #16
 80068b4:	0028      	movs	r0, r5
 80068b6:	f7ff ff78 	bl	80067aa <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d103      	bne.n	80068c6 <SecureElementDeriveAndStoreKey+0x3c>
    if( key == NULL )
 80068be:	4669      	mov	r1, sp
 80068c0:	0020      	movs	r0, r4
 80068c2:	f7ff ffa3 	bl	800680c <SecureElementSetKey.part.0>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80068c6:	b004      	add	sp, #16
 80068c8:	bd70      	pop	{r4, r5, r6, pc}

080068ca <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 80068ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068cc:	001d      	movs	r5, r3
 80068ce:	ab06      	add	r3, sp, #24
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80068d0:	2002      	movs	r0, #2
{
 80068d2:	781f      	ldrb	r7, [r3, #0]
 80068d4:	9e07      	ldr	r6, [sp, #28]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	d037      	beq.n	800694a <SecureElementProcessJoinAccept+0x80>
 80068da:	2e00      	cmp	r6, #0
 80068dc:	d035      	beq.n	800694a <SecureElementProcessJoinAccept+0x80>
 80068de:	9b08      	ldr	r3, [sp, #32]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d032      	beq.n	800694a <SecureElementProcessJoinAccept+0x80>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80068e4:	3003      	adds	r0, #3
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80068e6:	2f21      	cmp	r7, #33	; 0x21
 80068e8:	d82f      	bhi.n	800694a <SecureElementProcessJoinAccept+0x80>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80068ea:	b2bc      	uxth	r4, r7
 80068ec:	0022      	movs	r2, r4
 80068ee:	0029      	movs	r1, r5
 80068f0:	0030      	movs	r0, r6
 80068f2:	f005 fb5f 	bl	800bfb4 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80068f6:	1e61      	subs	r1, r4, #1
 80068f8:	1c73      	adds	r3, r6, #1
 80068fa:	2201      	movs	r2, #1
 80068fc:	b289      	uxth	r1, r1
 80068fe:	1c68      	adds	r0, r5, #1
 8006900:	f7ff ff53 	bl	80067aa <SecureElementAesEncrypt>
 8006904:	0003      	movs	r3, r0
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8006906:	2007      	movs	r0, #7
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8006908:	2b00      	cmp	r3, #0
 800690a:	d11e      	bne.n	800694a <SecureElementProcessJoinAccept+0x80>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800690c:	7af3      	ldrb	r3, [r6, #11]
 800690e:	9a08      	ldr	r2, [sp, #32]
 8006910:	40c3      	lsrs	r3, r0
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8006912:	3803      	subs	r0, #3
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8006914:	7013      	strb	r3, [r2, #0]
    if( *versionMinor == 0 )
 8006916:	2b00      	cmp	r3, #0
 8006918:	d117      	bne.n	800694a <SecureElementProcessJoinAccept+0x80>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800691a:	19f3      	adds	r3, r6, r7
 800691c:	1e9a      	subs	r2, r3, #2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800691e:	1e59      	subs	r1, r3, #1
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006920:	7812      	ldrb	r2, [r2, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006922:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006924:	0412      	lsls	r2, r2, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006926:	0609      	lsls	r1, r1, #24
 8006928:	430a      	orrs	r2, r1
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800692a:	1f19      	subs	r1, r3, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800692c:	3b03      	subs	r3, #3
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800692e:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	021b      	lsls	r3, r3, #8
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8006936:	1f21      	subs	r1, r4, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006938:	431a      	orrs	r2, r3
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800693a:	0030      	movs	r0, r6
 800693c:	2301      	movs	r3, #1
 800693e:	b289      	uxth	r1, r1
 8006940:	f7ff ff1b 	bl	800677a <SecureElementVerifyAesCmac>
 8006944:	1e43      	subs	r3, r0, #1
 8006946:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 8006948:	b2c0      	uxtb	r0, r0
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800694c <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800694c:	b513      	push	{r0, r1, r4, lr}
 800694e:	0004      	movs	r4, r0
    if( randomNum == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006950:	2002      	movs	r0, #2
    if( randomNum == NULL )
 8006952:	2c00      	cmp	r4, #0
 8006954:	d005      	beq.n	8006962 <SecureElementRandomNumber+0x16>
    }
    *randomNum = Radio.Random();
 8006956:	4b03      	ldr	r3, [pc, #12]	; (8006964 <SecureElementRandomNumber+0x18>)
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	4798      	blx	r3
 800695e:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8006960:	2000      	movs	r0, #0
}
 8006962:	bd16      	pop	{r1, r2, r4, pc}
 8006964:	0800e890 	.word	0x0800e890

08006968 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8006968:	0001      	movs	r1, r0
 800696a:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800696c:	2002      	movs	r0, #2
    if( devEui == NULL )
 800696e:	2900      	cmp	r1, #0
 8006970:	d005      	beq.n	800697e <SecureElementSetDevEui+0x16>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8006972:	4b03      	ldr	r3, [pc, #12]	; (8006980 <SecureElementSetDevEui+0x18>)
 8006974:	2208      	movs	r2, #8
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	f005 fb1c 	bl	800bfb4 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800697c:	2000      	movs	r0, #0
}
 800697e:	bd10      	pop	{r4, pc}
 8006980:	200004f4 	.word	0x200004f4

08006984 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
 8006984:	4b01      	ldr	r3, [pc, #4]	; (800698c <SecureElementGetDevEui+0x8>)
 8006986:	6818      	ldr	r0, [r3, #0]
}
 8006988:	4770      	bx	lr
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	200004f4 	.word	0x200004f4

08006990 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8006990:	0001      	movs	r1, r0
 8006992:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006994:	2002      	movs	r0, #2
    if( joinEui == NULL )
 8006996:	2900      	cmp	r1, #0
 8006998:	d006      	beq.n	80069a8 <SecureElementSetJoinEui+0x18>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800699a:	4b04      	ldr	r3, [pc, #16]	; (80069ac <SecureElementSetJoinEui+0x1c>)
 800699c:	2208      	movs	r2, #8
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	3008      	adds	r0, #8
 80069a2:	f005 fb07 	bl	800bfb4 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80069a6:	2000      	movs	r0, #0
}
 80069a8:	bd10      	pop	{r4, pc}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	200004f4 	.word	0x200004f4

080069b0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 80069b0:	4b01      	ldr	r3, [pc, #4]	; (80069b8 <SecureElementGetJoinEui+0x8>)
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	3008      	adds	r0, #8
}
 80069b6:	4770      	bx	lr
 80069b8:	200004f4 	.word	0x200004f4

080069bc <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 80069bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 80069be:	230a      	movs	r3, #10
 80069c0:	a801      	add	r0, sp, #4
 80069c2:	7003      	strb	r3, [r0, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 80069c4:	f002 ffd4 	bl	8009970 <LoRaMacMlmeRequest>

    if( status == LORAMAC_STATUS_OK )
 80069c8:	1e43      	subs	r3, r0, #1
 80069ca:	4198      	sbcs	r0, r3
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 80069cc:	4240      	negs	r0, r0
 80069ce:	b007      	add	sp, #28
 80069d0:	bd00      	pop	{pc}
	...

080069d4 <McpsConfirm>:
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    TxParams.IsMcpsConfirm = 1;
 80069d4:	2301      	movs	r3, #1
{
 80069d6:	b570      	push	{r4, r5, r6, lr}
    TxParams.IsMcpsConfirm = 1;
 80069d8:	4c10      	ldr	r4, [pc, #64]	; (8006a1c <McpsConfirm+0x48>)
{
 80069da:	0005      	movs	r5, r0
    TxParams.IsMcpsConfirm = 1;
 80069dc:	7023      	strb	r3, [r4, #0]
    TxParams.Status = mcpsConfirm->Status;
 80069de:	7843      	ldrb	r3, [r0, #1]
 80069e0:	0026      	movs	r6, r4
 80069e2:	7063      	strb	r3, [r4, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80069e4:	7883      	ldrb	r3, [r0, #2]
 80069e6:	361c      	adds	r6, #28
 80069e8:	7123      	strb	r3, [r4, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80069ea:	68c3      	ldr	r3, [r0, #12]
 80069ec:	60a3      	str	r3, [r4, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80069ee:	78c3      	ldrb	r3, [r0, #3]
 80069f0:	7523      	strb	r3, [r4, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 80069f2:	6903      	ldr	r3, [r0, #16]
 80069f4:	7563      	strb	r3, [r4, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80069f6:	7903      	ldrb	r3, [r0, #4]

    LmHandlerCallbacks->OnTxData( &TxParams );
 80069f8:	0020      	movs	r0, r4
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80069fa:	70e3      	strb	r3, [r4, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80069fc:	69a3      	ldr	r3, [r4, #24]
 80069fe:	3430      	adds	r4, #48	; 0x30
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	4798      	blx	r3

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
    {
        if( LmHandlerPackages[i] != NULL )
 8006a04:	6833      	ldr	r3, [r6, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <McpsConfirm+0x40>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <McpsConfirm+0x40>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006a10:	0028      	movs	r0, r5
 8006a12:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006a14:	3604      	adds	r6, #4
 8006a16:	42a6      	cmp	r6, r4
 8006a18:	d1f4      	bne.n	8006a04 <McpsConfirm+0x30>
}
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	200004f8 	.word	0x200004f8

08006a20 <LmHandlerConfigure>:
{
 8006a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006a22:	4c58      	ldr	r4, [pc, #352]	; (8006b84 <LmHandlerConfigure+0x164>)
{
 8006a24:	0001      	movs	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006a26:	0027      	movs	r7, r4
 8006a28:	3730      	adds	r7, #48	; 0x30
 8006a2a:	2210      	movs	r2, #16
 8006a2c:	0038      	movs	r0, r7
{
 8006a2e:	b09f      	sub	sp, #124	; 0x7c
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006a30:	f006 ff5c 	bl	800d8ec <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8006a34:	f7fb f8ca 	bl	8001bcc <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8006a38:	2301      	movs	r3, #1
 8006a3a:	783a      	ldrb	r2, [r7, #0]
 8006a3c:	6841      	ldr	r1, [r0, #4]
 8006a3e:	4093      	lsls	r3, r2
 8006a40:	0008      	movs	r0, r1
 8006a42:	4018      	ands	r0, r3
 8006a44:	4219      	tst	r1, r3
 8006a46:	d00a      	beq.n	8006a5e <LmHandlerConfigure+0x3e>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8006a48:	0021      	movs	r1, r4
 8006a4a:	0020      	movs	r0, r4
 8006a4c:	3140      	adds	r1, #64	; 0x40
 8006a4e:	3054      	adds	r0, #84	; 0x54
 8006a50:	f002 fa80 	bl	8008f54 <LoRaMacInitialization>
 8006a54:	1e06      	subs	r6, r0, #0
 8006a56:	d008      	beq.n	8006a6a <LmHandlerConfigure+0x4a>
            return LORAMAC_HANDLER_ERROR;
 8006a58:	2001      	movs	r0, #1
 8006a5a:	4240      	negs	r0, r0
 8006a5c:	e090      	b.n	8006b80 <LmHandlerConfigure+0x160>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8006a5e:	2201      	movs	r2, #1
 8006a60:	0001      	movs	r1, r0
 8006a62:	4b49      	ldr	r3, [pc, #292]	; (8006b88 <LmHandlerConfigure+0x168>)
 8006a64:	f006 fe28 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8006a68:	e7fe      	b.n	8006a68 <LmHandlerConfigure+0x48>
    nbNvmData = NvmDataMgmtRestore( );
 8006a6a:	f000 fcc0 	bl	80073ee <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8006a6e:	1e43      	subs	r3, r0, #1
 8006a70:	4198      	sbcs	r0, r3
    mibReq.Type = MIB_DEV_EUI;
 8006a72:	2302      	movs	r3, #2
 8006a74:	ad0c      	add	r5, sp, #48	; 0x30
 8006a76:	3464      	adds	r4, #100	; 0x64
    if( nbNvmData > 0 )
 8006a78:	7020      	strb	r0, [r4, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006a7a:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_EUI;
 8006a7c:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006a7e:	f002 fc9f 	bl	80093c0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8006a82:	4c42      	ldr	r4, [pc, #264]	; (8006b8c <LmHandlerConfigure+0x16c>)
 8006a84:	2208      	movs	r2, #8
 8006a86:	0020      	movs	r0, r4
 8006a88:	6869      	ldr	r1, [r5, #4]
 8006a8a:	f005 fa93 	bl	800bfb4 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8006a8e:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006a90:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_EUI;
 8006a92:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006a94:	f002 fc94 	bl	80093c0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8006a98:	0020      	movs	r0, r4
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	6869      	ldr	r1, [r5, #4]
 8006a9e:	3008      	adds	r0, #8
 8006aa0:	f005 fa88 	bl	800bfb4 <memcpy1>
    mibReq.Type = MIB_DEV_ADDR;
 8006aa4:	2306      	movs	r3, #6
 8006aa6:	702b      	strb	r3, [r5, #0]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8006aa8:	6963      	ldr	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006aaa:	0028      	movs	r0, r5
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8006aac:	606b      	str	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006aae:	f002 fd29 	bl	8009504 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006ab2:	79e3      	ldrb	r3, [r4, #7]
 8006ab4:	0032      	movs	r2, r6
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	79a3      	ldrb	r3, [r4, #6]
 8006aba:	0031      	movs	r1, r6
 8006abc:	9306      	str	r3, [sp, #24]
 8006abe:	7963      	ldrb	r3, [r4, #5]
 8006ac0:	2002      	movs	r0, #2
 8006ac2:	9305      	str	r3, [sp, #20]
 8006ac4:	7923      	ldrb	r3, [r4, #4]
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	78e3      	ldrb	r3, [r4, #3]
 8006aca:	9303      	str	r3, [sp, #12]
 8006acc:	78a3      	ldrb	r3, [r4, #2]
 8006ace:	9302      	str	r3, [sp, #8]
 8006ad0:	7863      	ldrb	r3, [r4, #1]
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	7823      	ldrb	r3, [r4, #0]
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <LmHandlerConfigure+0x170>)
 8006ada:	f006 fded 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006ade:	7be3      	ldrb	r3, [r4, #15]
 8006ae0:	0032      	movs	r2, r6
 8006ae2:	9307      	str	r3, [sp, #28]
 8006ae4:	7ba3      	ldrb	r3, [r4, #14]
 8006ae6:	0031      	movs	r1, r6
 8006ae8:	9306      	str	r3, [sp, #24]
 8006aea:	7b63      	ldrb	r3, [r4, #13]
 8006aec:	2002      	movs	r0, #2
 8006aee:	9305      	str	r3, [sp, #20]
 8006af0:	7b23      	ldrb	r3, [r4, #12]
 8006af2:	9304      	str	r3, [sp, #16]
 8006af4:	7ae3      	ldrb	r3, [r4, #11]
 8006af6:	9303      	str	r3, [sp, #12]
 8006af8:	7aa3      	ldrb	r3, [r4, #10]
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	7a63      	ldrb	r3, [r4, #9]
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	7a23      	ldrb	r3, [r4, #8]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	4b23      	ldr	r3, [pc, #140]	; (8006b94 <LmHandlerConfigure+0x174>)
 8006b06:	f006 fdd7 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006b0a:	7d23      	ldrb	r3, [r4, #20]
 8006b0c:	0032      	movs	r2, r6
 8006b0e:	9303      	str	r3, [sp, #12]
 8006b10:	7d63      	ldrb	r3, [r4, #21]
 8006b12:	0031      	movs	r1, r6
 8006b14:	9302      	str	r3, [sp, #8]
 8006b16:	7da3      	ldrb	r3, [r4, #22]
 8006b18:	2002      	movs	r0, #2
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	7de3      	ldrb	r3, [r4, #23]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006b1e:	240f      	movs	r4, #15
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <LmHandlerConfigure+0x178>)
 8006b24:	f006 fdc8 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006b28:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006b2a:	0028      	movs	r0, r5
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006b2c:	712b      	strb	r3, [r5, #4]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006b2e:	702c      	strb	r4, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006b30:	f002 fce8 	bl	8009504 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8006b34:	2305      	movs	r3, #5
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006b36:	0028      	movs	r0, r5
    mibReq.Type = MIB_NET_ID;
 8006b38:	702b      	strb	r3, [r5, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8006b3a:	606e      	str	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006b3c:	f002 fce2 	bl	8009504 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006b40:	2310      	movs	r3, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006b42:	0028      	movs	r0, r5
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006b44:	702b      	strb	r3, [r5, #0]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8006b46:	712e      	strb	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006b48:	f002 fcdc 	bl	8009504 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	702b      	strb	r3, [r5, #0]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006b50:	78bb      	ldrb	r3, [r7, #2]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006b52:	0028      	movs	r0, r5
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006b54:	712b      	strb	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006b56:	f002 fcd5 	bl	8009504 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006b5a:	a90a      	add	r1, sp, #40	; 0x28
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8006b5c:	7838      	ldrb	r0, [r7, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006b5e:	700c      	strb	r4, [r1, #0]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8006b60:	f004 f8ba 	bl	800acd8 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8006b64:	1e43      	subs	r3, r0, #1
 8006b66:	4198      	sbcs	r0, r3
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006b68:	2322      	movs	r3, #34	; 0x22
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8006b6a:	7178      	strb	r0, [r7, #5]
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006b6c:	a815      	add	r0, sp, #84	; 0x54
 8006b6e:	7003      	strb	r3, [r0, #0]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8006b70:	3b0e      	subs	r3, #14
 8006b72:	6043      	str	r3, [r0, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006b74:	f002 fcc6 	bl	8009504 <LoRaMacMibSetRequestConfirm>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8006b78:	7978      	ldrb	r0, [r7, #5]
 8006b7a:	f003 f9af 	bl	8009edc <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8006b7e:	0030      	movs	r0, r6
}
 8006b80:	b01f      	add	sp, #124	; 0x7c
 8006b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b84:	200004f8 	.word	0x200004f8
 8006b88:	0800ec97 	.word	0x0800ec97
 8006b8c:	2000006c 	.word	0x2000006c
 8006b90:	0800ece0 	.word	0x0800ece0
 8006b94:	0800ed1a 	.word	0x0800ed1a
 8006b98:	0800ed54 	.word	0x0800ed54

08006b9c <LmHandlerProcess>:
{
 8006b9c:	b570      	push	{r4, r5, r6, lr}
    LoRaMacProcess( );
 8006b9e:	f001 fc67 	bl	8008470 <LoRaMacProcess>
    }
}

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006ba2:	4d0c      	ldr	r5, [pc, #48]	; (8006bd4 <LmHandlerProcess+0x38>)
 8006ba4:	002c      	movs	r4, r5
 8006ba6:	3530      	adds	r5, #48	; 0x30
 8006ba8:	341c      	adds	r4, #28
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <LmHandlerProcess+0x2c>
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	d008      	beq.n	8006bc8 <LmHandlerProcess+0x2c>
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <LmHandlerProcess+0x2c>
        return LmHandlerPackages[id]->IsInitialized( );
 8006bbc:	4798      	blx	r3
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d002      	beq.n	8006bc8 <LmHandlerProcess+0x2c>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006bc8:	3404      	adds	r4, #4
 8006bca:	42a5      	cmp	r5, r4
 8006bcc:	d1ed      	bne.n	8006baa <LmHandlerProcess+0xe>
    NvmDataMgmtStore( );
 8006bce:	f000 fc0c 	bl	80073ea <NvmDataMgmtStore>
}
 8006bd2:	bd70      	pop	{r4, r5, r6, pc}
 8006bd4:	200004f8 	.word	0x200004f8

08006bd8 <LmHandlerJoinStatus>:
{
 8006bd8:	b500      	push	{lr}
 8006bda:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	466a      	mov	r2, sp
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006be0:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006be2:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006be4:	f002 fbec 	bl	80093c0 <LoRaMacMibGetRequestConfirm>
        return LORAMAC_HANDLER_RESET;
 8006be8:	2300      	movs	r3, #0
    if( status == LORAMAC_STATUS_OK )
 8006bea:	4298      	cmp	r0, r3
 8006bec:	d104      	bne.n	8006bf8 <LmHandlerJoinStatus+0x20>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006bee:	466b      	mov	r3, sp
 8006bf0:	7a1b      	ldrb	r3, [r3, #8]
 8006bf2:	1e5a      	subs	r2, r3, #1
 8006bf4:	4193      	sbcs	r3, r2
            return LORAMAC_HANDLER_RESET;
 8006bf6:	b2db      	uxtb	r3, r3
}
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	b00b      	add	sp, #44	; 0x2c
 8006bfc:	bd00      	pop	{pc}
	...

08006c00 <LmHandlerRequestClass>:
{
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	b08c      	sub	sp, #48	; 0x30
 8006c04:	0005      	movs	r5, r0
    if (LoRaMacIsBusy() == true)
 8006c06:	f001 fc21 	bl	800844c <LoRaMacIsBusy>
 8006c0a:	1e06      	subs	r6, r0, #0
 8006c0c:	d146      	bne.n	8006c9c <LmHandlerRequestClass+0x9c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8006c0e:	f7ff ffe3 	bl	8006bd8 <LmHandlerJoinStatus>
 8006c12:	2801      	cmp	r0, #1
 8006c14:	d145      	bne.n	8006ca2 <LmHandlerRequestClass+0xa2>
    mibReq.Type = MIB_DEVICE_CLASS;
 8006c16:	ac03      	add	r4, sp, #12
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006c18:	0020      	movs	r0, r4
    mibReq.Type = MIB_DEVICE_CLASS;
 8006c1a:	7026      	strb	r6, [r4, #0]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006c1c:	f002 fbd0 	bl	80093c0 <LoRaMacMibGetRequestConfirm>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d001      	beq.n	8006c28 <LmHandlerRequestClass+0x28>
        switch( newClass )
 8006c24:	2001      	movs	r0, #1
 8006c26:	e03a      	b.n	8006c9e <LmHandlerRequestClass+0x9e>
    currentClass = mibReq.Param.Class;
 8006c28:	7923      	ldrb	r3, [r4, #4]
    if( currentClass != newClass )
 8006c2a:	42ab      	cmp	r3, r5
 8006c2c:	d102      	bne.n	8006c34 <LmHandlerRequestClass+0x34>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006c2e:	2000      	movs	r0, #0
}
 8006c30:	b00c      	add	sp, #48	; 0x30
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
        switch( newClass )
 8006c34:	2d01      	cmp	r5, #1
 8006c36:	d0f5      	beq.n	8006c24 <LmHandlerRequestClass+0x24>
 8006c38:	2d02      	cmp	r5, #2
 8006c3a:	d018      	beq.n	8006c6e <LmHandlerRequestClass+0x6e>
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	d1f7      	bne.n	8006c30 <LmHandlerRequestClass+0x30>
                if( currentClass != CLASS_A )
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f4      	beq.n	8006c2e <LmHandlerRequestClass+0x2e>
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006c44:	0020      	movs	r0, r4
                    mibReq.Param.Class = newClass;
 8006c46:	7125      	strb	r5, [r4, #4]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006c48:	f002 fc5c 	bl	8009504 <LoRaMacMibSetRequestConfirm>
 8006c4c:	1e01      	subs	r1, r0, #0
 8006c4e:	d1e9      	bne.n	8006c24 <LmHandlerRequestClass+0x24>
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006c50:	2341      	movs	r3, #65	; 0x41
 8006c52:	0002      	movs	r2, r0
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2002      	movs	r0, #2
 8006c58:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <LmHandlerRequestClass+0xa8>)
 8006c5a:	f006 fd2d 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <LmHandlerRequestClass+0xac>)
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0e2      	beq.n	8006c2e <LmHandlerRequestClass+0x2e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006c68:	2000      	movs	r0, #0
 8006c6a:	4798      	blx	r3
 8006c6c:	e7df      	b.n	8006c2e <LmHandlerRequestClass+0x2e>
                if( currentClass != CLASS_A )
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1d8      	bne.n	8006c24 <LmHandlerRequestClass+0x24>
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006c72:	0020      	movs	r0, r4
                    mibReq.Param.Class = newClass;
 8006c74:	7125      	strb	r5, [r4, #4]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006c76:	f002 fc45 	bl	8009504 <LoRaMacMibSetRequestConfirm>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d1d2      	bne.n	8006c24 <LmHandlerRequestClass+0x24>
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006c7e:	2343      	movs	r3, #67	; 0x43
 8006c80:	0002      	movs	r2, r0
 8006c82:	0001      	movs	r1, r0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	0028      	movs	r0, r5
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <LmHandlerRequestClass+0xa8>)
 8006c8a:	f006 fd15 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006c8e:	4b07      	ldr	r3, [pc, #28]	; (8006cac <LmHandlerRequestClass+0xac>)
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006c90:	0028      	movs	r0, r5
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e7      	bne.n	8006c6a <LmHandlerRequestClass+0x6a>
 8006c9a:	e7c8      	b.n	8006c2e <LmHandlerRequestClass+0x2e>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006c9c:	2002      	movs	r0, #2
        switch( newClass )
 8006c9e:	4240      	negs	r0, r0
 8006ca0:	e7c6      	b.n	8006c30 <LmHandlerRequestClass+0x30>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006ca2:	2003      	movs	r0, #3
 8006ca4:	e7fb      	b.n	8006c9e <LmHandlerRequestClass+0x9e>
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	0800ed7a 	.word	0x0800ed7a
 8006cac:	200004f8 	.word	0x200004f8

08006cb0 <LmHandlerJoin>:
{
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	4e1b      	ldr	r6, [pc, #108]	; (8006d24 <LmHandlerJoin+0x74>)
 8006cb6:	4c1c      	ldr	r4, [pc, #112]	; (8006d28 <LmHandlerJoin+0x78>)
 8006cb8:	ad01      	add	r5, sp, #4
    if ( mode == ACTIVATION_TYPE_OTAA )
 8006cba:	2802      	cmp	r0, #2
 8006cbc:	d10c      	bne.n	8006cd8 <LmHandlerJoin+0x28>
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8006cbe:	76b0      	strb	r0, [r6, #26]
        LoRaMacStart();
 8006cc0:	f002 fb1c 	bl	80092fc <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 8006cc4:	2301      	movs	r3, #1
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006cc6:	3430      	adds	r4, #48	; 0x30
        mlmeReq.Type = MLME_JOIN;
 8006cc8:	702b      	strb	r3, [r5, #0]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006cca:	78e3      	ldrb	r3, [r4, #3]
        LoRaMacMlmeRequest( &mlmeReq );
 8006ccc:	0028      	movs	r0, r5
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006cce:	712b      	strb	r3, [r5, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 8006cd0:	f002 fe4e 	bl	8009970 <LoRaMacMlmeRequest>
}
 8006cd4:	b00a      	add	sp, #40	; 0x28
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	76b3      	strb	r3, [r6, #26]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006cdc:	0023      	movs	r3, r4
 8006cde:	3330      	adds	r3, #48	; 0x30
 8006ce0:	78db      	ldrb	r3, [r3, #3]
 8006ce2:	7633      	strb	r3, [r6, #24]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	7673      	strb	r3, [r6, #25]
        if (CtxRestoreDone == false)
 8006ce8:	0023      	movs	r3, r4
 8006cea:	3364      	adds	r3, #100	; 0x64
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8006cf2:	3327      	adds	r3, #39	; 0x27
 8006cf4:	702b      	strb	r3, [r5, #0]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <LmHandlerJoin+0x7c>)
            LoRaMacMibSetRequestConfirm(&mibReq);
 8006cf8:	0028      	movs	r0, r5
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8006cfa:	606b      	str	r3, [r5, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8006cfc:	f002 fc02 	bl	8009504 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8006d00:	f002 fafc 	bl	80092fc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006d04:	2301      	movs	r3, #1
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006d06:	0028      	movs	r0, r5
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006d08:	702b      	strb	r3, [r5, #0]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006d0a:	712b      	strb	r3, [r5, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006d0c:	f002 fbfa 	bl	8009504 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006d10:	0030      	movs	r0, r6
 8006d12:	69a3      	ldr	r3, [r4, #24]
 8006d14:	3018      	adds	r0, #24
 8006d16:	69db      	ldr	r3, [r3, #28]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006d18:	3430      	adds	r4, #48	; 0x30
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006d1a:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006d1c:	7860      	ldrb	r0, [r4, #1]
 8006d1e:	f7ff ff6f 	bl	8006c00 <LmHandlerRequestClass>
}
 8006d22:	e7d7      	b.n	8006cd4 <LmHandlerJoin+0x24>
 8006d24:	2000006c 	.word	0x2000006c
 8006d28:	200004f8 	.word	0x200004f8
 8006d2c:	01000300 	.word	0x01000300

08006d30 <LmHandlerSend>:
{
 8006d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d32:	b089      	sub	sp, #36	; 0x24
 8006d34:	0005      	movs	r5, r0
 8006d36:	000f      	movs	r7, r1
 8006d38:	9200      	str	r2, [sp, #0]
 8006d3a:	9301      	str	r3, [sp, #4]
    if (LoRaMacIsBusy() == true)
 8006d3c:	f001 fb86 	bl	800844c <LoRaMacIsBusy>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d151      	bne.n	8006de8 <LmHandlerSend+0xb8>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8006d44:	f7ff ff48 	bl	8006bd8 <LmHandlerJoinStatus>
 8006d48:	2801      	cmp	r0, #1
 8006d4a:	d006      	beq.n	8006d5a <LmHandlerSend+0x2a>
        LmHandlerJoin(JoinParams.Mode);
 8006d4c:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <LmHandlerSend+0xc4>)
 8006d4e:	7e98      	ldrb	r0, [r3, #26]
 8006d50:	f7ff ffae 	bl	8006cb0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006d54:	2003      	movs	r0, #3
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8006d56:	4240      	negs	r0, r0
 8006d58:	e034      	b.n	8006dc4 <LmHandlerSend+0x94>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8006d5a:	4e27      	ldr	r6, [pc, #156]	; (8006df8 <LmHandlerSend+0xc8>)
 8006d5c:	69f3      	ldr	r3, [r6, #28]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4798      	blx	r3
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d006      	beq.n	8006d74 <LmHandlerSend+0x44>
 8006d66:	69f2      	ldr	r2, [r6, #28]
 8006d68:	782b      	ldrb	r3, [r5, #0]
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d001      	beq.n	8006d74 <LmHandlerSend+0x44>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d13b      	bne.n	8006dec <LmHandlerSend+0xbc>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8006d74:	0033      	movs	r3, r6
 8006d76:	3330      	adds	r3, #48	; 0x30
 8006d78:	78db      	ldrb	r3, [r3, #3]
 8006d7a:	ac03      	add	r4, sp, #12
 8006d7c:	73a3      	strb	r3, [r4, #14]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8006d7e:	7868      	ldrb	r0, [r5, #1]
 8006d80:	a902      	add	r1, sp, #8
 8006d82:	f002 fac3 	bl	800930c <LoRaMacQueryTxPossible>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d01e      	beq.n	8006dc8 <LmHandlerSend+0x98>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	70b3      	strb	r3, [r6, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8006d8e:	7023      	strb	r3, [r4, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8006d90:	60a3      	str	r3, [r4, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8006d92:	81a3      	strh	r3, [r4, #12]
    TxParams.AppData = *appData;
 8006d94:	0033      	movs	r3, r6
 8006d96:	330c      	adds	r3, #12
 8006d98:	cd06      	ldmia	r5!, {r1, r2}
 8006d9a:	c306      	stmia	r3!, {r1, r2}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006d9c:	0033      	movs	r3, r6
 8006d9e:	3330      	adds	r3, #48	; 0x30
 8006da0:	78db      	ldrb	r3, [r3, #3]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8006da2:	0020      	movs	r0, r4
 8006da4:	9901      	ldr	r1, [sp, #4]
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006da6:	7133      	strb	r3, [r6, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8006da8:	f002 fee4 	bl	8009b74 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8006dac:	9b00      	ldr	r3, [sp, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d004      	beq.n	8006dbc <LmHandlerSend+0x8c>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	9a01      	ldr	r2, [sp, #4]
 8006db8:	9b00      	ldr	r3, [sp, #0]
 8006dba:	601a      	str	r2, [r3, #0]
    switch (status)
 8006dbc:	2811      	cmp	r0, #17
 8006dbe:	d817      	bhi.n	8006df0 <LmHandlerSend+0xc0>
 8006dc0:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <LmHandlerSend+0xcc>)
 8006dc2:	5618      	ldrsb	r0, [r3, r0]
}
 8006dc4:	b009      	add	sp, #36	; 0x24
 8006dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TxParams.MsgType = isTxConfirmed;
 8006dc8:	70b7      	strb	r7, [r6, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8006dca:	782b      	ldrb	r3, [r5, #0]
 8006dcc:	7123      	strb	r3, [r4, #4]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8006dce:	786b      	ldrb	r3, [r5, #1]
 8006dd0:	81a3      	strh	r3, [r4, #12]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8006dd2:	686b      	ldr	r3, [r5, #4]
 8006dd4:	60a3      	str	r3, [r4, #8]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8006dd6:	2f00      	cmp	r7, #0
 8006dd8:	d101      	bne.n	8006dde <LmHandlerSend+0xae>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8006dda:	7027      	strb	r7, [r4, #0]
 8006ddc:	e7da      	b.n	8006d94 <LmHandlerSend+0x64>
            mcpsReq.Type = MCPS_CONFIRMED;
 8006dde:	2301      	movs	r3, #1
 8006de0:	7023      	strb	r3, [r4, #0]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8006de2:	3307      	adds	r3, #7
 8006de4:	73e3      	strb	r3, [r4, #15]
 8006de6:	e7d5      	b.n	8006d94 <LmHandlerSend+0x64>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006de8:	2002      	movs	r0, #2
 8006dea:	e7b4      	b.n	8006d56 <LmHandlerSend+0x26>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8006dec:	2004      	movs	r0, #4
 8006dee:	e7b2      	b.n	8006d56 <LmHandlerSend+0x26>
 8006df0:	2001      	movs	r0, #1
 8006df2:	e7b0      	b.n	8006d56 <LmHandlerSend+0x26>
 8006df4:	2000006c 	.word	0x2000006c
 8006df8:	200004f8 	.word	0x200004f8
 8006dfc:	0800e6fd 	.word	0x0800e6fd

08006e00 <MlmeIndication>:
{
 8006e00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e02:	0004      	movs	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006e04:	2000      	movs	r0, #0
 8006e06:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <MlmeIndication+0x58>)
 8006e08:	7718      	strb	r0, [r3, #28]
    RxParams.Status = mlmeIndication->Status;
 8006e0a:	7862      	ldrb	r2, [r4, #1]
 8006e0c:	775a      	strb	r2, [r3, #29]
    RxParams.Rssi = RxStatus->Rssi;
 8006e0e:	880d      	ldrh	r5, [r1, #0]
 8006e10:	77dd      	strb	r5, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 8006e12:	788e      	ldrb	r6, [r1, #2]
 8006e14:	1c5d      	adds	r5, r3, #1
 8006e16:	77ee      	strb	r6, [r5, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 8006e18:	001d      	movs	r5, r3
 8006e1a:	78c9      	ldrb	r1, [r1, #3]
 8006e1c:	3528      	adds	r5, #40	; 0x28
 8006e1e:	7029      	strb	r1, [r5, #0]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8006e20:	2a0e      	cmp	r2, #14
 8006e22:	d005      	beq.n	8006e30 <MlmeIndication+0x30>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006e24:	331c      	adds	r3, #28
 8006e26:	0019      	movs	r1, r3
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <MlmeIndication+0x5c>)
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 8006e30:	7823      	ldrb	r3, [r4, #0]
 8006e32:	2b07      	cmp	r3, #7
 8006e34:	d10e      	bne.n	8006e54 <MlmeIndication+0x54>
            LmHandlerAppData_t appData =
 8006e36:	2300      	movs	r3, #0
 8006e38:	466a      	mov	r2, sp
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	8013      	strh	r3, [r2, #0]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <MlmeIndication+0x5c>)
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4798      	blx	r3
 8006e46:	1e01      	subs	r1, r0, #0
 8006e48:	d104      	bne.n	8006e54 <MlmeIndication+0x54>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 8006e4a:	0002      	movs	r2, r0
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4668      	mov	r0, sp
 8006e50:	f7ff ff6e 	bl	8006d30 <LmHandlerSend>
}
 8006e54:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	2000006c 	.word	0x2000006c
 8006e5c:	200004f8 	.word	0x200004f8

08006e60 <LmHandlerGetCurrentClass>:
{
 8006e60:	b510      	push	{r4, lr}
 8006e62:	0004      	movs	r4, r0
 8006e64:	b08a      	sub	sp, #40	; 0x28
    if (deviceClass == NULL)
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d103      	bne.n	8006e72 <LmHandlerGetCurrentClass+0x12>
        return LORAMAC_HANDLER_ERROR;
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	4240      	negs	r0, r0
}
 8006e6e:	b00a      	add	sp, #40	; 0x28
 8006e70:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_DEVICE_CLASS;
 8006e72:	2300      	movs	r3, #0
 8006e74:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8006e76:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_DEVICE_CLASS;
 8006e78:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8006e7a:	f002 faa1 	bl	80093c0 <LoRaMacMibGetRequestConfirm>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d1f3      	bne.n	8006e6a <LmHandlerGetCurrentClass+0xa>
    *deviceClass = mibReq.Param.Class;
 8006e82:	466b      	mov	r3, sp
 8006e84:	7a1b      	ldrb	r3, [r3, #8]
 8006e86:	7023      	strb	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8006e88:	e7f1      	b.n	8006e6e <LmHandlerGetCurrentClass+0xe>
	...

08006e8c <McpsIndication>:
{
 8006e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e8e:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 8006e90:	2300      	movs	r3, #0
 8006e92:	466a      	mov	r2, sp
 8006e94:	71d3      	strb	r3, [r2, #7]
    RxParams.IsMcpsIndication = 1;
 8006e96:	2201      	movs	r2, #1
 8006e98:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <McpsIndication+0xc4>)
{
 8006e9a:	0004      	movs	r4, r0
    RxParams.IsMcpsIndication = 1;
 8006e9c:	771a      	strb	r2, [r3, #28]
    RxParams.Status = mcpsIndication->Status;
 8006e9e:	7842      	ldrb	r2, [r0, #1]
 8006ea0:	775a      	strb	r2, [r3, #29]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	d14a      	bne.n	8006f3c <McpsIndication+0xb0>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8006ea6:	7902      	ldrb	r2, [r0, #4]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006ea8:	4e2a      	ldr	r6, [pc, #168]	; (8006f54 <McpsIndication+0xc8>)
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8006eaa:	779a      	strb	r2, [r3, #30]
    RxParams.Rssi = RxStatus->Rssi;
 8006eac:	880a      	ldrh	r2, [r1, #0]
 8006eae:	77da      	strb	r2, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 8006eb0:	7888      	ldrb	r0, [r1, #2]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	77d0      	strb	r0, [r2, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 8006eb6:	001a      	movs	r2, r3
 8006eb8:	78c9      	ldrb	r1, [r1, #3]
 8006eba:	3228      	adds	r2, #40	; 0x28
 8006ebc:	7011      	strb	r1, [r2, #0]
    appData.Port = mcpsIndication->Port;
 8006ebe:	4669      	mov	r1, sp
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8006ec0:	6922      	ldr	r2, [r4, #16]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006ec2:	331c      	adds	r3, #28
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8006ec4:	609a      	str	r2, [r3, #8]
    appData.Port = mcpsIndication->Port;
 8006ec6:	78e2      	ldrb	r2, [r4, #3]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006ec8:	a802      	add	r0, sp, #8
    appData.Port = mcpsIndication->Port;
 8006eca:	720a      	strb	r2, [r1, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8006ecc:	7b22      	ldrb	r2, [r4, #12]
 8006ece:	724a      	strb	r2, [r1, #9]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006ed0:	0019      	movs	r1, r3
    appData.Buffer = mcpsIndication->Buffer;
 8006ed2:	68a2      	ldr	r2, [r4, #8]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006ed4:	69b3      	ldr	r3, [r6, #24]
    appData.Buffer = mcpsIndication->Buffer;
 8006ed6:	9203      	str	r2, [sp, #12]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8006edc:	69b3      	ldr	r3, [r6, #24]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <McpsIndication+0x60>
 8006ee4:	7e22      	ldrb	r2, [r4, #24]
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	d000      	beq.n	8006eec <McpsIndication+0x60>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8006eea:	4798      	blx	r3
 8006eec:	0037      	movs	r7, r6
{
 8006eee:	2500      	movs	r5, #0
 8006ef0:	371c      	adds	r7, #28
        if( LmHandlerPackages[i] != NULL )
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <McpsIndication+0x82>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	d007      	beq.n	8006f0e <McpsIndication+0x82>
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	78e3      	ldrb	r3, [r4, #3]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d11c      	bne.n	8006f40 <McpsIndication+0xb4>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	0020      	movs	r0, r4
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006f0e:	3501      	adds	r5, #1
 8006f10:	b2eb      	uxtb	r3, r5
 8006f12:	3704      	adds	r7, #4
 8006f14:	b26d      	sxtb	r5, r5
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d1eb      	bne.n	8006ef2 <McpsIndication+0x66>
    LmHandlerGetCurrentClass(&deviceClass);
 8006f1a:	466b      	mov	r3, sp
 8006f1c:	1dd8      	adds	r0, r3, #7
 8006f1e:	f7ff ff9f 	bl	8006e60 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8006f22:	7963      	ldrb	r3, [r4, #5]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d109      	bne.n	8006f3c <McpsIndication+0xb0>
 8006f28:	466a      	mov	r2, sp
 8006f2a:	79d1      	ldrb	r1, [r2, #7]
 8006f2c:	2900      	cmp	r1, #0
 8006f2e:	d105      	bne.n	8006f3c <McpsIndication+0xb0>
        LmHandlerAppData_t appData =
 8006f30:	a804      	add	r0, sp, #16
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8006f32:	000a      	movs	r2, r1
        LmHandlerAppData_t appData =
 8006f34:	8001      	strh	r1, [r0, #0]
 8006f36:	6041      	str	r1, [r0, #4]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8006f38:	f7ff fefa 	bl	8006d30 <LmHandlerSend>
}
 8006f3c:	b007      	add	sp, #28
 8006f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006f40:	2d00      	cmp	r5, #0
 8006f42:	d1e4      	bne.n	8006f0e <McpsIndication+0x82>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8006f44:	69f3      	ldr	r3, [r6, #28]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4798      	blx	r3
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d1db      	bne.n	8006f06 <McpsIndication+0x7a>
 8006f4e:	e7de      	b.n	8006f0e <McpsIndication+0x82>
 8006f50:	2000006c 	.word	0x2000006c
 8006f54:	200004f8 	.word	0x200004f8

08006f58 <LmHandlerGetTxDatarate>:
{
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	0004      	movs	r4, r0
 8006f5c:	b08a      	sub	sp, #40	; 0x28
    if (txDatarate == NULL)
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d103      	bne.n	8006f6a <LmHandlerGetTxDatarate+0x12>
        return LORAMAC_HANDLER_ERROR;
 8006f62:	2001      	movs	r0, #1
 8006f64:	4240      	negs	r0, r0
}
 8006f66:	b00a      	add	sp, #40	; 0x28
 8006f68:	bd10      	pop	{r4, pc}
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8006f6a:	231f      	movs	r3, #31
 8006f6c:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8006f6e:	a801      	add	r0, sp, #4
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8006f70:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8006f72:	f002 fa25 	bl	80093c0 <LoRaMacMibGetRequestConfirm>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d1f3      	bne.n	8006f62 <LmHandlerGetTxDatarate+0xa>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8006f7a:	466b      	mov	r3, sp
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	569a      	ldrsb	r2, [r3, r2]
    LmHandlerParams.TxDatarate = *txDatarate;
 8006f80:	4b02      	ldr	r3, [pc, #8]	; (8006f8c <LmHandlerGetTxDatarate+0x34>)
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8006f82:	7022      	strb	r2, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8006f84:	3330      	adds	r3, #48	; 0x30
 8006f86:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 8006f88:	e7ed      	b.n	8006f66 <LmHandlerGetTxDatarate+0xe>
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	200004f8 	.word	0x200004f8

08006f90 <MlmeConfirm>:
    TxParams.IsMcpsConfirm = 0;
 8006f90:	2300      	movs	r3, #0
{
 8006f92:	b5f0      	push	{r4, r5, r6, r7, lr}
    TxParams.IsMcpsConfirm = 0;
 8006f94:	4d25      	ldr	r5, [pc, #148]	; (800702c <MlmeConfirm+0x9c>)
{
 8006f96:	0004      	movs	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8006f98:	702b      	strb	r3, [r5, #0]
    TxParams.Status = mlmeConfirm->Status;
 8006f9a:	7843      	ldrb	r3, [r0, #1]
 8006f9c:	002e      	movs	r6, r5
 8006f9e:	706b      	strb	r3, [r5, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006fa0:	69ab      	ldr	r3, [r5, #24]
 8006fa2:	0028      	movs	r0, r5
 8006fa4:	002f      	movs	r7, r5
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
{
 8006fa8:	b08b      	sub	sp, #44	; 0x2c
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006faa:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006fac:	361c      	adds	r6, #28
 8006fae:	3730      	adds	r7, #48	; 0x30
        if( LmHandlerPackages[i] != NULL )
 8006fb0:	6833      	ldr	r3, [r6, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <MlmeConfirm+0x30>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <MlmeConfirm+0x30>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006fbc:	0020      	movs	r0, r4
 8006fbe:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006fc0:	3604      	adds	r6, #4
 8006fc2:	42be      	cmp	r6, r7
 8006fc4:	d1f4      	bne.n	8006fb0 <MlmeConfirm+0x20>
    switch( mlmeConfirm->MlmeRequest )
 8006fc6:	7823      	ldrb	r3, [r4, #0]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <MlmeConfirm+0x44>
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d020      	beq.n	8007012 <MlmeConfirm+0x82>
}
 8006fd0:	b00b      	add	sp, #44	; 0x2c
 8006fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8006fd4:	2306      	movs	r3, #6
 8006fd6:	af01      	add	r7, sp, #4
            LoRaMacMibGetRequestConfirm( &mibReq );
 8006fd8:	0038      	movs	r0, r7
            mibReq.Type = MIB_DEV_ADDR;
 8006fda:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8006fdc:	f002 f9f0 	bl	80093c0 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8006fe0:	4e13      	ldr	r6, [pc, #76]	; (8007030 <MlmeConfirm+0xa0>)
 8006fe2:	9b02      	ldr	r3, [sp, #8]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8006fe4:	0030      	movs	r0, r6
 8006fe6:	3018      	adds	r0, #24
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8006fe8:	6173      	str	r3, [r6, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8006fea:	f7ff ffb5 	bl	8006f58 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8006fee:	7863      	ldrb	r3, [r4, #1]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <MlmeConfirm+0x7c>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006ff4:	7673      	strb	r3, [r6, #25]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006ff6:	002b      	movs	r3, r5
 8006ff8:	3330      	adds	r3, #48	; 0x30
 8006ffa:	7858      	ldrb	r0, [r3, #1]
 8006ffc:	f7ff fe00 	bl	8006c00 <LmHandlerRequestClass>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007000:	0030      	movs	r0, r6
 8007002:	69ab      	ldr	r3, [r5, #24]
 8007004:	3018      	adds	r0, #24
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	4798      	blx	r3
        break;
 800700a:	e7e1      	b.n	8006fd0 <MlmeConfirm+0x40>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800700c:	23ff      	movs	r3, #255	; 0xff
 800700e:	7673      	strb	r3, [r6, #25]
 8007010:	e7f6      	b.n	8007000 <MlmeConfirm+0x70>
            RxParams.LinkCheck = true;
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <MlmeConfirm+0xa0>)
 8007014:	2101      	movs	r1, #1
 8007016:	001a      	movs	r2, r3
 8007018:	3229      	adds	r2, #41	; 0x29
 800701a:	7011      	strb	r1, [r2, #0]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800701c:	001a      	movs	r2, r3
 800701e:	7a21      	ldrb	r1, [r4, #8]
 8007020:	322a      	adds	r2, #42	; 0x2a
 8007022:	7011      	strb	r1, [r2, #0]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007024:	7a62      	ldrb	r2, [r4, #9]
 8007026:	332b      	adds	r3, #43	; 0x2b
 8007028:	701a      	strb	r2, [r3, #0]
}
 800702a:	e7d1      	b.n	8006fd0 <MlmeConfirm+0x40>
 800702c:	200004f8 	.word	0x200004f8
 8007030:	2000006c 	.word	0x2000006c

08007034 <LmHandlerPackageRegister>:
{
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	0004      	movs	r4, r0
 8007038:	000d      	movs	r5, r1
    switch( id )
 800703a:	2800      	cmp	r0, #0
 800703c:	d002      	beq.n	8007044 <LmHandlerPackageRegister+0x10>
        return LORAMAC_HANDLER_ERROR;
 800703e:	2001      	movs	r0, #1
 8007040:	4240      	negs	r0, r0
}
 8007042:	bd70      	pop	{r4, r5, r6, pc}
            package = LmhpCompliancePackageFactory( );
 8007044:	f000 f9cc 	bl	80073e0 <LmhpCompliancePackageFactory>
    if( package != NULL )
 8007048:	2800      	cmp	r0, #0
 800704a:	d0f8      	beq.n	800703e <LmHandlerPackageRegister+0xa>
        LmHandlerPackages[id] = package;
 800704c:	4b08      	ldr	r3, [pc, #32]	; (8007070 <LmHandlerPackageRegister+0x3c>)
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800704e:	4a09      	ldr	r2, [pc, #36]	; (8007074 <LmHandlerPackageRegister+0x40>)
        LmHandlerPackages[id] = package;
 8007050:	61d8      	str	r0, [r3, #28]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007052:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007054:	699b      	ldr	r3, [r3, #24]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8007056:	4a08      	ldr	r2, [pc, #32]	; (8007078 <LmHandlerPackageRegister+0x44>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007058:	691b      	ldr	r3, [r3, #16]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800705a:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800705c:	4a07      	ldr	r2, [pc, #28]	; (800707c <LmHandlerPackageRegister+0x48>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800705e:	6143      	str	r3, [r0, #20]
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007060:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007062:	6843      	ldr	r3, [r0, #4]
 8007064:	22f2      	movs	r2, #242	; 0xf2
 8007066:	0028      	movs	r0, r5
 8007068:	4905      	ldr	r1, [pc, #20]	; (8007080 <LmHandlerPackageRegister+0x4c>)
 800706a:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800706c:	0020      	movs	r0, r4
 800706e:	e7e8      	b.n	8007042 <LmHandlerPackageRegister+0xe>
 8007070:	200004f8 	.word	0x200004f8
 8007074:	08006cb1 	.word	0x08006cb1
 8007078:	08006d31 	.word	0x08006d31
 800707c:	080069bd 	.word	0x080069bd
 8007080:	2000055d 	.word	0x2000055d

08007084 <LmHandlerInit>:
    LmHandlerCallbacks = handlerCallbacks;
 8007084:	4b0e      	ldr	r3, [pc, #56]	; (80070c0 <LmHandlerInit+0x3c>)
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007086:	4a0f      	ldr	r2, [pc, #60]	; (80070c4 <LmHandlerInit+0x40>)
{
 8007088:	b510      	push	{r4, lr}
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800708c:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <LmHandlerInit+0x44>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800708e:	490f      	ldr	r1, [pc, #60]	; (80070cc <LmHandlerInit+0x48>)
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007090:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007092:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <LmHandlerInit+0x4c>)
    LmHandlerCallbacks = handlerCallbacks;
 8007094:	6198      	str	r0, [r3, #24]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007096:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007098:	4a0e      	ldr	r2, [pc, #56]	; (80070d4 <LmHandlerInit+0x50>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800709a:	312c      	adds	r1, #44	; 0x2c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800709c:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800709e:	6802      	ldr	r2, [r0, #0]
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80070a2:	6842      	ldr	r2, [r0, #4]
 80070a4:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80070a6:	6882      	ldr	r2, [r0, #8]
 80070a8:	649a      	str	r2, [r3, #72]	; 0x48
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80070aa:	4a0b      	ldr	r2, [pc, #44]	; (80070d8 <LmHandlerInit+0x54>)
 80070ac:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80070ae:	6902      	ldr	r2, [r0, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80070b0:	2000      	movs	r0, #0
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80070b2:	651a      	str	r2, [r3, #80]	; 0x50
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80070b4:	f7ff ffbe 	bl	8007034 <LmHandlerPackageRegister>
 80070b8:	1e43      	subs	r3, r0, #1
 80070ba:	4198      	sbcs	r0, r3
}
 80070bc:	4240      	negs	r0, r0
 80070be:	bd10      	pop	{r4, pc}
 80070c0:	200004f8 	.word	0x200004f8
 80070c4:	080069d5 	.word	0x080069d5
 80070c8:	08006e8d 	.word	0x08006e8d
 80070cc:	2000006c 	.word	0x2000006c
 80070d0:	08006f91 	.word	0x08006f91
 80070d4:	08006e01 	.word	0x08006e01
 80070d8:	080073e9 	.word	0x080073e9

080070dc <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <LmhpComplianceInit+0x1c>)
 80070de:	2800      	cmp	r0, #0
 80070e0:	d007      	beq.n	80070f2 <LmhpComplianceInit+0x16>
 80070e2:	2900      	cmp	r1, #0
 80070e4:	d005      	beq.n	80070f2 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
        ComplianceTestState.DataBuffer = dataBuffer;
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80070e6:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized = true;
 80070e8:	2201      	movs	r2, #1
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80070ea:	6018      	str	r0, [r3, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80070ec:	60d9      	str	r1, [r3, #12]
    }
    else
    {
        LmhpComplianceParams = NULL;
        ComplianceTestState.Initialized = false;
 80070ee:	711a      	strb	r2, [r3, #4]
    }
}
 80070f0:	4770      	bx	lr
        LmhpComplianceParams = NULL;
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e7fa      	b.n	80070ee <LmhpComplianceInit+0x12>
 80070f8:	20000650 	.word	0x20000650

080070fc <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
 80070fc:	4b01      	ldr	r3, [pc, #4]	; (8007104 <LmhpComplianceIsInitialized+0x8>)
 80070fe:	7918      	ldrb	r0, [r3, #4]
}
 8007100:	4770      	bx	lr
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	20000650 	.word	0x20000650

08007108 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8007108:	4b02      	ldr	r3, [pc, #8]	; (8007114 <LmhpComplianceIsRunning+0xc>)
 800710a:	7918      	ldrb	r0, [r3, #4]
 800710c:	2800      	cmp	r0, #0
 800710e:	d000      	beq.n	8007112 <LmhpComplianceIsRunning+0xa>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8007110:	7958      	ldrb	r0, [r3, #5]
}
 8007112:	4770      	bx	lr
 8007114:	20000650 	.word	0x20000650

08007118 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8007118:	4770      	bx	lr
	...

0800711c <LmhpComplianceOnMcpsConfirm>:
    if (ComplianceTestState.Initialized == false)
 800711c:	4b08      	ldr	r3, [pc, #32]	; (8007140 <LmhpComplianceOnMcpsConfirm+0x24>)
 800711e:	791a      	ldrb	r2, [r3, #4]
 8007120:	2a00      	cmp	r2, #0
 8007122:	d00b      	beq.n	800713c <LmhpComplianceOnMcpsConfirm+0x20>
    if ((ComplianceTestState.IsRunning == true) &&
 8007124:	795a      	ldrb	r2, [r3, #5]
 8007126:	2a00      	cmp	r2, #0
 8007128:	d008      	beq.n	800713c <LmhpComplianceOnMcpsConfirm+0x20>
 800712a:	7802      	ldrb	r2, [r0, #0]
 800712c:	2a01      	cmp	r2, #1
 800712e:	d105      	bne.n	800713c <LmhpComplianceOnMcpsConfirm+0x20>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8007130:	7902      	ldrb	r2, [r0, #4]
 8007132:	2a00      	cmp	r2, #0
 8007134:	d002      	beq.n	800713c <LmhpComplianceOnMcpsConfirm+0x20>
        ComplianceTestState.DownLinkCounter++;
 8007136:	8a1a      	ldrh	r2, [r3, #16]
 8007138:	3201      	adds	r2, #1
 800713a:	821a      	strh	r2, [r3, #16]
}
 800713c:	4770      	bx	lr
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	20000650 	.word	0x20000650

08007144 <LmhpComplianceOnMlmeConfirm>:
    if( ComplianceTestState.Initialized == false )
 8007144:	4b08      	ldr	r3, [pc, #32]	; (8007168 <LmhpComplianceOnMlmeConfirm+0x24>)
 8007146:	791a      	ldrb	r2, [r3, #4]
 8007148:	2a00      	cmp	r2, #0
 800714a:	d00b      	beq.n	8007164 <LmhpComplianceOnMlmeConfirm+0x20>
    if( ComplianceTestState.IsRunning == false )
 800714c:	795a      	ldrb	r2, [r3, #5]
 800714e:	2a00      	cmp	r2, #0
 8007150:	d008      	beq.n	8007164 <LmhpComplianceOnMlmeConfirm+0x20>
    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8007152:	7802      	ldrb	r2, [r0, #0]
 8007154:	2a04      	cmp	r2, #4
 8007156:	d105      	bne.n	8007164 <LmhpComplianceOnMlmeConfirm+0x20>
 8007158:	7a01      	ldrb	r1, [r0, #8]
 800715a:	7a42      	ldrb	r2, [r0, #9]
        ComplianceTestState.LinkCheck = true;
 800715c:	2001      	movs	r0, #1
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800715e:	74d9      	strb	r1, [r3, #19]
        ComplianceTestState.LinkCheck = true;
 8007160:	7498      	strb	r0, [r3, #18]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8007162:	751a      	strb	r2, [r3, #20]
}
 8007164:	4770      	bx	lr
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	20000650 	.word	0x20000650

0800716c <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
 800716c:	b513      	push	{r0, r1, r4, lr}
    if( ComplianceTestState.Initialized == false )
 800716e:	4c1b      	ldr	r4, [pc, #108]	; (80071dc <LmhpComplianceTxProcess.isra.0+0x70>)
 8007170:	7923      	ldrb	r3, [r4, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d023      	beq.n	80071be <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.IsRunning == false )
 8007176:	7963      	ldrb	r3, [r4, #5]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d020      	beq.n	80071be <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.LinkCheck == true )
 800717c:	7ca2      	ldrb	r2, [r4, #18]
        ComplianceTestState.DataBuffer[0] = 5;
 800717e:	68e3      	ldr	r3, [r4, #12]
    if( ComplianceTestState.LinkCheck == true )
 8007180:	2a00      	cmp	r2, #0
 8007182:	d01d      	beq.n	80071c0 <LmhpComplianceTxProcess.isra.0+0x54>
        ComplianceTestState.LinkCheck = false;
 8007184:	2200      	movs	r2, #0
 8007186:	74a2      	strb	r2, [r4, #18]
        ComplianceTestState.DataBufferSize = 3;
 8007188:	3203      	adds	r2, #3
 800718a:	72a2      	strb	r2, [r4, #10]
        ComplianceTestState.DataBuffer[0] = 5;
 800718c:	3202      	adds	r2, #2
 800718e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8007190:	7ce2      	ldrb	r2, [r4, #19]
 8007192:	705a      	strb	r2, [r3, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8007194:	7d22      	ldrb	r2, [r4, #20]
 8007196:	709a      	strb	r2, [r3, #2]
        ComplianceTestState.State = 1;
 8007198:	2201      	movs	r2, #1
 800719a:	71a2      	strb	r2, [r4, #6]
    LmHandlerAppData_t appData =
 800719c:	4669      	mov	r1, sp
 800719e:	22e0      	movs	r2, #224	; 0xe0
    TimerStart( &ComplianceTxNextPacketTimer );
 80071a0:	0020      	movs	r0, r4
    LmHandlerAppData_t appData =
 80071a2:	700a      	strb	r2, [r1, #0]
 80071a4:	7aa2      	ldrb	r2, [r4, #10]
    TimerStart( &ComplianceTxNextPacketTimer );
 80071a6:	3018      	adds	r0, #24
    LmHandlerAppData_t appData =
 80071a8:	704a      	strb	r2, [r1, #1]
 80071aa:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 80071ac:	f006 fdf8 	bl	800dda0 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <LmhpComplianceTxProcess.isra.0+0x74>)
 80071b2:	79e1      	ldrb	r1, [r4, #7]
 80071b4:	2200      	movs	r2, #0
 80071b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80071b8:	4668      	mov	r0, sp
 80071ba:	2301      	movs	r3, #1
 80071bc:	47a0      	blx	r4
}
 80071be:	bd13      	pop	{r0, r1, r4, pc}
        switch( ComplianceTestState.State )
 80071c0:	79a2      	ldrb	r2, [r4, #6]
 80071c2:	2a01      	cmp	r2, #1
 80071c4:	d002      	beq.n	80071cc <LmhpComplianceTxProcess.isra.0+0x60>
 80071c6:	2a04      	cmp	r2, #4
 80071c8:	d1e8      	bne.n	800719c <LmhpComplianceTxProcess.isra.0+0x30>
 80071ca:	e7e5      	b.n	8007198 <LmhpComplianceTxProcess.isra.0+0x2c>
            ComplianceTestState.DataBufferSize = 2;
 80071cc:	2202      	movs	r2, #2
 80071ce:	72a2      	strb	r2, [r4, #10]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80071d0:	8a22      	ldrh	r2, [r4, #16]
 80071d2:	0a11      	lsrs	r1, r2, #8
 80071d4:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80071d6:	705a      	strb	r2, [r3, #1]
            break;
 80071d8:	e7e0      	b.n	800719c <LmhpComplianceTxProcess.isra.0+0x30>
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	20000650 	.word	0x20000650
 80071e0:	200000a4 	.word	0x200000a4

080071e4 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 80071e4:	b510      	push	{r4, lr}
    LmhpComplianceTxProcess( );
 80071e6:	f7ff ffc1 	bl	800716c <LmhpComplianceTxProcess.isra.0>
}
 80071ea:	bd10      	pop	{r4, pc}

080071ec <LmhpComplianceOnMcpsIndication>:
{
 80071ec:	b530      	push	{r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 80071ee:	4c78      	ldr	r4, [pc, #480]	; (80073d0 <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 80071f0:	0002      	movs	r2, r0
    if( ComplianceTestState.Initialized == false )
 80071f2:	7923      	ldrb	r3, [r4, #4]
{
 80071f4:	b08d      	sub	sp, #52	; 0x34
    if( ComplianceTestState.Initialized == false )
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d044      	beq.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
    if( mcpsIndication->RxData == false )
 80071fa:	7b43      	ldrb	r3, [r0, #13]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d041      	beq.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
    if ((ComplianceTestState.IsRunning == true) &&
 8007200:	7965      	ldrb	r5, [r4, #5]
 8007202:	2d00      	cmp	r5, #0
 8007204:	d005      	beq.n	8007212 <LmhpComplianceOnMcpsIndication+0x26>
 8007206:	7b83      	ldrb	r3, [r0, #14]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <LmhpComplianceOnMcpsIndication+0x26>
        ComplianceTestState.DownLinkCounter++;
 800720c:	8a23      	ldrh	r3, [r4, #16]
 800720e:	3301      	adds	r3, #1
 8007210:	8223      	strh	r3, [r4, #16]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007212:	78d0      	ldrb	r0, [r2, #3]
 8007214:	28e0      	cmp	r0, #224	; 0xe0
 8007216:	d135      	bne.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
    if( ComplianceTestState.IsRunning == false )
 8007218:	2d00      	cmp	r5, #0
 800721a:	d135      	bne.n	8007288 <LmhpComplianceOnMcpsIndication+0x9c>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800721c:	7b11      	ldrb	r1, [r2, #12]
 800721e:	2904      	cmp	r1, #4
 8007220:	d130      	bne.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007222:	6893      	ldr	r3, [r2, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	2a01      	cmp	r2, #1
 8007228:	d12c      	bne.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800722a:	785a      	ldrb	r2, [r3, #1]
 800722c:	2a01      	cmp	r2, #1
 800722e:	d129      	bne.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007230:	789a      	ldrb	r2, [r3, #2]
 8007232:	2a01      	cmp	r2, #1
 8007234:	d126      	bne.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007236:	78db      	ldrb	r3, [r3, #3]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d123      	bne.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 800723c:	3201      	adds	r2, #1
 800723e:	72a2      	strb	r2, [r4, #10]
            mibReq.Type = MIB_ADR;
 8007240:	466a      	mov	r2, sp
            ComplianceTestState.State = 1;
 8007242:	80e3      	strh	r3, [r4, #6]
            mibReq.Param.AdrEnable = true;
 8007244:	7413      	strb	r3, [r2, #16]
            ComplianceTestState.Port = 224;
 8007246:	7220      	strb	r0, [r4, #8]
            mibReq.Type = MIB_ADR;
 8007248:	7311      	strb	r1, [r2, #12]
            ComplianceTestState.DownLinkCounter = 0;
 800724a:	6125      	str	r5, [r4, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800724c:	a803      	add	r0, sp, #12
            ComplianceTestState.IsRunning = true;
 800724e:	7163      	strb	r3, [r4, #5]
            ComplianceTestState.NbGateways = 0;
 8007250:	7525      	strb	r5, [r4, #20]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007252:	f002 f957 	bl	8009504 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8007256:	0028      	movs	r0, r5
 8007258:	f002 fe40 	bl	8009edc <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d000      	beq.n	8007266 <LmhpComplianceOnMcpsIndication+0x7a>
                LmhpComplianceParams->StopPeripherals( );
 8007264:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8007266:	2200      	movs	r2, #0
 8007268:	2101      	movs	r1, #1
 800726a:	3418      	adds	r4, #24
 800726c:	4b59      	ldr	r3, [pc, #356]	; (80073d4 <LmhpComplianceOnMcpsIndication+0x1e8>)
 800726e:	9200      	str	r2, [sp, #0]
 8007270:	4249      	negs	r1, r1
 8007272:	0020      	movs	r0, r4
 8007274:	f006 fce0 	bl	800dc38 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8007278:	4957      	ldr	r1, [pc, #348]	; (80073d8 <LmhpComplianceOnMcpsIndication+0x1ec>)
 800727a:	0020      	movs	r0, r4
 800727c:	f006 fdd2 	bl	800de24 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8007280:	f7ff ff74 	bl	800716c <LmhpComplianceTxProcess.isra.0>
}
 8007284:	b00d      	add	sp, #52	; 0x34
 8007286:	bd30      	pop	{r4, r5, pc}
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8007288:	6893      	ldr	r3, [r2, #8]
 800728a:	7818      	ldrb	r0, [r3, #0]
 800728c:	71a0      	strb	r0, [r4, #6]
        switch( ComplianceTestState.State )
 800728e:	280a      	cmp	r0, #10
 8007290:	d8f8      	bhi.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
 8007292:	f7f8 ff4b 	bl	800012c <__gnu_thumb1_case_uqi>
 8007296:	2006      	.short	0x2006
 8007298:	3e292723 	.word	0x3e292723
 800729c:	8d8a6244 	.word	0x8d8a6244
 80072a0:	96          	.byte	0x96
 80072a1:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 80072a2:	0020      	movs	r0, r4
 80072a4:	3018      	adds	r0, #24
 80072a6:	f006 fd27 	bl	800dcf8 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 80072aa:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 80072ac:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 80072ae:	8223      	strh	r3, [r4, #16]
                ComplianceTestState.IsRunning = false;
 80072b0:	7163      	strb	r3, [r4, #5]
                mibReq.Type = MIB_ADR;
 80072b2:	3304      	adds	r3, #4
 80072b4:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80072b6:	6823      	ldr	r3, [r4, #0]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80072b8:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80072be:	f002 f921 	bl	8009504 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	7858      	ldrb	r0, [r3, #1]
 80072c6:	f002 fe09 	bl	8009edc <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0d8      	beq.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
                    LmhpComplianceParams->StartPeripherals( );
 80072d2:	4798      	blx	r3
            break;
 80072d4:	e7d6      	b.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 80072d6:	2302      	movs	r3, #2
 80072d8:	72a3      	strb	r3, [r4, #10]
            break;
 80072da:	e7d3      	b.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 80072dc:	2302      	movs	r3, #2
 80072de:	33ff      	adds	r3, #255	; 0xff
            ComplianceTestState.State = 1;
 80072e0:	80e3      	strh	r3, [r4, #6]
            break;
 80072e2:	e7cf      	b.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e7fb      	b.n	80072e0 <LmhpComplianceOnMcpsIndication+0xf4>
            ComplianceTestState.DataBuffer[0] = 4;
 80072e8:	2304      	movs	r3, #4
 80072ea:	68e5      	ldr	r5, [r4, #12]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80072ec:	7b11      	ldrb	r1, [r2, #12]
            ComplianceTestState.DataBuffer[0] = 4;
 80072ee:	702b      	strb	r3, [r5, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80072f0:	7a60      	ldrb	r0, [r4, #9]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80072f2:	72a1      	strb	r1, [r4, #10]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80072f4:	1c03      	adds	r3, r0, #0
 80072f6:	4288      	cmp	r0, r1
 80072f8:	d900      	bls.n	80072fc <LmhpComplianceOnMcpsIndication+0x110>
 80072fa:	1c0b      	adds	r3, r1, #0
 80072fc:	b2d9      	uxtb	r1, r3
 80072fe:	2300      	movs	r3, #0
 8007300:	3301      	adds	r3, #1
 8007302:	b2d8      	uxtb	r0, r3
 8007304:	4281      	cmp	r1, r0
 8007306:	d9bd      	bls.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007308:	6890      	ldr	r0, [r2, #8]
 800730a:	5cc0      	ldrb	r0, [r0, r3]
 800730c:	3001      	adds	r0, #1
 800730e:	54e8      	strb	r0, [r5, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007310:	e7f6      	b.n	8007300 <LmhpComplianceOnMcpsIndication+0x114>
                mlmeReq.Type = MLME_LINK_CHECK;
 8007312:	2304      	movs	r3, #4
 8007314:	a803      	add	r0, sp, #12
                mlmeReq.Type = MLME_DEVICE_TIME;
 8007316:	7003      	strb	r3, [r0, #0]
                LoRaMacMlmeRequest( &mlmeReq );
 8007318:	f002 fb2a 	bl	8009970 <LoRaMacMlmeRequest>
            break;
 800731c:	e7b2      	b.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
                TimerStop(&ComplianceTxNextPacketTimer);
 800731e:	0020      	movs	r0, r4
 8007320:	3018      	adds	r0, #24
 8007322:	f006 fce9 	bl	800dcf8 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8007326:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 8007328:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 800732a:	8223      	strh	r3, [r4, #16]
                ComplianceTestState.IsRunning = false;
 800732c:	7163      	strb	r3, [r4, #5]
                mibReq.Type = MIB_ADR;
 800732e:	3304      	adds	r3, #4
 8007330:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007332:	6823      	ldr	r3, [r4, #0]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007334:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800733a:	f002 f8e3 	bl	8009504 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	7858      	ldrb	r0, [r3, #1]
 8007342:	f002 fdcb 	bl	8009edc <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d000      	beq.n	8007350 <LmhpComplianceOnMcpsIndication+0x164>
                    LmhpComplianceParams->StartPeripherals( );
 800734e:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8007350:	4b22      	ldr	r3, [pc, #136]	; (80073dc <LmhpComplianceOnMcpsIndication+0x1f0>)
 8007352:	2002      	movs	r0, #2
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	4798      	blx	r3
            break;
 8007358:	e794      	b.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
                if( mcpsIndication->BufferSize == 3 )
 800735a:	7b12      	ldrb	r2, [r2, #12]
 800735c:	a803      	add	r0, sp, #12
 800735e:	2a03      	cmp	r2, #3
 8007360:	d10c      	bne.n	800737c <LmhpComplianceOnMcpsIndication+0x190>
                    mlmeReq.Type = MLME_TXCW;
 8007362:	3202      	adds	r2, #2
 8007364:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007366:	7859      	ldrb	r1, [r3, #1]
 8007368:	789b      	ldrb	r3, [r3, #2]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	430b      	orrs	r3, r1
 800736e:	ba5b      	rev16	r3, r3
 8007370:	8083      	strh	r3, [r0, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8007372:	f002 fafd 	bl	8009970 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8007376:	2301      	movs	r3, #1
 8007378:	71a3      	strb	r3, [r4, #6]
            break;
 800737a:	e783      	b.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
                else if( mcpsIndication->BufferSize == 7 )
 800737c:	2a07      	cmp	r2, #7
 800737e:	d1f8      	bne.n	8007372 <LmhpComplianceOnMcpsIndication+0x186>
                    mlmeReq.Type = MLME_TXCW_1;
 8007380:	3a01      	subs	r2, #1
 8007382:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007384:	789a      	ldrb	r2, [r3, #2]
 8007386:	785d      	ldrb	r5, [r3, #1]
 8007388:	0212      	lsls	r2, r2, #8
 800738a:	432a      	orrs	r2, r5
 800738c:	ba52      	rev16	r2, r2
 800738e:	8082      	strh	r2, [r0, #4]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8007390:	78da      	ldrb	r2, [r3, #3]
 8007392:	7919      	ldrb	r1, [r3, #4]
 8007394:	0412      	lsls	r2, r2, #16
 8007396:	0209      	lsls	r1, r1, #8
 8007398:	430a      	orrs	r2, r1
 800739a:	7959      	ldrb	r1, [r3, #5]
 800739c:	430a      	orrs	r2, r1
 800739e:	2164      	movs	r1, #100	; 0x64
 80073a0:	434a      	muls	r2, r1
 80073a2:	6082      	str	r2, [r0, #8]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80073a4:	799b      	ldrb	r3, [r3, #6]
 80073a6:	7303      	strb	r3, [r0, #12]
 80073a8:	e7e3      	b.n	8007372 <LmhpComplianceOnMcpsIndication+0x186>
                mlmeReq.Type = MLME_DEVICE_TIME;
 80073aa:	230a      	movs	r3, #10
 80073ac:	a803      	add	r0, sp, #12
 80073ae:	e7b2      	b.n	8007316 <LmhpComplianceOnMcpsIndication+0x12a>
                mibReq.Type = MIB_DEVICE_CLASS;
 80073b0:	4669      	mov	r1, sp
 80073b2:	2200      	movs	r2, #0
 80073b4:	730a      	strb	r2, [r1, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80073b6:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80073b8:	a803      	add	r0, sp, #12
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80073ba:	740b      	strb	r3, [r1, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80073bc:	f002 f8a2 	bl	8009504 <LoRaMacMibSetRequestConfirm>
            break;
 80073c0:	e760      	b.n	8007284 <LmhpComplianceOnMcpsIndication+0x98>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 80073c2:	4669      	mov	r1, sp
 80073c4:	220d      	movs	r2, #13
 80073c6:	730a      	strb	r2, [r1, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80073c8:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMlmeRequest( &mlmeReq );
 80073ca:	a803      	add	r0, sp, #12
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80073cc:	740b      	strb	r3, [r1, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 80073ce:	e7a3      	b.n	8007318 <LmhpComplianceOnMcpsIndication+0x12c>
 80073d0:	20000650 	.word	0x20000650
 80073d4:	080071e5 	.word	0x080071e5
 80073d8:	00001388 	.word	0x00001388
 80073dc:	200000a4 	.word	0x200000a4

080073e0 <LmhpCompliancePackageFactory>:
}
 80073e0:	4800      	ldr	r0, [pc, #0]	; (80073e4 <LmhpCompliancePackageFactory+0x4>)
 80073e2:	4770      	bx	lr
 80073e4:	200000a4 	.word	0x200000a4

080073e8 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80073e8:	4770      	bx	lr

080073ea <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 80073ea:	2000      	movs	r0, #0
 80073ec:	4770      	bx	lr

080073ee <NvmDataMgmtRestore>:
 80073ee:	2000      	movs	r0, #0
 80073f0:	4770      	bx	lr
	...

080073f4 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 80073f4:	2302      	movs	r3, #2
 80073f6:	4a08      	ldr	r2, [pc, #32]	; (8007418 <OnRadioRxError+0x24>)
{
 80073f8:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80073fa:	7811      	ldrb	r1, [r2, #0]
 80073fc:	430b      	orrs	r3, r1
 80073fe:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007400:	23d2      	movs	r3, #210	; 0xd2
 8007402:	4a06      	ldr	r2, [pc, #24]	; (800741c <OnRadioRxError+0x28>)
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	58d3      	ldr	r3, [r2, r3]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <OnRadioRxError+0x20>
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d000      	beq.n	8007414 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007412:	4798      	blx	r3
    }
}
 8007414:	bd10      	pop	{r4, pc}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	20000680 	.word	0x20000680
 800741c:	2000096c 	.word	0x2000096c

08007420 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <UpdateRxSlotIdleState+0x18>)
 8007422:	33fc      	adds	r3, #252	; 0xfc
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d000      	beq.n	800742c <UpdateRxSlotIdleState+0xc>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800742a:	2306      	movs	r3, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800742c:	2290      	movs	r2, #144	; 0x90
 800742e:	4903      	ldr	r1, [pc, #12]	; (800743c <UpdateRxSlotIdleState+0x1c>)
 8007430:	00d2      	lsls	r2, r2, #3
 8007432:	548b      	strb	r3, [r1, r2]
 8007434:	4770      	bx	lr
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	20000698 	.word	0x20000698
 800743c:	2000096c 	.word	0x2000096c

08007440 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8007440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007442:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <GetMaxAppPayloadWithoutFOptsLength+0x30>)
 8007444:	a902      	add	r1, sp, #8
 8007446:	001a      	movs	r2, r3
 8007448:	3274      	adds	r2, #116	; 0x74
 800744a:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 800744c:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800744e:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007450:	220d      	movs	r2, #13
 8007452:	700a      	strb	r2, [r1, #0]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007454:	001a      	movs	r2, r3
 8007456:	3280      	adds	r2, #128	; 0x80
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	2a00      	cmp	r2, #0
 800745c:	d001      	beq.n	8007462 <GetMaxAppPayloadWithoutFOptsLength+0x22>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800745e:	220e      	movs	r2, #14
 8007460:	700a      	strb	r2, [r1, #0]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007462:	3340      	adds	r3, #64	; 0x40
 8007464:	7818      	ldrb	r0, [r3, #0]
 8007466:	f003 fc37 	bl	800acd8 <RegionGetPhyParam>

    return phyParam.Value;
 800746a:	b2c0      	uxtb	r0, r0
}
 800746c:	b005      	add	sp, #20
 800746e:	bd00      	pop	{pc}
 8007470:	20000698 	.word	0x20000698

08007474 <OnAckTimeoutTimerEvent>:
{
 8007474:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8007476:	480f      	ldr	r0, [pc, #60]	; (80074b4 <OnAckTimeoutTimerEvent+0x40>)
 8007478:	f006 fc3e 	bl	800dcf8 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800747c:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <OnAckTimeoutTimerEvent+0x44>)
 800747e:	4a0f      	ldr	r2, [pc, #60]	; (80074bc <OnAckTimeoutTimerEvent+0x48>)
 8007480:	5c9a      	ldrb	r2, [r3, r2]
 8007482:	2a00      	cmp	r2, #0
 8007484:	d002      	beq.n	800748c <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8007486:	2101      	movs	r1, #1
 8007488:	4a0d      	ldr	r2, [pc, #52]	; (80074c0 <OnAckTimeoutTimerEvent+0x4c>)
 800748a:	5499      	strb	r1, [r3, r2]
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800748c:	4a0d      	ldr	r2, [pc, #52]	; (80074c4 <OnAckTimeoutTimerEvent+0x50>)
 800748e:	32fc      	adds	r2, #252	; 0xfc
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	2a02      	cmp	r2, #2
 8007494:	d104      	bne.n	80074a0 <OnAckTimeoutTimerEvent+0x2c>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007496:	490c      	ldr	r1, [pc, #48]	; (80074c8 <OnAckTimeoutTimerEvent+0x54>)
 8007498:	321e      	adds	r2, #30
 800749a:	5c58      	ldrb	r0, [r3, r1]
 800749c:	4302      	orrs	r2, r0
 800749e:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80074a0:	22d2      	movs	r2, #210	; 0xd2
 80074a2:	0092      	lsls	r2, r2, #2
 80074a4:	589b      	ldr	r3, [r3, r2]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <OnAckTimeoutTimerEvent+0x3e>
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d000      	beq.n	80074b2 <OnAckTimeoutTimerEvent+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80074b0:	4798      	blx	r3
}
 80074b2:	bd10      	pop	{r4, pc}
 80074b4:	20000d64 	.word	0x20000d64
 80074b8:	2000096c 	.word	0x2000096c
 80074bc:	00000414 	.word	0x00000414
 80074c0:	00000413 	.word	0x00000413
 80074c4:	20000698 	.word	0x20000698
 80074c8:	00000481 	.word	0x00000481

080074cc <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80074cc:	22d0      	movs	r2, #208	; 0xd0
 80074ce:	2380      	movs	r3, #128	; 0x80
{
 80074d0:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80074d2:	4c0a      	ldr	r4, [pc, #40]	; (80074fc <PrepareRxDoneAbort+0x30>)
 80074d4:	0092      	lsls	r2, r2, #2
 80074d6:	58a1      	ldr	r1, [r4, r2]
 80074d8:	430b      	orrs	r3, r1
 80074da:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 80074dc:	4b08      	ldr	r3, [pc, #32]	; (8007500 <PrepareRxDoneAbort+0x34>)
 80074de:	5ce3      	ldrb	r3, [r4, r3]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 80074e4:	2000      	movs	r0, #0
 80074e6:	f7ff ffc5 	bl	8007474 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80074ea:	2322      	movs	r3, #34	; 0x22
 80074ec:	4905      	ldr	r1, [pc, #20]	; (8007504 <PrepareRxDoneAbort+0x38>)
 80074ee:	5c62      	ldrb	r2, [r4, r1]
 80074f0:	439a      	bics	r2, r3
 80074f2:	4313      	orrs	r3, r2
 80074f4:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 80074f6:	f7ff ff93 	bl	8007420 <UpdateRxSlotIdleState>
}
 80074fa:	bd10      	pop	{r4, pc}
 80074fc:	2000096c 	.word	0x2000096c
 8007500:	00000414 	.word	0x00000414
 8007504:	00000481 	.word	0x00000481

08007508 <HandleRadioRxErrorTimeout>:
{
 8007508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800750a:	4c31      	ldr	r4, [pc, #196]	; (80075d0 <HandleRadioRxErrorTimeout+0xc8>)
{
 800750c:	0006      	movs	r6, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800750e:	0023      	movs	r3, r4
 8007510:	33fc      	adds	r3, #252	; 0xfc
 8007512:	781b      	ldrb	r3, [r3, #0]
{
 8007514:	000d      	movs	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007516:	2b02      	cmp	r3, #2
 8007518:	d003      	beq.n	8007522 <HandleRadioRxErrorTimeout+0x1a>
        Radio.Sleep( );
 800751a:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <HandleRadioRxErrorTimeout+0xcc>)
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007522:	f002 fd61 	bl	8009fe8 <LoRaMacClassBIsBeaconExpected>
 8007526:	1e07      	subs	r7, r0, #0
 8007528:	d005      	beq.n	8007536 <HandleRadioRxErrorTimeout+0x2e>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800752a:	2002      	movs	r0, #2
 800752c:	f002 fd52 	bl	8009fd4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8007530:	2000      	movs	r0, #0
 8007532:	f002 fd54 	bl	8009fde <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007536:	0023      	movs	r3, r4
 8007538:	33fc      	adds	r3, #252	; 0xfc
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d118      	bne.n	8007572 <HandleRadioRxErrorTimeout+0x6a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007540:	f002 fd54 	bl	8009fec <LoRaMacClassBIsPingExpected>
 8007544:	9001      	str	r0, [sp, #4]
 8007546:	2800      	cmp	r0, #0
 8007548:	d006      	beq.n	8007558 <HandleRadioRxErrorTimeout+0x50>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800754a:	2000      	movs	r0, #0
 800754c:	f002 fd43 	bl	8009fd6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007550:	2000      	movs	r0, #0
 8007552:	f002 fd45 	bl	8009fe0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007556:	9f01      	ldr	r7, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007558:	f002 fd4a 	bl	8009ff0 <LoRaMacClassBIsMulticastExpected>
 800755c:	2800      	cmp	r0, #0
 800755e:	d008      	beq.n	8007572 <HandleRadioRxErrorTimeout+0x6a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007560:	2000      	movs	r0, #0
 8007562:	f002 fd39 	bl	8009fd8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007566:	2000      	movs	r0, #0
 8007568:	f002 fd3b 	bl	8009fe2 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 800756c:	f7ff ff58 	bl	8007420 <UpdateRxSlotIdleState>
}
 8007570:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 8007572:	2f00      	cmp	r7, #0
 8007574:	d1fa      	bne.n	800756c <HandleRadioRxErrorTimeout+0x64>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007576:	2290      	movs	r2, #144	; 0x90
            if( MacCtx.NodeAckRequested == true )
 8007578:	4f17      	ldr	r7, [pc, #92]	; (80075d8 <HandleRadioRxErrorTimeout+0xd0>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800757a:	00d2      	lsls	r2, r2, #3
            if( MacCtx.NodeAckRequested == true )
 800757c:	4b17      	ldr	r3, [pc, #92]	; (80075dc <HandleRadioRxErrorTimeout+0xd4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800757e:	5cba      	ldrb	r2, [r7, r2]
            if( MacCtx.NodeAckRequested == true )
 8007580:	5cfb      	ldrb	r3, [r7, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007582:	2a00      	cmp	r2, #0
 8007584:	d117      	bne.n	80075b6 <HandleRadioRxErrorTimeout+0xae>
            if( MacCtx.NodeAckRequested == true )
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <HandleRadioRxErrorTimeout+0x86>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <HandleRadioRxErrorTimeout+0xd8>)
 800758c:	54fe      	strb	r6, [r7, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800758e:	0030      	movs	r0, r6
 8007590:	f002 fed8 	bl	800a344 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8007594:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007596:	f006 fb75 	bl	800dc84 <UTIL_TIMER_GetElapsedTime>
 800759a:	23ed      	movs	r3, #237	; 0xed
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	58fb      	ldr	r3, [r7, r3]
 80075a0:	4298      	cmp	r0, r3
 80075a2:	d3e3      	bcc.n	800756c <HandleRadioRxErrorTimeout+0x64>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80075a4:	480f      	ldr	r0, [pc, #60]	; (80075e4 <HandleRadioRxErrorTimeout+0xdc>)
 80075a6:	f006 fba7 	bl	800dcf8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80075aa:	2320      	movs	r3, #32
 80075ac:	4a0e      	ldr	r2, [pc, #56]	; (80075e8 <HandleRadioRxErrorTimeout+0xe0>)
 80075ae:	5cb9      	ldrb	r1, [r7, r2]
 80075b0:	430b      	orrs	r3, r1
 80075b2:	54bb      	strb	r3, [r7, r2]
 80075b4:	e7da      	b.n	800756c <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HandleRadioRxErrorTimeout+0xb6>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <HandleRadioRxErrorTimeout+0xd8>)
 80075bc:	54fd      	strb	r5, [r7, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80075be:	0028      	movs	r0, r5
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80075c0:	34fc      	adds	r4, #252	; 0xfc
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80075c2:	f002 febf 	bl	800a344 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80075c6:	7823      	ldrb	r3, [r4, #0]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d1ee      	bne.n	80075aa <HandleRadioRxErrorTimeout+0xa2>
 80075cc:	e7ce      	b.n	800756c <HandleRadioRxErrorTimeout+0x64>
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	20000698 	.word	0x20000698
 80075d4:	0800e890 	.word	0x0800e890
 80075d8:	2000096c 	.word	0x2000096c
 80075dc:	00000414 	.word	0x00000414
 80075e0:	00000439 	.word	0x00000439
 80075e4:	20000d04 	.word	0x20000d04
 80075e8:	00000481 	.word	0x00000481

080075ec <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80075ec:	2301      	movs	r3, #1
 80075ee:	4a0b      	ldr	r2, [pc, #44]	; (800761c <OnRadioRxTimeout+0x30>)
{
 80075f0:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80075f2:	7811      	ldrb	r1, [r2, #0]
 80075f4:	430b      	orrs	r3, r1
 80075f6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80075f8:	23d2      	movs	r3, #210	; 0xd2
 80075fa:	4a09      	ldr	r2, [pc, #36]	; (8007620 <OnRadioRxTimeout+0x34>)
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	58d3      	ldr	r3, [r2, r3]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <OnRadioRxTimeout+0x20>
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d000      	beq.n	800760c <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800760a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800760c:	2201      	movs	r2, #1
 800760e:	2100      	movs	r1, #0
 8007610:	2002      	movs	r0, #2
 8007612:	4b04      	ldr	r3, [pc, #16]	; (8007624 <OnRadioRxTimeout+0x38>)
 8007614:	f006 f850 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8007618:	bd10      	pop	{r4, pc}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	20000680 	.word	0x20000680
 8007620:	2000096c 	.word	0x2000096c
 8007624:	0800ed94 	.word	0x0800ed94

08007628 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007628:	2304      	movs	r3, #4
 800762a:	4a0b      	ldr	r2, [pc, #44]	; (8007658 <OnRadioTxTimeout+0x30>)
{
 800762c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800762e:	7811      	ldrb	r1, [r2, #0]
 8007630:	430b      	orrs	r3, r1
 8007632:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007634:	23d2      	movs	r3, #210	; 0xd2
 8007636:	4a09      	ldr	r2, [pc, #36]	; (800765c <OnRadioTxTimeout+0x34>)
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	58d3      	ldr	r3, [r2, r3]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <OnRadioTxTimeout+0x20>
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d000      	beq.n	8007648 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007646:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8007648:	2201      	movs	r2, #1
 800764a:	2100      	movs	r1, #0
 800764c:	2002      	movs	r0, #2
 800764e:	4b04      	ldr	r3, [pc, #16]	; (8007660 <OnRadioTxTimeout+0x38>)
 8007650:	f006 f832 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8007654:	bd10      	pop	{r4, pc}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	20000680 	.word	0x20000680
 800765c:	2000096c 	.word	0x2000096c
 8007660:	0800eda4 	.word	0x0800eda4

08007664 <OnRadioRxDone>:
{
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	000e      	movs	r6, r1
 8007668:	0015      	movs	r5, r2
 800766a:	001c      	movs	r4, r3
 800766c:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800766e:	f006 faff 	bl	800dc70 <UTIL_TIMER_GetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007672:	2208      	movs	r2, #8
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007674:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007676:	7819      	ldrb	r1, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007678:	6058      	str	r0, [r3, #4]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800767a:	430a      	orrs	r2, r1
 800767c:	701a      	strb	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800767e:	609f      	str	r7, [r3, #8]
    RxDoneParams.Size = size;
 8007680:	819e      	strh	r6, [r3, #12]
    RxDoneParams.Rssi = rssi;
 8007682:	81dd      	strh	r5, [r3, #14]
    RxDoneParams.Snr = snr;
 8007684:	741c      	strb	r4, [r3, #16]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007686:	23d2      	movs	r3, #210	; 0xd2
 8007688:	4a08      	ldr	r2, [pc, #32]	; (80076ac <OnRadioRxDone+0x48>)
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	58d3      	ldr	r3, [r2, r3]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <OnRadioRxDone+0x36>
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d000      	beq.n	800769a <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007698:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800769a:	2201      	movs	r2, #1
 800769c:	2100      	movs	r1, #0
 800769e:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <OnRadioRxDone+0x4c>)
 80076a0:	2002      	movs	r0, #2
 80076a2:	f006 f809 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80076a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076a8:	20000680 	.word	0x20000680
 80076ac:	2000096c 	.word	0x2000096c
 80076b0:	0800edb4 	.word	0x0800edb4

080076b4 <OnRadioTxDone>:
{
 80076b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80076b6:	f006 fadb 	bl	800dc70 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80076ba:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80076bc:	4d0f      	ldr	r5, [pc, #60]	; (80076fc <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80076be:	4e10      	ldr	r6, [pc, #64]	; (8007700 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80076c0:	6168      	str	r0, [r5, #20]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80076c2:	0020      	movs	r0, r4
 80076c4:	f006 fa1c 	bl	800db00 <SysTimeGet>
 80076c8:	23ce      	movs	r3, #206	; 0xce
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	18f3      	adds	r3, r6, r3
 80076ce:	cc06      	ldmia	r4!, {r1, r2}
 80076d0:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80076d2:	2310      	movs	r3, #16
 80076d4:	782a      	ldrb	r2, [r5, #0]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	702b      	strb	r3, [r5, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80076da:	23d2      	movs	r3, #210	; 0xd2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	58f3      	ldr	r3, [r6, r3]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <OnRadioTxDone+0x38>
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d000      	beq.n	80076ec <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80076ea:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80076ec:	2201      	movs	r2, #1
 80076ee:	2100      	movs	r1, #0
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <OnRadioTxDone+0x50>)
 80076f2:	2002      	movs	r0, #2
 80076f4:	f005 ffe0 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80076f8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	20000680 	.word	0x20000680
 8007700:	2000096c 	.word	0x2000096c
 8007704:	0800edc1 	.word	0x0800edc1

08007708 <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
 8007708:	b570      	push	{r4, r5, r6, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800770a:	4c44      	ldr	r4, [pc, #272]	; (800781c <ResetMacParameters+0x114>)
 800770c:	2600      	movs	r6, #0
 800770e:	0023      	movs	r3, r4
 8007710:	33ff      	adds	r3, #255	; 0xff
    MacCtx.ChannelsNbTransCounter = 0;
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;

    Nvm.MacGroup2.MaxDCycle = 0;
 8007712:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007714:	745e      	strb	r6, [r3, #17]
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007716:	0023      	movs	r3, r4
 8007718:	2001      	movs	r0, #1
 800771a:	33fe      	adds	r3, #254	; 0xfe
 800771c:	8098      	strh	r0, [r3, #4]

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800771e:	0023      	movs	r3, r4
 8007720:	33c4      	adds	r3, #196	; 0xc4
 8007722:	881b      	ldrh	r3, [r3, #0]
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007724:	0022      	movs	r2, r4
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007726:	8723      	strh	r3, [r4, #56]	; 0x38
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007728:	0023      	movs	r3, r4
    Nvm.MacGroup1.AdrAckCounter = 0;
 800772a:	62a6      	str	r6, [r4, #40]	; 0x28
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800772c:	32a1      	adds	r2, #161	; 0xa1
 800772e:	7812      	ldrb	r2, [r2, #0]
 8007730:	3361      	adds	r3, #97	; 0x61
 8007732:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007734:	0022      	movs	r2, r4
 8007736:	0023      	movs	r3, r4
 8007738:	32a4      	adds	r2, #164	; 0xa4
 800773a:	3364      	adds	r3, #100	; 0x64
 800773c:	ca22      	ldmia	r2!, {r1, r5}
 800773e:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007740:	0022      	movs	r2, r4
 8007742:	0023      	movs	r3, r4
 8007744:	32ac      	adds	r2, #172	; 0xac
 8007746:	336c      	adds	r3, #108	; 0x6c
 8007748:	ca22      	ldmia	r2!, {r1, r5}
 800774a:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800774c:	0022      	movs	r2, r4
 800774e:	0023      	movs	r3, r4
 8007750:	32b4      	adds	r2, #180	; 0xb4
 8007752:	8812      	ldrh	r2, [r2, #0]
 8007754:	3374      	adds	r3, #116	; 0x74
 8007756:	801a      	strh	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007758:	0023      	movs	r3, r4
 800775a:	33b8      	adds	r3, #184	; 0xb8
 800775c:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 800775e:	4d30      	ldr	r5, [pc, #192]	; (8007820 <ResetMacParameters+0x118>)
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007760:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007762:	0023      	movs	r3, r4
 8007764:	33bc      	adds	r3, #188	; 0xbc
 8007766:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8007768:	4a2e      	ldr	r2, [pc, #184]	; (8007824 <ResetMacParameters+0x11c>)
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800776a:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 800776c:	2382      	movs	r3, #130	; 0x82
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	50ea      	str	r2, [r5, r3]

    MacCtx.NodeAckRequested = false;
 8007772:	4b2d      	ldr	r3, [pc, #180]	; (8007828 <ResetMacParameters+0x120>)
{
 8007774:	b090      	sub	sp, #64	; 0x40
    MacCtx.NodeAckRequested = false;
 8007776:	54ee      	strb	r6, [r5, r3]
    Nvm.MacGroup1.SrvAckRequested = false;
 8007778:	0023      	movs	r3, r4
 800777a:	333a      	adds	r3, #58	; 0x3a
 800777c:	701e      	strb	r6, [r3, #0]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800777e:	4b2b      	ldr	r3, [pc, #172]	; (800782c <ResetMacParameters+0x124>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007780:	a905      	add	r1, sp, #20
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007782:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007784:	4b2a      	ldr	r3, [pc, #168]	; (8007830 <ResetMacParameters+0x128>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007786:	7208      	strb	r0, [r1, #8]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007788:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800778a:	0023      	movs	r3, r4
 800778c:	3340      	adds	r3, #64	; 0x40
 800778e:	7818      	ldrb	r0, [r3, #0]
 8007790:	f003 fab5 	bl	800acfe <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8007794:	4b27      	ldr	r3, [pc, #156]	; (8007834 <ResetMacParameters+0x12c>)

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007796:	6e62      	ldr	r2, [r4, #100]	; 0x64
    MacCtx.Channel = 0;
 8007798:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800779a:	3b49      	subs	r3, #73	; 0x49
 800779c:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800779e:	3304      	adds	r3, #4
 80077a0:	50ea      	str	r2, [r5, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80077a2:	0023      	movs	r3, r4
 80077a4:	3375      	adds	r3, #117	; 0x75
 80077a6:	781a      	ldrb	r2, [r3, #0]
 80077a8:	23f7      	movs	r3, #247	; 0xf7
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80077ae:	3480      	adds	r4, #128	; 0x80
 80077b0:	7822      	ldrb	r2, [r4, #0]
 80077b2:	4b21      	ldr	r3, [pc, #132]	; (8007838 <ResetMacParameters+0x130>)
 80077b4:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80077b6:	2280      	movs	r2, #128	; 0x80
 80077b8:	4b20      	ldr	r3, [pc, #128]	; (800783c <ResetMacParameters+0x134>)
 80077ba:	0052      	lsls	r2, r2, #1
 80077bc:	52ea      	strh	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80077be:	22f3      	movs	r2, #243	; 0xf3
 80077c0:	3302      	adds	r3, #2
 80077c2:	0092      	lsls	r2, r2, #2
 80077c4:	18eb      	adds	r3, r5, r3
 80077c6:	18aa      	adds	r2, r5, r2
 80077c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80077ca:	c313      	stmia	r3!, {r0, r1, r4}
 80077cc:	ca03      	ldmia	r2!, {r0, r1}
 80077ce:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80077d0:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <ResetMacParameters+0x138>)
 80077d2:	4a1c      	ldr	r2, [pc, #112]	; (8007844 <ResetMacParameters+0x13c>)
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80077d4:	9603      	str	r6, [sp, #12]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80077d6:	52ea      	strh	r2, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;

    if( MacCtx.MacCallbacks != NULL )
 80077d8:	3baa      	subs	r3, #170	; 0xaa
 80077da:	58eb      	ldr	r3, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;
 80077dc:	9604      	str	r6, [sp, #16]
    if( MacCtx.MacCallbacks != NULL )
 80077de:	42b3      	cmp	r3, r6
 80077e0:	d004      	beq.n	80077ec <ResetMacParameters+0xe4>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80077e2:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80077e4:	691b      	ldr	r3, [r3, #16]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80077e6:	9203      	str	r2, [sp, #12]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	9304      	str	r3, [sp, #16]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80077ec:	4b16      	ldr	r3, [pc, #88]	; (8007848 <ResetMacParameters+0x140>)
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80077ee:	4a17      	ldr	r2, [pc, #92]	; (800784c <ResetMacParameters+0x144>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80077f0:	9308      	str	r3, [sp, #32]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80077f2:	4b17      	ldr	r3, [pc, #92]	; (8007850 <ResetMacParameters+0x148>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80077f4:	a903      	add	r1, sp, #12
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80077f6:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80077f8:	4b16      	ldr	r3, [pc, #88]	; (8007854 <ResetMacParameters+0x14c>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80077fa:	a808      	add	r0, sp, #32
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80077fc:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80077fe:	4b16      	ldr	r3, [pc, #88]	; (8007858 <ResetMacParameters+0x150>)
 8007800:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8007802:	4b16      	ldr	r3, [pc, #88]	; (800785c <ResetMacParameters+0x154>)
 8007804:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8007806:	4b16      	ldr	r3, [pc, #88]	; (8007860 <ResetMacParameters+0x158>)
 8007808:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800780a:	4b16      	ldr	r3, [pc, #88]	; (8007864 <ResetMacParameters+0x15c>)
 800780c:	930e      	str	r3, [sp, #56]	; 0x38
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800780e:	4b16      	ldr	r3, [pc, #88]	; (8007868 <ResetMacParameters+0x160>)
 8007810:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007812:	f002 fbde 	bl	8009fd2 <LoRaMacClassBInit>
}
 8007816:	b010      	add	sp, #64	; 0x40
 8007818:	bd70      	pop	{r4, r5, r6, pc}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	20000698 	.word	0x20000698
 8007820:	2000096c 	.word	0x2000096c
 8007824:	00010100 	.word	0x00010100
 8007828:	00000414 	.word	0x00000414
 800782c:	20000870 	.word	0x20000870
 8007830:	2000088c 	.word	0x2000088c
 8007834:	00000415 	.word	0x00000415
 8007838:	000003dd 	.word	0x000003dd
 800783c:	000003de 	.word	0x000003de
 8007840:	000003f2 	.word	0x000003f2
 8007844:	00000201 	.word	0x00000201
 8007848:	20000dcc 	.word	0x20000dcc
 800784c:	20000954 	.word	0x20000954
 8007850:	20000d88 	.word	0x20000d88
 8007854:	20000db8 	.word	0x20000db8
 8007858:	20000ded 	.word	0x20000ded
 800785c:	20000764 	.word	0x20000764
 8007860:	200006d8 	.word	0x200006d8
 8007864:	200006dc 	.word	0x200006dc
 8007868:	20000768 	.word	0x20000768

0800786c <ScheduleTx>:
{
 800786c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800786e:	b095      	sub	sp, #84	; 0x54
 8007870:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007872:	f002 fbb9 	bl	8009fe8 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8007876:	270e      	movs	r7, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007878:	2800      	cmp	r0, #0
 800787a:	d118      	bne.n	80078ae <ScheduleTx+0x42>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800787c:	4cbd      	ldr	r4, [pc, #756]	; (8007b74 <ScheduleTx+0x308>)
 800787e:	0023      	movs	r3, r4
 8007880:	33fc      	adds	r3, #252	; 0xfc
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d00d      	beq.n	80078a4 <ScheduleTx+0x38>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007888:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800788a:	4dbb      	ldr	r5, [pc, #748]	; (8007b78 <ScheduleTx+0x30c>)
 800788c:	2b00      	cmp	r3, #0
 800788e:	d016      	beq.n	80078be <ScheduleTx+0x52>
    switch( MacCtx.TxMsg.Type )
 8007890:	002e      	movs	r6, r5
 8007892:	36ff      	adds	r6, #255	; 0xff
 8007894:	7973      	ldrb	r3, [r6, #5]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01b      	beq.n	80078d2 <ScheduleTx+0x66>
 800789a:	2b04      	cmp	r3, #4
 800789c:	d100      	bne.n	80078a0 <ScheduleTx+0x34>
 800789e:	e071      	b.n	8007984 <ScheduleTx+0x118>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80078a0:	2703      	movs	r7, #3
 80078a2:	e004      	b.n	80078ae <ScheduleTx+0x42>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80078a4:	f002 fba2 	bl	8009fec <LoRaMacClassBIsPingExpected>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d003      	beq.n	80078b4 <ScheduleTx+0x48>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80078ac:	270f      	movs	r7, #15
}
 80078ae:	0038      	movs	r0, r7
 80078b0:	b015      	add	sp, #84	; 0x54
 80078b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80078b4:	f002 fb9c 	bl	8009ff0 <LoRaMacClassBIsMulticastExpected>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d0e5      	beq.n	8007888 <ScheduleTx+0x1c>
 80078bc:	e7f6      	b.n	80078ac <ScheduleTx+0x40>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80078be:	0023      	movs	r3, r4
 80078c0:	33fe      	adds	r3, #254	; 0xfe
 80078c2:	889a      	ldrh	r2, [r3, #4]
 80078c4:	2383      	movs	r3, #131	; 0x83
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	58eb      	ldr	r3, [r5, r3]
 80078ca:	3a01      	subs	r2, #1
 80078cc:	4353      	muls	r3, r2
 80078ce:	6323      	str	r3, [r4, #48]	; 0x30
 80078d0:	e7de      	b.n	8007890 <ScheduleTx+0x24>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80078d2:	48aa      	ldr	r0, [pc, #680]	; (8007b7c <ScheduleTx+0x310>)
 80078d4:	f003 f957 	bl	800ab86 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80078d8:	2800      	cmp	r0, #0
 80078da:	d000      	beq.n	80078de <ScheduleTx+0x72>
 80078dc:	e146      	b.n	8007b6c <ScheduleTx+0x300>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80078de:	7b73      	ldrb	r3, [r6, #13]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80078e0:	0027      	movs	r7, r4
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80078e2:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80078e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80078e6:	ae0e      	add	r6, sp, #56	; 0x38
 80078e8:	930e      	str	r3, [sp, #56]	; 0x38
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80078ea:	0023      	movs	r3, r4
 80078ec:	3339      	adds	r3, #57	; 0x39
 80078ee:	781b      	ldrb	r3, [r3, #0]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80078f0:	37ff      	adds	r7, #255	; 0xff
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80078f2:	7233      	strb	r3, [r6, #8]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80078f4:	787b      	ldrb	r3, [r7, #1]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80078f6:	a808      	add	r0, sp, #32
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80078f8:	72b3      	strb	r3, [r6, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80078fa:	f006 f92d 	bl	800db58 <SysTimeGetMcuTime>
 80078fe:	0023      	movs	r3, r4
 8007900:	3309      	adds	r3, #9
 8007902:	33ff      	adds	r3, #255	; 0xff
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	ad04      	add	r5, sp, #16
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2382      	movs	r3, #130	; 0x82
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007910:	0028      	movs	r0, r5
 8007912:	58e3      	ldr	r3, [r4, r3]
 8007914:	9908      	ldr	r1, [sp, #32]
 8007916:	f006 f8b5 	bl	800da84 <SysTimeSub>
 800791a:	ab11      	add	r3, sp, #68	; 0x44
 800791c:	cd06      	ldmia	r5!, {r1, r2}
 800791e:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8007920:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    nextChan.Joined = true;
 8007922:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8007924:	6073      	str	r3, [r6, #4]
    nextChan.LastTxIsJoinRequest = false;
 8007926:	2300      	movs	r3, #0
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007928:	4d93      	ldr	r5, [pc, #588]	; (8007b78 <ScheduleTx+0x30c>)
    nextChan.LastTxIsJoinRequest = false;
 800792a:	7533      	strb	r3, [r6, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800792c:	882b      	ldrh	r3, [r5, #0]
    nextChan.Joined = true;
 800792e:	7272      	strb	r2, [r6, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007930:	82f3      	strh	r3, [r6, #22]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007932:	7c7b      	ldrb	r3, [r7, #17]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <ScheduleTx+0xd0>
        nextChan.LastTxIsJoinRequest = true;
 8007938:	7532      	strb	r2, [r6, #20]
        nextChan.Joined = false;
 800793a:	7273      	strb	r3, [r6, #9]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800793c:	4b90      	ldr	r3, [pc, #576]	; (8007b80 <ScheduleTx+0x314>)
 800793e:	0031      	movs	r1, r6
 8007940:	7818      	ldrb	r0, [r3, #0]
 8007942:	4b90      	ldr	r3, [pc, #576]	; (8007b84 <ScheduleTx+0x318>)
 8007944:	4a90      	ldr	r2, [pc, #576]	; (8007b88 <ScheduleTx+0x31c>)
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	4b90      	ldr	r3, [pc, #576]	; (8007b8c <ScheduleTx+0x320>)
 800794a:	4c8a      	ldr	r4, [pc, #552]	; (8007b74 <ScheduleTx+0x308>)
 800794c:	f003 fa63 	bl	800ae16 <RegionNextChannel>
 8007950:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8007952:	d01b      	beq.n	800798c <ScheduleTx+0x120>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8007954:	280b      	cmp	r0, #11
 8007956:	d1aa      	bne.n	80078ae <ScheduleTx+0x42>
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0a7      	beq.n	80078ae <ScheduleTx+0x42>
            return LORAMAC_STATUS_OK;
 800795e:	2700      	movs	r7, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 8007960:	4b8b      	ldr	r3, [pc, #556]	; (8007b90 <ScheduleTx+0x324>)
 8007962:	58e9      	ldr	r1, [r5, r3]
 8007964:	42b9      	cmp	r1, r7
 8007966:	d0a2      	beq.n	80078ae <ScheduleTx+0x42>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007968:	22d0      	movs	r2, #208	; 0xd0
 800796a:	2320      	movs	r3, #32
 800796c:	0092      	lsls	r2, r2, #2
 800796e:	58a8      	ldr	r0, [r5, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007970:	4c88      	ldr	r4, [pc, #544]	; (8007b94 <ScheduleTx+0x328>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007972:	4303      	orrs	r3, r0
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007974:	0020      	movs	r0, r4
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007976:	50ab      	str	r3, [r5, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007978:	f006 fa54 	bl	800de24 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800797c:	0020      	movs	r0, r4
 800797e:	f006 fa0f 	bl	800dda0 <UTIL_TIMER_Start>
 8007982:	e794      	b.n	80078ae <ScheduleTx+0x42>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8007984:	487d      	ldr	r0, [pc, #500]	; (8007b7c <ScheduleTx+0x310>)
 8007986:	f003 f933 	bl	800abf0 <LoRaMacSerializerData>
 800798a:	e7a5      	b.n	80078d8 <ScheduleTx+0x6c>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800798c:	4b7c      	ldr	r3, [pc, #496]	; (8007b80 <ScheduleTx+0x314>)
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800798e:	0022      	movs	r2, r4
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007990:	781e      	ldrb	r6, [r3, #0]
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007992:	0023      	movs	r3, r4
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007994:	0021      	movs	r1, r4
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007996:	3361      	adds	r3, #97	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007998:	3239      	adds	r2, #57	; 0x39
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	7812      	ldrb	r2, [r2, #0]
 800799e:	3175      	adds	r1, #117	; 0x75
 80079a0:	0030      	movs	r0, r6
 80079a2:	7809      	ldrb	r1, [r1, #0]
 80079a4:	b25b      	sxtb	r3, r3
 80079a6:	b252      	sxtb	r2, r2
 80079a8:	f003 fa4a 	bl	800ae40 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80079ac:	4b7a      	ldr	r3, [pc, #488]	; (8007b98 <ScheduleTx+0x32c>)
 80079ae:	b241      	sxtb	r1, r0
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	4b7a      	ldr	r3, [pc, #488]	; (8007b9c <ScheduleTx+0x330>)
 80079b4:	0030      	movs	r0, r6
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80079ba:	f003 f9c4 	bl	800ad46 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80079be:	2168      	movs	r1, #104	; 0x68
 80079c0:	4b75      	ldr	r3, [pc, #468]	; (8007b98 <ScheduleTx+0x32c>)
 80079c2:	5661      	ldrsb	r1, [r4, r1]
 80079c4:	781a      	ldrb	r2, [r3, #0]
 80079c6:	4b6e      	ldr	r3, [pc, #440]	; (8007b80 <ScheduleTx+0x314>)
 80079c8:	7818      	ldrb	r0, [r3, #0]
 80079ca:	4b75      	ldr	r3, [pc, #468]	; (8007ba0 <ScheduleTx+0x334>)
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80079d0:	f003 f9b9 	bl	800ad46 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80079d4:	23f1      	movs	r3, #241	; 0xf1
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	58ea      	ldr	r2, [r5, r3]
 80079da:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80079dc:	3b14      	subs	r3, #20
 80079de:	1889      	adds	r1, r1, r2
 80079e0:	50e9      	str	r1, [r5, r3]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80079e2:	21f6      	movs	r1, #246	; 0xf6
 80079e4:	20ed      	movs	r0, #237	; 0xed
 80079e6:	0089      	lsls	r1, r1, #2
 80079e8:	586e      	ldr	r6, [r5, r1]
 80079ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80079ec:	0080      	lsls	r0, r0, #2
 80079ee:	1989      	adds	r1, r1, r6
 80079f0:	5029      	str	r1, [r5, r0]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80079f2:	0021      	movs	r1, r4
 80079f4:	31ff      	adds	r1, #255	; 0xff
 80079f6:	7c49      	ldrb	r1, [r1, #17]
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80079f8:	469c      	mov	ip, r3
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80079fa:	2900      	cmp	r1, #0
 80079fc:	d106      	bne.n	8007a0c <ScheduleTx+0x1a0>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80079fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a00:	189a      	adds	r2, r3, r2
 8007a02:	4663      	mov	r3, ip
 8007a04:	50ea      	str	r2, [r5, r3]
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007a06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007a08:	199b      	adds	r3, r3, r6
 8007a0a:	502b      	str	r3, [r5, r0]
    size_t macCmdsSize = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	930a      	str	r3, [sp, #40]	; 0x28
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007a10:	4299      	cmp	r1, r3
 8007a12:	d011      	beq.n	8007a38 <ScheduleTx+0x1cc>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007a14:	a80a      	add	r0, sp, #40	; 0x28
 8007a16:	f002 fbab 	bl	800a170 <LoRaMacCommandsGetSizeSerializedCmds>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d152      	bne.n	8007ac4 <ScheduleTx+0x258>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007a1e:	2039      	movs	r0, #57	; 0x39
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8007a20:	4b60      	ldr	r3, [pc, #384]	; (8007ba4 <ScheduleTx+0x338>)
 8007a22:	5cec      	ldrb	r4, [r5, r3]
 8007a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a26:	b2dd      	uxtb	r5, r3
 8007a28:	4b52      	ldr	r3, [pc, #328]	; (8007b74 <ScheduleTx+0x308>)
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007a2a:	1964      	adds	r4, r4, r5
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007a2c:	5618      	ldrsb	r0, [r3, r0]
 8007a2e:	f7ff fd07 	bl	8007440 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007a32:	b280      	uxth	r0, r0
 8007a34:	42a0      	cmp	r0, r4
 8007a36:	d343      	bcc.n	8007ac0 <ScheduleTx+0x254>
    return SendFrameOnChannel( MacCtx.Channel );
 8007a38:	4c4f      	ldr	r4, [pc, #316]	; (8007b78 <ScheduleTx+0x30c>)
 8007a3a:	4b5b      	ldr	r3, [pc, #364]	; (8007ba8 <ScheduleTx+0x33c>)
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    TxConfigParams_t txConfig;
    int8_t txPower = 0;

    txConfig.Channel = channel;
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007a3c:	4d4d      	ldr	r5, [pc, #308]	; (8007b74 <ScheduleTx+0x308>)
    return SendFrameOnChannel( MacCtx.Channel );
 8007a3e:	5ce3      	ldrb	r3, [r4, r3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007a40:	002e      	movs	r6, r5
    return SendFrameOnChannel( MacCtx.Channel );
 8007a42:	9303      	str	r3, [sp, #12]
    int8_t txPower = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	aa02      	add	r2, sp, #8
 8007a48:	74d3      	strb	r3, [r2, #19]
    txConfig.Channel = channel;
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	a90a      	add	r1, sp, #40	; 0x28
 8007a4e:	700b      	strb	r3, [r1, #0]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007a50:	3639      	adds	r6, #57	; 0x39
 8007a52:	7833      	ldrb	r3, [r6, #0]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
    txConfig.PktLen = MacCtx.PktBufferLen;

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007a54:	2213      	movs	r2, #19
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007a56:	704b      	strb	r3, [r1, #1]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007a58:	002b      	movs	r3, r5
 8007a5a:	3338      	adds	r3, #56	; 0x38
 8007a5c:	781b      	ldrb	r3, [r3, #0]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007a5e:	a802      	add	r0, sp, #8
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007a60:	708b      	strb	r3, [r1, #2]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007a62:	6fab      	ldr	r3, [r5, #120]	; 0x78
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007a64:	1812      	adds	r2, r2, r0
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007a66:	604b      	str	r3, [r1, #4]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007a68:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007a6a:	608b      	str	r3, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8007a6c:	8823      	ldrh	r3, [r4, #0]
 8007a6e:	818b      	strh	r3, [r1, #12]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007a70:	002b      	movs	r3, r5
 8007a72:	3340      	adds	r3, #64	; 0x40
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	469c      	mov	ip, r3
 8007a78:	4b4c      	ldr	r3, [pc, #304]	; (8007bac <ScheduleTx+0x340>)
 8007a7a:	4660      	mov	r0, ip
 8007a7c:	f003 f97a 	bl	800ad74 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a80:	2201      	movs	r2, #1
 8007a82:	4b4b      	ldr	r3, [pc, #300]	; (8007bb0 <ScheduleTx+0x344>)
 8007a84:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007a86:	7832      	ldrb	r2, [r6, #0]
 8007a88:	4b4a      	ldr	r3, [pc, #296]	; (8007bb4 <ScheduleTx+0x348>)
    MacCtx.McpsConfirm.TxPower = txPower;
    MacCtx.McpsConfirm.Channel = channel;

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007a8a:	2683      	movs	r6, #131	; 0x83
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007a8c:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8007a8e:	ab02      	add	r3, sp, #8
 8007a90:	7cda      	ldrb	r2, [r3, #19]
 8007a92:	4b49      	ldr	r3, [pc, #292]	; (8007bb8 <ScheduleTx+0x34c>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007a94:	00f6      	lsls	r6, r6, #3
    MacCtx.McpsConfirm.TxPower = txPower;
 8007a96:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8007a98:	9a03      	ldr	r2, [sp, #12]
 8007a9a:	330d      	adds	r3, #13
 8007a9c:	50e2      	str	r2, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007a9e:	2288      	movs	r2, #136	; 0x88
 8007aa0:	59a3      	ldr	r3, [r4, r6]
 8007aa2:	00d2      	lsls	r2, r2, #3
 8007aa4:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007aa6:	3210      	adds	r2, #16
 8007aa8:	50a3      	str	r3, [r4, r2]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8007aaa:	f002 faa3 	bl	8009ff4 <LoRaMacClassBIsBeaconModeActive>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d00a      	beq.n	8007ac8 <ScheduleTx+0x25c>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8007ab2:	59a0      	ldr	r0, [r4, r6]
 8007ab4:	f002 fab0 	bl	800a018 <LoRaMacClassBIsUplinkCollision>

        if( collisionTime > 0 )
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d005      	beq.n	8007ac8 <ScheduleTx+0x25c>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8007abc:	2710      	movs	r7, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8007abe:	e6f6      	b.n	80078ae <ScheduleTx+0x42>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8007ac0:	2708      	movs	r7, #8
 8007ac2:	e6f4      	b.n	80078ae <ScheduleTx+0x42>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007ac4:	2713      	movs	r7, #19
 8007ac6:	e6f2      	b.n	80078ae <ScheduleTx+0x42>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007ac8:	002b      	movs	r3, r5
 8007aca:	33fc      	adds	r3, #252	; 0xfc
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d101      	bne.n	8007ad6 <ScheduleTx+0x26a>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8007ad2:	f002 faa3 	bl	800a01c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8007ad6:	f002 fa90 	bl	8009ffa <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007ada:	2339      	movs	r3, #57	; 0x39
 8007adc:	56eb      	ldrsb	r3, [r5, r3]
    switch( MacCtx.TxMsg.Type )
 8007ade:	0026      	movs	r6, r4
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007ae0:	9303      	str	r3, [sp, #12]
 8007ae2:	4b31      	ldr	r3, [pc, #196]	; (8007ba8 <ScheduleTx+0x33c>)
    switch( MacCtx.TxMsg.Type )
 8007ae4:	36ff      	adds	r6, #255	; 0xff
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007ae6:	5ce5      	ldrb	r5, [r4, r3]
    uint32_t fCntUp = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 8007aec:	7973      	ldrb	r3, [r6, #5]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d020      	beq.n	8007b34 <ScheduleTx+0x2c8>
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d000      	beq.n	8007af8 <ScheduleTx+0x28c>
 8007af6:	e6d3      	b.n	80078a0 <ScheduleTx+0x34>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007af8:	a807      	add	r0, sp, #28
 8007afa:	f002 fda9 	bl	800a650 <LoRaMacCryptoGetFCntUp>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d136      	bne.n	8007b70 <ScheduleTx+0x304>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8007b02:	2382      	movs	r3, #130	; 0x82
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	5ce3      	ldrb	r3, [r4, r3]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <ScheduleTx+0x2a8>
 8007b0c:	4b2b      	ldr	r3, [pc, #172]	; (8007bbc <ScheduleTx+0x350>)
 8007b0e:	5ce3      	ldrb	r3, [r4, r3]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d902      	bls.n	8007b1a <ScheduleTx+0x2ae>
                fCntUp -= 1;
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8007b1a:	466b      	mov	r3, sp
 8007b1c:	002a      	movs	r2, r5
 8007b1e:	7b19      	ldrb	r1, [r3, #12]
 8007b20:	9807      	ldr	r0, [sp, #28]
 8007b22:	4b16      	ldr	r3, [pc, #88]	; (8007b7c <ScheduleTx+0x310>)
 8007b24:	f002 fe18 	bl	800a758 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d11f      	bne.n	8007b6c <ScheduleTx+0x300>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007b2c:	0023      	movs	r3, r4
 8007b2e:	33ff      	adds	r3, #255	; 0xff
 8007b30:	7b5b      	ldrb	r3, [r3, #13]
 8007b32:	e005      	b.n	8007b40 <ScheduleTx+0x2d4>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007b34:	4811      	ldr	r0, [pc, #68]	; (8007b7c <ScheduleTx+0x310>)
 8007b36:	f002 fde3 	bl	800a700 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d116      	bne.n	8007b6c <ScheduleTx+0x300>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8007b3e:	7b73      	ldrb	r3, [r6, #13]
    if( status != LORAMAC_STATUS_OK )
    {
        return status;
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007b40:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007b42:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007b44:	2302      	movs	r3, #2
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	58a1      	ldr	r1, [r4, r2]
 8007b4a:	430b      	orrs	r3, r1
 8007b4c:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 8007b4e:	4b1c      	ldr	r3, [pc, #112]	; (8007bc0 <ScheduleTx+0x354>)
 8007b50:	5ce3      	ldrb	r3, [r4, r3]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <ScheduleTx+0x2f2>
    {
        MacCtx.ChannelsNbTransCounter++;
 8007b56:	32d0      	adds	r2, #208	; 0xd0
 8007b58:	5ca3      	ldrb	r3, [r4, r2]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	54a3      	strb	r3, [r4, r2]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8007b5e:	4b19      	ldr	r3, [pc, #100]	; (8007bc4 <ScheduleTx+0x358>)
 8007b60:	7821      	ldrb	r1, [r4, #0]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	4818      	ldr	r0, [pc, #96]	; (8007bc8 <ScheduleTx+0x35c>)
 8007b66:	9303      	str	r3, [sp, #12]
 8007b68:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8007b6a:	e6a0      	b.n	80078ae <ScheduleTx+0x42>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8007b6c:	2711      	movs	r7, #17
 8007b6e:	e69e      	b.n	80078ae <ScheduleTx+0x42>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8007b70:	2712      	movs	r7, #18
 8007b72:	e69c      	b.n	80078ae <ScheduleTx+0x42>
 8007b74:	20000698 	.word	0x20000698
 8007b78:	2000096c 	.word	0x2000096c
 8007b7c:	20000a74 	.word	0x20000a74
 8007b80:	200006d8 	.word	0x200006d8
 8007b84:	200006c8 	.word	0x200006c8
 8007b88:	20000d81 	.word	0x20000d81
 8007b8c:	20000df0 	.word	0x20000df0
 8007b90:	00000484 	.word	0x00000484
 8007b94:	20000cd4 	.word	0x20000cd4
 8007b98:	200006e0 	.word	0x200006e0
 8007b9c:	20000d24 	.word	0x20000d24
 8007ba0:	20000d38 	.word	0x20000d38
 8007ba4:	00000237 	.word	0x00000237
 8007ba8:	00000415 	.word	0x00000415
 8007bac:	20000d84 	.word	0x20000d84
 8007bb0:	00000439 	.word	0x00000439
 8007bb4:	0000043a 	.word	0x0000043a
 8007bb8:	0000043b 	.word	0x0000043b
 8007bbc:	00000412 	.word	0x00000412
 8007bc0:	00000414 	.word	0x00000414
 8007bc4:	0800e890 	.word	0x0800e890
 8007bc8:	2000096e 	.word	0x2000096e

08007bcc <OpenContinuousRxCWindow>:
{
 8007bcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <OpenContinuousRxCWindow+0x4c>)
 8007bd0:	4d12      	ldr	r5, [pc, #72]	; (8007c1c <OpenContinuousRxCWindow+0x50>)
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8007bd2:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007bd4:	001a      	movs	r2, r3
 8007bd6:	001e      	movs	r6, r3
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8007bd8:	3170      	adds	r1, #112	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007bda:	7809      	ldrb	r1, [r1, #0]
 8007bdc:	3640      	adds	r6, #64	; 0x40
 8007bde:	3248      	adds	r2, #72	; 0x48
 8007be0:	7812      	ldrb	r2, [r2, #0]
 8007be2:	7830      	ldrb	r0, [r6, #0]
 8007be4:	9500      	str	r5, [sp, #0]
 8007be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be8:	b249      	sxtb	r1, r1
 8007bea:	f003 f8ac 	bl	800ad46 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007bee:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <OpenContinuousRxCWindow+0x54>)
 8007bf0:	4c0c      	ldr	r4, [pc, #48]	; (8007c24 <OpenContinuousRxCWindow+0x58>)
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <OpenContinuousRxCWindow+0x5c>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007bf4:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007bf6:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007bf8:	7830      	ldrb	r0, [r6, #0]
 8007bfa:	4a0c      	ldr	r2, [pc, #48]	; (8007c2c <OpenContinuousRxCWindow+0x60>)
 8007bfc:	f003 f8ae 	bl	800ad5c <RegionRxConfig>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d008      	beq.n	8007c16 <OpenContinuousRxCWindow+0x4a>
        Radio.Rx( 0 ); // Continuous mode
 8007c04:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <OpenContinuousRxCWindow+0x64>)
 8007c06:	2000      	movs	r0, #0
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	9303      	str	r3, [sp, #12]
 8007c0c:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8007c0e:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <OpenContinuousRxCWindow+0x68>)
 8007c10:	5ce2      	ldrb	r2, [r4, r3]
 8007c12:	338d      	adds	r3, #141	; 0x8d
 8007c14:	54e2      	strb	r2, [r4, r3]
}
 8007c16:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8007c18:	20000698 	.word	0x20000698
 8007c1c:	20000d4c 	.word	0x20000d4c
 8007c20:	00000201 	.word	0x00000201
 8007c24:	2000096c 	.word	0x2000096c
 8007c28:	000003f2 	.word	0x000003f2
 8007c2c:	20000d8c 	.word	0x20000d8c
 8007c30:	0800e890 	.word	0x0800e890
 8007c34:	000003f3 	.word	0x000003f3

08007c38 <SwitchClass>:
    switch( Nvm.MacGroup2.DeviceClass )
 8007c38:	4b34      	ldr	r3, [pc, #208]	; (8007d0c <SwitchClass+0xd4>)
{
 8007c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 8007c3c:	001e      	movs	r6, r3
 8007c3e:	36fc      	adds	r6, #252	; 0xfc
 8007c40:	7834      	ldrb	r4, [r6, #0]
{
 8007c42:	0005      	movs	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8007c44:	469c      	mov	ip, r3
 8007c46:	2c01      	cmp	r4, #1
 8007c48:	d04e      	beq.n	8007ce8 <SwitchClass+0xb0>
 8007c4a:	2c02      	cmp	r4, #2
 8007c4c:	d053      	beq.n	8007cf6 <SwitchClass+0xbe>
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	d10d      	bne.n	8007c6e <SwitchClass+0x36>
            if( deviceClass == CLASS_A )
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d107      	bne.n	8007c66 <SwitchClass+0x2e>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8007c56:	001a      	movs	r2, r3
 8007c58:	3364      	adds	r3, #100	; 0x64
 8007c5a:	326c      	adds	r2, #108	; 0x6c
 8007c5c:	cb03      	ldmia	r3!, {r0, r1}
 8007c5e:	c203      	stmia	r2!, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007c60:	3403      	adds	r4, #3
}
 8007c62:	0020      	movs	r0, r4
 8007c64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 8007c66:	2801      	cmp	r0, #1
 8007c68:	d03e      	beq.n	8007ce8 <SwitchClass+0xb0>
            if( deviceClass == CLASS_C )
 8007c6a:	2802      	cmp	r0, #2
 8007c6c:	d001      	beq.n	8007c72 <SwitchClass+0x3a>
    switch( Nvm.MacGroup2.DeviceClass )
 8007c6e:	2403      	movs	r4, #3
 8007c70:	e7f7      	b.n	8007c62 <SwitchClass+0x2a>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007c72:	22f8      	movs	r2, #248	; 0xf8
 8007c74:	21f3      	movs	r1, #243	; 0xf3
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007c76:	7030      	strb	r0, [r6, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007c78:	4825      	ldr	r0, [pc, #148]	; (8007d10 <SwitchClass+0xd8>)
 8007c7a:	0092      	lsls	r2, r2, #2
 8007c7c:	0089      	lsls	r1, r1, #2
 8007c7e:	1882      	adds	r2, r0, r2
 8007c80:	1841      	adds	r1, r0, r1
 8007c82:	c9c8      	ldmia	r1!, {r3, r6, r7}
 8007c84:	c2c8      	stmia	r2!, {r3, r6, r7}
 8007c86:	c948      	ldmia	r1!, {r3, r6}
 8007c88:	c248      	stmia	r2!, {r3, r6}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007c8a:	4a22      	ldr	r2, [pc, #136]	; (8007d14 <SwitchClass+0xdc>)
 8007c8c:	5485      	strb	r5, [r0, r2]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8007c8e:	4662      	mov	r2, ip
 8007c90:	32d2      	adds	r2, #210	; 0xd2
 8007c92:	7812      	ldrb	r2, [r2, #0]
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d01d      	beq.n	8007cd4 <SwitchClass+0x9c>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007c98:	4662      	mov	r2, ip
 8007c9a:	4663      	mov	r3, ip
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007c9c:	4665      	mov	r5, ip
 8007c9e:	4661      	mov	r1, ip
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007ca0:	32e8      	adds	r2, #232	; 0xe8
 8007ca2:	6812      	ldr	r2, [r2, #0]
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007ca4:	35ec      	adds	r5, #236	; 0xec
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007ca6:	66da      	str	r2, [r3, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007ca8:	782d      	ldrb	r5, [r5, #0]
 8007caa:	3170      	adds	r1, #112	; 0x70
 8007cac:	700d      	strb	r5, [r1, #0]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007cae:	491a      	ldr	r1, [pc, #104]	; (8007d18 <SwitchClass+0xe0>)
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007cb0:	3380      	adds	r3, #128	; 0x80
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007cb2:	5c45      	ldrb	r5, [r0, r1]
 8007cb4:	3935      	subs	r1, #53	; 0x35
 8007cb6:	5445      	strb	r5, [r0, r1]
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007cb8:	3104      	adds	r1, #4
 8007cba:	5042      	str	r2, [r0, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007cbc:	4662      	mov	r2, ip
 8007cbe:	3275      	adds	r2, #117	; 0x75
 8007cc0:	7811      	ldrb	r1, [r2, #0]
 8007cc2:	22fc      	movs	r2, #252	; 0xfc
 8007cc4:	0092      	lsls	r2, r2, #2
 8007cc6:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007cc8:	781a      	ldrb	r2, [r3, #0]
 8007cca:	4b14      	ldr	r3, [pc, #80]	; (8007d1c <SwitchClass+0xe4>)
 8007ccc:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007cce:	4b14      	ldr	r3, [pc, #80]	; (8007d20 <SwitchClass+0xe8>)
 8007cd0:	4a14      	ldr	r2, [pc, #80]	; (8007d24 <SwitchClass+0xec>)
 8007cd2:	52c2      	strh	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <SwitchClass+0xf0>)
 8007cd8:	54c2      	strb	r2, [r0, r3]
                Radio.Sleep( );
 8007cda:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <SwitchClass+0xf4>)
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8007ce2:	f7ff ff73 	bl	8007bcc <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8007ce6:	e7bc      	b.n	8007c62 <SwitchClass+0x2a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8007ce8:	0028      	movs	r0, r5
 8007cea:	f002 f988 	bl	8009ffe <LoRaMacClassBSwitchClass>
 8007cee:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 8007cf0:	d1b7      	bne.n	8007c62 <SwitchClass+0x2a>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007cf2:	7035      	strb	r5, [r6, #0]
 8007cf4:	e7b5      	b.n	8007c62 <SwitchClass+0x2a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007cf6:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d1b2      	bne.n	8007c62 <SwitchClass+0x2a>
                Radio.Sleep( );
 8007cfc:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <SwitchClass+0xf4>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007cfe:	7030      	strb	r0, [r6, #0]
                Radio.Sleep( );
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                status = LORAMAC_STATUS_OK;
 8007d02:	002c      	movs	r4, r5
                Radio.Sleep( );
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8007d08:	e7ab      	b.n	8007c62 <SwitchClass+0x2a>
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	20000698 	.word	0x20000698
 8007d10:	2000096c 	.word	0x2000096c
 8007d14:	000003f3 	.word	0x000003f3
 8007d18:	00000415 	.word	0x00000415
 8007d1c:	000003f1 	.word	0x000003f1
 8007d20:	000003f2 	.word	0x000003f2
 8007d24:	00000301 	.word	0x00000301
 8007d28:	00000414 	.word	0x00000414
 8007d2c:	0800e890 	.word	0x0800e890

08007d30 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8007d30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d32:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8007d34:	f005 ffe0 	bl	800dcf8 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8007d38:	4e0b      	ldr	r6, [pc, #44]	; (8007d68 <RxWindowSetup.constprop.0+0x38>)
 8007d3a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007d40:	4d0a      	ldr	r5, [pc, #40]	; (8007d6c <RxWindowSetup.constprop.0+0x3c>)
 8007d42:	0021      	movs	r1, r4
 8007d44:	002b      	movs	r3, r5
 8007d46:	3340      	adds	r3, #64	; 0x40
 8007d48:	7818      	ldrb	r0, [r3, #0]
 8007d4a:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <RxWindowSetup.constprop.0+0x40>)
 8007d4c:	f003 f806 	bl	800ad5c <RegionRxConfig>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d008      	beq.n	8007d66 <RxWindowSetup.constprop.0+0x36>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8007d54:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8007d56:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8007d5c:	2390      	movs	r3, #144	; 0x90
 8007d5e:	7ce1      	ldrb	r1, [r4, #19]
 8007d60:	4a04      	ldr	r2, [pc, #16]	; (8007d74 <RxWindowSetup.constprop.0+0x44>)
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	54d1      	strb	r1, [r2, r3]
}
 8007d66:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8007d68:	0800e890 	.word	0x0800e890
 8007d6c:	20000698 	.word	0x20000698
 8007d70:	20000d8c 	.word	0x20000d8c
 8007d74:	2000096c 	.word	0x2000096c

08007d78 <OnRxWindow1TimerEvent>:
{
 8007d78:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <OnRxWindow1TimerEvent+0x3c>)
 8007d7c:	4a0e      	ldr	r2, [pc, #56]	; (8007db8 <OnRxWindow1TimerEvent+0x40>)
 8007d7e:	5c99      	ldrb	r1, [r3, r2]
 8007d80:	3a5d      	subs	r2, #93	; 0x5d
 8007d82:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8007d84:	4a0d      	ldr	r2, [pc, #52]	; (8007dbc <OnRxWindow1TimerEvent+0x44>)
 8007d86:	0011      	movs	r1, r2
 8007d88:	3161      	adds	r1, #97	; 0x61
 8007d8a:	7808      	ldrb	r0, [r1, #0]
 8007d8c:	490c      	ldr	r1, [pc, #48]	; (8007dc0 <OnRxWindow1TimerEvent+0x48>)
 8007d8e:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007d90:	0011      	movs	r1, r2
 8007d92:	3175      	adds	r1, #117	; 0x75
 8007d94:	7808      	ldrb	r0, [r1, #0]
 8007d96:	21f2      	movs	r1, #242	; 0xf2
 8007d98:	0089      	lsls	r1, r1, #2
 8007d9a:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007d9c:	3280      	adds	r2, #128	; 0x80
 8007d9e:	7811      	ldrb	r1, [r2, #0]
 8007da0:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <OnRxWindow1TimerEvent+0x4c>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8007da2:	4809      	ldr	r0, [pc, #36]	; (8007dc8 <OnRxWindow1TimerEvent+0x50>)
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007da4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8007da6:	2100      	movs	r1, #0
 8007da8:	4a08      	ldr	r2, [pc, #32]	; (8007dcc <OnRxWindow1TimerEvent+0x54>)
 8007daa:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8007dac:	4908      	ldr	r1, [pc, #32]	; (8007dd0 <OnRxWindow1TimerEvent+0x58>)
 8007dae:	f7ff ffbf 	bl	8007d30 <RxWindowSetup.constprop.0>
}
 8007db2:	bd10      	pop	{r4, pc}
 8007db4:	2000096c 	.word	0x2000096c
 8007db8:	00000415 	.word	0x00000415
 8007dbc:	20000698 	.word	0x20000698
 8007dc0:	000003bb 	.word	0x000003bb
 8007dc4:	000003c9 	.word	0x000003c9
 8007dc8:	20000cec 	.word	0x20000cec
 8007dcc:	000003ca 	.word	0x000003ca
 8007dd0:	20000d24 	.word	0x20000d24

08007dd4 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007dd4:	2290      	movs	r2, #144	; 0x90
{
 8007dd6:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007dd8:	4b10      	ldr	r3, [pc, #64]	; (8007e1c <OnRxWindow2TimerEvent+0x48>)
 8007dda:	00d2      	lsls	r2, r2, #3
 8007ddc:	5c9a      	ldrb	r2, [r3, r2]
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	d01a      	beq.n	8007e18 <OnRxWindow2TimerEvent+0x44>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007de2:	4a0f      	ldr	r2, [pc, #60]	; (8007e20 <OnRxWindow2TimerEvent+0x4c>)
 8007de4:	5c99      	ldrb	r1, [r3, r2]
 8007de6:	3a49      	subs	r2, #73	; 0x49
 8007de8:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007dea:	21f4      	movs	r1, #244	; 0xf4
 8007dec:	4a0d      	ldr	r2, [pc, #52]	; (8007e24 <OnRxWindow2TimerEvent+0x50>)
 8007dee:	0089      	lsls	r1, r1, #2
 8007df0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8007df2:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007df4:	0011      	movs	r1, r2
 8007df6:	3175      	adds	r1, #117	; 0x75
 8007df8:	7808      	ldrb	r0, [r1, #0]
 8007dfa:	21f7      	movs	r1, #247	; 0xf7
 8007dfc:	0089      	lsls	r1, r1, #2
 8007dfe:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007e00:	3280      	adds	r2, #128	; 0x80
 8007e02:	7811      	ldrb	r1, [r2, #0]
 8007e04:	4a08      	ldr	r2, [pc, #32]	; (8007e28 <OnRxWindow2TimerEvent+0x54>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8007e06:	4809      	ldr	r0, [pc, #36]	; (8007e2c <OnRxWindow2TimerEvent+0x58>)
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007e08:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007e0a:	2180      	movs	r1, #128	; 0x80
 8007e0c:	4a08      	ldr	r2, [pc, #32]	; (8007e30 <OnRxWindow2TimerEvent+0x5c>)
 8007e0e:	0049      	lsls	r1, r1, #1
 8007e10:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8007e12:	4908      	ldr	r1, [pc, #32]	; (8007e34 <OnRxWindow2TimerEvent+0x60>)
 8007e14:	f7ff ff8c 	bl	8007d30 <RxWindowSetup.constprop.0>
}
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	2000096c 	.word	0x2000096c
 8007e20:	00000415 	.word	0x00000415
 8007e24:	20000698 	.word	0x20000698
 8007e28:	000003dd 	.word	0x000003dd
 8007e2c:	20000d04 	.word	0x20000d04
 8007e30:	000003de 	.word	0x000003de
 8007e34:	20000d38 	.word	0x20000d38

08007e38 <ProcessMacCommands.constprop.0>:
    uint8_t status = 0;
 8007e38:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3c:	b093      	sub	sp, #76	; 0x4c
 8007e3e:	9205      	str	r2, [sp, #20]
    uint8_t status = 0;
 8007e40:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007e42:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 8007e44:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007e46:	9103      	str	r1, [sp, #12]
    uint8_t status = 0;
 8007e48:	a904      	add	r1, sp, #16
 8007e4a:	1852      	adds	r2, r2, r1
 8007e4c:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007e4e:	aa08      	add	r2, sp, #32
 8007e50:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 8007e52:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	429c      	cmp	r4, r3
 8007e58:	d301      	bcc.n	8007e5e <ProcessMacCommands.constprop.0+0x26>
}
 8007e5a:	b013      	add	sp, #76	; 0x4c
 8007e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8007e5e:	5d38      	ldrb	r0, [r7, r4]
 8007e60:	f002 f9da 	bl	800a218 <LoRaMacCommandsGetCmdSize>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	1900      	adds	r0, r0, r4
 8007e68:	193e      	adds	r6, r7, r4
 8007e6a:	4298      	cmp	r0, r3
 8007e6c:	dcf5      	bgt.n	8007e5a <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
 8007e6e:	7830      	ldrb	r0, [r6, #0]
 8007e70:	1c65      	adds	r5, r4, #1
 8007e72:	3802      	subs	r0, #2
 8007e74:	b2ed      	uxtb	r5, r5
 8007e76:	2811      	cmp	r0, #17
 8007e78:	d8ef      	bhi.n	8007e5a <ProcessMacCommands.constprop.0+0x22>
 8007e7a:	f7f8 f961 	bl	8000140 <__gnu_thumb1_case_shi>
 8007e7e:	0012      	.short	0x0012
 8007e80:	00880028 	.word	0x00880028
 8007e84:	00e0009c 	.word	0x00e0009c
 8007e88:	012900f8 	.word	0x012900f8
 8007e8c:	01950148 	.word	0x01950148
 8007e90:	ffeeffee 	.word	0xffeeffee
 8007e94:	ffee01d1 	.word	0xffee01d1
 8007e98:	0220ffee 	.word	0x0220ffee
 8007e9c:	02500235 	.word	0x02500235
 8007ea0:	026a      	.short	0x026a
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8007ea2:	2004      	movs	r0, #4
 8007ea4:	f002 fa6c 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d00e      	beq.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8007eac:	2104      	movs	r1, #4
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f002 fa22 	bl	800a2f8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007eb4:	5d79      	ldrb	r1, [r7, r5]
 8007eb6:	4bd1      	ldr	r3, [pc, #836]	; (80081fc <ProcessMacCommands.constprop.0+0x3c4>)
 8007eb8:	4ad1      	ldr	r2, [pc, #836]	; (8008200 <ProcessMacCommands.constprop.0+0x3c8>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007eba:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007ebc:	3402      	adds	r4, #2
 8007ebe:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007ec0:	b2e4      	uxtb	r4, r4
 8007ec2:	5d39      	ldrb	r1, [r7, r4]
 8007ec4:	4acf      	ldr	r2, [pc, #828]	; (8008204 <ProcessMacCommands.constprop.0+0x3cc>)
 8007ec6:	b2ed      	uxtb	r5, r5
 8007ec8:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8007eca:	002c      	movs	r4, r5
 8007ecc:	e7c2      	b.n	8007e54 <ProcessMacCommands.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	aa04      	add	r2, sp, #16
 8007ed2:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8007ed4:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8007ed6:	ae09      	add	r6, sp, #36	; 0x24
                uint8_t linkAdrNbBytesParsed = 0;
 8007ed8:	aa0a      	add	r2, sp, #40	; 0x28
                uint8_t linkAdrNbRep = 0;
 8007eda:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8007edc:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8007ede:	9b02      	ldr	r3, [sp, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d151      	bne.n	8007f88 <ProcessMacCommands.constprop.0+0x150>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8007ee4:	9b03      	ldr	r3, [sp, #12]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007ee6:	a90e      	add	r1, sp, #56	; 0x38
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8007ee8:	1b1b      	subs	r3, r3, r4
 8007eea:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007eec:	4bc6      	ldr	r3, [pc, #792]	; (8008208 <ProcessMacCommands.constprop.0+0x3d0>)
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007eee:	3d01      	subs	r5, #1
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007ef0:	0018      	movs	r0, r3
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007ef2:	197d      	adds	r5, r7, r5
 8007ef4:	604d      	str	r5, [r1, #4]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007ef6:	30fe      	adds	r0, #254	; 0xfe
 8007ef8:	7800      	ldrb	r0, [r0, #0]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007efa:	001d      	movs	r5, r3
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007efc:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007efe:	0018      	movs	r0, r3
 8007f00:	3074      	adds	r0, #116	; 0x74
 8007f02:	7800      	ldrb	r0, [r0, #0]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007f04:	3560      	adds	r5, #96	; 0x60
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007f06:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007f08:	48c0      	ldr	r0, [pc, #768]	; (800820c <ProcessMacCommands.constprop.0+0x3d4>)
 8007f0a:	7800      	ldrb	r0, [r0, #0]
 8007f0c:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007f0e:	48c0      	ldr	r0, [pc, #768]	; (8008210 <ProcessMacCommands.constprop.0+0x3d8>)
 8007f10:	7800      	ldrb	r0, [r0, #0]
 8007f12:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007f14:	7828      	ldrb	r0, [r5, #0]
 8007f16:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8007f18:	0018      	movs	r0, r3
 8007f1a:	30fc      	adds	r0, #252	; 0xfc
 8007f1c:	6900      	ldr	r0, [r0, #16]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8007f1e:	3340      	adds	r3, #64	; 0x40
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8007f20:	900e      	str	r0, [sp, #56]	; 0x38
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	9201      	str	r2, [sp, #4]
 8007f26:	469c      	mov	ip, r3
 8007f28:	230f      	movs	r3, #15
 8007f2a:	aa04      	add	r2, sp, #16
 8007f2c:	189b      	adds	r3, r3, r2
 8007f2e:	220e      	movs	r2, #14
 8007f30:	a804      	add	r0, sp, #16
 8007f32:	1812      	adds	r2, r2, r0
 8007f34:	9600      	str	r6, [sp, #0]
 8007f36:	4660      	mov	r0, ip
 8007f38:	f002 ff29 	bl	800ad8e <RegionLinkAdrReq>
 8007f3c:	ab04      	add	r3, sp, #16
 8007f3e:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8007f40:	43c0      	mvns	r0, r0
 8007f42:	0743      	lsls	r3, r0, #29
 8007f44:	d109      	bne.n	8007f5a <ProcessMacCommands.constprop.0+0x122>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8007f46:	ab04      	add	r3, sp, #16
 8007f48:	7b9b      	ldrb	r3, [r3, #14]
 8007f4a:	4ab0      	ldr	r2, [pc, #704]	; (800820c <ProcessMacCommands.constprop.0+0x3d4>)
 8007f4c:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8007f4e:	ab04      	add	r3, sp, #16
 8007f50:	7bdb      	ldrb	r3, [r3, #15]
 8007f52:	4aaf      	ldr	r2, [pc, #700]	; (8008210 <ProcessMacCommands.constprop.0+0x3d8>)
 8007f54:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8007f56:	7833      	ldrb	r3, [r6, #0]
 8007f58:	702b      	strb	r3, [r5, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	e009      	b.n	8007f72 <ProcessMacCommands.constprop.0+0x13a>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8007f5e:	230d      	movs	r3, #13
 8007f60:	a904      	add	r1, sp, #16
 8007f62:	185b      	adds	r3, r3, r1
 8007f64:	2201      	movs	r2, #1
 8007f66:	0019      	movs	r1, r3
 8007f68:	2003      	movs	r0, #3
 8007f6a:	f002 f867 	bl	800a03c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8007f6e:	3601      	adds	r6, #1
 8007f70:	b2f6      	uxtb	r6, r6
 8007f72:	ab0a      	add	r3, sp, #40	; 0x28
 8007f74:	781d      	ldrb	r5, [r3, #0]
 8007f76:	2105      	movs	r1, #5
 8007f78:	0028      	movs	r0, r5
 8007f7a:	f7f8 f8f5 	bl	8000168 <__udivsi3>
 8007f7e:	b2c0      	uxtb	r0, r0
 8007f80:	4286      	cmp	r6, r0
 8007f82:	d3ec      	bcc.n	8007f5e <ProcessMacCommands.constprop.0+0x126>
                    macIndex += linkAdrNbBytesParsed - 1;
 8007f84:	1965      	adds	r5, r4, r5
 8007f86:	b2ed      	uxtb	r5, r5
                break;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	9302      	str	r3, [sp, #8]
 8007f8c:	e79d      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8007f8e:	230f      	movs	r3, #15
 8007f90:	5d7a      	ldrb	r2, [r7, r5]
 8007f92:	3402      	adds	r4, #2
 8007f94:	401a      	ands	r2, r3
 8007f96:	4b9c      	ldr	r3, [pc, #624]	; (8008208 <ProcessMacCommands.constprop.0+0x3d0>)
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007f98:	2004      	movs	r0, #4
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8007f9a:	0019      	movs	r1, r3
 8007f9c:	31ff      	adds	r1, #255	; 0xff
 8007f9e:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	4091      	lsls	r1, r2
 8007fa4:	33fe      	adds	r3, #254	; 0xfe
 8007fa6:	8099      	strh	r1, [r3, #4]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007fa8:	2200      	movs	r2, #0
 8007faa:	a908      	add	r1, sp, #32
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8007fac:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007fae:	f002 f845 	bl	800a03c <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007fb2:	0025      	movs	r5, r4
}
 8007fb4:	e789      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                status = 0x07;
 8007fb6:	2107      	movs	r1, #7
 8007fb8:	ab04      	add	r3, sp, #16
 8007fba:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8007fbc:	5d7b      	ldrb	r3, [r7, r5]
 8007fbe:	ae0e      	add	r6, sp, #56	; 0x38
 8007fc0:	091a      	lsrs	r2, r3, #4
 8007fc2:	400a      	ands	r2, r1
 8007fc4:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8007fc6:	220f      	movs	r2, #15
 8007fc8:	4013      	ands	r3, r2
 8007fca:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007fcc:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007fce:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007fd0:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007fd2:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007fd4:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007fd6:	5cba      	ldrb	r2, [r7, r2]
 8007fd8:	1d65      	adds	r5, r4, #5
                macIndex++;
 8007fda:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007fdc:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007fde:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007fe0:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007fe2:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007fe4:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8007fe6:	4c88      	ldr	r4, [pc, #544]	; (8008208 <ProcessMacCommands.constprop.0+0x3d0>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007fe8:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8007fea:	2264      	movs	r2, #100	; 0x64
 8007fec:	4353      	muls	r3, r2
 8007fee:	930f      	str	r3, [sp, #60]	; 0x3c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8007ff0:	0023      	movs	r3, r4
 8007ff2:	3340      	adds	r3, #64	; 0x40
 8007ff4:	7818      	ldrb	r0, [r3, #0]
 8007ff6:	0031      	movs	r1, r6
 8007ff8:	f002 fed9 	bl	800adae <RegionRxParamSetupReq>
 8007ffc:	ab04      	add	r3, sp, #16
 8007ffe:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8008000:	2307      	movs	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008002:	b2ed      	uxtb	r5, r5
                if( ( status & 0x07 ) == 0x07 )
 8008004:	4003      	ands	r3, r0
 8008006:	2b07      	cmp	r3, #7
 8008008:	d10c      	bne.n	8008024 <ProcessMacCommands.constprop.0+0x1ec>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800800a:	0022      	movs	r2, r4
 800800c:	7833      	ldrb	r3, [r6, #0]
 800800e:	3268      	adds	r2, #104	; 0x68
 8008010:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008012:	0022      	movs	r2, r4
 8008014:	3270      	adds	r2, #112	; 0x70
 8008016:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800801a:	6663      	str	r3, [r4, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800801c:	66e3      	str	r3, [r4, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800801e:	7873      	ldrb	r3, [r6, #1]
 8008020:	3461      	adds	r4, #97	; 0x61
 8008022:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8008024:	a908      	add	r1, sp, #32
 8008026:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008028:	2201      	movs	r2, #1
 800802a:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800802c:	f002 f806 	bl	800a03c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008030:	2310      	movs	r3, #16
 8008032:	4972      	ldr	r1, [pc, #456]	; (80081fc <ProcessMacCommands.constprop.0+0x3c4>)
 8008034:	4a77      	ldr	r2, [pc, #476]	; (8008214 <ProcessMacCommands.constprop.0+0x3dc>)
 8008036:	5c88      	ldrb	r0, [r1, r2]
 8008038:	4303      	orrs	r3, r0
 800803a:	548b      	strb	r3, [r1, r2]
}
 800803c:	e745      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800803e:	23d2      	movs	r3, #210	; 0xd2
 8008040:	4a6e      	ldr	r2, [pc, #440]	; (80081fc <ProcessMacCommands.constprop.0+0x3c4>)
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008046:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <ProcessMacCommands.constprop.0+0x21c>
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d000      	beq.n	8008054 <ProcessMacCommands.constprop.0+0x21c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008052:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008054:	ab04      	add	r3, sp, #16
 8008056:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008058:	233f      	movs	r3, #63	; 0x3f
 800805a:	9a05      	ldr	r2, [sp, #20]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800805c:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800805e:	4013      	ands	r3, r2
 8008060:	aa04      	add	r2, sp, #16
 8008062:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008064:	2202      	movs	r2, #2
 8008066:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008068:	f001 ffe8 	bl	800a03c <LoRaMacCommandsAddCmd>
                break;
 800806c:	e72d      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                status = 0x03;
 800806e:	260d      	movs	r6, #13
 8008070:	ab04      	add	r3, sp, #16
 8008072:	18f6      	adds	r6, r6, r3
 8008074:	2303      	movs	r3, #3
 8008076:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8008078:	5d7b      	ldrb	r3, [r7, r5]
 800807a:	a90a      	add	r1, sp, #40	; 0x28
 800807c:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800807e:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008080:	b2db      	uxtb	r3, r3
 8008082:	5cfd      	ldrb	r5, [r7, r3]
 8008084:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008086:	b2db      	uxtb	r3, r3
 8008088:	5cfb      	ldrb	r3, [r7, r3]
                newChannelReq.ChannelId = payload[macIndex++];
 800808a:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800808c:	b2c0      	uxtb	r0, r0
 800808e:	5c38      	ldrb	r0, [r7, r0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008090:	022d      	lsls	r5, r5, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008092:	041b      	lsls	r3, r3, #16
 8008094:	432b      	orrs	r3, r5
 8008096:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 8008098:	2064      	movs	r0, #100	; 0x64
 800809a:	4343      	muls	r3, r0
 800809c:	930e      	str	r3, [sp, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800809e:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
 80080a0:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080a2:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 80080a4:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 80080a6:	930f      	str	r3, [sp, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80080a8:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 80080aa:	aa0e      	add	r2, sp, #56	; 0x38
                chParam.DrRange.Value = payload[macIndex++];
 80080ac:	7213      	strb	r3, [r2, #8]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80080ae:	4b56      	ldr	r3, [pc, #344]	; (8008208 <ProcessMacCommands.constprop.0+0x3d0>)
                newChannelReq.NewChannel = &chParam;
 80080b0:	920a      	str	r2, [sp, #40]	; 0x28
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80080b2:	3340      	adds	r3, #64	; 0x40
 80080b4:	7818      	ldrb	r0, [r3, #0]
 80080b6:	f002 fe84 	bl	800adc2 <RegionNewChannelReq>
 80080ba:	b2c3      	uxtb	r3, r0
                chParam.DrRange.Value = payload[macIndex++];
 80080bc:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80080be:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 80080c0:	2800      	cmp	r0, #0
 80080c2:	da00      	bge.n	80080c6 <ProcessMacCommands.constprop.0+0x28e>
 80080c4:	e701      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 80080c6:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80080c8:	2201      	movs	r2, #1
 80080ca:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 80080cc:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80080ce:	e7cb      	b.n	8008068 <ProcessMacCommands.constprop.0+0x230>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80080d0:	230f      	movs	r3, #15
 80080d2:	5d7a      	ldrb	r2, [r7, r5]
 80080d4:	3402      	adds	r4, #2
 80080d6:	401a      	ands	r2, r3
 80080d8:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80080da:	1c13      	adds	r3, r2, #0
 80080dc:	2a00      	cmp	r2, #0
 80080de:	d100      	bne.n	80080e2 <ProcessMacCommands.constprop.0+0x2aa>
 80080e0:	2301      	movs	r3, #1
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	23fa      	movs	r3, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80080e6:	21fa      	movs	r1, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4353      	muls	r3, r2
 80080ec:	4a46      	ldr	r2, [pc, #280]	; (8008208 <ProcessMacCommands.constprop.0+0x3d0>)
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80080ee:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80080f0:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80080f2:	185b      	adds	r3, r3, r1
 80080f4:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80080f6:	a908      	add	r1, sp, #32
 80080f8:	2200      	movs	r2, #0
 80080fa:	2008      	movs	r0, #8
 80080fc:	f001 ff9e 	bl	800a03c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008100:	2310      	movs	r3, #16
 8008102:	493e      	ldr	r1, [pc, #248]	; (80081fc <ProcessMacCommands.constprop.0+0x3c4>)
 8008104:	4a43      	ldr	r2, [pc, #268]	; (8008214 <ProcessMacCommands.constprop.0+0x3dc>)
 8008106:	5c88      	ldrb	r0, [r1, r2]
 8008108:	4303      	orrs	r3, r0
 800810a:	548b      	strb	r3, [r1, r2]
 800810c:	e751      	b.n	8007fb2 <ProcessMacCommands.constprop.0+0x17a>
                uint8_t eirpDwellTime = payload[macIndex++];
 800810e:	3402      	adds	r4, #2
 8008110:	b2e3      	uxtb	r3, r4
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 8008116:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008118:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 800811a:	ad09      	add	r5, sp, #36	; 0x24
 800811c:	702a      	strb	r2, [r5, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800811e:	3220      	adds	r2, #32
 8008120:	4011      	ands	r1, r2
 8008122:	4213      	tst	r3, r2
 8008124:	d13d      	bne.n	80081a2 <ProcessMacCommands.constprop.0+0x36a>
                txParamSetupReq.DownlinkDwellTime = 0;
 8008126:	7069      	strb	r1, [r5, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008128:	06da      	lsls	r2, r3, #27
 800812a:	d501      	bpl.n	8008130 <ProcessMacCommands.constprop.0+0x2f8>
                    txParamSetupReq.UplinkDwellTime = 1;
 800812c:	2201      	movs	r2, #1
 800812e:	702a      	strb	r2, [r5, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008130:	220f      	movs	r2, #15
 8008132:	4013      	ands	r3, r2
 8008134:	70ab      	strb	r3, [r5, #2]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008136:	4b38      	ldr	r3, [pc, #224]	; (8008218 <ProcessMacCommands.constprop.0+0x3e0>)
 8008138:	0029      	movs	r1, r5
 800813a:	7818      	ldrb	r0, [r3, #0]
 800813c:	4c32      	ldr	r4, [pc, #200]	; (8008208 <ProcessMacCommands.constprop.0+0x3d0>)
 800813e:	f002 fe4a 	bl	800add6 <RegionTxParamSetupReq>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d02b      	beq.n	800819e <ProcessMacCommands.constprop.0+0x366>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8008146:	0023      	movs	r3, r4
 8008148:	782e      	ldrb	r6, [r5, #0]
 800814a:	3374      	adds	r3, #116	; 0x74
 800814c:	701e      	strb	r6, [r3, #0]
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800814e:	0023      	movs	r3, r4
 8008150:	786a      	ldrb	r2, [r5, #1]
 8008152:	3375      	adds	r3, #117	; 0x75
 8008154:	701a      	strb	r2, [r3, #0]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008156:	78ab      	ldrb	r3, [r5, #2]
 8008158:	4a30      	ldr	r2, [pc, #192]	; (800821c <ProcessMacCommands.constprop.0+0x3e4>)
 800815a:	5cd0      	ldrb	r0, [r2, r3]
 800815c:	f7f8 fdb8 	bl	8000cd0 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008160:	2128      	movs	r1, #40	; 0x28
 8008162:	2302      	movs	r3, #2
 8008164:	aa04      	add	r2, sp, #16
 8008166:	1852      	adds	r2, r2, r1
 8008168:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800816a:	222a      	movs	r2, #42	; 0x2a
 800816c:	ab04      	add	r3, sp, #16
 800816e:	189b      	adds	r3, r3, r2
 8008170:	701e      	strb	r6, [r3, #0]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008172:	4b29      	ldr	r3, [pc, #164]	; (8008218 <ProcessMacCommands.constprop.0+0x3e0>)
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008174:	67a0      	str	r0, [r4, #120]	; 0x78
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008176:	7818      	ldrb	r0, [r3, #0]
 8008178:	a90e      	add	r1, sp, #56	; 0x38
 800817a:	f002 fdad 	bl	800acd8 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800817e:	2100      	movs	r1, #0
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008180:	900a      	str	r0, [sp, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008182:	3439      	adds	r4, #57	; 0x39
 8008184:	5661      	ldrsb	r1, [r4, r1]
 8008186:	1c03      	adds	r3, r0, #0
 8008188:	b240      	sxtb	r0, r0
 800818a:	7822      	ldrb	r2, [r4, #0]
 800818c:	4288      	cmp	r0, r1
 800818e:	da00      	bge.n	8008192 <ProcessMacCommands.constprop.0+0x35a>
 8008190:	1c13      	adds	r3, r2, #0
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008192:	2200      	movs	r2, #0
 8008194:	2009      	movs	r0, #9
 8008196:	a908      	add	r1, sp, #32
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008198:	7023      	strb	r3, [r4, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800819a:	f001 ff4f 	bl	800a03c <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 800819e:	9d04      	ldr	r5, [sp, #16]
 80081a0:	e693      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80081a2:	2201      	movs	r2, #1
 80081a4:	706a      	strb	r2, [r5, #1]
 80081a6:	e7bf      	b.n	8008128 <ProcessMacCommands.constprop.0+0x2f0>
                status = 0x03;
 80081a8:	260d      	movs	r6, #13
 80081aa:	ab04      	add	r3, sp, #16
 80081ac:	18f6      	adds	r6, r6, r3
 80081ae:	2303      	movs	r3, #3
 80081b0:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 80081b2:	5d7b      	ldrb	r3, [r7, r5]
 80081b4:	a90e      	add	r1, sp, #56	; 0x38
 80081b6:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80081b8:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80081ba:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80081bc:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80081be:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80081c0:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80081c2:	5cba      	ldrb	r2, [r7, r2]
 80081c4:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 80081c6:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80081c8:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80081ca:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80081cc:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80081ce:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80081d0:	5d3a      	ldrb	r2, [r7, r4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80081d2:	b2ed      	uxtb	r5, r5
 80081d4:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 80081d6:	2264      	movs	r2, #100	; 0x64
 80081d8:	4353      	muls	r3, r2
 80081da:	604b      	str	r3, [r1, #4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80081dc:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <ProcessMacCommands.constprop.0+0x3d0>)
 80081de:	3340      	adds	r3, #64	; 0x40
 80081e0:	7818      	ldrb	r0, [r3, #0]
 80081e2:	f002 fe02 	bl	800adea <RegionDlChannelReq>
 80081e6:	b2c3      	uxtb	r3, r0
 80081e8:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 80081ea:	2800      	cmp	r0, #0
 80081ec:	da00      	bge.n	80081f0 <ProcessMacCommands.constprop.0+0x3b8>
 80081ee:	e66c      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 80081f0:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80081f2:	2201      	movs	r2, #1
 80081f4:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 80081f6:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80081f8:	e718      	b.n	800802c <ProcessMacCommands.constprop.0+0x1f4>
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	2000096c 	.word	0x2000096c
 8008200:	00000454 	.word	0x00000454
 8008204:	00000455 	.word	0x00000455
 8008208:	20000698 	.word	0x20000698
 800820c:	200006d1 	.word	0x200006d1
 8008210:	200006d0 	.word	0x200006d0
 8008214:	00000481 	.word	0x00000481
 8008218:	200006d8 	.word	0x200006d8
 800821c:	0800e70f 	.word	0x0800e70f
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008220:	200a      	movs	r0, #10
 8008222:	f002 f8ad 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 8008226:	2800      	cmp	r0, #0
 8008228:	d100      	bne.n	800822c <ProcessMacCommands.constprop.0+0x3f4>
 800822a:	e64e      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800822c:	210a      	movs	r1, #10
 800822e:	2000      	movs	r0, #0
 8008230:	f002 f862 	bl	800a2f8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8008234:	231e      	movs	r3, #30
 8008236:	aa04      	add	r2, sp, #16
 8008238:	189b      	adds	r3, r3, r2
 800823a:	2200      	movs	r2, #0
 800823c:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800823e:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008240:	b2db      	uxtb	r3, r3
 8008242:	5cfe      	ldrb	r6, [r7, r3]
 8008244:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008246:	b2db      	uxtb	r3, r3
 8008248:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800824a:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800824c:	0409      	lsls	r1, r1, #16
 800824e:	430e      	orrs	r6, r1
 8008250:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008252:	5d79      	ldrb	r1, [r7, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008254:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008256:	430e      	orrs	r6, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008258:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800825a:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800825c:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800825e:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008260:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008262:	5d3a      	ldrb	r2, [r7, r4]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 8008268:	aa04      	add	r2, sp, #16
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800826a:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800826c:	0609      	lsls	r1, r1, #24
                    sysTime = gpsEpochTime;
 800826e:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 8008270:	a80e      	add	r0, sp, #56	; 0x38
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008272:	430e      	orrs	r6, r1
                    sysTimeCurrent = SysTimeGet( );
 8008274:	f005 fc44 	bl	800db00 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008278:	4b41      	ldr	r3, [pc, #260]	; (8008380 <ProcessMacCommands.constprop.0+0x548>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800827a:	4c42      	ldr	r4, [pc, #264]	; (8008384 <ProcessMacCommands.constprop.0+0x54c>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800827c:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800827e:	23cf      	movs	r3, #207	; 0xcf
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	18e3      	adds	r3, r4, r3
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	23ce      	movs	r3, #206	; 0xce
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	58e3      	ldr	r3, [r4, r3]
 8008290:	a80c      	add	r0, sp, #48	; 0x30
 8008292:	910a      	str	r1, [sp, #40]	; 0x28
 8008294:	f005 fbf6 	bl	800da84 <SysTimeSub>
 8008298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800829a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800829c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	a80a      	add	r0, sp, #40	; 0x28
 80082a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082a4:	f005 fbd4 	bl	800da50 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80082a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ac:	f005 fc00 	bl	800dab0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80082b0:	f001 feaf 	bl	800a012 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80082b4:	2201      	movs	r2, #1
 80082b6:	4b34      	ldr	r3, [pc, #208]	; (8008388 <ProcessMacCommands.constprop.0+0x550>)
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80082b8:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80082ba:	54e2      	strb	r2, [r4, r3]
 80082bc:	e605      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80082be:	200d      	movs	r0, #13
 80082c0:	f002 f85e 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d100      	bne.n	80082ca <ProcessMacCommands.constprop.0+0x492>
 80082c8:	e5ff      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80082ca:	210d      	movs	r1, #13
 80082cc:	2000      	movs	r0, #0
 80082ce:	f002 f813 	bl	800a2f8 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80082d2:	2390      	movs	r3, #144	; 0x90
 80082d4:	4a2b      	ldr	r2, [pc, #172]	; (8008384 <ProcessMacCommands.constprop.0+0x54c>)
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	5cd3      	ldrb	r3, [r2, r3]
 80082da:	3b04      	subs	r3, #4
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d800      	bhi.n	80082e2 <ProcessMacCommands.constprop.0+0x4aa>
 80082e0:	e5f3      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                        LoRaMacClassBPingSlotInfoAns( );
 80082e2:	f001 fe92 	bl	800a00a <LoRaMacClassBPingSlotInfoAns>
 80082e6:	e5f0      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                frequency = ( uint32_t )payload[macIndex++];
 80082e8:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	5cf9      	ldrb	r1, [r7, r3]
 80082ee:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80082f4:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	4319      	orrs	r1, r3
                frequency *= 100;
 80082fa:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 80082fc:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 80082fe:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008300:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8008302:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008304:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8008306:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8008308:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800830a:	3b55      	subs	r3, #85	; 0x55
 800830c:	4018      	ands	r0, r3
 800830e:	f001 fe7d 	bl	800a00c <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008312:	a908      	add	r1, sp, #32
 8008314:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008316:	2201      	movs	r2, #1
 8008318:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 800831a:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800831c:	e6a4      	b.n	8008068 <ProcessMacCommands.constprop.0+0x230>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800831e:	200e      	movs	r0, #14
 8008320:	f002 f82e 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 8008324:	2800      	cmp	r0, #0
 8008326:	d100      	bne.n	800832a <ProcessMacCommands.constprop.0+0x4f2>
 8008328:	e5cf      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800832a:	210e      	movs	r1, #14
 800832c:	2000      	movs	r0, #0
 800832e:	f001 ffe3 	bl	800a2f8 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008332:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008334:	b2db      	uxtb	r3, r3
 8008336:	5cf8      	ldrb	r0, [r7, r3]
 8008338:	5d7b      	ldrb	r3, [r7, r5]
 800833a:	0200      	lsls	r0, r0, #8
 800833c:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 800833e:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008340:	4b12      	ldr	r3, [pc, #72]	; (800838c <ProcessMacCommands.constprop.0+0x554>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008342:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8008344:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008346:	5d39      	ldrb	r1, [r7, r4]
 8008348:	685a      	ldr	r2, [r3, #4]
                    beaconTimingChannel = payload[macIndex++];
 800834a:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800834c:	f001 fe60 	bl	800a010 <LoRaMacClassBBeaconTimingAns>
 8008350:	e5bb      	b.n	8007eca <ProcessMacCommands.constprop.0+0x92>
                    frequency = ( uint32_t )payload[macIndex++];
 8008352:	5d7a      	ldrb	r2, [r7, r5]
 8008354:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008356:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008358:	3403      	adds	r4, #3
 800835a:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800835c:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800835e:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008360:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008362:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	4318      	orrs	r0, r3
                    frequency *= 100;
 8008368:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800836a:	4310      	orrs	r0, r2
                    frequency *= 100;
 800836c:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800836e:	f001 fe51 	bl	800a014 <LoRaMacClassBBeaconFreqReq>
 8008372:	a908      	add	r1, sp, #32
 8008374:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008376:	2201      	movs	r2, #1
 8008378:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800837a:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800837c:	e674      	b.n	8008068 <ProcessMacCommands.constprop.0+0x230>
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	12d53d80 	.word	0x12d53d80
 8008384:	2000096c 	.word	0x2000096c
 8008388:	00000434 	.word	0x00000434
 800838c:	20000680 	.word	0x20000680

08008390 <StopRetransmission.isra.0>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <StopRetransmission.isra.0+0x40>)
 8008392:	4a10      	ldr	r2, [pc, #64]	; (80083d4 <StopRetransmission.isra.0+0x44>)
 8008394:	5c9a      	ldrb	r2, [r3, r2]
 8008396:	0792      	lsls	r2, r2, #30
 8008398:	d503      	bpl.n	80083a2 <StopRetransmission.isra.0+0x12>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800839a:	4a0f      	ldr	r2, [pc, #60]	; (80083d8 <StopRetransmission.isra.0+0x48>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800839c:	5c9a      	ldrb	r2, [r3, r2]
 800839e:	2a01      	cmp	r2, #1
 80083a0:	d908      	bls.n	80083b4 <StopRetransmission.isra.0+0x24>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80083a2:	4a0e      	ldr	r2, [pc, #56]	; (80083dc <StopRetransmission.isra.0+0x4c>)
 80083a4:	0011      	movs	r1, r2
 80083a6:	31fe      	adds	r1, #254	; 0xfe
 80083a8:	7809      	ldrb	r1, [r1, #0]
 80083aa:	2900      	cmp	r1, #0
 80083ac:	d002      	beq.n	80083b4 <StopRetransmission.isra.0+0x24>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80083ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80083b0:	3101      	adds	r1, #1
 80083b2:	6291      	str	r1, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80083b4:	2182      	movs	r1, #130	; 0x82
 80083b6:	2200      	movs	r2, #0
 80083b8:	00c9      	lsls	r1, r1, #3
 80083ba:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 80083bc:	4908      	ldr	r1, [pc, #32]	; (80083e0 <StopRetransmission.isra.0+0x50>)
 80083be:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 80083c0:	4908      	ldr	r1, [pc, #32]	; (80083e4 <StopRetransmission.isra.0+0x54>)
 80083c2:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80083c4:	39d3      	subs	r1, #211	; 0xd3
 80083c6:	5858      	ldr	r0, [r3, r1]
 80083c8:	3202      	adds	r2, #2
 80083ca:	4390      	bics	r0, r2
 80083cc:	5058      	str	r0, [r3, r1]

    return true;
}
 80083ce:	4770      	bx	lr
 80083d0:	2000096c 	.word	0x2000096c
 80083d4:	00000481 	.word	0x00000481
 80083d8:	0000047f 	.word	0x0000047f
 80083dc:	20000698 	.word	0x20000698
 80083e0:	00000414 	.word	0x00000414
 80083e4:	00000413 	.word	0x00000413

080083e8 <OnTxDelayedTimerEvent>:
{
 80083e8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80083ea:	4811      	ldr	r0, [pc, #68]	; (8008430 <OnTxDelayedTimerEvent+0x48>)
 80083ec:	f005 fc84 	bl	800dcf8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80083f0:	22d0      	movs	r2, #208	; 0xd0
 80083f2:	2320      	movs	r3, #32
 80083f4:	4c0f      	ldr	r4, [pc, #60]	; (8008434 <OnTxDelayedTimerEvent+0x4c>)
 80083f6:	0092      	lsls	r2, r2, #2
 80083f8:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 80083fa:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80083fc:	4399      	bics	r1, r3
 80083fe:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8008400:	f7ff fa34 	bl	800786c <ScheduleTx>
 8008404:	2800      	cmp	r0, #0
 8008406:	d011      	beq.n	800842c <OnTxDelayedTimerEvent+0x44>
 8008408:	280b      	cmp	r0, #11
 800840a:	d00f      	beq.n	800842c <OnTxDelayedTimerEvent+0x44>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800840c:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800840e:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <OnTxDelayedTimerEvent+0x50>)
 8008410:	3339      	adds	r3, #57	; 0x39
 8008412:	781a      	ldrb	r2, [r3, #0]
 8008414:	4b09      	ldr	r3, [pc, #36]	; (800843c <OnTxDelayedTimerEvent+0x54>)
 8008416:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008418:	4b09      	ldr	r3, [pc, #36]	; (8008440 <OnTxDelayedTimerEvent+0x58>)
 800841a:	5ce2      	ldrb	r2, [r4, r3]
 800841c:	4b09      	ldr	r3, [pc, #36]	; (8008444 <OnTxDelayedTimerEvent+0x5c>)
 800841e:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008420:	4b09      	ldr	r3, [pc, #36]	; (8008448 <OnTxDelayedTimerEvent+0x60>)
 8008422:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8008424:	f001 ff8e 	bl	800a344 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8008428:	f7ff ffb2 	bl	8008390 <StopRetransmission.isra.0>
}
 800842c:	bd10      	pop	{r4, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	20000cd4 	.word	0x20000cd4
 8008434:	2000096c 	.word	0x2000096c
 8008438:	20000698 	.word	0x20000698
 800843c:	0000043a 	.word	0x0000043a
 8008440:	00000412 	.word	0x00000412
 8008444:	0000043d 	.word	0x0000043d
 8008448:	00000439 	.word	0x00000439

0800844c <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800844c:	22d0      	movs	r2, #208	; 0xd0
 800844e:	4b06      	ldr	r3, [pc, #24]	; (8008468 <LoRaMacIsBusy+0x1c>)
 8008450:	0092      	lsls	r2, r2, #2
 8008452:	589a      	ldr	r2, [r3, r2]
    return true;
 8008454:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8008456:	2a00      	cmp	r2, #0
 8008458:	d105      	bne.n	8008466 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800845a:	4a04      	ldr	r2, [pc, #16]	; (800846c <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800845c:	5c98      	ldrb	r0, [r3, r2]
 800845e:	3801      	subs	r0, #1
 8008460:	1e43      	subs	r3, r0, #1
 8008462:	4198      	sbcs	r0, r3
 8008464:	b2c0      	uxtb	r0, r0
}
 8008466:	4770      	bx	lr
 8008468:	2000096c 	.word	0x2000096c
 800846c:	00000482 	.word	0x00000482

08008470 <LoRaMacProcess>:
{
 8008470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008472:	b0a9      	sub	sp, #164	; 0xa4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008474:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008478:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 800847a:	2100      	movs	r1, #0
    events = LoRaMacRadioEvents;
 800847c:	4ede      	ldr	r6, [pc, #888]	; (80087f8 <LoRaMacProcess+0x388>)
 800847e:	6833      	ldr	r3, [r6, #0]
    LoRaMacRadioEvents.Value = 0;
 8008480:	6031      	str	r1, [r6, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008482:	f382 8810 	msr	PRIMASK, r2
    if( events.Value != 0 )
 8008486:	428b      	cmp	r3, r1
 8008488:	d100      	bne.n	800848c <LoRaMacProcess+0x1c>
 800848a:	e0e5      	b.n	8008658 <LoRaMacProcess+0x1e8>
        if( events.Events.TxDone == 1 )
 800848c:	b2da      	uxtb	r2, r3
 800848e:	9205      	str	r2, [sp, #20]
 8008490:	06db      	lsls	r3, r3, #27
 8008492:	d56e      	bpl.n	8008572 <LoRaMacProcess+0x102>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008494:	4cd9      	ldr	r4, [pc, #868]	; (80087fc <LoRaMacProcess+0x38c>)
 8008496:	0023      	movs	r3, r4
 8008498:	33fc      	adds	r3, #252	; 0xfc
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d003      	beq.n	80084a8 <LoRaMacProcess+0x38>
        Radio.Sleep( );
 80084a0:	4bd7      	ldr	r3, [pc, #860]	; (8008800 <LoRaMacProcess+0x390>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	9302      	str	r3, [sp, #8]
 80084a6:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80084a8:	23ec      	movs	r3, #236	; 0xec
 80084aa:	4fd6      	ldr	r7, [pc, #856]	; (8008804 <LoRaMacProcess+0x394>)
 80084ac:	4dd6      	ldr	r5, [pc, #856]	; (8008808 <LoRaMacProcess+0x398>)
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	58e9      	ldr	r1, [r5, r3]
 80084b2:	0038      	movs	r0, r7
 80084b4:	f005 fcb6 	bl	800de24 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80084b8:	0038      	movs	r0, r7
 80084ba:	f005 fc71 	bl	800dda0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80084be:	23ed      	movs	r3, #237	; 0xed
 80084c0:	4fd2      	ldr	r7, [pc, #840]	; (800880c <LoRaMacProcess+0x39c>)
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	58e9      	ldr	r1, [r5, r3]
 80084c6:	0038      	movs	r0, r7
 80084c8:	f005 fcac 	bl	800de24 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80084cc:	0038      	movs	r0, r7
 80084ce:	f005 fc67 	bl	800dda0 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80084d2:	0023      	movs	r3, r4
 80084d4:	33fc      	adds	r3, #252	; 0xfc
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d003      	beq.n	80084e4 <LoRaMacProcess+0x74>
 80084dc:	4bcc      	ldr	r3, [pc, #816]	; (8008810 <LoRaMacProcess+0x3a0>)
 80084de:	5ceb      	ldrb	r3, [r5, r3]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d013      	beq.n	800850c <LoRaMacProcess+0x9c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80084e4:	2316      	movs	r3, #22
 80084e6:	a912      	add	r1, sp, #72	; 0x48
 80084e8:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80084ea:	0023      	movs	r3, r4
 80084ec:	3340      	adds	r3, #64	; 0x40
 80084ee:	7818      	ldrb	r0, [r3, #0]
 80084f0:	f002 fbf2 	bl	800acd8 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80084f4:	23ed      	movs	r3, #237	; 0xed
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	58e9      	ldr	r1, [r5, r3]
 80084fa:	4dc6      	ldr	r5, [pc, #792]	; (8008814 <LoRaMacProcess+0x3a4>)
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80084fc:	9010      	str	r0, [sp, #64]	; 0x40
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80084fe:	1809      	adds	r1, r1, r0
 8008500:	0028      	movs	r0, r5
 8008502:	f005 fc8f 	bl	800de24 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8008506:	0028      	movs	r0, r5
 8008508:	f005 fc4a 	bl	800dda0 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800850c:	6973      	ldr	r3, [r6, #20]
    txDone.Channel = MacCtx.Channel;
 800850e:	4fbe      	ldr	r7, [pc, #760]	; (8008808 <LoRaMacProcess+0x398>)
 8008510:	4ac1      	ldr	r2, [pc, #772]	; (8008818 <LoRaMacProcess+0x3a8>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008512:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8008514:	5cba      	ldrb	r2, [r7, r2]
 8008516:	ad1c      	add	r5, sp, #112	; 0x70
 8008518:	702a      	strb	r2, [r5, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800851a:	a80e      	add	r0, sp, #56	; 0x38
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800851c:	606b      	str	r3, [r5, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800851e:	f005 fb1b 	bl	800db58 <SysTimeGetMcuTime>
 8008522:	0023      	movs	r3, r4
 8008524:	3309      	adds	r3, #9
 8008526:	33ff      	adds	r3, #255	; 0xff
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	ae08      	add	r6, sp, #32
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	2382      	movs	r3, #130	; 0x82
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	58e3      	ldr	r3, [r4, r3]
 8008534:	0030      	movs	r0, r6
 8008536:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800853a:	f005 faa3 	bl	800da84 <SysTimeSub>
 800853e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008540:	ce06      	ldmia	r6!, {r1, r2}
 8008542:	c306      	stmia	r3!, {r1, r2}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008544:	2383      	movs	r3, #131	; 0x83
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	58fb      	ldr	r3, [r7, r3]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800854a:	34ff      	adds	r4, #255	; 0xff
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800854c:	60ab      	str	r3, [r5, #8]
    txDone.Joined  = true;
 800854e:	2301      	movs	r3, #1
 8008550:	706b      	strb	r3, [r5, #1]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008552:	7c63      	ldrb	r3, [r4, #17]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d100      	bne.n	800855a <LoRaMacProcess+0xea>
        txDone.Joined  = false;
 8008558:	706b      	strb	r3, [r5, #1]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800855a:	4ba8      	ldr	r3, [pc, #672]	; (80087fc <LoRaMacProcess+0x38c>)
 800855c:	0029      	movs	r1, r5
 800855e:	3340      	adds	r3, #64	; 0x40
 8008560:	7818      	ldrb	r0, [r3, #0]
 8008562:	f002 fbc5 	bl	800acf0 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8008566:	4baa      	ldr	r3, [pc, #680]	; (8008810 <LoRaMacProcess+0x3a0>)
 8008568:	5cfb      	ldrb	r3, [r7, r3]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <LoRaMacProcess+0x102>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800856e:	4aab      	ldr	r2, [pc, #684]	; (800881c <LoRaMacProcess+0x3ac>)
 8008570:	54bb      	strb	r3, [r7, r2]
        if( events.Events.RxDone == 1 )
 8008572:	9b05      	ldr	r3, [sp, #20]
 8008574:	071b      	lsls	r3, r3, #28
 8008576:	d541      	bpl.n	80085fc <LoRaMacProcess+0x18c>
    uint8_t *payload = RxDoneParams.Payload;
 8008578:	4b9f      	ldr	r3, [pc, #636]	; (80087f8 <LoRaMacProcess+0x388>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800857a:	4fa0      	ldr	r7, [pc, #640]	; (80087fc <LoRaMacProcess+0x38c>)
    uint16_t size = RxDoneParams.Size;
 800857c:	899a      	ldrh	r2, [r3, #12]
    uint8_t *payload = RxDoneParams.Payload;
 800857e:	689d      	ldr	r5, [r3, #8]
    uint16_t size = RxDoneParams.Size;
 8008580:	9202      	str	r2, [sp, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008582:	220e      	movs	r2, #14
 8008584:	5e9c      	ldrsh	r4, [r3, r2]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008586:	003a      	movs	r2, r7
    int8_t snr = RxDoneParams.Snr;
 8008588:	7c1b      	ldrb	r3, [r3, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800858a:	32cc      	adds	r2, #204	; 0xcc
    int8_t snr = RxDoneParams.Snr;
 800858c:	b25b      	sxtb	r3, r3
 800858e:	9303      	str	r3, [sp, #12]
    uint32_t downLinkCounter = 0;
 8008590:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008592:	6812      	ldr	r2, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 8008594:	4e9c      	ldr	r6, [pc, #624]	; (8008808 <LoRaMacProcess+0x398>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008596:	9207      	str	r2, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8008598:	4aa1      	ldr	r2, [pc, #644]	; (8008820 <LoRaMacProcess+0x3b0>)
    MacCtx.RxStatus.Snr = snr;
 800859a:	9903      	ldr	r1, [sp, #12]
    MacCtx.McpsConfirm.AckReceived = false;
 800859c:	54b3      	strb	r3, [r6, r2]
    MacCtx.RxStatus.Rssi = rssi;
 800859e:	4aa1      	ldr	r2, [pc, #644]	; (8008824 <LoRaMacProcess+0x3b4>)
    uint32_t downLinkCounter = 0;
 80085a0:	930b      	str	r3, [sp, #44]	; 0x2c
    MacCtx.RxStatus.Rssi = rssi;
 80085a2:	52b4      	strh	r4, [r6, r2]
    MacCtx.RxStatus.Snr = snr;
 80085a4:	4aa0      	ldr	r2, [pc, #640]	; (8008828 <LoRaMacProcess+0x3b8>)
 80085a6:	54b1      	strb	r1, [r6, r2]
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80085a8:	3202      	adds	r2, #2
 80085aa:	5cb2      	ldrb	r2, [r6, r2]
 80085ac:	499f      	ldr	r1, [pc, #636]	; (800882c <LoRaMacProcess+0x3bc>)
 80085ae:	5472      	strb	r2, [r6, r1]
    MacCtx.McpsIndication.Multicast = 0;
 80085b0:	4a9f      	ldr	r2, [pc, #636]	; (8008830 <LoRaMacProcess+0x3c0>)
 80085b2:	52b3      	strh	r3, [r6, r2]
    MacCtx.McpsIndication.FramePending = 0;
 80085b4:	4a9f      	ldr	r2, [pc, #636]	; (8008834 <LoRaMacProcess+0x3c4>)
 80085b6:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 80085b8:	4a9f      	ldr	r2, [pc, #636]	; (8008838 <LoRaMacProcess+0x3c8>)
 80085ba:	50b3      	str	r3, [r6, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 80085bc:	3204      	adds	r2, #4
 80085be:	52b3      	strh	r3, [r6, r2]
    MacCtx.McpsIndication.AckReceived = false;
 80085c0:	4a9e      	ldr	r2, [pc, #632]	; (800883c <LoRaMacProcess+0x3cc>)
 80085c2:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80085c4:	4a9e      	ldr	r2, [pc, #632]	; (8008840 <LoRaMacProcess+0x3d0>)
 80085c6:	50b3      	str	r3, [r6, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80085c8:	4a9e      	ldr	r2, [pc, #632]	; (8008844 <LoRaMacProcess+0x3d4>)
 80085ca:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 80085cc:	3214      	adds	r2, #20
 80085ce:	50b3      	str	r3, [r6, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80085d0:	4a9d      	ldr	r2, [pc, #628]	; (8008848 <LoRaMacProcess+0x3d8>)
 80085d2:	54b3      	strb	r3, [r6, r2]
    Radio.Sleep( );
 80085d4:	4b8a      	ldr	r3, [pc, #552]	; (8008800 <LoRaMacProcess+0x390>)
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80085dc:	488b      	ldr	r0, [pc, #556]	; (800880c <LoRaMacProcess+0x39c>)
 80085de:	f005 fb8b 	bl	800dcf8 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80085e2:	0028      	movs	r0, r5
 80085e4:	9902      	ldr	r1, [sp, #8]
 80085e6:	f001 fcfd 	bl	8009fe4 <LoRaMacClassBRxBeacon>
 80085ea:	9004      	str	r0, [sp, #16]
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d100      	bne.n	80085f2 <LoRaMacProcess+0x182>
 80085f0:	e188      	b.n	8008904 <LoRaMacProcess+0x494>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80085f2:	4b96      	ldr	r3, [pc, #600]	; (800884c <LoRaMacProcess+0x3dc>)
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80085f4:	9a03      	ldr	r2, [sp, #12]
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80085f6:	52f4      	strh	r4, [r6, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80085f8:	4b95      	ldr	r3, [pc, #596]	; (8008850 <LoRaMacProcess+0x3e0>)
 80085fa:	54f2      	strb	r2, [r6, r3]
        if( events.Events.TxTimeout == 1 )
 80085fc:	9b05      	ldr	r3, [sp, #20]
 80085fe:	075b      	lsls	r3, r3, #29
 8008600:	d51c      	bpl.n	800863c <LoRaMacProcess+0x1cc>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008602:	4b7e      	ldr	r3, [pc, #504]	; (80087fc <LoRaMacProcess+0x38c>)
 8008604:	33fc      	adds	r3, #252	; 0xfc
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d003      	beq.n	8008614 <LoRaMacProcess+0x1a4>
        Radio.Sleep( );
 800860c:	4b7c      	ldr	r3, [pc, #496]	; (8008800 <LoRaMacProcess+0x390>)
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	9302      	str	r3, [sp, #8]
 8008612:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008614:	f7fe ff04 	bl	8007420 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008618:	2002      	movs	r0, #2
 800861a:	4c7b      	ldr	r4, [pc, #492]	; (8008808 <LoRaMacProcess+0x398>)
 800861c:	4b7f      	ldr	r3, [pc, #508]	; (800881c <LoRaMacProcess+0x3ac>)
 800861e:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008620:	f001 fe90 	bl	800a344 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008624:	4b7a      	ldr	r3, [pc, #488]	; (8008810 <LoRaMacProcess+0x3a0>)
 8008626:	5ce3      	ldrb	r3, [r4, r3]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <LoRaMacProcess+0x1c2>
        MacCtx.AckTimeoutRetry = true;
 800862c:	2201      	movs	r2, #1
 800862e:	4b89      	ldr	r3, [pc, #548]	; (8008854 <LoRaMacProcess+0x3e4>)
 8008630:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008632:	2320      	movs	r3, #32
 8008634:	4988      	ldr	r1, [pc, #544]	; (8008858 <LoRaMacProcess+0x3e8>)
 8008636:	5c62      	ldrb	r2, [r4, r1]
 8008638:	4313      	orrs	r3, r2
 800863a:	5463      	strb	r3, [r4, r1]
        if( events.Events.RxError == 1 )
 800863c:	9b05      	ldr	r3, [sp, #20]
 800863e:	079b      	lsls	r3, r3, #30
 8008640:	d503      	bpl.n	800864a <LoRaMacProcess+0x1da>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008642:	2106      	movs	r1, #6
 8008644:	2005      	movs	r0, #5
 8008646:	f7fe ff5f 	bl	8007508 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 800864a:	9b05      	ldr	r3, [sp, #20]
 800864c:	07db      	lsls	r3, r3, #31
 800864e:	d503      	bpl.n	8008658 <LoRaMacProcess+0x1e8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008650:	2104      	movs	r1, #4
 8008652:	2003      	movs	r0, #3
 8008654:	f7fe ff58 	bl	8007508 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8008658:	f001 fce1 	bl	800a01e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800865c:	4c6a      	ldr	r4, [pc, #424]	; (8008808 <LoRaMacProcess+0x398>)
 800865e:	4b7e      	ldr	r3, [pc, #504]	; (8008858 <LoRaMacProcess+0x3e8>)
 8008660:	5ce2      	ldrb	r2, [r4, r3]
 8008662:	0693      	lsls	r3, r2, #26
 8008664:	d400      	bmi.n	8008668 <LoRaMacProcess+0x1f8>
 8008666:	e117      	b.n	8008898 <LoRaMacProcess+0x428>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008668:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 800866a:	2300      	movs	r3, #0
 800866c:	4d7b      	ldr	r5, [pc, #492]	; (800885c <LoRaMacProcess+0x3ec>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800866e:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 8008670:	5563      	strb	r3, [r4, r5]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008672:	5863      	ldr	r3, [r4, r1]
 8008674:	0618      	lsls	r0, r3, #24
 8008676:	d502      	bpl.n	800867e <LoRaMacProcess+0x20e>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008678:	2082      	movs	r0, #130	; 0x82
 800867a:	4383      	bics	r3, r0
 800867c:	5063      	str	r3, [r4, r1]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800867e:	2305      	movs	r3, #5
 8008680:	421a      	tst	r2, r3
 8008682:	d100      	bne.n	8008686 <LoRaMacProcess+0x216>
 8008684:	e391      	b.n	8008daa <LoRaMacProcess+0x93a>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008686:	200c      	movs	r0, #12
 8008688:	f001 fe7a 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 800868c:	2800      	cmp	r0, #0
 800868e:	d100      	bne.n	8008692 <LoRaMacProcess+0x222>
 8008690:	e38b      	b.n	8008daa <LoRaMacProcess+0x93a>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008692:	4b71      	ldr	r3, [pc, #452]	; (8008858 <LoRaMacProcess+0x3e8>)
 8008694:	5ce3      	ldrb	r3, [r4, r3]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008696:	07da      	lsls	r2, r3, #31
 8008698:	d500      	bpl.n	800869c <LoRaMacProcess+0x22c>
 800869a:	e386      	b.n	8008daa <LoRaMacProcess+0x93a>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800869c:	075b      	lsls	r3, r3, #29
 800869e:	d400      	bmi.n	80086a2 <LoRaMacProcess+0x232>
 80086a0:	e39a      	b.n	8008dd8 <LoRaMacProcess+0x968>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80086a2:	22d0      	movs	r2, #208	; 0xd0
 80086a4:	2302      	movs	r3, #2
 80086a6:	0092      	lsls	r2, r2, #2
 80086a8:	58a1      	ldr	r1, [r4, r2]
 80086aa:	4399      	bics	r1, r3
 80086ac:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 80086ae:	23d0      	movs	r3, #208	; 0xd0
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	58e3      	ldr	r3, [r4, r3]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d000      	beq.n	80086ba <LoRaMacProcess+0x24a>
 80086b8:	e0ec      	b.n	8008894 <LoRaMacProcess+0x424>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80086ba:	4a67      	ldr	r2, [pc, #412]	; (8008858 <LoRaMacProcess+0x3e8>)
 80086bc:	3301      	adds	r3, #1
 80086be:	5ca7      	ldrb	r7, [r4, r2]
 80086c0:	0039      	movs	r1, r7
 80086c2:	4019      	ands	r1, r3
 80086c4:	421f      	tst	r7, r3
 80086c6:	d002      	beq.n	80086ce <LoRaMacProcess+0x25e>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80086c8:	0038      	movs	r0, r7
 80086ca:	4398      	bics	r0, r3
 80086cc:	54a0      	strb	r0, [r4, r2]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80086ce:	2204      	movs	r2, #4
 80086d0:	4861      	ldr	r0, [pc, #388]	; (8008858 <LoRaMacProcess+0x3e8>)
 80086d2:	5c23      	ldrb	r3, [r4, r0]
 80086d4:	4213      	tst	r3, r2
 80086d6:	d001      	beq.n	80086dc <LoRaMacProcess+0x26c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80086d8:	4393      	bics	r3, r2
 80086da:	5423      	strb	r3, [r4, r0]
    MacCtx.AllowRequests = requestState;
 80086dc:	2301      	movs	r3, #1
 80086de:	5563      	strb	r3, [r4, r5]
        if( reqEvents.Bits.McpsReq == 1 )
 80086e0:	2900      	cmp	r1, #0
 80086e2:	d005      	beq.n	80086f0 <LoRaMacProcess+0x280>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80086e4:	23d1      	movs	r3, #209	; 0xd1
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	58e3      	ldr	r3, [r4, r3]
 80086ea:	485d      	ldr	r0, [pc, #372]	; (8008860 <LoRaMacProcess+0x3f0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80086f0:	2604      	movs	r6, #4
 80086f2:	4237      	tst	r7, r6
 80086f4:	d00a      	beq.n	800870c <LoRaMacProcess+0x29c>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80086f6:	485b      	ldr	r0, [pc, #364]	; (8008864 <LoRaMacProcess+0x3f4>)
 80086f8:	f001 fe4e 	bl	800a398 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80086fc:	f001 fe78 	bl	800a3f0 <LoRaMacConfirmQueueGetCnt>
 8008700:	2800      	cmp	r0, #0
 8008702:	d003      	beq.n	800870c <LoRaMacProcess+0x29c>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008704:	4a54      	ldr	r2, [pc, #336]	; (8008858 <LoRaMacProcess+0x3e8>)
 8008706:	5ca3      	ldrb	r3, [r4, r2]
 8008708:	431e      	orrs	r6, r3
 800870a:	54a6      	strb	r6, [r4, r2]
        LoRaMacClassBResumeBeaconing( );
 800870c:	f001 fc76 	bl	8009ffc <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008710:	2220      	movs	r2, #32
 8008712:	4e51      	ldr	r6, [pc, #324]	; (8008858 <LoRaMacProcess+0x3e8>)
 8008714:	5da3      	ldrb	r3, [r4, r6]
 8008716:	4393      	bics	r3, r2
 8008718:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800871a:	23d0      	movs	r3, #208	; 0xd0
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	58e3      	ldr	r3, [r4, r3]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d000      	beq.n	8008726 <LoRaMacProcess+0x2b6>
 8008724:	e0b6      	b.n	8008894 <LoRaMacProcess+0x424>
        bool isStickyMacCommandPending = false;
 8008726:	2758      	movs	r7, #88	; 0x58
 8008728:	aa06      	add	r2, sp, #24
 800872a:	19d2      	adds	r2, r2, r7
 800872c:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800872e:	a81c      	add	r0, sp, #112	; 0x70
 8008730:	f001 fd5c 	bl	800a1ec <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008734:	ab06      	add	r3, sp, #24
 8008736:	19db      	adds	r3, r3, r7
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <LoRaMacProcess+0x2d6>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800873e:	2310      	movs	r3, #16
 8008740:	5da2      	ldrb	r2, [r4, r6]
 8008742:	4313      	orrs	r3, r2
 8008744:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacState != LORAMAC_IDLE )
 8008746:	23d0      	movs	r3, #208	; 0xd0
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	58e6      	ldr	r6, [r4, r3]
 800874c:	2e00      	cmp	r6, #0
 800874e:	d000      	beq.n	8008752 <LoRaMacProcess+0x2e2>
 8008750:	e0a0      	b.n	8008894 <LoRaMacProcess+0x424>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8008752:	4f2a      	ldr	r7, [pc, #168]	; (80087fc <LoRaMacProcess+0x38c>)
 8008754:	2124      	movs	r1, #36	; 0x24
 8008756:	0038      	movs	r0, r7
 8008758:	f003 fc46 	bl	800bfe8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	4298      	cmp	r0, r3
 8008760:	d001      	beq.n	8008766 <LoRaMacProcess+0x2f6>
        nvmData->Crypto.Crc32 = crc;
 8008762:	6278      	str	r0, [r7, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008764:	3601      	adds	r6, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008766:	2114      	movs	r1, #20
 8008768:	483f      	ldr	r0, [pc, #252]	; (8008868 <LoRaMacProcess+0x3f8>)
 800876a:	f003 fc3d 	bl	800bfe8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800876e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008770:	4298      	cmp	r0, r3
 8008772:	d002      	beq.n	800877a <LoRaMacProcess+0x30a>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008774:	2302      	movs	r3, #2
        nvmData->MacGroup1.Crc32 = crc;
 8008776:	63f8      	str	r0, [r7, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008778:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800877a:	21d4      	movs	r1, #212	; 0xd4
 800877c:	483b      	ldr	r0, [pc, #236]	; (800886c <LoRaMacProcess+0x3fc>)
 800877e:	f003 fc33 	bl	800bfe8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8008782:	003b      	movs	r3, r7
 8008784:	33fc      	adds	r3, #252	; 0xfc
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	4290      	cmp	r0, r2
 800878a:	d002      	beq.n	8008792 <LoRaMacProcess+0x322>
        nvmData->MacGroup2.Crc32 = crc;
 800878c:	6198      	str	r0, [r3, #24]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800878e:	2304      	movs	r3, #4
 8008790:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8008792:	21bc      	movs	r1, #188	; 0xbc
 8008794:	4836      	ldr	r0, [pc, #216]	; (8008870 <LoRaMacProcess+0x400>)
 8008796:	f003 fc27 	bl	800bfe8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800879a:	23ea      	movs	r3, #234	; 0xea
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	58fa      	ldr	r2, [r7, r3]
 80087a0:	4290      	cmp	r0, r2
 80087a2:	d003      	beq.n	80087ac <LoRaMacProcess+0x33c>
        nvmData->SecureElement.Crc32 = crc;
 80087a4:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80087a6:	3bcd      	subs	r3, #205	; 0xcd
 80087a8:	3bff      	subs	r3, #255	; 0xff
 80087aa:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80087ac:	2118      	movs	r1, #24
 80087ae:	4831      	ldr	r0, [pc, #196]	; (8008874 <LoRaMacProcess+0x404>)
 80087b0:	f003 fc1a 	bl	800bfe8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 80087b4:	23f8      	movs	r3, #248	; 0xf8
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	58fa      	ldr	r2, [r7, r3]
 80087ba:	4290      	cmp	r0, r2
 80087bc:	d003      	beq.n	80087c6 <LoRaMacProcess+0x356>
        nvmData->RegionGroup1.Crc32 = crc;
 80087be:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80087c0:	3be1      	subs	r3, #225	; 0xe1
 80087c2:	3bff      	subs	r3, #255	; 0xff
 80087c4:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80087c6:	21c4      	movs	r1, #196	; 0xc4
 80087c8:	482b      	ldr	r0, [pc, #172]	; (8008878 <LoRaMacProcess+0x408>)
 80087ca:	f003 fc0d 	bl	800bfe8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80087ce:	23ae      	movs	r3, #174	; 0xae
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	58fa      	ldr	r2, [r7, r3]
 80087d4:	4290      	cmp	r0, r2
 80087d6:	d002      	beq.n	80087de <LoRaMacProcess+0x36e>
        nvmData->RegionGroup2.Crc32 = crc;
 80087d8:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80087da:	2320      	movs	r3, #32
 80087dc:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80087de:	2114      	movs	r1, #20
 80087e0:	4826      	ldr	r0, [pc, #152]	; (800887c <LoRaMacProcess+0x40c>)
 80087e2:	f003 fc01 	bl	800bfe8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80087e6:	23b4      	movs	r3, #180	; 0xb4
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	58fa      	ldr	r2, [r7, r3]
 80087ec:	4290      	cmp	r0, r2
 80087ee:	d047      	beq.n	8008880 <LoRaMacProcess+0x410>
        nvmData->ClassB.Crc32 = crc;
 80087f0:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80087f2:	2340      	movs	r3, #64	; 0x40
 80087f4:	431e      	orrs	r6, r3
 80087f6:	e043      	b.n	8008880 <LoRaMacProcess+0x410>
 80087f8:	20000680 	.word	0x20000680
 80087fc:	20000698 	.word	0x20000698
 8008800:	0800e890 	.word	0x0800e890
 8008804:	20000cec 	.word	0x20000cec
 8008808:	2000096c 	.word	0x2000096c
 800880c:	20000d04 	.word	0x20000d04
 8008810:	00000414 	.word	0x00000414
 8008814:	20000d64 	.word	0x20000d64
 8008818:	00000415 	.word	0x00000415
 800881c:	00000439 	.word	0x00000439
 8008820:	0000043c 	.word	0x0000043c
 8008824:	0000047c 	.word	0x0000047c
 8008828:	0000047e 	.word	0x0000047e
 800882c:	0000047f 	.word	0x0000047f
 8008830:	0000041e 	.word	0x0000041e
 8008834:	00000421 	.word	0x00000421
 8008838:	00000424 	.word	0x00000424
 800883c:	0000042a 	.word	0x0000042a
 8008840:	0000042c 	.word	0x0000042c
 8008844:	0000041c 	.word	0x0000041c
 8008848:	00000434 	.word	0x00000434
 800884c:	00000472 	.word	0x00000472
 8008850:	00000474 	.word	0x00000474
 8008854:	00000413 	.word	0x00000413
 8008858:	00000481 	.word	0x00000481
 800885c:	00000482 	.word	0x00000482
 8008860:	20000da4 	.word	0x20000da4
 8008864:	20000db8 	.word	0x20000db8
 8008868:	200006c0 	.word	0x200006c0
 800886c:	200006d8 	.word	0x200006d8
 8008870:	200007b0 	.word	0x200007b0
 8008874:	20000870 	.word	0x20000870
 8008878:	2000088c 	.word	0x2000088c
 800887c:	20000954 	.word	0x20000954
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008880:	23d2      	movs	r3, #210	; 0xd2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	58e3      	ldr	r3, [r4, r3]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d004      	beq.n	8008894 <LoRaMacProcess+0x424>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800888a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <LoRaMacProcess+0x424>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008890:	0030      	movs	r0, r6
 8008892:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8008894:	2301      	movs	r3, #1
 8008896:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008898:	2208      	movs	r2, #8
 800889a:	49c9      	ldr	r1, [pc, #804]	; (8008bc0 <LoRaMacProcess+0x750>)
 800889c:	5c63      	ldrb	r3, [r4, r1]
 800889e:	4213      	tst	r3, r2
 80088a0:	d008      	beq.n	80088b4 <LoRaMacProcess+0x444>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80088a2:	4393      	bics	r3, r2
 80088a4:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80088a6:	23d1      	movs	r3, #209	; 0xd1
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	58e3      	ldr	r3, [r4, r3]
 80088ac:	49c5      	ldr	r1, [pc, #788]	; (8008bc4 <LoRaMacProcess+0x754>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	48c5      	ldr	r0, [pc, #788]	; (8008bc8 <LoRaMacProcess+0x758>)
 80088b2:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 80088b4:	2510      	movs	r5, #16
 80088b6:	4ec2      	ldr	r6, [pc, #776]	; (8008bc0 <LoRaMacProcess+0x750>)
 80088b8:	5da3      	ldrb	r3, [r4, r6]
 80088ba:	422b      	tst	r3, r5
 80088bc:	d00b      	beq.n	80088d6 <LoRaMacProcess+0x466>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 80088be:	2307      	movs	r3, #7
 80088c0:	a81c      	add	r0, sp, #112	; 0x70
 80088c2:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 80088c4:	23d1      	movs	r3, #209	; 0xd1
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	58e3      	ldr	r3, [r4, r3]
 80088ca:	49be      	ldr	r1, [pc, #760]	; (8008bc4 <LoRaMacProcess+0x754>)
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 80088d0:	5da3      	ldrb	r3, [r4, r6]
 80088d2:	43ab      	bics	r3, r5
 80088d4:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80088d6:	2202      	movs	r2, #2
 80088d8:	49b9      	ldr	r1, [pc, #740]	; (8008bc0 <LoRaMacProcess+0x750>)
 80088da:	5c63      	ldrb	r3, [r4, r1]
 80088dc:	4213      	tst	r3, r2
 80088de:	d008      	beq.n	80088f2 <LoRaMacProcess+0x482>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80088e0:	4393      	bics	r3, r2
 80088e2:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80088e4:	23d1      	movs	r3, #209	; 0xd1
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	58e3      	ldr	r3, [r4, r3]
 80088ea:	49b6      	ldr	r1, [pc, #728]	; (8008bc4 <LoRaMacProcess+0x754>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	48b7      	ldr	r0, [pc, #732]	; (8008bcc <LoRaMacProcess+0x75c>)
 80088f0:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80088f2:	2390      	movs	r3, #144	; 0x90
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	5ce3      	ldrb	r3, [r4, r3]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d101      	bne.n	8008900 <LoRaMacProcess+0x490>
        OpenContinuousRxCWindow( );
 80088fc:	f7ff f966 	bl	8007bcc <OpenContinuousRxCWindow>
}
 8008900:	b029      	add	sp, #164	; 0xa4
 8008902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008904:	003b      	movs	r3, r7
 8008906:	33fc      	adds	r3, #252	; 0xfc
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d10c      	bne.n	8008928 <LoRaMacProcess+0x4b8>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800890e:	f001 fb6d 	bl	8009fec <LoRaMacClassBIsPingExpected>
 8008912:	1e04      	subs	r4, r0, #0
 8008914:	d019      	beq.n	800894a <LoRaMacProcess+0x4da>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008916:	9804      	ldr	r0, [sp, #16]
 8008918:	f001 fb5d 	bl	8009fd6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800891c:	9804      	ldr	r0, [sp, #16]
 800891e:	f001 fb5f 	bl	8009fe0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008922:	2304      	movs	r3, #4
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008924:	4aaa      	ldr	r2, [pc, #680]	; (8008bd0 <LoRaMacProcess+0x760>)
 8008926:	54b3      	strb	r3, [r6, r2]
    macHdr.Value = payload[pktHeaderLen++];
 8008928:	782b      	ldrb	r3, [r5, #0]
 800892a:	4caa      	ldr	r4, [pc, #680]	; (8008bd4 <LoRaMacProcess+0x764>)
    switch( macHdr.Bits.MType )
 800892c:	0958      	lsrs	r0, r3, #5
 800892e:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 8008930:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 8008932:	2806      	cmp	r0, #6
 8008934:	d900      	bls.n	8008938 <LoRaMacProcess+0x4c8>
 8008936:	e22b      	b.n	8008d90 <LoRaMacProcess+0x920>
 8008938:	f7f7 fc0c 	bl	8000154 <__gnu_thumb1_case_uhi>
 800893c:	022a0013 	.word	0x022a0013
 8008940:	022a009b 	.word	0x022a009b
 8008944:	022a0098 	.word	0x022a0098
 8008948:	0215      	.short	0x0215
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800894a:	f001 fb51 	bl	8009ff0 <LoRaMacClassBIsMulticastExpected>
 800894e:	2800      	cmp	r0, #0
 8008950:	d0ea      	beq.n	8008928 <LoRaMacProcess+0x4b8>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008952:	0020      	movs	r0, r4
 8008954:	f001 fb40 	bl	8009fd8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008958:	0020      	movs	r0, r4
 800895a:	f001 fb42 	bl	8009fe2 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800895e:	2305      	movs	r3, #5
 8008960:	e7e0      	b.n	8008924 <LoRaMacProcess+0x4b4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008962:	9b02      	ldr	r3, [sp, #8]
 8008964:	2b10      	cmp	r3, #16
 8008966:	d806      	bhi.n	8008976 <LoRaMacProcess+0x506>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008968:	2101      	movs	r1, #1
 800896a:	4a9a      	ldr	r2, [pc, #616]	; (8008bd4 <LoRaMacProcess+0x764>)
 800896c:	4b9a      	ldr	r3, [pc, #616]	; (8008bd8 <LoRaMacProcess+0x768>)
 800896e:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8008970:	f7fe fdac 	bl	80074cc <PrepareRxDoneAbort>
                return;
 8008974:	e642      	b.n	80085fc <LoRaMacProcess+0x18c>
            macMsgJoinAccept.BufSize = size;
 8008976:	466b      	mov	r3, sp
            macMsgJoinAccept.Buffer = payload;
 8008978:	9512      	str	r5, [sp, #72]	; 0x48
            macMsgJoinAccept.BufSize = size;
 800897a:	7a1d      	ldrb	r5, [r3, #8]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800897c:	003b      	movs	r3, r7
            macMsgJoinAccept.Buffer = payload;
 800897e:	ae12      	add	r6, sp, #72	; 0x48
            macMsgJoinAccept.BufSize = size;
 8008980:	7135      	strb	r5, [r6, #4]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008982:	33ff      	adds	r3, #255	; 0xff
 8008984:	7c5b      	ldrb	r3, [r3, #17]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1ee      	bne.n	8008968 <LoRaMacProcess+0x4f8>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800898a:	f7fe f811 	bl	80069b0 <SecureElementGetJoinEui>
 800898e:	0032      	movs	r2, r6
 8008990:	0001      	movs	r1, r0
 8008992:	20ff      	movs	r0, #255	; 0xff
 8008994:	f001 ffe0 	bl	800a958 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008998:	2800      	cmp	r0, #0
 800899a:	d15f      	bne.n	8008a5c <LoRaMacProcess+0x5ec>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800899c:	003a      	movs	r2, r7
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800899e:	7ab3      	ldrb	r3, [r6, #10]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80089a0:	7af1      	ldrb	r1, [r6, #11]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80089a2:	021b      	lsls	r3, r3, #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80089a4:	0409      	lsls	r1, r1, #16
 80089a6:	430b      	orrs	r3, r1
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80089a8:	7a71      	ldrb	r1, [r6, #9]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80089aa:	32c8      	adds	r2, #200	; 0xc8
 80089ac:	430b      	orrs	r3, r1
 80089ae:	6013      	str	r3, [r2, #0]
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80089b0:	003b      	movs	r3, r7
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80089b2:	0039      	movs	r1, r7
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80089b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089b6:	33cc      	adds	r3, #204	; 0xcc
 80089b8:	601a      	str	r2, [r3, #0]
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80089ba:	7c33      	ldrb	r3, [r6, #16]
 80089bc:	3161      	adds	r1, #97	; 0x61
 80089be:	065a      	lsls	r2, r3, #25
 80089c0:	0f52      	lsrs	r2, r2, #29
 80089c2:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80089c4:	003a      	movs	r2, r7
 80089c6:	071b      	lsls	r3, r3, #28
 80089c8:	0f1b      	lsrs	r3, r3, #28
 80089ca:	3268      	adds	r2, #104	; 0x68
 80089cc:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80089ce:	003a      	movs	r2, r7
 80089d0:	3270      	adds	r2, #112	; 0x70
 80089d2:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80089d4:	7c73      	ldrb	r3, [r6, #17]
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d03e      	beq.n	8008a58 <LoRaMacProcess+0x5e8>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80089da:	653b      	str	r3, [r7, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80089dc:	23fa      	movs	r3, #250	; 0xfa
 80089de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4353      	muls	r3, r2
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80089e4:	22fa      	movs	r2, #250	; 0xfa
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80089e6:	2600      	movs	r6, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80089e8:	0092      	lsls	r2, r2, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80089ea:	653b      	str	r3, [r7, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80089ec:	189b      	adds	r3, r3, r2
 80089ee:	657b      	str	r3, [r7, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80089f0:	4b7a      	ldr	r3, [pc, #488]	; (8008bdc <LoRaMacProcess+0x76c>)
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80089f2:	aa06      	add	r2, sp, #24
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80089f4:	73de      	strb	r6, [r3, #15]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80089f6:	2342      	movs	r3, #66	; 0x42
 80089f8:	189b      	adds	r3, r3, r2
 80089fa:	9310      	str	r3, [sp, #64]	; 0x40
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80089fc:	003b      	movs	r3, r7
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80089fe:	a910      	add	r1, sp, #64	; 0x40
                applyCFList.Size = size - 17;
 8008a00:	3d11      	subs	r5, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008a02:	3340      	adds	r3, #64	; 0x40
                applyCFList.Size = size - 17;
 8008a04:	710d      	strb	r5, [r1, #4]
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008a06:	7818      	ldrb	r0, [r3, #0]
 8008a08:	f002 f98c 	bl	800ad24 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	4a73      	ldr	r2, [pc, #460]	; (8008bdc <LoRaMacProcess+0x76c>)
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008a10:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008a12:	7453      	strb	r3, [r2, #17]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008a14:	f001 fcb4 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 8008a18:	42b0      	cmp	r0, r6
 8008a1a:	d003      	beq.n	8008a24 <LoRaMacProcess+0x5b4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	0030      	movs	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008a20:	f001 fc6a 	bl	800a2f8 <LoRaMacConfirmQueueSetStatus>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8008a24:	2308      	movs	r3, #8
 8008a26:	4966      	ldr	r1, [pc, #408]	; (8008bc0 <LoRaMacProcess+0x750>)
 8008a28:	5c62      	ldrb	r2, [r4, r1]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	5463      	strb	r3, [r4, r1]
    if( MacCtx.NodeAckRequested == true )
 8008a2e:	4c69      	ldr	r4, [pc, #420]	; (8008bd4 <LoRaMacProcess+0x764>)
 8008a30:	4b6b      	ldr	r3, [pc, #428]	; (8008be0 <LoRaMacProcess+0x770>)
 8008a32:	5ce3      	ldrb	r3, [r4, r3]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d100      	bne.n	8008a3a <LoRaMacProcess+0x5ca>
 8008a38:	e1b0      	b.n	8008d9c <LoRaMacProcess+0x92c>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008a3a:	4b6a      	ldr	r3, [pc, #424]	; (8008be4 <LoRaMacProcess+0x774>)
 8008a3c:	5ce3      	ldrb	r3, [r4, r3]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <LoRaMacProcess+0x5d8>
            OnAckTimeoutTimerEvent( NULL );
 8008a42:	2000      	movs	r0, #0
 8008a44:	f7fe fd16 	bl	8007474 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008a48:	2320      	movs	r3, #32
 8008a4a:	495d      	ldr	r1, [pc, #372]	; (8008bc0 <LoRaMacProcess+0x750>)
 8008a4c:	5c62      	ldrb	r2, [r4, r1]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8008a52:	f7fe fce5 	bl	8007420 <UpdateRxSlotIdleState>
 8008a56:	e5d1      	b.n	80085fc <LoRaMacProcess+0x18c>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e7be      	b.n	80089da <LoRaMacProcess+0x56a>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008a5c:	2001      	movs	r0, #1
 8008a5e:	f001 fc8f 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d0de      	beq.n	8008a24 <LoRaMacProcess+0x5b4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008a66:	2101      	movs	r1, #1
 8008a68:	2007      	movs	r0, #7
 8008a6a:	e7d9      	b.n	8008a20 <LoRaMacProcess+0x5b0>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	4a5e      	ldr	r2, [pc, #376]	; (8008be8 <LoRaMacProcess+0x778>)
 8008a70:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008a72:	4b5e      	ldr	r3, [pc, #376]	; (8008bec <LoRaMacProcess+0x77c>)
 8008a74:	a90c      	add	r1, sp, #48	; 0x30
 8008a76:	001a      	movs	r2, r3
 8008a78:	3275      	adds	r2, #117	; 0x75
 8008a7a:	7812      	ldrb	r2, [r2, #0]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008a7c:	4855      	ldr	r0, [pc, #340]	; (8008bd4 <LoRaMacProcess+0x764>)
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008a7e:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008a80:	2284      	movs	r2, #132	; 0x84
 8008a82:	00d2      	lsls	r2, r2, #3
 8008a84:	5c82      	ldrb	r2, [r0, r2]
 8008a86:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008a88:	220d      	movs	r2, #13
 8008a8a:	700a      	strb	r2, [r1, #0]
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008a8c:	001a      	movs	r2, r3
 8008a8e:	3280      	adds	r2, #128	; 0x80
 8008a90:	7812      	ldrb	r2, [r2, #0]
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	d001      	beq.n	8008a9a <LoRaMacProcess+0x62a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008a96:	220e      	movs	r2, #14
 8008a98:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008a9a:	3340      	adds	r3, #64	; 0x40
 8008a9c:	7818      	ldrb	r0, [r3, #0]
 8008a9e:	f002 f91b 	bl	800acd8 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008aa2:	9a02      	ldr	r2, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008aa4:	900a      	str	r0, [sp, #40]	; 0x28
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008aa6:	3a0d      	subs	r2, #13
 8008aa8:	1c13      	adds	r3, r2, #0
 8008aaa:	0412      	lsls	r2, r2, #16
 8008aac:	d500      	bpl.n	8008ab0 <LoRaMacProcess+0x640>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ab2:	b21b      	sxth	r3, r3
 8008ab4:	b212      	sxth	r2, r2
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	dd00      	ble.n	8008abc <LoRaMacProcess+0x64c>
 8008aba:	e755      	b.n	8008968 <LoRaMacProcess+0x4f8>
 8008abc:	9b02      	ldr	r3, [sp, #8]
 8008abe:	2b0b      	cmp	r3, #11
 8008ac0:	d800      	bhi.n	8008ac4 <LoRaMacProcess+0x654>
 8008ac2:	e751      	b.n	8008968 <LoRaMacProcess+0x4f8>
            macMsgData.BufSize = size;
 8008ac4:	225c      	movs	r2, #92	; 0x5c
 8008ac6:	ab06      	add	r3, sp, #24
 8008ac8:	189b      	adds	r3, r3, r2
 8008aca:	9a02      	ldr	r2, [sp, #8]
            macMsgData.Buffer = payload;
 8008acc:	951c      	str	r5, [sp, #112]	; 0x70
            macMsgData.BufSize = size;
 8008ace:	701a      	strb	r2, [r3, #0]
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008ad0:	22ff      	movs	r2, #255	; 0xff
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008ad2:	4b47      	ldr	r3, [pc, #284]	; (8008bf0 <LoRaMacProcess+0x780>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008ad4:	a81c      	add	r0, sp, #112	; 0x70
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008ad6:	9325      	str	r3, [sp, #148]	; 0x94
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008ad8:	ab26      	add	r3, sp, #152	; 0x98
 8008ada:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008adc:	f001 fff8 	bl	800aad0 <LoRaMacParserData>
 8008ae0:	9004      	str	r0, [sp, #16]
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d000      	beq.n	8008ae8 <LoRaMacProcess+0x678>
 8008ae6:	e73f      	b.n	8008968 <LoRaMacProcess+0x4f8>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008ae8:	2386      	movs	r3, #134	; 0x86
 8008aea:	4a3a      	ldr	r2, [pc, #232]	; (8008bd4 <LoRaMacProcess+0x764>)
 8008aec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	50d1      	str	r1, [r2, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008af2:	2264      	movs	r2, #100	; 0x64
 8008af4:	ab06      	add	r3, sp, #24
 8008af6:	189b      	adds	r3, r3, r2
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	230f      	movs	r3, #15
 8008afc:	0010      	movs	r0, r2
 8008afe:	4018      	ands	r0, r3
 8008b00:	421a      	tst	r2, r3
 8008b02:	d005      	beq.n	8008b10 <LoRaMacProcess+0x6a0>
 8008b04:	334a      	adds	r3, #74	; 0x4a
 8008b06:	ac06      	add	r4, sp, #24
 8008b08:	191b      	adds	r3, r3, r4
 8008b0a:	7fdb      	ldrb	r3, [r3, #31]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d151      	bne.n	8008bb4 <LoRaMacProcess+0x744>
    else if( macMsg->FRMPayloadSize == 0 )
 8008b10:	ab26      	add	r3, sp, #152	; 0x98
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d04f      	beq.n	8008bb8 <LoRaMacProcess+0x748>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d000      	beq.n	8008b1e <LoRaMacProcess+0x6ae>
 8008b1c:	e724      	b.n	8008968 <LoRaMacProcess+0x4f8>
 8008b1e:	2359      	movs	r3, #89	; 0x59
 8008b20:	a806      	add	r0, sp, #24
 8008b22:	181b      	adds	r3, r3, r0
 8008b24:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 8008b26:	1e58      	subs	r0, r3, #1
 8008b28:	4183      	sbcs	r3, r0
 8008b2a:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 8008b2c:	9302      	str	r3, [sp, #8]
            downLinkCounter = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	930b      	str	r3, [sp, #44]	; 0x2c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008b32:	4b2e      	ldr	r3, [pc, #184]	; (8008bec <LoRaMacProcess+0x77c>)
 8008b34:	0018      	movs	r0, r3
 8008b36:	30d4      	adds	r0, #212	; 0xd4
 8008b38:	6800      	ldr	r0, [r0, #0]
 8008b3a:	4281      	cmp	r1, r0
 8008b3c:	d13e      	bne.n	8008bbc <LoRaMacProcess+0x74c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008b3e:	0019      	movs	r1, r3
 8008b40:	31d2      	adds	r1, #210	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008b42:	7809      	ldrb	r1, [r1, #0]
 8008b44:	2501      	movs	r5, #1
 8008b46:	2900      	cmp	r1, #0
 8008b48:	d01a      	beq.n	8008b80 <LoRaMacProcess+0x710>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	31d3      	adds	r1, #211	; 0xd3
 8008b4e:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008b50:	0019      	movs	r1, r3
 8008b52:	31f0      	adds	r1, #240	; 0xf0
 8008b54:	6809      	ldr	r1, [r1, #0]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008b56:	33fc      	adds	r3, #252	; 0xfc
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008b58:	6809      	ldr	r1, [r1, #0]
 8008b5a:	910b      	str	r1, [sp, #44]	; 0x2c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d103      	bne.n	8008b6a <LoRaMacProcess+0x6fa>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008b62:	2103      	movs	r1, #3
 8008b64:	4b1b      	ldr	r3, [pc, #108]	; (8008bd4 <LoRaMacProcess+0x764>)
 8008b66:	4c1a      	ldr	r4, [pc, #104]	; (8008bd0 <LoRaMacProcess+0x760>)
 8008b68:	5519      	strb	r1, [r3, r4]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008b6a:	9b02      	ldr	r3, [sp, #8]
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d000      	beq.n	8008b72 <LoRaMacProcess+0x702>
 8008b70:	e6fa      	b.n	8008968 <LoRaMacProcess+0x4f8>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008b72:	2360      	movs	r3, #96	; 0x60
 8008b74:	421a      	tst	r2, r3
 8008b76:	d000      	beq.n	8008b7a <LoRaMacProcess+0x70a>
 8008b78:	e6f6      	b.n	8008968 <LoRaMacProcess+0x4f8>
 8008b7a:	3b5f      	subs	r3, #95	; 0x5f
 8008b7c:	9007      	str	r0, [sp, #28]
 8008b7e:	9304      	str	r3, [sp, #16]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8008b80:	2315      	movs	r3, #21
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008b82:	4c1a      	ldr	r4, [pc, #104]	; (8008bec <LoRaMacProcess+0x77c>)
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8008b84:	a90c      	add	r1, sp, #48	; 0x30
 8008b86:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008b88:	0023      	movs	r3, r4
 8008b8a:	3340      	adds	r3, #64	; 0x40
 8008b8c:	7818      	ldrb	r0, [r3, #0]
 8008b8e:	f002 f8a3 	bl	800acd8 <RegionGetPhyParam>
 8008b92:	34ff      	adds	r4, #255	; 0xff
 8008b94:	7be4      	ldrb	r4, [r4, #15]
 8008b96:	4e10      	ldr	r6, [pc, #64]	; (8008bd8 <LoRaMacProcess+0x768>)
 8008b98:	900a      	str	r0, [sp, #40]	; 0x28
    switch( addrID )
 8008b9a:	2d00      	cmp	r5, #0
 8008b9c:	d02a      	beq.n	8008bf4 <LoRaMacProcess+0x784>
 8008b9e:	2d01      	cmp	r5, #1
 8008ba0:	d154      	bne.n	8008c4c <LoRaMacProcess+0x7dc>
            if( lrWanVersion.Fields.Minor == 1 )
 8008ba2:	2c01      	cmp	r4, #1
 8008ba4:	d14d      	bne.n	8008c42 <LoRaMacProcess+0x7d2>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008ba6:	9b02      	ldr	r3, [sp, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <LoRaMacProcess+0x740>
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d122      	bne.n	8008bf6 <LoRaMacProcess+0x786>
                    *fCntID = A_FCNT_DOWN;
 8008bb0:	2402      	movs	r4, #2
 8008bb2:	e020      	b.n	8008bf6 <LoRaMacProcess+0x786>
        *fType = FRAME_TYPE_A;
 8008bb4:	9b04      	ldr	r3, [sp, #16]
 8008bb6:	e7b9      	b.n	8008b2c <LoRaMacProcess+0x6bc>
        *fType = FRAME_TYPE_B;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e7b7      	b.n	8008b2c <LoRaMacProcess+0x6bc>
 8008bbc:	2501      	movs	r5, #1
 8008bbe:	e7df      	b.n	8008b80 <LoRaMacProcess+0x710>
 8008bc0:	00000481 	.word	0x00000481
 8008bc4:	20000de8 	.word	0x20000de8
 8008bc8:	20000dcc 	.word	0x20000dcc
 8008bcc:	20000d88 	.word	0x20000d88
 8008bd0:	0000047f 	.word	0x0000047f
 8008bd4:	2000096c 	.word	0x2000096c
 8008bd8:	0000041d 	.word	0x0000041d
 8008bdc:	20000797 	.word	0x20000797
 8008be0:	00000414 	.word	0x00000414
 8008be4:	0000043c 	.word	0x0000043c
 8008be8:	0000041c 	.word	0x0000041c
 8008bec:	20000698 	.word	0x20000698
 8008bf0:	20000ba4 	.word	0x20000ba4
    switch( addrID )
 8008bf4:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8008bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf8:	af1c      	add	r7, sp, #112	; 0x70
 8008bfa:	b299      	uxth	r1, r3
 8008bfc:	0020      	movs	r0, r4
 8008bfe:	89fa      	ldrh	r2, [r7, #14]
 8008c00:	ab0b      	add	r3, sp, #44	; 0x2c
 8008c02:	f001 fd33 	bl	800a66c <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d024      	beq.n	8008c54 <LoRaMacProcess+0x7e4>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008c0a:	4bba      	ldr	r3, [pc, #744]	; (8008ef4 <LoRaMacProcess+0xa84>)
 8008c0c:	2807      	cmp	r0, #7
 8008c0e:	d11a      	bne.n	8008c46 <LoRaMacProcess+0x7d6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008c10:	2208      	movs	r2, #8
 8008c12:	559a      	strb	r2, [r3, r6]
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8008c14:	4bb8      	ldr	r3, [pc, #736]	; (8008ef8 <LoRaMacProcess+0xa88>)
 8008c16:	001a      	movs	r2, r3
 8008c18:	32ff      	adds	r2, #255	; 0xff
 8008c1a:	7bd2      	ldrb	r2, [r2, #15]
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	d10b      	bne.n	8008c38 <LoRaMacProcess+0x7c8>
 8008c20:	9906      	ldr	r1, [sp, #24]
 8008c22:	321f      	adds	r2, #31
 8008c24:	4391      	bics	r1, r2
 8008c26:	29a0      	cmp	r1, #160	; 0xa0
 8008c28:	d106      	bne.n	8008c38 <LoRaMacProcess+0x7c8>
 8008c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	d102      	bne.n	8008c38 <LoRaMacProcess+0x7c8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8008c32:	2201      	movs	r2, #1
 8008c34:	333a      	adds	r3, #58	; 0x3a
 8008c36:	701a      	strb	r2, [r3, #0]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008c38:	4bae      	ldr	r3, [pc, #696]	; (8008ef4 <LoRaMacProcess+0xa84>)
 8008c3a:	4ab0      	ldr	r2, [pc, #704]	; (8008efc <LoRaMacProcess+0xa8c>)
 8008c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c3e:	5099      	str	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8008c40:	e696      	b.n	8008970 <LoRaMacProcess+0x500>
                *fCntID = FCNT_DOWN;
 8008c42:	2403      	movs	r4, #3
 8008c44:	e7d7      	b.n	8008bf6 <LoRaMacProcess+0x786>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8008c46:	220a      	movs	r2, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8008c48:	2808      	cmp	r0, #8
 8008c4a:	d001      	beq.n	8008c50 <LoRaMacProcess+0x7e0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	4ba9      	ldr	r3, [pc, #676]	; (8008ef4 <LoRaMacProcess+0xa84>)
 8008c50:	559a      	strb	r2, [r3, r6]
 8008c52:	e7f1      	b.n	8008c38 <LoRaMacProcess+0x7c8>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c56:	0022      	movs	r2, r4
 8008c58:	0028      	movs	r0, r5
 8008c5a:	9907      	ldr	r1, [sp, #28]
 8008c5c:	9700      	str	r7, [sp, #0]
 8008c5e:	f001 fde1 	bl	800a824 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008c62:	4ba4      	ldr	r3, [pc, #656]	; (8008ef4 <LoRaMacProcess+0xa84>)
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d005      	beq.n	8008c74 <LoRaMacProcess+0x804>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008c68:	3802      	subs	r0, #2
 8008c6a:	1e42      	subs	r2, r0, #1
 8008c6c:	4190      	sbcs	r0, r2
 8008c6e:	300b      	adds	r0, #11
 8008c70:	5598      	strb	r0, [r3, r6]
 8008c72:	e67d      	b.n	8008970 <LoRaMacProcess+0x500>
            MacCtx.McpsIndication.Multicast = multicast;
 8008c74:	4aa2      	ldr	r2, [pc, #648]	; (8008f00 <LoRaMacProcess+0xa90>)
 8008c76:	9904      	ldr	r1, [sp, #16]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008c78:	4ca2      	ldr	r4, [pc, #648]	; (8008f04 <LoRaMacProcess+0xa94>)
            MacCtx.McpsIndication.Multicast = multicast;
 8008c7a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008c7c:	7b3a      	ldrb	r2, [r7, #12]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008c7e:	5598      	strb	r0, [r3, r6]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008c80:	06d1      	lsls	r1, r2, #27
 8008c82:	0fc9      	lsrs	r1, r1, #31
 8008c84:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 8008c86:	49a0      	ldr	r1, [pc, #640]	; (8008f08 <LoRaMacProcess+0xa98>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008c88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
            MacCtx.McpsIndication.Buffer = NULL;
 8008c8a:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 8008c8c:	3104      	adds	r1, #4
 8008c8e:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008c90:	499a      	ldr	r1, [pc, #616]	; (8008efc <LoRaMacProcess+0xa8c>)
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008c92:	0692      	lsls	r2, r2, #26
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008c94:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008c96:	499d      	ldr	r1, [pc, #628]	; (8008f0c <LoRaMacProcess+0xa9c>)
 8008c98:	0fd2      	lsrs	r2, r2, #31
 8008c9a:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008c9c:	499c      	ldr	r1, [pc, #624]	; (8008f10 <LoRaMacProcess+0xaa0>)
 8008c9e:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008ca0:	499c      	ldr	r1, [pc, #624]	; (8008f14 <LoRaMacProcess+0xaa4>)
 8008ca2:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008ca4:	4a9c      	ldr	r2, [pc, #624]	; (8008f18 <LoRaMacProcess+0xaa8>)
 8008ca6:	5c9a      	ldrb	r2, [r3, r2]
 8008ca8:	2a01      	cmp	r2, #1
 8008caa:	d801      	bhi.n	8008cb0 <LoRaMacProcess+0x840>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008cac:	4b92      	ldr	r3, [pc, #584]	; (8008ef8 <LoRaMacProcess+0xa88>)
 8008cae:	6298      	str	r0, [r3, #40]	; 0x28
            if( multicast == 1 )
 8008cb0:	9b04      	ldr	r3, [sp, #16]
 8008cb2:	4c90      	ldr	r4, [pc, #576]	; (8008ef4 <LoRaMacProcess+0xa84>)
 8008cb4:	ad1c      	add	r5, sp, #112	; 0x70
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d130      	bne.n	8008d1c <LoRaMacProcess+0x8ac>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008cba:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008cbc:	4997      	ldr	r1, [pc, #604]	; (8008f1c <LoRaMacProcess+0xaac>)
 8008cbe:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008cc0:	2387      	movs	r3, #135	; 0x87
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	5ce1      	ldrb	r1, [r4, r3]
 8008cc6:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008cc8:	2a01      	cmp	r2, #1
 8008cca:	d805      	bhi.n	8008cd8 <LoRaMacProcess+0x868>
        if( request == MCPS_CONFIRMED )
 8008ccc:	2901      	cmp	r1, #1
 8008cce:	d101      	bne.n	8008cd4 <LoRaMacProcess+0x864>
            if( fCtrl.Bits.Ack == 1 )
 8008cd0:	069b      	lsls	r3, r3, #26
 8008cd2:	d501      	bpl.n	8008cd8 <LoRaMacProcess+0x868>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8008cd4:	f001 fa38 	bl	800a148 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8008cd8:	2759      	movs	r7, #89	; 0x59
 8008cda:	ab06      	add	r3, sp, #24
 8008cdc:	18ff      	adds	r7, r7, r3
 8008cde:	9b02      	ldr	r3, [sp, #8]
 8008ce0:	4e8f      	ldr	r6, [pc, #572]	; (8008f20 <LoRaMacProcess+0xab0>)
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d033      	beq.n	8008d4e <LoRaMacProcess+0x8de>
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d008      	beq.n	8008cfc <LoRaMacProcess+0x88c>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008cea:	7b29      	ldrb	r1, [r5, #12]
 8008cec:	9a03      	ldr	r2, [sp, #12]
 8008cee:	0709      	lsls	r1, r1, #28
 8008cf0:	0f09      	lsrs	r1, r1, #28
 8008cf2:	a820      	add	r0, sp, #128	; 0x80
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d02e      	beq.n	8008d56 <LoRaMacProcess+0x8e6>
 8008cf8:	f7ff f89e 	bl	8007e38 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008cfc:	7ffb      	ldrb	r3, [r7, #31]
 8008cfe:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008d00:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d02:	9302      	str	r3, [sp, #8]
 8008d04:	9a02      	ldr	r2, [sp, #8]
 8008d06:	4b80      	ldr	r3, [pc, #512]	; (8008f08 <LoRaMacProcess+0xa98>)
 8008d08:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008d0a:	ab26      	add	r3, sp, #152	; 0x98
 8008d0c:	781a      	ldrb	r2, [r3, #0]
 8008d0e:	2385      	movs	r3, #133	; 0x85
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 8008d14:	2201      	movs	r2, #1
 8008d16:	4b83      	ldr	r3, [pc, #524]	; (8008f24 <LoRaMacProcess+0xab4>)
 8008d18:	54e2      	strb	r2, [r4, r3]
                    break;
 8008d1a:	e020      	b.n	8008d5e <LoRaMacProcess+0x8ee>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008d1c:	231f      	movs	r3, #31
 8008d1e:	9906      	ldr	r1, [sp, #24]
 8008d20:	4399      	bics	r1, r3
 8008d22:	4b75      	ldr	r3, [pc, #468]	; (8008ef8 <LoRaMacProcess+0xa88>)
 8008d24:	29a0      	cmp	r1, #160	; 0xa0
 8008d26:	d10c      	bne.n	8008d42 <LoRaMacProcess+0x8d2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008d28:	0019      	movs	r1, r3
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	313a      	adds	r1, #58	; 0x3a
 8008d2e:	7008      	strb	r0, [r1, #0]
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008d30:	0019      	movs	r1, r3
 8008d32:	31ff      	adds	r1, #255	; 0xff
 8008d34:	7bc9      	ldrb	r1, [r1, #15]
 8008d36:	2900      	cmp	r1, #0
 8008d38:	d101      	bne.n	8008d3e <LoRaMacProcess+0x8ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008d3a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008d3c:	6359      	str	r1, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e7bc      	b.n	8008cbc <LoRaMacProcess+0x84c>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008d42:	2100      	movs	r1, #0
 8008d44:	333a      	adds	r3, #58	; 0x3a
 8008d46:	7019      	strb	r1, [r3, #0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008d48:	4b74      	ldr	r3, [pc, #464]	; (8008f1c <LoRaMacProcess+0xaac>)
 8008d4a:	54e1      	strb	r1, [r4, r3]
 8008d4c:	e7b8      	b.n	8008cc0 <LoRaMacProcess+0x850>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008d4e:	ab26      	add	r3, sp, #152	; 0x98
 8008d50:	7819      	ldrb	r1, [r3, #0]
 8008d52:	9a03      	ldr	r2, [sp, #12]
 8008d54:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008d56:	f7ff f86f 	bl	8007e38 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d5a:	7ffb      	ldrb	r3, [r7, #31]
 8008d5c:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008d5e:	4972      	ldr	r1, [pc, #456]	; (8008f28 <LoRaMacProcess+0xab8>)
 8008d60:	2302      	movs	r3, #2
 8008d62:	5c62      	ldrb	r2, [r4, r1]
 8008d64:	e661      	b.n	8008a2a <LoRaMacProcess+0x5ba>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008d66:	9f02      	ldr	r7, [sp, #8]
 8008d68:	4c70      	ldr	r4, [pc, #448]	; (8008f2c <LoRaMacProcess+0xabc>)
 8008d6a:	3f01      	subs	r7, #1
 8008d6c:	b2ba      	uxth	r2, r7
 8008d6e:	1c69      	adds	r1, r5, #1
 8008d70:	0020      	movs	r0, r4
 8008d72:	f003 f91f 	bl	800bfb4 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008d76:	2303      	movs	r3, #3
 8008d78:	4a68      	ldr	r2, [pc, #416]	; (8008f1c <LoRaMacProcess+0xaac>)
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008d7a:	496b      	ldr	r1, [pc, #428]	; (8008f28 <LoRaMacProcess+0xab8>)
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008d7c:	52b3      	strh	r3, [r6, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008d7e:	4b62      	ldr	r3, [pc, #392]	; (8008f08 <LoRaMacProcess+0xa98>)
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008d80:	5c72      	ldrb	r2, [r6, r1]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008d82:	50f4      	str	r4, [r6, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008d84:	3304      	adds	r3, #4
 8008d86:	54f7      	strb	r7, [r6, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	5473      	strb	r3, [r6, r1]
            break;
 8008d8e:	e64e      	b.n	8008a2e <LoRaMacProcess+0x5be>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d90:	2201      	movs	r2, #1
 8008d92:	4b67      	ldr	r3, [pc, #412]	; (8008f30 <LoRaMacProcess+0xac0>)
 8008d94:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 8008d96:	f7fe fb99 	bl	80074cc <PrepareRxDoneAbort>
            break;
 8008d9a:	e648      	b.n	8008a2e <LoRaMacProcess+0x5be>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008d9c:	4b56      	ldr	r3, [pc, #344]	; (8008ef8 <LoRaMacProcess+0xa88>)
 8008d9e:	33fc      	adds	r3, #252	; 0xfc
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d000      	beq.n	8008da8 <LoRaMacProcess+0x938>
 8008da6:	e64f      	b.n	8008a48 <LoRaMacProcess+0x5d8>
 8008da8:	e64b      	b.n	8008a42 <LoRaMacProcess+0x5d2>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008daa:	4b5f      	ldr	r3, [pc, #380]	; (8008f28 <LoRaMacProcess+0xab8>)
 8008dac:	5ce3      	ldrb	r3, [r4, r3]
 8008dae:	075b      	lsls	r3, r3, #29
 8008db0:	d512      	bpl.n	8008dd8 <LoRaMacProcess+0x968>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008db2:	2001      	movs	r0, #1
 8008db4:	26d0      	movs	r6, #208	; 0xd0
 8008db6:	f001 fae3 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 8008dba:	00b6      	lsls	r6, r6, #2
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d036      	beq.n	8008e2e <LoRaMacProcess+0x9be>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f001 faad 	bl	800a320 <LoRaMacConfirmQueueGetStatus>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d102      	bne.n	8008dd0 <LoRaMacProcess+0x960>
                MacCtx.ChannelsNbTransCounter = 0;
 8008dca:	2382      	movs	r3, #130	; 0x82
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	59a2      	ldr	r2, [r4, r6]
 8008dd4:	439a      	bics	r2, r3
 8008dd6:	51a2      	str	r2, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008dd8:	4b53      	ldr	r3, [pc, #332]	; (8008f28 <LoRaMacProcess+0xab8>)
 8008dda:	5ce1      	ldrb	r1, [r4, r3]
 8008ddc:	07cb      	lsls	r3, r1, #31
 8008dde:	d400      	bmi.n	8008de2 <LoRaMacProcess+0x972>
 8008de0:	e465      	b.n	80086ae <LoRaMacProcess+0x23e>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8008de2:	2387      	movs	r3, #135	; 0x87
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	5ce3      	ldrb	r3, [r4, r3]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <LoRaMacProcess+0x980>
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d129      	bne.n	8008e44 <LoRaMacProcess+0x9d4>
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8008df0:	4b41      	ldr	r3, [pc, #260]	; (8008ef8 <LoRaMacProcess+0xa88>)
    if( MacCtx.ChannelsNbTransCounter >=
 8008df2:	2082      	movs	r0, #130	; 0x82
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8008df4:	001a      	movs	r2, r3
    if( MacCtx.ChannelsNbTransCounter >=
 8008df6:	00c0      	lsls	r0, r0, #3
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8008df8:	3260      	adds	r2, #96	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8008dfa:	5c20      	ldrb	r0, [r4, r0]
 8008dfc:	7812      	ldrb	r2, [r2, #0]
 8008dfe:	4290      	cmp	r0, r2
 8008e00:	d209      	bcs.n	8008e16 <LoRaMacProcess+0x9a6>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008e02:	078a      	lsls	r2, r1, #30
 8008e04:	d550      	bpl.n	8008ea8 <LoRaMacProcess+0xa38>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8008e06:	33fc      	adds	r3, #252	; 0xfc
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <LoRaMacProcess+0x9a6>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008e0e:	4b42      	ldr	r3, [pc, #264]	; (8008f18 <LoRaMacProcess+0xaa8>)
 8008e10:	5ce3      	ldrb	r3, [r4, r3]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d148      	bne.n	8008ea8 <LoRaMacProcess+0xa38>
            TimerStop( &MacCtx.TxDelayedTimer );
 8008e16:	4847      	ldr	r0, [pc, #284]	; (8008f34 <LoRaMacProcess+0xac4>)
 8008e18:	f004 ff6e 	bl	800dcf8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008e1c:	22d0      	movs	r2, #208	; 0xd0
 8008e1e:	2320      	movs	r3, #32
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	58a1      	ldr	r1, [r4, r2]
 8008e24:	4399      	bics	r1, r3
 8008e26:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 8008e28:	f7ff fab2 	bl	8008390 <StopRetransmission.isra.0>
 8008e2c:	e43f      	b.n	80086ae <LoRaMacProcess+0x23e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008e2e:	2005      	movs	r0, #5
 8008e30:	f001 faa6 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d1cb      	bne.n	8008dd0 <LoRaMacProcess+0x960>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8008e38:	2006      	movs	r0, #6
 8008e3a:	f001 faa1 	bl	800a380 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d1c6      	bne.n	8008dd0 <LoRaMacProcess+0x960>
 8008e42:	e7c9      	b.n	8008dd8 <LoRaMacProcess+0x968>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d12f      	bne.n	8008ea8 <LoRaMacProcess+0xa38>
            if( MacCtx.AckTimeoutRetry == true )
 8008e48:	4b3b      	ldr	r3, [pc, #236]	; (8008f38 <LoRaMacProcess+0xac8>)
 8008e4a:	5ce2      	ldrb	r2, [r4, r3]
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	d100      	bne.n	8008e52 <LoRaMacProcess+0x9e2>
 8008e50:	e42d      	b.n	80086ae <LoRaMacProcess+0x23e>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008e52:	4e3a      	ldr	r6, [pc, #232]	; (8008f3c <LoRaMacProcess+0xacc>)
        MacCtx.AckTimeoutRetries )
 8008e54:	483a      	ldr	r0, [pc, #232]	; (8008f40 <LoRaMacProcess+0xad0>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008e56:	5da3      	ldrb	r3, [r4, r6]
        MacCtx.AckTimeoutRetries )
 8008e58:	5c27      	ldrb	r7, [r4, r0]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008e5a:	42bb      	cmp	r3, r7
 8008e5c:	d204      	bcs.n	8008e68 <LoRaMacProcess+0x9f8>
    return false;
 8008e5e:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008e60:	0789      	lsls	r1, r1, #30
 8008e62:	d501      	bpl.n	8008e68 <LoRaMacProcess+0x9f8>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008e64:	4a2b      	ldr	r2, [pc, #172]	; (8008f14 <LoRaMacProcess+0xaa4>)
 8008e66:	5ca2      	ldrb	r2, [r4, r2]
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008e68:	4823      	ldr	r0, [pc, #140]	; (8008ef8 <LoRaMacProcess+0xa88>)
 8008e6a:	0001      	movs	r1, r0
 8008e6c:	31ff      	adds	r1, #255	; 0xff
 8008e6e:	7bc9      	ldrb	r1, [r1, #15]
 8008e70:	2900      	cmp	r1, #0
 8008e72:	d13c      	bne.n	8008eee <LoRaMacProcess+0xa7e>
                    if( stopRetransmission == false )
 8008e74:	2a00      	cmp	r2, #0
 8008e76:	d123      	bne.n	8008ec0 <LoRaMacProcess+0xa50>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8008e78:	42bb      	cmp	r3, r7
 8008e7a:	d215      	bcs.n	8008ea8 <LoRaMacProcess+0xa38>
        MacCtx.AckTimeoutRetriesCounter++;
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	55a3      	strb	r3, [r4, r6]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8008e82:	07db      	lsls	r3, r3, #31
 8008e84:	d510      	bpl.n	8008ea8 <LoRaMacProcess+0xa38>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8008e86:	2322      	movs	r3, #34	; 0x22
 8008e88:	a91c      	add	r1, sp, #112	; 0x70
 8008e8a:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008e8c:	0003      	movs	r3, r0
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008e8e:	0006      	movs	r6, r0
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008e90:	3374      	adds	r3, #116	; 0x74
 8008e92:	781b      	ldrb	r3, [r3, #0]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008e94:	3639      	adds	r6, #57	; 0x39
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008e96:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008e98:	7833      	ldrb	r3, [r6, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008e9a:	3040      	adds	r0, #64	; 0x40
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008e9c:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008e9e:	7800      	ldrb	r0, [r0, #0]
 8008ea0:	f001 ff1a 	bl	800acd8 <RegionGetPhyParam>
 8008ea4:	9012      	str	r0, [sp, #72]	; 0x48
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8008ea6:	7030      	strb	r0, [r6, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 8008ea8:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 8008eaa:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8008eac:	491e      	ldr	r1, [pc, #120]	; (8008f28 <LoRaMacProcess+0xab8>)
 8008eae:	5c63      	ldrb	r3, [r4, r1]
 8008eb0:	4393      	bics	r3, r2
 8008eb2:	5463      	strb	r3, [r4, r1]
            MacCtx.AckTimeoutRetry = false;
 8008eb4:	4b20      	ldr	r3, [pc, #128]	; (8008f38 <LoRaMacProcess+0xac8>)
 8008eb6:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 8008eb8:	f7ff fa96 	bl	80083e8 <OnTxDelayedTimerEvent>
 8008ebc:	f7ff fbf7 	bl	80086ae <LoRaMacProcess+0x23e>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8008ec0:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <LoRaMacProcess+0xaa4>)
 8008ec2:	5ce7      	ldrb	r7, [r4, r3]
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	d10e      	bne.n	8008ee6 <LoRaMacProcess+0xa76>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	a91c      	add	r1, sp, #112	; 0x70
 8008ecc:	720b      	strb	r3, [r1, #8]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8008ece:	4b1d      	ldr	r3, [pc, #116]	; (8008f44 <LoRaMacProcess+0xad4>)
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008ed0:	3040      	adds	r0, #64	; 0x40
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8008ed2:	931c      	str	r3, [sp, #112]	; 0x70
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8008ed4:	4b1c      	ldr	r3, [pc, #112]	; (8008f48 <LoRaMacProcess+0xad8>)
 8008ed6:	604b      	str	r3, [r1, #4]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008ed8:	7800      	ldrb	r0, [r0, #0]
 8008eda:	f001 ff10 	bl	800acfe <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8008ede:	4b1b      	ldr	r3, [pc, #108]	; (8008f4c <LoRaMacProcess+0xadc>)
 8008ee0:	54e7      	strb	r7, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 8008ee2:	4b0c      	ldr	r3, [pc, #48]	; (8008f14 <LoRaMacProcess+0xaa4>)
 8008ee4:	54e7      	strb	r7, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008ee6:	5da2      	ldrb	r2, [r4, r6]
 8008ee8:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <LoRaMacProcess+0xae0>)
 8008eea:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 8008eec:	e793      	b.n	8008e16 <LoRaMacProcess+0x9a6>
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	d0da      	beq.n	8008ea8 <LoRaMacProcess+0xa38>
 8008ef2:	e790      	b.n	8008e16 <LoRaMacProcess+0x9a6>
 8008ef4:	2000096c 	.word	0x2000096c
 8008ef8:	20000698 	.word	0x20000698
 8008efc:	0000042c 	.word	0x0000042c
 8008f00:	0000041e 	.word	0x0000041e
 8008f04:	00000421 	.word	0x00000421
 8008f08:	00000424 	.word	0x00000424
 8008f0c:	0000042a 	.word	0x0000042a
 8008f10:	00000439 	.word	0x00000439
 8008f14:	0000043c 	.word	0x0000043c
 8008f18:	0000047f 	.word	0x0000047f
 8008f1c:	0000041c 	.word	0x0000041c
 8008f20:	0000041f 	.word	0x0000041f
 8008f24:	00000429 	.word	0x00000429
 8008f28:	00000481 	.word	0x00000481
 8008f2c:	20000ba4 	.word	0x20000ba4
 8008f30:	0000041d 	.word	0x0000041d
 8008f34:	20000cd4 	.word	0x20000cd4
 8008f38:	00000413 	.word	0x00000413
 8008f3c:	00000412 	.word	0x00000412
 8008f40:	00000411 	.word	0x00000411
 8008f44:	20000870 	.word	0x20000870
 8008f48:	2000088c 	.word	0x2000088c
 8008f4c:	00000414 	.word	0x00000414
 8008f50:	0000043d 	.word	0x0000043d

08008f54 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8008f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f56:	b08d      	sub	sp, #52	; 0x34
 8008f58:	0006      	movs	r6, r0
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008f5a:	2503      	movs	r5, #3
{
 8008f5c:	9102      	str	r1, [sp, #8]
 8008f5e:	9203      	str	r2, [sp, #12]
    if( ( primitives == NULL ) ||
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d100      	bne.n	8008f66 <LoRaMacInitialization+0x12>
 8008f64:	e163      	b.n	800922e <LoRaMacInitialization+0x2da>
 8008f66:	2900      	cmp	r1, #0
 8008f68:	d100      	bne.n	8008f6c <LoRaMacInitialization+0x18>
 8008f6a:	e160      	b.n	800922e <LoRaMacInitialization+0x2da>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8008f6c:	6803      	ldr	r3, [r0, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d100      	bne.n	8008f74 <LoRaMacInitialization+0x20>
 8008f72:	e15c      	b.n	800922e <LoRaMacInitialization+0x2da>
 8008f74:	6843      	ldr	r3, [r0, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d100      	bne.n	8008f7c <LoRaMacInitialization+0x28>
 8008f7a:	e158      	b.n	800922e <LoRaMacInitialization+0x2da>
        ( primitives->MacMcpsIndication == NULL ) ||
 8008f7c:	6883      	ldr	r3, [r0, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d100      	bne.n	8008f84 <LoRaMacInitialization+0x30>
 8008f82:	e154      	b.n	800922e <LoRaMacInitialization+0x2da>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8008f84:	68c3      	ldr	r3, [r0, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d100      	bne.n	8008f8c <LoRaMacInitialization+0x38>
 8008f8a:	e150      	b.n	800922e <LoRaMacInitialization+0x2da>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8008f8c:	0010      	movs	r0, r2
 8008f8e:	f001 fe9e 	bl	800acce <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8008f92:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d100      	bne.n	8008f9a <LoRaMacInitialization+0x46>
 8008f98:	e149      	b.n	800922e <LoRaMacInitialization+0x2da>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8008f9a:	0030      	movs	r0, r6
 8008f9c:	f001 f964 	bl	800a268 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8008fa0:	22b5      	movs	r2, #181	; 0xb5
 8008fa2:	4cb5      	ldr	r4, [pc, #724]	; (8009278 <LoRaMacInitialization+0x324>)
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	0020      	movs	r0, r4
 8008fa8:	0092      	lsls	r2, r2, #2
 8008faa:	f003 f818 	bl	800bfde <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8008fae:	22a1      	movs	r2, #161	; 0xa1
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	48b2      	ldr	r0, [pc, #712]	; (800927c <LoRaMacInitialization+0x328>)
 8008fb4:	00d2      	lsls	r2, r2, #3
 8008fb6:	f003 f812 	bl	800bfde <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008fba:	2201      	movs	r2, #1
    MacCtx.AckTimeoutRetries = 1;
    Nvm.MacGroup2.Region = region;
 8008fbc:	0027      	movs	r7, r4
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008fbe:	49af      	ldr	r1, [pc, #700]	; (800927c <LoRaMacInitialization+0x328>)
 8008fc0:	4baf      	ldr	r3, [pc, #700]	; (8009280 <LoRaMacInitialization+0x32c>)
    Nvm.MacGroup2.Region = region;
 8008fc2:	3740      	adds	r7, #64	; 0x40
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008fc4:	54ca      	strb	r2, [r1, r3]
    MacCtx.AckTimeoutRetries = 1;
 8008fc6:	4baf      	ldr	r3, [pc, #700]	; (8009284 <LoRaMacInitialization+0x330>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8008fc8:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetries = 1;
 8008fca:	54ca      	strb	r2, [r1, r3]
    Nvm.MacGroup2.Region = region;
 8008fcc:	9b03      	ldr	r3, [sp, #12]
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8008fce:	0021      	movs	r1, r4
    Nvm.MacGroup2.Region = region;
 8008fd0:	703b      	strb	r3, [r7, #0]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8008fd2:	0023      	movs	r3, r4

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8008fd4:	4aac      	ldr	r2, [pc, #688]	; (8009288 <LoRaMacInitialization+0x334>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8008fd6:	33fc      	adds	r3, #252	; 0xfc
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8008fd8:	611a      	str	r2, [r3, #16]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8008fda:	701d      	strb	r5, [r3, #0]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008fdc:	230f      	movs	r3, #15
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8008fde:	3180      	adds	r1, #128	; 0x80
 8008fe0:	700d      	strb	r5, [r1, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008fe2:	ad07      	add	r5, sp, #28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008fe4:	0029      	movs	r1, r5
 8008fe6:	9803      	ldr	r0, [sp, #12]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008fe8:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008fea:	f001 fe75 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8008fee:	1e43      	subs	r3, r0, #1
 8008ff0:	4198      	sbcs	r0, r3
 8008ff2:	0023      	movs	r3, r4

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8008ff4:	210a      	movs	r1, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8008ff6:	33ff      	adds	r3, #255	; 0xff
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8008ff8:	7029      	strb	r1, [r5, #0]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8008ffa:	7058      	strb	r0, [r3, #1]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008ffc:	0029      	movs	r1, r5
 8008ffe:	7838      	ldrb	r0, [r7, #0]
 8009000:	f001 fe6a 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009004:	0023      	movs	r3, r4
 8009006:	33c4      	adds	r3, #196	; 0xc4
 8009008:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800900a:	2006      	movs	r0, #6
 800900c:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800900e:	0029      	movs	r1, r5
 8009010:	7838      	ldrb	r0, [r7, #0]
 8009012:	f001 fe61 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009016:	0023      	movs	r3, r4
 8009018:	33c5      	adds	r3, #197	; 0xc5
 800901a:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800901c:	2310      	movs	r3, #16
 800901e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009020:	0029      	movs	r1, r5
 8009022:	7838      	ldrb	r0, [r7, #0]
 8009024:	f001 fe58 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009028:	4b98      	ldr	r3, [pc, #608]	; (800928c <LoRaMacInitialization+0x338>)

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800902a:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800902c:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800902e:	2311      	movs	r3, #17
 8009030:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009032:	7838      	ldrb	r0, [r7, #0]
 8009034:	f001 fe50 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009038:	4b95      	ldr	r3, [pc, #596]	; (8009290 <LoRaMacInitialization+0x33c>)

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800903a:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800903c:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800903e:	2312      	movs	r3, #18
 8009040:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009042:	7838      	ldrb	r0, [r7, #0]
 8009044:	f001 fe48 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009048:	4b92      	ldr	r3, [pc, #584]	; (8009294 <LoRaMacInitialization+0x340>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800904a:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800904c:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800904e:	2313      	movs	r3, #19
 8009050:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009052:	7838      	ldrb	r0, [r7, #0]
 8009054:	f001 fe40 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009058:	4b8f      	ldr	r3, [pc, #572]	; (8009298 <LoRaMacInitialization+0x344>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800905a:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800905c:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800905e:	2314      	movs	r3, #20
 8009060:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009062:	7838      	ldrb	r0, [r7, #0]
 8009064:	f001 fe38 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009068:	4b8c      	ldr	r3, [pc, #560]	; (800929c <LoRaMacInitialization+0x348>)

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800906a:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800906c:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800906e:	2317      	movs	r3, #23
 8009070:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009072:	7838      	ldrb	r0, [r7, #0]
 8009074:	f001 fe30 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009078:	0023      	movs	r3, r4
 800907a:	33a1      	adds	r3, #161	; 0xa1
 800907c:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800907e:	2318      	movs	r3, #24
 8009080:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009082:	0029      	movs	r1, r5
 8009084:	7838      	ldrb	r0, [r7, #0]
 8009086:	f001 fe27 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800908a:	0023      	movs	r3, r4
 800908c:	33a4      	adds	r3, #164	; 0xa4
 800908e:	6018      	str	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009090:	0023      	movs	r3, r4
 8009092:	33ac      	adds	r3, #172	; 0xac
 8009094:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009096:	2319      	movs	r3, #25
 8009098:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800909a:	0029      	movs	r1, r5
 800909c:	7838      	ldrb	r0, [r7, #0]
 800909e:	f001 fe1b 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80090a2:	0023      	movs	r3, r4
 80090a4:	b2c0      	uxtb	r0, r0
 80090a6:	33a8      	adds	r3, #168	; 0xa8
 80090a8:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80090aa:	0023      	movs	r3, r4
 80090ac:	33b0      	adds	r3, #176	; 0xb0
 80090ae:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80090b0:	231e      	movs	r3, #30
 80090b2:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090b4:	0029      	movs	r1, r5
 80090b6:	7838      	ldrb	r0, [r7, #0]
 80090b8:	f001 fe0e 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80090bc:	0023      	movs	r3, r4
 80090be:	33b4      	adds	r3, #180	; 0xb4
 80090c0:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80090c2:	231f      	movs	r3, #31
 80090c4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090c6:	0029      	movs	r1, r5
 80090c8:	7838      	ldrb	r0, [r7, #0]
 80090ca:	f001 fe05 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80090ce:	0023      	movs	r3, r4
 80090d0:	33b5      	adds	r3, #181	; 0xb5
 80090d2:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80090d4:	2320      	movs	r3, #32
 80090d6:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090d8:	0029      	movs	r1, r5
 80090da:	7838      	ldrb	r0, [r7, #0]
 80090dc:	f001 fdfc 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80090e0:	0023      	movs	r3, r4
 80090e2:	33b8      	adds	r3, #184	; 0xb8
 80090e4:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80090e6:	2321      	movs	r3, #33	; 0x21
 80090e8:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090ea:	0029      	movs	r1, r5
 80090ec:	7838      	ldrb	r0, [r7, #0]
 80090ee:	f001 fdf3 	bl	800acd8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80090f2:	0023      	movs	r3, r4
 80090f4:	33bc      	adds	r3, #188	; 0xbc
 80090f6:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80090f8:	230b      	movs	r3, #11
 80090fa:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090fc:	0029      	movs	r1, r5
 80090fe:	7838      	ldrb	r0, [r7, #0]
 8009100:	f001 fdea 	bl	800acd8 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8009104:	23fd      	movs	r3, #253	; 0xfd
 8009106:	495d      	ldr	r1, [pc, #372]	; (800927c <LoRaMacInitialization+0x328>)
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	52c8      	strh	r0, [r1, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800910c:	230c      	movs	r3, #12
 800910e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009110:	0029      	movs	r1, r5
 8009112:	7838      	ldrb	r0, [r7, #0]
 8009114:	f001 fde0 	bl	800acd8 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 8009118:	4958      	ldr	r1, [pc, #352]	; (800927c <LoRaMacInitialization+0x328>)
 800911a:	4b61      	ldr	r3, [pc, #388]	; (80092a0 <LoRaMacInitialization+0x34c>)

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800911c:	2201      	movs	r2, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800911e:	52c8      	strh	r0, [r1, r3]
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009120:	0023      	movs	r3, r4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009122:	210a      	movs	r1, #10
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009124:	33a0      	adds	r3, #160	; 0xa0
 8009126:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009128:	4b5e      	ldr	r3, [pc, #376]	; (80092a4 <LoRaMacInitialization+0x350>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800912a:	9006      	str	r0, [sp, #24]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800912c:	67d9      	str	r1, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800912e:	0023      	movs	r3, r4
 8009130:	2006      	movs	r0, #6
 8009132:	3388      	adds	r3, #136	; 0x88
 8009134:	7018      	strb	r0, [r3, #0]

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8009136:	0023      	movs	r3, r4
 8009138:	3348      	adds	r3, #72	; 0x48
 800913a:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800913c:	4b53      	ldr	r3, [pc, #332]	; (800928c <LoRaMacInitialization+0x338>)
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800913e:	2500      	movs	r5, #0
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009140:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8009142:	6461      	str	r1, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009144:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8009146:	4b52      	ldr	r3, [pc, #328]	; (8009290 <LoRaMacInitialization+0x33c>)
    params.Type = INIT_TYPE_DEFAULTS;
 8009148:	a909      	add	r1, sp, #36	; 0x24
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800914a:	681b      	ldr	r3, [r3, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 800914c:	720d      	strb	r5, [r1, #8]
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800914e:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8009150:	4b50      	ldr	r3, [pc, #320]	; (8009294 <LoRaMacInitialization+0x340>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8009156:	4b50      	ldr	r3, [pc, #320]	; (8009298 <LoRaMacInitialization+0x344>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800915c:	4b4f      	ldr	r3, [pc, #316]	; (800929c <LoRaMacInitialization+0x348>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8009162:	0023      	movs	r3, r4
 8009164:	3360      	adds	r3, #96	; 0x60
 8009166:	701a      	strb	r2, [r3, #0]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009168:	4b4f      	ldr	r3, [pc, #316]	; (80092a8 <LoRaMacInitialization+0x354>)
 800916a:	9309      	str	r3, [sp, #36]	; 0x24
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800916c:	4b4f      	ldr	r3, [pc, #316]	; (80092ac <LoRaMacInitialization+0x358>)
 800916e:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009170:	7838      	ldrb	r0, [r7, #0]
 8009172:	f001 fdc4 	bl	800acfe <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8009176:	23d2      	movs	r3, #210	; 0xd2
 8009178:	4940      	ldr	r1, [pc, #256]	; (800927c <LoRaMacInitialization+0x328>)
 800917a:	9802      	ldr	r0, [sp, #8]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	50c8      	str	r0, [r1, r3]
    ResetMacParameters( );
 8009180:	f7fe fac2 	bl	8007708 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8009184:	0023      	movs	r3, r4
 8009186:	2201      	movs	r2, #1
 8009188:	33fd      	adds	r3, #253	; 0xfd
 800918a:	701a      	strb	r2, [r3, #0]

    MacCtx.MacPrimitives = primitives;
 800918c:	23d1      	movs	r3, #209	; 0xd1
 800918e:	493b      	ldr	r1, [pc, #236]	; (800927c <LoRaMacInitialization+0x328>)
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	50ce      	str	r6, [r1, r3]
    MacCtx.MacFlags.Value = 0;
 8009194:	4b46      	ldr	r3, [pc, #280]	; (80092b0 <LoRaMacInitialization+0x35c>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8009196:	62e5      	str	r5, [r4, #44]	; 0x2c
    MacCtx.MacFlags.Value = 0;
 8009198:	54cd      	strb	r5, [r1, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 800919a:	3b42      	subs	r3, #66	; 0x42
 800919c:	3bff      	subs	r3, #255	; 0xff
 800919e:	50ca      	str	r2, [r1, r3]
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80091a0:	2101      	movs	r1, #1
 80091a2:	002a      	movs	r2, r5
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80091a4:	6325      	str	r5, [r4, #48]	; 0x30
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80091a6:	4b43      	ldr	r3, [pc, #268]	; (80092b4 <LoRaMacInitialization+0x360>)
 80091a8:	9500      	str	r5, [sp, #0]
 80091aa:	4249      	negs	r1, r1
 80091ac:	4842      	ldr	r0, [pc, #264]	; (80092b8 <LoRaMacInitialization+0x364>)
 80091ae:	f004 fd43 	bl	800dc38 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80091b2:	2101      	movs	r1, #1
 80091b4:	002a      	movs	r2, r5
 80091b6:	4b41      	ldr	r3, [pc, #260]	; (80092bc <LoRaMacInitialization+0x368>)
 80091b8:	9500      	str	r5, [sp, #0]
 80091ba:	4249      	negs	r1, r1
 80091bc:	4840      	ldr	r0, [pc, #256]	; (80092c0 <LoRaMacInitialization+0x36c>)
 80091be:	f004 fd3b 	bl	800dc38 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80091c2:	2101      	movs	r1, #1
 80091c4:	002a      	movs	r2, r5
 80091c6:	4b3f      	ldr	r3, [pc, #252]	; (80092c4 <LoRaMacInitialization+0x370>)
 80091c8:	9500      	str	r5, [sp, #0]
 80091ca:	4249      	negs	r1, r1
 80091cc:	483e      	ldr	r0, [pc, #248]	; (80092c8 <LoRaMacInitialization+0x374>)
 80091ce:	f004 fd33 	bl	800dc38 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80091d2:	2101      	movs	r1, #1
 80091d4:	002a      	movs	r2, r5
 80091d6:	4249      	negs	r1, r1
 80091d8:	4b3c      	ldr	r3, [pc, #240]	; (80092cc <LoRaMacInitialization+0x378>)
 80091da:	9500      	str	r5, [sp, #0]
 80091dc:	483c      	ldr	r0, [pc, #240]	; (80092d0 <LoRaMacInitialization+0x37c>)

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80091de:	ad04      	add	r5, sp, #16
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80091e0:	f004 fd2a 	bl	800dc38 <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80091e4:	0028      	movs	r0, r5
 80091e6:	f004 fcb7 	bl	800db58 <SysTimeGetMcuTime>
 80091ea:	1d63      	adds	r3, r4, #5
 80091ec:	33ff      	adds	r3, #255	; 0xff
 80091ee:	cd06      	ldmia	r5!, {r1, r2}
 80091f0:	c306      	stmia	r3!, {r1, r2}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80091f2:	23d3      	movs	r3, #211	; 0xd3
 80091f4:	4921      	ldr	r1, [pc, #132]	; (800927c <LoRaMacInitialization+0x328>)
 80091f6:	4a37      	ldr	r2, [pc, #220]	; (80092d4 <LoRaMacInitialization+0x380>)
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80091fc:	4a36      	ldr	r2, [pc, #216]	; (80092d8 <LoRaMacInitialization+0x384>)
 80091fe:	3308      	adds	r3, #8
 8009200:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009202:	4a36      	ldr	r2, [pc, #216]	; (80092dc <LoRaMacInitialization+0x388>)
 8009204:	3308      	adds	r3, #8
 8009206:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009208:	4a35      	ldr	r2, [pc, #212]	; (80092e0 <LoRaMacInitialization+0x38c>)
 800920a:	3b0c      	subs	r3, #12
 800920c:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800920e:	4e35      	ldr	r6, [pc, #212]	; (80092e4 <LoRaMacInitialization+0x390>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009210:	4a35      	ldr	r2, [pc, #212]	; (80092e8 <LoRaMacInitialization+0x394>)
 8009212:	3308      	adds	r3, #8
 8009214:	50ca      	str	r2, [r1, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8009216:	6833      	ldr	r3, [r6, #0]
 8009218:	4834      	ldr	r0, [pc, #208]	; (80092ec <LoRaMacInitialization+0x398>)
 800921a:	9303      	str	r3, [sp, #12]
 800921c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800921e:	9b02      	ldr	r3, [sp, #8]
 8009220:	4833      	ldr	r0, [pc, #204]	; (80092f0 <LoRaMacInitialization+0x39c>)
 8009222:	6899      	ldr	r1, [r3, #8]
 8009224:	f7fd fa1c 	bl	8006660 <SecureElementInit>
 8009228:	2800      	cmp	r0, #0
 800922a:	d003      	beq.n	8009234 <LoRaMacInitialization+0x2e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800922c:	2511      	movs	r5, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800922e:	0028      	movs	r0, r5
 8009230:	b00d      	add	sp, #52	; 0x34
 8009232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8009234:	0020      	movs	r0, r4
 8009236:	f001 f9e5 	bl	800a604 <LoRaMacCryptoInit>
 800923a:	2800      	cmp	r0, #0
 800923c:	d1f6      	bne.n	800922c <LoRaMacInitialization+0x2d8>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800923e:	f000 feef 	bl	800a020 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009242:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8009244:	2800      	cmp	r0, #0
 8009246:	d1f2      	bne.n	800922e <LoRaMacInitialization+0x2da>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8009248:	482a      	ldr	r0, [pc, #168]	; (80092f4 <LoRaMacInitialization+0x3a0>)
 800924a:	f001 fa4d 	bl	800a6e8 <LoRaMacCryptoSetMulticastReference>
 800924e:	1e05      	subs	r5, r0, #0
 8009250:	d1ec      	bne.n	800922c <LoRaMacInitialization+0x2d8>
    srand1( Radio.Random( ) );
 8009252:	6973      	ldr	r3, [r6, #20]
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009254:	34fd      	adds	r4, #253	; 0xfd
    srand1( Radio.Random( ) );
 8009256:	9302      	str	r3, [sp, #8]
 8009258:	4798      	blx	r3
 800925a:	f002 fe89 	bl	800bf70 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800925e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8009260:	7820      	ldrb	r0, [r4, #0]
 8009262:	9302      	str	r3, [sp, #8]
 8009264:	4798      	blx	r3
    Radio.Sleep( );
 8009266:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009268:	9302      	str	r3, [sp, #8]
 800926a:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800926c:	2201      	movs	r2, #1
 800926e:	4b22      	ldr	r3, [pc, #136]	; (80092f8 <LoRaMacInitialization+0x3a4>)
 8009270:	4902      	ldr	r1, [pc, #8]	; (800927c <LoRaMacInitialization+0x328>)
 8009272:	54ca      	strb	r2, [r1, r3]
    return LORAMAC_STATUS_OK;
 8009274:	e7db      	b.n	800922e <LoRaMacInitialization+0x2da>
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	20000698 	.word	0x20000698
 800927c:	2000096c 	.word	0x2000096c
 8009280:	00000412 	.word	0x00000412
 8009284:	00000411 	.word	0x00000411
 8009288:	01000300 	.word	0x01000300
 800928c:	20000724 	.word	0x20000724
 8009290:	20000728 	.word	0x20000728
 8009294:	2000072c 	.word	0x2000072c
 8009298:	20000730 	.word	0x20000730
 800929c:	20000734 	.word	0x20000734
 80092a0:	000003f6 	.word	0x000003f6
 80092a4:	200006a0 	.word	0x200006a0
 80092a8:	20000870 	.word	0x20000870
 80092ac:	2000088c 	.word	0x2000088c
 80092b0:	00000481 	.word	0x00000481
 80092b4:	080083e9 	.word	0x080083e9
 80092b8:	20000cd4 	.word	0x20000cd4
 80092bc:	08007d79 	.word	0x08007d79
 80092c0:	20000cec 	.word	0x20000cec
 80092c4:	08007dd5 	.word	0x08007dd5
 80092c8:	20000d04 	.word	0x20000d04
 80092cc:	08007475 	.word	0x08007475
 80092d0:	20000d64 	.word	0x20000d64
 80092d4:	080076b5 	.word	0x080076b5
 80092d8:	08007665 	.word	0x08007665
 80092dc:	080073f5 	.word	0x080073f5
 80092e0:	08007629 	.word	0x08007629
 80092e4:	0800e890 	.word	0x0800e890
 80092e8:	080075ed 	.word	0x080075ed
 80092ec:	20000cb8 	.word	0x20000cb8
 80092f0:	200007b0 	.word	0x200007b0
 80092f4:	20000768 	.word	0x20000768
 80092f8:	00000482 	.word	0x00000482

080092fc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 80092fc:	23d0      	movs	r3, #208	; 0xd0
 80092fe:	2000      	movs	r0, #0
 8009300:	4a01      	ldr	r2, [pc, #4]	; (8009308 <LoRaMacStart+0xc>)
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 8009306:	4770      	bx	lr
 8009308:	2000096c 	.word	0x2000096c

0800930c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800930c:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800930e:	4b2a      	ldr	r3, [pc, #168]	; (80093b8 <LoRaMacQueryTxPossible+0xac>)
{
 8009310:	b089      	sub	sp, #36	; 0x24
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009312:	001a      	movs	r2, r3
{
 8009314:	0005      	movs	r5, r0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009316:	4668      	mov	r0, sp
{
 8009318:	000c      	movs	r4, r1
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800931a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800931c:	32c5      	adds	r2, #197	; 0xc5
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800931e:	9101      	str	r1, [sp, #4]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009320:	7812      	ldrb	r2, [r2, #0]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
    size_t macCmdsSize = 0;
 8009322:	2600      	movs	r6, #0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009324:	7082      	strb	r2, [r0, #2]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009326:	0018      	movs	r0, r3
 8009328:	466a      	mov	r2, sp
 800932a:	30c4      	adds	r0, #196	; 0xc4
 800932c:	7800      	ldrb	r0, [r0, #0]
 800932e:	3203      	adds	r2, #3
 8009330:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 8009332:	9602      	str	r6, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009334:	2003      	movs	r0, #3
    if( txInfo == NULL )
 8009336:	42b4      	cmp	r4, r6
 8009338:	d035      	beq.n	80093a6 <LoRaMacQueryTxPossible+0x9a>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800933a:	001f      	movs	r7, r3
 800933c:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800933e:	7106      	strb	r6, [r0, #4]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009340:	001e      	movs	r6, r3
    adrNext.Version = Nvm.MacGroup2.Version;
 8009342:	37fc      	adds	r7, #252	; 0xfc
 8009344:	693f      	ldr	r7, [r7, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009346:	36fe      	adds	r6, #254	; 0xfe
    adrNext.Version = Nvm.MacGroup2.Version;
 8009348:	9703      	str	r7, [sp, #12]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800934a:	7836      	ldrb	r6, [r6, #0]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800934c:	6081      	str	r1, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800934e:	21fd      	movs	r1, #253	; 0xfd
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009350:	7146      	strb	r6, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009352:	4e1a      	ldr	r6, [pc, #104]	; (80093bc <LoRaMacQueryTxPossible+0xb0>)
 8009354:	0089      	lsls	r1, r1, #2
 8009356:	5871      	ldr	r1, [r6, r1]
 8009358:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800935a:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800935c:	ba49      	rev16	r1, r1
 800935e:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009360:	0019      	movs	r1, r3
 8009362:	3174      	adds	r1, #116	; 0x74
 8009364:	7809      	ldrb	r1, [r1, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009366:	3340      	adds	r3, #64	; 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009368:	7481      	strb	r1, [r0, #18]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800936a:	4669      	mov	r1, sp
    adrNext.Region = Nvm.MacGroup2.Region;
 800936c:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800936e:	3102      	adds	r1, #2
    adrNext.Region = Nvm.MacGroup2.Region;
 8009370:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8009372:	ab01      	add	r3, sp, #4
 8009374:	f000 fdc4 	bl	8009f00 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009378:	466b      	mov	r3, sp
 800937a:	2002      	movs	r0, #2
 800937c:	5618      	ldrsb	r0, [r3, r0]
 800937e:	f7fe f85f 	bl	8007440 <GetMaxAppPayloadWithoutFOptsLength>
 8009382:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009384:	a802      	add	r0, sp, #8
 8009386:	f000 fef3 	bl	800a170 <LoRaMacCommandsGetSizeSerializedCmds>
 800938a:	2800      	cmp	r0, #0
 800938c:	d111      	bne.n	80093b2 <LoRaMacQueryTxPossible+0xa6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800938e:	9b02      	ldr	r3, [sp, #8]
 8009390:	2b0f      	cmp	r3, #15
 8009392:	d80a      	bhi.n	80093aa <LoRaMacQueryTxPossible+0x9e>
 8009394:	7862      	ldrb	r2, [r4, #1]
 8009396:	4293      	cmp	r3, r2
 8009398:	d807      	bhi.n	80093aa <LoRaMacQueryTxPossible+0x9e>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800939a:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800939c:	18eb      	adds	r3, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800939e:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d200      	bcs.n	80093a6 <LoRaMacQueryTxPossible+0x9a>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80093a4:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 80093a6:	b009      	add	sp, #36	; 0x24
 80093a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 80093aa:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 80093ac:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 80093ae:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80093b0:	e7f9      	b.n	80093a6 <LoRaMacQueryTxPossible+0x9a>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80093b2:	2013      	movs	r0, #19
 80093b4:	e7f7      	b.n	80093a6 <LoRaMacQueryTxPossible+0x9a>
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	20000698 	.word	0x20000698
 80093bc:	2000096c 	.word	0x2000096c

080093c0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80093c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093c2:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80093c4:	2003      	movs	r0, #3
    if( mibGet == NULL )
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	d01e      	beq.n	8009408 <LoRaMacMibGetRequestConfirm+0x48>
    }

    switch( mibGet->Type )
 80093ca:	7820      	ldrb	r0, [r4, #0]
 80093cc:	2828      	cmp	r0, #40	; 0x28
 80093ce:	d900      	bls.n	80093d2 <LoRaMacMibGetRequestConfirm+0x12>
 80093d0:	e091      	b.n	80094f6 <LoRaMacMibGetRequestConfirm+0x136>
 80093d2:	f7f6 feab 	bl	800012c <__gnu_thumb1_case_uqi>
 80093d6:	1b15      	.short	0x1b15
 80093d8:	2c282520 	.word	0x2c282520
 80093dc:	90909031 	.word	0x90909031
 80093e0:	90909090 	.word	0x90909090
 80093e4:	3a373490 	.word	0x3a373490
 80093e8:	514d4943 	.word	0x514d4943
 80093ec:	5d5a5457 	.word	0x5d5a5457
 80093f0:	69666360 	.word	0x69666360
 80093f4:	72756f6c 	.word	0x72756f6c
 80093f8:	847e7b78 	.word	0x847e7b78
 80093fc:	9082      	.short	0x9082
 80093fe:	88          	.byte	0x88
 80093ff:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8009400:	4b3f      	ldr	r3, [pc, #252]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009402:	33fc      	adds	r3, #252	; 0xfc
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8009408:	b004      	add	sp, #16
 800940a:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800940c:	4b3c      	ldr	r3, [pc, #240]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 800940e:	33ff      	adds	r3, #255	; 0xff
 8009410:	7c5b      	ldrb	r3, [r3, #17]
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8009412:	7123      	strb	r3, [r4, #4]
            break;
 8009414:	e002      	b.n	800941c <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8009416:	f7fd fab5 	bl	8006984 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800941a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800941c:	2000      	movs	r0, #0
            break;
 800941e:	e7f3      	b.n	8009408 <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8009420:	f7fd fac6 	bl	80069b0 <SecureElementGetJoinEui>
 8009424:	e7f9      	b.n	800941a <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8009426:	4b36      	ldr	r3, [pc, #216]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009428:	33fe      	adds	r3, #254	; 0xfe
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	e7f1      	b.n	8009412 <LoRaMacMibGetRequestConfirm+0x52>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800942e:	4b34      	ldr	r3, [pc, #208]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009430:	33c8      	adds	r3, #200	; 0xc8
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009432:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.Contexts = GetNvmData( );
 8009434:	6063      	str	r3, [r4, #4]
            break;
 8009436:	e7f1      	b.n	800941c <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009438:	4b31      	ldr	r3, [pc, #196]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 800943a:	33cc      	adds	r3, #204	; 0xcc
 800943c:	e7f9      	b.n	8009432 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800943e:	4b30      	ldr	r3, [pc, #192]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009440:	33fd      	adds	r3, #253	; 0xfd
 8009442:	e7f2      	b.n	800942a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009444:	4b2e      	ldr	r3, [pc, #184]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009446:	3380      	adds	r3, #128	; 0x80
 8009448:	e7ef      	b.n	800942a <LoRaMacMibGetRequestConfirm+0x6a>
            getPhy.Attribute = PHY_CHANNELS;
 800944a:	231d      	movs	r3, #29
 800944c:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800944e:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009450:	4b2b      	ldr	r3, [pc, #172]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009452:	3340      	adds	r3, #64	; 0x40
 8009454:	7818      	ldrb	r0, [r3, #0]
 8009456:	f001 fc3f 	bl	800acd8 <RegionGetPhyParam>
 800945a:	e7de      	b.n	800941a <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800945c:	4b28      	ldr	r3, [pc, #160]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 800945e:	3404      	adds	r4, #4
 8009460:	3364      	adds	r3, #100	; 0x64
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009462:	cb06      	ldmia	r3!, {r1, r2}
 8009464:	c406      	stmia	r4!, {r1, r2}
            break;
 8009466:	e7d9      	b.n	800941c <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009468:	4b25      	ldr	r3, [pc, #148]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 800946a:	33a4      	adds	r3, #164	; 0xa4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800946c:	3404      	adds	r4, #4
 800946e:	e7f8      	b.n	8009462 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8009470:	4b23      	ldr	r3, [pc, #140]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009472:	3404      	adds	r4, #4
 8009474:	336c      	adds	r3, #108	; 0x6c
 8009476:	e7f4      	b.n	8009462 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009478:	4b21      	ldr	r3, [pc, #132]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 800947a:	33ac      	adds	r3, #172	; 0xac
 800947c:	e7f6      	b.n	800946c <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800947e:	231b      	movs	r3, #27
 8009480:	a902      	add	r1, sp, #8
 8009482:	e7e4      	b.n	800944e <LoRaMacMibGetRequestConfirm+0x8e>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8009484:	231a      	movs	r3, #26
 8009486:	a902      	add	r1, sp, #8
 8009488:	e7e1      	b.n	800944e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800948a:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 800948c:	3360      	adds	r3, #96	; 0x60
 800948e:	e7cc      	b.n	800942a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8009490:	4b1b      	ldr	r3, [pc, #108]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009494:	e7ce      	b.n	8009434 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 8009498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949a:	e7cb      	b.n	8009434 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800949c:	4b18      	ldr	r3, [pc, #96]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 800949e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a0:	e7c8      	b.n	8009434 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80094a2:	4b17      	ldr	r3, [pc, #92]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a6:	e7c5      	b.n	8009434 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80094a8:	4b15      	ldr	r3, [pc, #84]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ac:	e7c2      	b.n	8009434 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80094ae:	4b14      	ldr	r3, [pc, #80]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094b0:	33c5      	adds	r3, #197	; 0xc5
 80094b2:	e7ba      	b.n	800942a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80094b4:	4b12      	ldr	r3, [pc, #72]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094b6:	3339      	adds	r3, #57	; 0x39
 80094b8:	e7b7      	b.n	800942a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094bc:	33c4      	adds	r3, #196	; 0xc4
 80094be:	e7b4      	b.n	800942a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80094c0:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094c2:	3338      	adds	r3, #56	; 0x38
 80094c4:	e7b1      	b.n	800942a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ca:	e7b3      	b.n	8009434 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094ce:	3348      	adds	r3, #72	; 0x48
 80094d0:	e7ab      	b.n	800942a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80094d2:	4b0b      	ldr	r3, [pc, #44]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80094d6:	6063      	str	r3, [r4, #4]
 80094d8:	e7a0      	b.n	800941c <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.Contexts = GetNvmData( );
 80094da:	4b09      	ldr	r3, [pc, #36]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094dc:	e7aa      	b.n	8009434 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80094de:	4b08      	ldr	r3, [pc, #32]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094e0:	33bc      	adds	r3, #188	; 0xbc
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	e7f7      	b.n	80094d6 <LoRaMacMibGetRequestConfirm+0x116>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80094e6:	4b06      	ldr	r3, [pc, #24]	; (8009500 <LoRaMacMibGetRequestConfirm+0x140>)
 80094e8:	33fc      	adds	r3, #252	; 0xfc
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80094ee:	f001 fcb5 	bl	800ae5c <RegionGetVersion>
 80094f2:	60a0      	str	r0, [r4, #8]
            break;
 80094f4:	e792      	b.n	800941c <LoRaMacMibGetRequestConfirm+0x5c>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80094f6:	0020      	movs	r0, r4
 80094f8:	f000 fd83 	bl	800a002 <LoRaMacClassBMibGetRequestConfirm>
            break;
 80094fc:	e784      	b.n	8009408 <LoRaMacMibGetRequestConfirm+0x48>
 80094fe:	46c0      	nop			; (mov r8, r8)
 8009500:	20000698 	.word	0x20000698

08009504 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009504:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009506:	1e04      	subs	r4, r0, #0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8009508:	d046      	beq.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800950a:	23d0      	movs	r3, #208	; 0xd0
 800950c:	4db5      	ldr	r5, [pc, #724]	; (80097e4 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 8009512:	2001      	movs	r0, #1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009514:	079a      	lsls	r2, r3, #30
 8009516:	d430      	bmi.n	800957a <LoRaMacMibSetRequestConfirm+0x76>
    }

    switch( mibSet->Type )
 8009518:	7820      	ldrb	r0, [r4, #0]
 800951a:	2827      	cmp	r0, #39	; 0x27
 800951c:	d900      	bls.n	8009520 <LoRaMacMibSetRequestConfirm+0x1c>
 800951e:	e211      	b.n	8009944 <LoRaMacMibSetRequestConfirm+0x440>
 8009520:	f7f6 fe18 	bl	8000154 <__gnu_thumb1_case_uhi>
 8009524:	002d0028 	.word	0x002d0028
 8009528:	003c0035 	.word	0x003c0035
 800952c:	00450040 	.word	0x00450040
 8009530:	004e004a 	.word	0x004e004a
 8009534:	005d0058 	.word	0x005d0058
 8009538:	00670062 	.word	0x00670062
 800953c:	0071006c 	.word	0x0071006c
 8009540:	007b0076 	.word	0x007b0076
 8009544:	02100087 	.word	0x02100087
 8009548:	00aa008b 	.word	0x00aa008b
 800954c:	00e700be 	.word	0x00e700be
 8009550:	00fa0109 	.word	0x00fa0109
 8009554:	0115010d 	.word	0x0115010d
 8009558:	011d0119 	.word	0x011d0119
 800955c:	01250121 	.word	0x01250121
 8009560:	013c0129 	.word	0x013c0129
 8009564:	01500166 	.word	0x01500166
 8009568:	017c0175 	.word	0x017c0175
 800956c:	01870183 	.word	0x01870183
 8009570:	0204018c 	.word	0x0204018c
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8009574:	7920      	ldrb	r0, [r4, #4]
 8009576:	f7fe fb5f 	bl	8007c38 <SwitchClass>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    return status;
}
 800957a:	b004      	add	sp, #16
 800957c:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800957e:	7922      	ldrb	r2, [r4, #4]
 8009580:	2a02      	cmp	r2, #2
 8009582:	d009      	beq.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8009584:	4b98      	ldr	r3, [pc, #608]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009586:	33ff      	adds	r3, #255	; 0xff
 8009588:	745a      	strb	r2, [r3, #17]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800958a:	2000      	movs	r0, #0
            break;
 800958c:	e7f5      	b.n	800957a <LoRaMacMibSetRequestConfirm+0x76>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800958e:	6860      	ldr	r0, [r4, #4]
 8009590:	f7fd f9ea 	bl	8006968 <SecureElementSetDevEui>
 8009594:	2800      	cmp	r0, #0
 8009596:	d0f8      	beq.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009598:	2003      	movs	r0, #3
 800959a:	e7ee      	b.n	800957a <LoRaMacMibSetRequestConfirm+0x76>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800959c:	6860      	ldr	r0, [r4, #4]
 800959e:	f7fd f9f7 	bl	8006990 <SecureElementSetJoinEui>
 80095a2:	e7f7      	b.n	8009594 <LoRaMacMibSetRequestConfirm+0x90>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80095a4:	4b90      	ldr	r3, [pc, #576]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 80095a6:	7922      	ldrb	r2, [r4, #4]
 80095a8:	33fe      	adds	r3, #254	; 0xfe
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	e7ed      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80095ae:	4b8e      	ldr	r3, [pc, #568]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 80095b0:	6862      	ldr	r2, [r4, #4]
 80095b2:	33c8      	adds	r3, #200	; 0xc8
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	e7e8      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
 80095b8:	4b8b      	ldr	r3, [pc, #556]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 80095ba:	6862      	ldr	r2, [r4, #4]
 80095bc:	33cc      	adds	r3, #204	; 0xcc
 80095be:	e7f9      	b.n	80095b4 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppKey != NULL )
 80095c0:	6861      	ldr	r1, [r4, #4]
 80095c2:	2900      	cmp	r1, #0
 80095c4:	d0e8      	beq.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80095c6:	2000      	movs	r0, #0
 80095c8:	f001 f9ac 	bl	800a924 <LoRaMacCryptoSetKey>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d0dc      	beq.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80095d0:	2011      	movs	r0, #17
 80095d2:	e7d2      	b.n	800957a <LoRaMacMibSetRequestConfirm+0x76>
            if( mibSet->Param.NwkKey != NULL )
 80095d4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80095d6:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 80095d8:	2900      	cmp	r1, #0
 80095da:	d1f5      	bne.n	80095c8 <LoRaMacMibSetRequestConfirm+0xc4>
 80095dc:	e7dc      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.NwkSKey != NULL )
 80095de:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80095e0:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 80095e2:	2900      	cmp	r1, #0
 80095e4:	d1f0      	bne.n	80095c8 <LoRaMacMibSetRequestConfirm+0xc4>
 80095e6:	e7d7      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.AppSKey != NULL )
 80095e8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80095ea:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 80095ec:	2900      	cmp	r1, #0
 80095ee:	d1eb      	bne.n	80095c8 <LoRaMacMibSetRequestConfirm+0xc4>
 80095f0:	e7d2      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.McKEKey != NULL )
 80095f2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80095f4:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 80095f6:	2900      	cmp	r1, #0
 80095f8:	d1e6      	bne.n	80095c8 <LoRaMacMibSetRequestConfirm+0xc4>
 80095fa:	e7cd      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.McKey0 != NULL )
 80095fc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80095fe:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 8009600:	2900      	cmp	r1, #0
 8009602:	d1e1      	bne.n	80095c8 <LoRaMacMibSetRequestConfirm+0xc4>
 8009604:	e7c8      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.McAppSKey0 != NULL )
 8009606:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009608:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800960a:	2900      	cmp	r1, #0
 800960c:	d1dc      	bne.n	80095c8 <LoRaMacMibSetRequestConfirm+0xc4>
 800960e:	e7c3      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009610:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009612:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009614:	2900      	cmp	r1, #0
 8009616:	d1d7      	bne.n	80095c8 <LoRaMacMibSetRequestConfirm+0xc4>
 8009618:	e7be      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800961a:	4b73      	ldr	r3, [pc, #460]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800961c:	7920      	ldrb	r0, [r4, #4]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800961e:	4c73      	ldr	r4, [pc, #460]	; (80097ec <LoRaMacMibSetRequestConfirm+0x2e8>)
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009620:	33fd      	adds	r3, #253	; 0xfd
 8009622:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009624:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	4798      	blx	r3
            Radio.Sleep( );
 800962a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	4798      	blx	r3
            break;
 8009630:	e7ab      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009632:	4b6d      	ldr	r3, [pc, #436]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009634:	7922      	ldrb	r2, [r4, #4]
 8009636:	3380      	adds	r3, #128	; 0x80
 8009638:	e7b7      	b.n	80095aa <LoRaMacMibSetRequestConfirm+0xa6>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800963a:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800963c:	4d6a      	ldr	r5, [pc, #424]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800963e:	aa02      	add	r2, sp, #8
 8009640:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009642:	002b      	movs	r3, r5
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009644:	002e      	movs	r6, r5
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009646:	3375      	adds	r3, #117	; 0x75
 8009648:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800964a:	3640      	adds	r6, #64	; 0x40
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800964c:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800964e:	7830      	ldrb	r0, [r6, #0]
 8009650:	2207      	movs	r2, #7
 8009652:	a902      	add	r1, sp, #8
 8009654:	f001 fb5a 	bl	800ad0c <RegionVerify>
 8009658:	2800      	cmp	r0, #0
 800965a:	d09d      	beq.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800965c:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800965e:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009660:	9302      	str	r3, [sp, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009662:	7830      	ldrb	r0, [r6, #0]
 8009664:	a902      	add	r1, sp, #8
 8009666:	f001 fb51 	bl	800ad0c <RegionVerify>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800966a:	3564      	adds	r5, #100	; 0x64
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800966c:	2800      	cmp	r0, #0
 800966e:	d093      	beq.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009670:	3404      	adds	r4, #4
 8009672:	cc0c      	ldmia	r4!, {r2, r3}
 8009674:	c50c      	stmia	r5!, {r2, r3}
 8009676:	e788      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009678:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800967a:	4d5b      	ldr	r5, [pc, #364]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800967c:	aa02      	add	r2, sp, #8
 800967e:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009680:	002b      	movs	r3, r5
 8009682:	3375      	adds	r3, #117	; 0x75
 8009684:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009686:	a902      	add	r1, sp, #8
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009688:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800968a:	002b      	movs	r3, r5
 800968c:	3340      	adds	r3, #64	; 0x40
 800968e:	2207      	movs	r2, #7
 8009690:	7818      	ldrb	r0, [r3, #0]
 8009692:	f001 fb3b 	bl	800ad0c <RegionVerify>
 8009696:	2800      	cmp	r0, #0
 8009698:	d100      	bne.n	800969c <LoRaMacMibSetRequestConfirm+0x198>
 800969a:	e77d      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800969c:	35a4      	adds	r5, #164	; 0xa4
 800969e:	e7e7      	b.n	8009670 <LoRaMacMibSetRequestConfirm+0x16c>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80096a0:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096a2:	4d51      	ldr	r5, [pc, #324]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80096a4:	aa02      	add	r2, sp, #8
 80096a6:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096a8:	002b      	movs	r3, r5
 80096aa:	3375      	adds	r3, #117	; 0x75
 80096ac:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80096ae:	a902      	add	r1, sp, #8
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096b0:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80096b2:	002b      	movs	r3, r5
 80096b4:	3340      	adds	r3, #64	; 0x40
 80096b6:	2207      	movs	r2, #7
 80096b8:	7818      	ldrb	r0, [r3, #0]
 80096ba:	f001 fb27 	bl	800ad0c <RegionVerify>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d100      	bne.n	80096c4 <LoRaMacMibSetRequestConfirm+0x1c0>
 80096c2:	e769      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80096c4:	002b      	movs	r3, r5
 80096c6:	3404      	adds	r4, #4
 80096c8:	336c      	adds	r3, #108	; 0x6c
 80096ca:	cc06      	ldmia	r4!, {r1, r2}
 80096cc:	c306      	stmia	r3!, {r1, r2}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80096ce:	002b      	movs	r3, r5
 80096d0:	33fc      	adds	r3, #252	; 0xfc
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d000      	beq.n	80096da <LoRaMacMibSetRequestConfirm+0x1d6>
 80096d8:	e757      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
 80096da:	35ff      	adds	r5, #255	; 0xff
 80096dc:	7c6b      	ldrb	r3, [r5, #17]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d100      	bne.n	80096e4 <LoRaMacMibSetRequestConfirm+0x1e0>
 80096e2:	e752      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
                    Radio.Sleep( );
 80096e4:	4b41      	ldr	r3, [pc, #260]	; (80097ec <LoRaMacMibSetRequestConfirm+0x2e8>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 80096ec:	f7fe fa6e 	bl	8007bcc <OpenContinuousRxCWindow>
 80096f0:	e74b      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80096f2:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096f4:	4d3c      	ldr	r5, [pc, #240]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80096f6:	aa02      	add	r2, sp, #8
 80096f8:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096fa:	002b      	movs	r3, r5
 80096fc:	3375      	adds	r3, #117	; 0x75
 80096fe:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009700:	a902      	add	r1, sp, #8
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009702:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009704:	002b      	movs	r3, r5
 8009706:	3340      	adds	r3, #64	; 0x40
 8009708:	2207      	movs	r2, #7
 800970a:	7818      	ldrb	r0, [r3, #0]
 800970c:	f001 fafe 	bl	800ad0c <RegionVerify>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009710:	35ac      	adds	r5, #172	; 0xac
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009712:	2800      	cmp	r0, #0
 8009714:	d1ac      	bne.n	8009670 <LoRaMacMibSetRequestConfirm+0x16c>
 8009716:	e73f      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800971c:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800971e:	aa02      	add	r2, sp, #8
 8009720:	7113      	strb	r3, [r2, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009722:	4b31      	ldr	r3, [pc, #196]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009724:	0011      	movs	r1, r2
 8009726:	3340      	adds	r3, #64	; 0x40
 8009728:	7818      	ldrb	r0, [r3, #0]
 800972a:	f001 fb02 	bl	800ad32 <RegionChanMaskSet>
 800972e:	2800      	cmp	r0, #0
 8009730:	d000      	beq.n	8009734 <LoRaMacMibSetRequestConfirm+0x230>
 8009732:	e72a      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
 8009734:	e730      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009736:	6863      	ldr	r3, [r4, #4]
 8009738:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800973a:	2300      	movs	r3, #0
 800973c:	e7ef      	b.n	800971e <LoRaMacMibSetRequestConfirm+0x21a>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800973e:	7922      	ldrb	r2, [r4, #4]
 8009740:	1e53      	subs	r3, r2, #1
 8009742:	2b0e      	cmp	r3, #14
 8009744:	d900      	bls.n	8009748 <LoRaMacMibSetRequestConfirm+0x244>
 8009746:	e727      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009748:	4b27      	ldr	r3, [pc, #156]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800974a:	3360      	adds	r3, #96	; 0x60
 800974c:	e72d      	b.n	80095aa <LoRaMacMibSetRequestConfirm+0xa6>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800974e:	6862      	ldr	r2, [r4, #4]
 8009750:	4b25      	ldr	r3, [pc, #148]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009752:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8009754:	e719      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009756:	6862      	ldr	r2, [r4, #4]
 8009758:	4b23      	ldr	r3, [pc, #140]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800975a:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 800975c:	e715      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800975e:	6862      	ldr	r2, [r4, #4]
 8009760:	4b21      	ldr	r3, [pc, #132]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009762:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 8009764:	e711      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009766:	6862      	ldr	r2, [r4, #4]
 8009768:	4b1f      	ldr	r3, [pc, #124]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800976a:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 800976c:	e70d      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800976e:	6862      	ldr	r2, [r4, #4]
 8009770:	4b1d      	ldr	r3, [pc, #116]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009772:	65da      	str	r2, [r3, #92]	; 0x5c
            break;
 8009774:	e709      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009776:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009778:	4c1b      	ldr	r4, [pc, #108]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800977a:	aa02      	add	r2, sp, #8
 800977c:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800977e:	0023      	movs	r3, r4
 8009780:	3340      	adds	r3, #64	; 0x40
 8009782:	2206      	movs	r2, #6
 8009784:	7818      	ldrb	r0, [r3, #0]
 8009786:	a902      	add	r1, sp, #8
 8009788:	f001 fac0 	bl	800ad0c <RegionVerify>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800978c:	34c5      	adds	r4, #197	; 0xc5
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800978e:	2800      	cmp	r0, #0
 8009790:	d100      	bne.n	8009794 <LoRaMacMibSetRequestConfirm+0x290>
 8009792:	e701      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009794:	ab02      	add	r3, sp, #8
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	7023      	strb	r3, [r4, #0]
 800979a:	e6f6      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800979c:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800979e:	4c12      	ldr	r4, [pc, #72]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80097a0:	aa02      	add	r2, sp, #8
 80097a2:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80097a4:	0023      	movs	r3, r4
 80097a6:	3374      	adds	r3, #116	; 0x74
 80097a8:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80097aa:	a902      	add	r1, sp, #8
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80097ac:	7093      	strb	r3, [r2, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80097ae:	0023      	movs	r3, r4
 80097b0:	3340      	adds	r3, #64	; 0x40
 80097b2:	2205      	movs	r2, #5
 80097b4:	7818      	ldrb	r0, [r3, #0]
 80097b6:	f001 faa9 	bl	800ad0c <RegionVerify>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d100      	bne.n	80097c0 <LoRaMacMibSetRequestConfirm+0x2bc>
 80097be:	e6eb      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80097c0:	3439      	adds	r4, #57	; 0x39
 80097c2:	e7e7      	b.n	8009794 <LoRaMacMibSetRequestConfirm+0x290>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80097c4:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80097c6:	4c08      	ldr	r4, [pc, #32]	; (80097e8 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80097c8:	aa02      	add	r2, sp, #8
 80097ca:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80097cc:	0023      	movs	r3, r4
 80097ce:	3340      	adds	r3, #64	; 0x40
 80097d0:	220a      	movs	r2, #10
 80097d2:	7818      	ldrb	r0, [r3, #0]
 80097d4:	a902      	add	r1, sp, #8
 80097d6:	f001 fa99 	bl	800ad0c <RegionVerify>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80097da:	34c4      	adds	r4, #196	; 0xc4
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80097dc:	2800      	cmp	r0, #0
 80097de:	d1d9      	bne.n	8009794 <LoRaMacMibSetRequestConfirm+0x290>
 80097e0:	e6da      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	2000096c 	.word	0x2000096c
 80097e8:	20000698 	.word	0x20000698
 80097ec:	0800e890 	.word	0x0800e890
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80097f0:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80097f2:	4c56      	ldr	r4, [pc, #344]	; (800994c <LoRaMacMibSetRequestConfirm+0x448>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80097f4:	aa02      	add	r2, sp, #8
 80097f6:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80097f8:	0023      	movs	r3, r4
 80097fa:	3340      	adds	r3, #64	; 0x40
 80097fc:	2209      	movs	r2, #9
 80097fe:	7818      	ldrb	r0, [r3, #0]
 8009800:	a902      	add	r1, sp, #8
 8009802:	f001 fa83 	bl	800ad0c <RegionVerify>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009806:	3438      	adds	r4, #56	; 0x38
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009808:	2800      	cmp	r0, #0
 800980a:	d1c3      	bne.n	8009794 <LoRaMacMibSetRequestConfirm+0x290>
 800980c:	e6c4      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800980e:	4b4f      	ldr	r3, [pc, #316]	; (800994c <LoRaMacMibSetRequestConfirm+0x448>)
 8009810:	6862      	ldr	r2, [r4, #4]
 8009812:	0019      	movs	r1, r3
 8009814:	3108      	adds	r1, #8
 8009816:	67ca      	str	r2, [r1, #124]	; 0x7c
 8009818:	645a      	str	r2, [r3, #68]	; 0x44
            break;
 800981a:	e6b6      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800981c:	4b4b      	ldr	r3, [pc, #300]	; (800994c <LoRaMacMibSetRequestConfirm+0x448>)
 800981e:	7922      	ldrb	r2, [r4, #4]
 8009820:	0019      	movs	r1, r3
 8009822:	3188      	adds	r1, #136	; 0x88
 8009824:	700a      	strb	r2, [r1, #0]
 8009826:	3348      	adds	r3, #72	; 0x48
 8009828:	e6bf      	b.n	80095aa <LoRaMacMibSetRequestConfirm+0xa6>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800982a:	6862      	ldr	r2, [r4, #4]
 800982c:	4b47      	ldr	r3, [pc, #284]	; (800994c <LoRaMacMibSetRequestConfirm+0x448>)
 800982e:	67da      	str	r2, [r3, #124]	; 0x7c
            break;
 8009830:	e6ab      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009832:	4b46      	ldr	r3, [pc, #280]	; (800994c <LoRaMacMibSetRequestConfirm+0x448>)
 8009834:	6862      	ldr	r2, [r4, #4]
 8009836:	33bc      	adds	r3, #188	; 0xbc
 8009838:	601a      	str	r2, [r3, #0]
            break;
 800983a:	e6a6      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            if( mibSet->Param.Contexts != 0 )
 800983c:	6864      	ldr	r4, [r4, #4]
 800983e:	2c00      	cmp	r4, #0
 8009840:	d100      	bne.n	8009844 <LoRaMacMibSetRequestConfirm+0x340>
 8009842:	e6a9      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
        return LORAMAC_STATUS_BUSY;
 8009844:	2001      	movs	r0, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009846:	4283      	cmp	r3, r0
 8009848:	d000      	beq.n	800984c <LoRaMacMibSetRequestConfirm+0x348>
 800984a:	e696      	b.n	800957a <LoRaMacMibSetRequestConfirm+0x76>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800984c:	2124      	movs	r1, #36	; 0x24
 800984e:	0020      	movs	r0, r4
 8009850:	f002 fbca 	bl	800bfe8 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8009854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009856:	4298      	cmp	r0, r3
 8009858:	d104      	bne.n	8009864 <LoRaMacMibSetRequestConfirm+0x360>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800985a:	2228      	movs	r2, #40	; 0x28
 800985c:	0021      	movs	r1, r4
 800985e:	483b      	ldr	r0, [pc, #236]	; (800994c <LoRaMacMibSetRequestConfirm+0x448>)
 8009860:	f002 fba8 	bl	800bfb4 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8009864:	0026      	movs	r6, r4
 8009866:	3628      	adds	r6, #40	; 0x28
 8009868:	2114      	movs	r1, #20
 800986a:	0030      	movs	r0, r6
 800986c:	f002 fbbc 	bl	800bfe8 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 8009870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009872:	4298      	cmp	r0, r3
 8009874:	d104      	bne.n	8009880 <LoRaMacMibSetRequestConfirm+0x37c>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8009876:	2218      	movs	r2, #24
 8009878:	0031      	movs	r1, r6
 800987a:	4835      	ldr	r0, [pc, #212]	; (8009950 <LoRaMacMibSetRequestConfirm+0x44c>)
 800987c:	f002 fb9a 	bl	800bfb4 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8009880:	0026      	movs	r6, r4
 8009882:	3640      	adds	r6, #64	; 0x40
 8009884:	21d4      	movs	r1, #212	; 0xd4
 8009886:	0030      	movs	r0, r6
 8009888:	f002 fbae 	bl	800bfe8 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 800988c:	0023      	movs	r3, r4
 800988e:	33fc      	adds	r3, #252	; 0xfc
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	4298      	cmp	r0, r3
 8009894:	d115      	bne.n	80098c2 <LoRaMacMibSetRequestConfirm+0x3be>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8009896:	22d8      	movs	r2, #216	; 0xd8
 8009898:	0031      	movs	r1, r6
 800989a:	482e      	ldr	r0, [pc, #184]	; (8009954 <LoRaMacMibSetRequestConfirm+0x450>)
 800989c:	f002 fb8a 	bl	800bfb4 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80098a0:	4b2d      	ldr	r3, [pc, #180]	; (8009958 <LoRaMacMibSetRequestConfirm+0x454>)
 80098a2:	5cea      	ldrb	r2, [r5, r3]
 80098a4:	3b35      	subs	r3, #53	; 0x35
 80098a6:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80098a8:	22f9      	movs	r2, #249	; 0xf9
 80098aa:	4b28      	ldr	r3, [pc, #160]	; (800994c <LoRaMacMibSetRequestConfirm+0x448>)
 80098ac:	0092      	lsls	r2, r2, #2
 80098ae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098b0:	3375      	adds	r3, #117	; 0x75
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80098b2:	50a9      	str	r1, [r5, r2]
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098b4:	781a      	ldrb	r2, [r3, #0]
 80098b6:	23fc      	movs	r3, #252	; 0xfc
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80098bc:	4b27      	ldr	r3, [pc, #156]	; (800995c <LoRaMacMibSetRequestConfirm+0x458>)
 80098be:	4a28      	ldr	r2, [pc, #160]	; (8009960 <LoRaMacMibSetRequestConfirm+0x45c>)
 80098c0:	52ea      	strh	r2, [r5, r3]
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 80098c2:	0025      	movs	r5, r4
 80098c4:	3519      	adds	r5, #25
 80098c6:	35ff      	adds	r5, #255	; 0xff
 80098c8:	21bc      	movs	r1, #188	; 0xbc
 80098ca:	0028      	movs	r0, r5
 80098cc:	f002 fb8c 	bl	800bfe8 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 80098d0:	23ea      	movs	r3, #234	; 0xea
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	58e3      	ldr	r3, [r4, r3]
 80098d6:	4298      	cmp	r0, r3
 80098d8:	d104      	bne.n	80098e4 <LoRaMacMibSetRequestConfirm+0x3e0>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80098da:	22c0      	movs	r2, #192	; 0xc0
 80098dc:	0029      	movs	r1, r5
 80098de:	4821      	ldr	r0, [pc, #132]	; (8009964 <LoRaMacMibSetRequestConfirm+0x460>)
 80098e0:	f002 fb68 	bl	800bfb4 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 80098e4:	0025      	movs	r5, r4
 80098e6:	35d9      	adds	r5, #217	; 0xd9
 80098e8:	35ff      	adds	r5, #255	; 0xff
 80098ea:	2118      	movs	r1, #24
 80098ec:	0028      	movs	r0, r5
 80098ee:	f002 fb7b 	bl	800bfe8 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 80098f2:	23f8      	movs	r3, #248	; 0xf8
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	58e3      	ldr	r3, [r4, r3]
 80098f8:	4298      	cmp	r0, r3
 80098fa:	d104      	bne.n	8009906 <LoRaMacMibSetRequestConfirm+0x402>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80098fc:	221c      	movs	r2, #28
 80098fe:	0029      	movs	r1, r5
 8009900:	4819      	ldr	r0, [pc, #100]	; (8009968 <LoRaMacMibSetRequestConfirm+0x464>)
 8009902:	f002 fb57 	bl	800bfb4 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8009906:	23af      	movs	r3, #175	; 0xaf
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	18e5      	adds	r5, r4, r3
 800990c:	2114      	movs	r1, #20
 800990e:	0028      	movs	r0, r5
 8009910:	f002 fb6a 	bl	800bfe8 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8009914:	23b4      	movs	r3, #180	; 0xb4
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	58e3      	ldr	r3, [r4, r3]
 800991a:	4298      	cmp	r0, r3
 800991c:	d000      	beq.n	8009920 <LoRaMacMibSetRequestConfirm+0x41c>
 800991e:	e634      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8009920:	2218      	movs	r2, #24
 8009922:	0029      	movs	r1, r5
 8009924:	4811      	ldr	r0, [pc, #68]	; (800996c <LoRaMacMibSetRequestConfirm+0x468>)
 8009926:	f002 fb45 	bl	800bfb4 <memcpy1>
 800992a:	e62e      	b.n	800958a <LoRaMacMibSetRequestConfirm+0x86>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800992c:	79a3      	ldrb	r3, [r4, #6]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d900      	bls.n	8009934 <LoRaMacMibSetRequestConfirm+0x430>
 8009932:	e631      	b.n	8009598 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009934:	4b05      	ldr	r3, [pc, #20]	; (800994c <LoRaMacMibSetRequestConfirm+0x448>)
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	33fc      	adds	r3, #252	; 0xfc
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800993a:	6860      	ldr	r0, [r4, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800993c:	611a      	str	r2, [r3, #16]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800993e:	f000 fe7f 	bl	800a640 <LoRaMacCryptoSetLrWanVersion>
 8009942:	e643      	b.n	80095cc <LoRaMacMibSetRequestConfirm+0xc8>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009944:	0020      	movs	r0, r4
 8009946:	f000 fb5e 	bl	800a006 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800994a:	e616      	b.n	800957a <LoRaMacMibSetRequestConfirm+0x76>
 800994c:	20000698 	.word	0x20000698
 8009950:	200006c0 	.word	0x200006c0
 8009954:	200006d8 	.word	0x200006d8
 8009958:	00000415 	.word	0x00000415
 800995c:	000003f2 	.word	0x000003f2
 8009960:	00000201 	.word	0x00000201
 8009964:	200007b0 	.word	0x200007b0
 8009968:	20000870 	.word	0x20000870
 800996c:	20000954 	.word	0x20000954

08009970 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009970:	2300      	movs	r3, #0
{
 8009972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009974:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009976:	aa02      	add	r2, sp, #8
{
 8009978:	0006      	movs	r6, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800997a:	2503      	movs	r5, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800997c:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800997e:	4298      	cmp	r0, r3
 8009980:	d004      	beq.n	800998c <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 8009982:	f7fe fd63 	bl	800844c <LoRaMacIsBusy>
 8009986:	2800      	cmp	r0, #0
 8009988:	d003      	beq.n	8009992 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800998a:	2501      	movs	r5, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800998c:	0028      	movs	r0, r5
 800998e:	b009      	add	sp, #36	; 0x24
 8009990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009992:	f000 fd33 	bl	800a3fc <LoRaMacConfirmQueueIsFull>
 8009996:	2800      	cmp	r0, #0
 8009998:	d1f7      	bne.n	800998a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800999a:	f000 fd29 	bl	800a3f0 <LoRaMacConfirmQueueGetCnt>
 800999e:	1e01      	subs	r1, r0, #0
 80099a0:	d103      	bne.n	80099aa <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80099a2:	2214      	movs	r2, #20
 80099a4:	4866      	ldr	r0, [pc, #408]	; (8009b40 <LoRaMacMlmeRequest+0x1d0>)
 80099a6:	f002 fb1a 	bl	800bfde <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099aa:	2201      	movs	r2, #1
 80099ac:	4c65      	ldr	r4, [pc, #404]	; (8009b44 <LoRaMacMlmeRequest+0x1d4>)
 80099ae:	4b66      	ldr	r3, [pc, #408]	; (8009b48 <LoRaMacMlmeRequest+0x1d8>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80099b0:	4866      	ldr	r0, [pc, #408]	; (8009b4c <LoRaMacMlmeRequest+0x1dc>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099b2:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80099b4:	2304      	movs	r3, #4
 80099b6:	5c21      	ldrb	r1, [r4, r0]
 80099b8:	430b      	orrs	r3, r1
    queueElement.RestrictCommonReadyToHandle = false;
 80099ba:	2100      	movs	r1, #0
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80099bc:	5423      	strb	r3, [r4, r0]
    queueElement.Request = mlmeRequest->Type;
 80099be:	7830      	ldrb	r0, [r6, #0]
 80099c0:	ab03      	add	r3, sp, #12
 80099c2:	7018      	strb	r0, [r3, #0]
    switch( mlmeRequest->Type )
 80099c4:	3801      	subs	r0, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099c6:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 80099c8:	70d9      	strb	r1, [r3, #3]
    switch( mlmeRequest->Type )
 80099ca:	280d      	cmp	r0, #13
 80099cc:	d900      	bls.n	80099d0 <LoRaMacMlmeRequest+0x60>
 80099ce:	e0b0      	b.n	8009b32 <LoRaMacMlmeRequest+0x1c2>
 80099d0:	f7f6 fbac 	bl	800012c <__gnu_thumb1_case_uqi>
 80099d4:	59afaf07 	.word	0x59afaf07
 80099d8:	afaf8163 	.word	0xafaf8163
 80099dc:	a3af8aaf 	.word	0xa3af8aaf
 80099e0:	9f8e      	.short	0x9f8e
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80099e2:	23d0      	movs	r3, #208	; 0xd0
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	58e2      	ldr	r2, [r4, r3]
 80099e8:	2320      	movs	r3, #32
 80099ea:	0015      	movs	r5, r2
 80099ec:	401d      	ands	r5, r3
 80099ee:	421a      	tst	r2, r3
 80099f0:	d1cb      	bne.n	800998a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 80099f2:	f7fd fe89 	bl	8007708 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80099f6:	2104      	movs	r1, #4
 80099f8:	4b55      	ldr	r3, [pc, #340]	; (8009b50 <LoRaMacMlmeRequest+0x1e0>)
 80099fa:	5671      	ldrsb	r1, [r6, r1]
 80099fc:	002a      	movs	r2, r5
 80099fe:	7818      	ldrb	r0, [r3, #0]
 8009a00:	4f54      	ldr	r7, [pc, #336]	; (8009b54 <LoRaMacMlmeRequest+0x1e4>)
 8009a02:	f001 f9fc 	bl	800adfe <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009a06:	2207      	movs	r2, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009a08:	3739      	adds	r7, #57	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009a0a:	ab03      	add	r3, sp, #12
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009a0c:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 8009a0e:	0028      	movs	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009a10:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 8009a12:	f7fe f911 	bl	8007c38 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009a16:	0023      	movs	r3, r4
 8009a18:	33ff      	adds	r3, #255	; 0xff
 8009a1a:	715d      	strb	r5, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009a1c:	0023      	movs	r3, r4
 8009a1e:	4a4e      	ldr	r2, [pc, #312]	; (8009b58 <LoRaMacMlmeRequest+0x1e8>)
 8009a20:	33fc      	adds	r3, #252	; 0xfc
 8009a22:	60da      	str	r2, [r3, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009a24:	0023      	movs	r3, r4
 8009a26:	22ff      	movs	r2, #255	; 0xff
 8009a28:	33fe      	adds	r3, #254	; 0xfe
 8009a2a:	81da      	strh	r2, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009a2c:	f7fc ffc0 	bl	80069b0 <SecureElementGetJoinEui>
 8009a30:	2208      	movs	r2, #8
 8009a32:	0001      	movs	r1, r0
 8009a34:	4849      	ldr	r0, [pc, #292]	; (8009b5c <LoRaMacMlmeRequest+0x1ec>)
 8009a36:	f002 fabd 	bl	800bfb4 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009a3a:	f7fc ffa3 	bl	8006984 <SecureElementGetDevEui>
 8009a3e:	2208      	movs	r2, #8
 8009a40:	0001      	movs	r1, r0
 8009a42:	4847      	ldr	r0, [pc, #284]	; (8009b60 <LoRaMacMlmeRequest+0x1f0>)
 8009a44:	f002 fab6 	bl	800bfb4 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 8009a48:	0028      	movs	r0, r5
 8009a4a:	f7fd ff0f 	bl	800786c <ScheduleTx>
 8009a4e:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 8009a50:	d007      	beq.n	8009a62 <LoRaMacMlmeRequest+0xf2>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009a52:	2104      	movs	r1, #4
 8009a54:	4b3e      	ldr	r3, [pc, #248]	; (8009b50 <LoRaMacMlmeRequest+0x1e0>)
 8009a56:	2201      	movs	r2, #1
 8009a58:	5671      	ldrsb	r1, [r6, r1]
 8009a5a:	7818      	ldrb	r0, [r3, #0]
 8009a5c:	f001 f9cf 	bl	800adfe <RegionAlternateDr>
 8009a60:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009a62:	4b40      	ldr	r3, [pc, #256]	; (8009b64 <LoRaMacMlmeRequest+0x1f4>)
 8009a64:	58e3      	ldr	r3, [r4, r3]
 8009a66:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	d064      	beq.n	8009b36 <LoRaMacMlmeRequest+0x1c6>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009a6c:	f000 fcc0 	bl	800a3f0 <LoRaMacConfirmQueueGetCnt>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d000      	beq.n	8009a76 <LoRaMacMlmeRequest+0x106>
 8009a74:	e78a      	b.n	800998c <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009a76:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 8009a78:	4b3b      	ldr	r3, [pc, #236]	; (8009b68 <LoRaMacMlmeRequest+0x1f8>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009a7a:	4934      	ldr	r1, [pc, #208]	; (8009b4c <LoRaMacMlmeRequest+0x1dc>)
            MacCtx.NodeAckRequested = false;
 8009a7c:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009a7e:	5c63      	ldrb	r3, [r4, r1]
 8009a80:	4393      	bics	r3, r2
 8009a82:	5463      	strb	r3, [r4, r1]
 8009a84:	e782      	b.n	800998c <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009a86:	2200      	movs	r2, #0
 8009a88:	2002      	movs	r0, #2
 8009a8a:	a902      	add	r1, sp, #8
 8009a8c:	f000 fad6 	bl	800a03c <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009a90:	2513      	movs	r5, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d1e5      	bne.n	8009a62 <LoRaMacMlmeRequest+0xf2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009a96:	2500      	movs	r5, #0
            break;
 8009a98:	e7e3      	b.n	8009a62 <LoRaMacMlmeRequest+0xf2>
    continuousWave.Channel = MacCtx.Channel;
 8009a9a:	4b34      	ldr	r3, [pc, #208]	; (8009b6c <LoRaMacMlmeRequest+0x1fc>)
 8009a9c:	a904      	add	r1, sp, #16
 8009a9e:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009aa0:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 8009aa2:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009aa4:	4b2b      	ldr	r3, [pc, #172]	; (8009b54 <LoRaMacMlmeRequest+0x1e4>)
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	3039      	adds	r0, #57	; 0x39
 8009aaa:	7800      	ldrb	r0, [r0, #0]
 8009aac:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009aae:	0018      	movs	r0, r3
 8009ab0:	3038      	adds	r0, #56	; 0x38
 8009ab2:	7800      	ldrb	r0, [r0, #0]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009ab4:	3340      	adds	r3, #64	; 0x40
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009ab6:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009ab8:	6b98      	ldr	r0, [r3, #56]	; 0x38
    continuousWave.Timeout = timeout;
 8009aba:	818a      	strh	r2, [r1, #12]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009abc:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009abe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009ac0:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009ac2:	7818      	ldrb	r0, [r3, #0]
 8009ac4:	f001 f9b5 	bl	800ae32 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009ac8:	22d0      	movs	r2, #208	; 0xd0
 8009aca:	2302      	movs	r3, #2
 8009acc:	0092      	lsls	r2, r2, #2
 8009ace:	58a1      	ldr	r1, [r4, r2]
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	50a3      	str	r3, [r4, r2]
 8009ad4:	e7df      	b.n	8009a96 <LoRaMacMlmeRequest+0x126>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009ad6:	210c      	movs	r1, #12
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <LoRaMacMlmeRequest+0x200>)
 8009ada:	88b2      	ldrh	r2, [r6, #4]
 8009adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ade:	5671      	ldrsb	r1, [r6, r1]
 8009ae0:	68b0      	ldr	r0, [r6, #8]
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009ae6:	e7ef      	b.n	8009ac8 <LoRaMacMlmeRequest+0x158>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009ae8:	2200      	movs	r2, #0
 8009aea:	200d      	movs	r0, #13
 8009aec:	a902      	add	r1, sp, #8
 8009aee:	e7cd      	b.n	8009a8c <LoRaMacMlmeRequest+0x11c>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009af0:	4b18      	ldr	r3, [pc, #96]	; (8009b54 <LoRaMacMlmeRequest+0x1e4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009af2:	2502      	movs	r5, #2
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009af4:	33fc      	adds	r3, #252	; 0xfc
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1b2      	bne.n	8009a62 <LoRaMacMlmeRequest+0xf2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009afc:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009afe:	0768      	lsls	r0, r5, #29
 8009b00:	0f40      	lsrs	r0, r0, #29
 8009b02:	f000 fa79 	bl	8009ff8 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009b06:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009b08:	2201      	movs	r2, #1
 8009b0a:	0019      	movs	r1, r3
 8009b0c:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 8009b0e:	701d      	strb	r5, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009b10:	e7bc      	b.n	8009a8c <LoRaMacMlmeRequest+0x11c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009b12:	2200      	movs	r2, #0
 8009b14:	2012      	movs	r0, #18
 8009b16:	a902      	add	r1, sp, #8
 8009b18:	e7b8      	b.n	8009a8c <LoRaMacMlmeRequest+0x11c>
            queueElement.RestrictCommonReadyToHandle = true;
 8009b1a:	70da      	strb	r2, [r3, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009b1c:	f000 fa5d 	bl	8009fda <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 8009b20:	2501      	movs	r5, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009b22:	1e07      	subs	r7, r0, #0
 8009b24:	d19d      	bne.n	8009a62 <LoRaMacMlmeRequest+0xf2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009b26:	f000 fa55 	bl	8009fd4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009b2a:	0038      	movs	r0, r7
 8009b2c:	f000 fa57 	bl	8009fde <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8009b30:	e7b1      	b.n	8009a96 <LoRaMacMlmeRequest+0x126>
    switch( mlmeRequest->Type )
 8009b32:	2502      	movs	r5, #2
 8009b34:	e795      	b.n	8009a62 <LoRaMacMlmeRequest+0xf2>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009b36:	a803      	add	r0, sp, #12
 8009b38:	f000 fbaa 	bl	800a290 <LoRaMacConfirmQueueAdd>
 8009b3c:	e726      	b.n	800998c <LoRaMacMlmeRequest+0x1c>
 8009b3e:	46c0      	nop			; (mov r8, r8)
 8009b40:	20000db8 	.word	0x20000db8
 8009b44:	2000096c 	.word	0x2000096c
 8009b48:	0000044d 	.word	0x0000044d
 8009b4c:	00000481 	.word	0x00000481
 8009b50:	200006d8 	.word	0x200006d8
 8009b54:	20000698 	.word	0x20000698
 8009b58:	2000096e 	.word	0x2000096e
 8009b5c:	20000a7a 	.word	0x20000a7a
 8009b60:	20000a82 	.word	0x20000a82
 8009b64:	00000484 	.word	0x00000484
 8009b68:	00000414 	.word	0x00000414
 8009b6c:	00000415 	.word	0x00000415
 8009b70:	0800e890 	.word	0x0800e890

08009b74 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8009b74:	2300      	movs	r3, #0
 8009b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b78:	b095      	sub	sp, #84	; 0x54
 8009b7a:	9000      	str	r0, [sp, #0]
 8009b7c:	9107      	str	r1, [sp, #28]
 8009b7e:	9301      	str	r3, [sp, #4]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d103      	bne.n	8009b8c <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009b84:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8009b86:	0020      	movs	r0, r4
 8009b88:	b015      	add	sp, #84	; 0x54
 8009b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 8009b8c:	f7fe fc5e 	bl	800844c <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 8009b90:	2401      	movs	r4, #1
    if( LoRaMacIsBusy( ) == true )
 8009b92:	1e05      	subs	r5, r0, #0
 8009b94:	d1f7      	bne.n	8009b86 <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 8009b96:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009b98:	2214      	movs	r2, #20
    macHdr.Value = 0;
 8009b9a:	7318      	strb	r0, [r3, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009b9c:	0001      	movs	r1, r0
 8009b9e:	48bc      	ldr	r0, [pc, #752]	; (8009e90 <LoRaMacMcpsRequest+0x31c>)
 8009ba0:	f002 fa1d 	bl	800bfde <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ba4:	4bbb      	ldr	r3, [pc, #748]	; (8009e94 <LoRaMacMcpsRequest+0x320>)
 8009ba6:	4abc      	ldr	r2, [pc, #752]	; (8009e98 <LoRaMacMcpsRequest+0x324>)
 8009ba8:	549c      	strb	r4, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009baa:	4abc      	ldr	r2, [pc, #752]	; (8009e9c <LoRaMacMcpsRequest+0x328>)
 8009bac:	549c      	strb	r4, [r3, r2]
    switch( mcpsRequest->Type )
 8009bae:	9a00      	ldr	r2, [sp, #0]
 8009bb0:	7812      	ldrb	r2, [r2, #0]
 8009bb2:	42a2      	cmp	r2, r4
 8009bb4:	d100      	bne.n	8009bb8 <LoRaMacMcpsRequest+0x44>
 8009bb6:	e0bc      	b.n	8009d32 <LoRaMacMcpsRequest+0x1be>
 8009bb8:	2a03      	cmp	r2, #3
 8009bba:	d100      	bne.n	8009bbe <LoRaMacMcpsRequest+0x4a>
 8009bbc:	e0c3      	b.n	8009d46 <LoRaMacMcpsRequest+0x1d2>
 8009bbe:	002e      	movs	r6, r5
 8009bc0:	9502      	str	r5, [sp, #8]
 8009bc2:	9504      	str	r5, [sp, #16]
 8009bc4:	2a00      	cmp	r2, #0
 8009bc6:	d111      	bne.n	8009bec <LoRaMacMcpsRequest+0x78>
            MacCtx.AckTimeoutRetries = 1;
 8009bc8:	4ab5      	ldr	r2, [pc, #724]	; (8009ea0 <LoRaMacMcpsRequest+0x32c>)
 8009bca:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009bcc:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009bce:	466a      	mov	r2, sp
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009bd0:	260e      	movs	r6, #14
            readyToSend = true;
 8009bd2:	2501      	movs	r5, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009bd4:	7313      	strb	r3, [r2, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8009bd6:	9b00      	ldr	r3, [sp, #0]
 8009bd8:	791b      	ldrb	r3, [r3, #4]
 8009bda:	9304      	str	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8009bdc:	9b00      	ldr	r3, [sp, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8009be2:	9b00      	ldr	r3, [sp, #0]
 8009be4:	899b      	ldrh	r3, [r3, #12]
 8009be6:	9301      	str	r3, [sp, #4]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009be8:	9b00      	ldr	r3, [sp, #0]
 8009bea:	579e      	ldrsb	r6, [r3, r6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009bec:	2402      	movs	r4, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009bee:	4fad      	ldr	r7, [pc, #692]	; (8009ea4 <LoRaMacMcpsRequest+0x330>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009bf0:	ab08      	add	r3, sp, #32
 8009bf2:	751c      	strb	r4, [r3, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009bf4:	003b      	movs	r3, r7
 8009bf6:	3374      	adds	r3, #116	; 0x74
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	aa08      	add	r2, sp, #32
 8009bfc:	7593      	strb	r3, [r2, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009bfe:	003b      	movs	r3, r7
 8009c00:	3340      	adds	r3, #64	; 0x40
 8009c02:	7818      	ldrb	r0, [r3, #0]
 8009c04:	a90d      	add	r1, sp, #52	; 0x34
 8009c06:	f001 f867 	bl	800acd8 <RegionGetPhyParam>
    if( readyToSend == true )
 8009c0a:	2d00      	cmp	r5, #0
 8009c0c:	d100      	bne.n	8009c10 <LoRaMacMcpsRequest+0x9c>
 8009c0e:	e088      	b.n	8009d22 <LoRaMacMcpsRequest+0x1ae>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8009c10:	37fe      	adds	r7, #254	; 0xfe
 8009c12:	783b      	ldrb	r3, [r7, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d117      	bne.n	8009c48 <LoRaMacMcpsRequest+0xd4>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009c18:	1c03      	adds	r3, r0, #0
 8009c1a:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 8009c1c:	ac09      	add	r4, sp, #36	; 0x24
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009c1e:	42b0      	cmp	r0, r6
 8009c20:	da00      	bge.n	8009c24 <LoRaMacMcpsRequest+0xb0>
 8009c22:	1c33      	adds	r3, r6, #0
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c24:	4d9f      	ldr	r5, [pc, #636]	; (8009ea4 <LoRaMacMcpsRequest+0x330>)
            verify.DatarateParams.Datarate = datarate;
 8009c26:	7023      	strb	r3, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c28:	002b      	movs	r3, r5
 8009c2a:	3374      	adds	r3, #116	; 0x74
 8009c2c:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009c2e:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c30:	70a3      	strb	r3, [r4, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009c32:	002b      	movs	r3, r5
 8009c34:	3340      	adds	r3, #64	; 0x40
 8009c36:	0021      	movs	r1, r4
 8009c38:	7818      	ldrb	r0, [r3, #0]
 8009c3a:	f001 f867 	bl	800ad0c <RegionVerify>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d0a0      	beq.n	8009b84 <LoRaMacMcpsRequest+0x10>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009c42:	7823      	ldrb	r3, [r4, #0]
 8009c44:	3539      	adds	r5, #57	; 0x39
 8009c46:	702b      	strb	r3, [r5, #0]
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009c48:	4b96      	ldr	r3, [pc, #600]	; (8009ea4 <LoRaMacMcpsRequest+0x330>)
 8009c4a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009c4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009c4e:	9205      	str	r2, [sp, #20]
 8009c50:	ba52      	rev16	r2, r2
 8009c52:	4694      	mov	ip, r2
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009c54:	001a      	movs	r2, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009c56:	910a      	str	r1, [sp, #40]	; 0x28
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009c58:	32ff      	adds	r2, #255	; 0xff
 8009c5a:	7c50      	ldrb	r0, [r2, #17]
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d100      	bne.n	8009c62 <LoRaMacMcpsRequest+0xee>
 8009c60:	e108      	b.n	8009e74 <LoRaMacMcpsRequest+0x300>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009c62:	7812      	ldrb	r2, [r2, #0]
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	d100      	bne.n	8009c6a <LoRaMacMcpsRequest+0xf6>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009c6a:	4b8e      	ldr	r3, [pc, #568]	; (8009ea4 <LoRaMacMcpsRequest+0x330>)
    fCtrl.Value = 0;
 8009c6c:	2500      	movs	r5, #0
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009c6e:	001a      	movs	r2, r3
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009c70:	001c      	movs	r4, r3
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009c72:	32fe      	adds	r2, #254	; 0xfe
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009c74:	34fc      	adds	r4, #252	; 0xfc
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009c76:	7816      	ldrb	r6, [r2, #0]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009c78:	7822      	ldrb	r2, [r4, #0]
 8009c7a:	3a01      	subs	r2, #1
 8009c7c:	4250      	negs	r0, r2
 8009c7e:	4142      	adcs	r2, r0
 8009c80:	b2d2      	uxtb	r2, r2
 8009c82:	9206      	str	r2, [sp, #24]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009c84:	001a      	movs	r2, r3
 8009c86:	323a      	adds	r2, #58	; 0x3a
 8009c88:	7817      	ldrb	r7, [r2, #0]
    adrNext.Version = Nvm.MacGroup2.Version;
 8009c8a:	6922      	ldr	r2, [r4, #16]
 8009c8c:	a80f      	add	r0, sp, #60	; 0x3c
 8009c8e:	920f      	str	r2, [sp, #60]	; 0x3c
    adrNext.UpdateChanMask = true;
 8009c90:	2201      	movs	r2, #1
 8009c92:	7102      	strb	r2, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009c94:	22fd      	movs	r2, #253	; 0xfd
 8009c96:	4c7f      	ldr	r4, [pc, #508]	; (8009e94 <LoRaMacMcpsRequest+0x320>)
 8009c98:	0092      	lsls	r2, r2, #2
 8009c9a:	58a2      	ldr	r2, [r4, r2]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009c9c:	7146      	strb	r6, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009c9e:	9212      	str	r2, [sp, #72]	; 0x48
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009ca0:	4662      	mov	r2, ip
 8009ca2:	8202      	strh	r2, [r0, #16]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009ca4:	001a      	movs	r2, r3
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009ca6:	6081      	str	r1, [r0, #8]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009ca8:	3274      	adds	r2, #116	; 0x74
 8009caa:	7812      	ldrb	r2, [r2, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009cac:	3340      	adds	r3, #64	; 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009cae:	7482      	strb	r2, [r0, #18]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009cb0:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009cb2:	4a7d      	ldr	r2, [pc, #500]	; (8009ea8 <LoRaMacMcpsRequest+0x334>)
 8009cb4:	497d      	ldr	r1, [pc, #500]	; (8009eac <LoRaMacMcpsRequest+0x338>)
    adrNext.Region = Nvm.MacGroup2.Region;
 8009cb6:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009cb8:	ab0a      	add	r3, sp, #40	; 0x28
 8009cba:	f000 f921 	bl	8009f00 <LoRaMacAdrCalcNext>
 8009cbe:	9b06      	ldr	r3, [sp, #24]
 8009cc0:	017f      	lsls	r7, r7, #5
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	431f      	orrs	r7, r3
    MacCtx.NodeAckRequested = false;
 8009cc6:	4b7a      	ldr	r3, [pc, #488]	; (8009eb0 <LoRaMacMcpsRequest+0x33c>)
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009cc8:	0180      	lsls	r0, r0, #6
    MacCtx.NodeAckRequested = false;
 8009cca:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 8009ccc:	9b02      	ldr	r3, [sp, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009cce:	4307      	orrs	r7, r0
        fBufferSize = 0;
 8009cd0:	1e5a      	subs	r2, r3, #1
 8009cd2:	4193      	sbcs	r3, r2
 8009cd4:	9a01      	ldr	r2, [sp, #4]
 8009cd6:	425b      	negs	r3, r3
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009cd8:	01f6      	lsls	r6, r6, #7
        fBufferSize = 0;
 8009cda:	401a      	ands	r2, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009cdc:	9902      	ldr	r1, [sp, #8]
 8009cde:	4875      	ldr	r0, [pc, #468]	; (8009eb4 <LoRaMacMcpsRequest+0x340>)
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009ce0:	4337      	orrs	r7, r6
        fBufferSize = 0;
 8009ce2:	9201      	str	r2, [sp, #4]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009ce4:	9706      	str	r7, [sp, #24]
    MacCtx.PktBufferLen = 0;
 8009ce6:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 8009ce8:	950b      	str	r5, [sp, #44]	; 0x2c
    size_t macCmdsSize = 0;
 8009cea:	950c      	str	r5, [sp, #48]	; 0x30
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009cec:	f002 f962 	bl	800bfb4 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009cf0:	466b      	mov	r3, sp
 8009cf2:	791a      	ldrb	r2, [r3, #4]
 8009cf4:	4b70      	ldr	r3, [pc, #448]	; (8009eb8 <LoRaMacMcpsRequest+0x344>)
 8009cf6:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009cf8:	466b      	mov	r3, sp
 8009cfa:	7b19      	ldrb	r1, [r3, #12]
    switch( macHdr->Bits.MType )
 8009cfc:	9b03      	ldr	r3, [sp, #12]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009cfe:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 8009d00:	061b      	lsls	r3, r3, #24
 8009d02:	0f5b      	lsrs	r3, r3, #29
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	d030      	beq.n	8009d6a <LoRaMacMcpsRequest+0x1f6>
 8009d08:	2b07      	cmp	r3, #7
 8009d0a:	d100      	bne.n	8009d0e <LoRaMacMcpsRequest+0x19a>
 8009d0c:	e0a0      	b.n	8009e50 <LoRaMacMcpsRequest+0x2dc>
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d02e      	beq.n	8009d70 <LoRaMacMcpsRequest+0x1fc>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009d12:	2402      	movs	r4, #2
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009d14:	4b63      	ldr	r3, [pc, #396]	; (8009ea4 <LoRaMacMcpsRequest+0x330>)
 8009d16:	9a05      	ldr	r2, [sp, #20]
 8009d18:	871a      	strh	r2, [r3, #56]	; 0x38
            MacCtx.NodeAckRequested = false;
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4b5d      	ldr	r3, [pc, #372]	; (8009e94 <LoRaMacMcpsRequest+0x320>)
 8009d1e:	4964      	ldr	r1, [pc, #400]	; (8009eb0 <LoRaMacMcpsRequest+0x33c>)
 8009d20:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009d22:	4a5c      	ldr	r2, [pc, #368]	; (8009e94 <LoRaMacMcpsRequest+0x320>)
 8009d24:	4b65      	ldr	r3, [pc, #404]	; (8009ebc <LoRaMacMcpsRequest+0x348>)
 8009d26:	58d3      	ldr	r3, [r2, r3]
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	9a01      	ldr	r2, [sp, #4]
 8009d2c:	9b00      	ldr	r3, [sp, #0]
 8009d2e:	611a      	str	r2, [r3, #16]
    return status;
 8009d30:	e729      	b.n	8009b86 <LoRaMacMcpsRequest+0x12>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8009d32:	9a00      	ldr	r2, [sp, #0]
 8009d34:	7bd1      	ldrb	r1, [r2, #15]
 8009d36:	1c0a      	adds	r2, r1, #0
 8009d38:	2908      	cmp	r1, #8
 8009d3a:	d900      	bls.n	8009d3e <LoRaMacMcpsRequest+0x1ca>
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	4958      	ldr	r1, [pc, #352]	; (8009ea0 <LoRaMacMcpsRequest+0x32c>)
 8009d40:	545a      	strb	r2, [r3, r1]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009d42:	2380      	movs	r3, #128	; 0x80
 8009d44:	e743      	b.n	8009bce <LoRaMacMcpsRequest+0x5a>
            MacCtx.AckTimeoutRetries = 1;
 8009d46:	4a56      	ldr	r2, [pc, #344]	; (8009ea0 <LoRaMacMcpsRequest+0x32c>)
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009d48:	260a      	movs	r6, #10
            MacCtx.AckTimeoutRetries = 1;
 8009d4a:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8009d4c:	23e0      	movs	r3, #224	; 0xe0
 8009d4e:	466a      	mov	r2, sp
 8009d50:	7313      	strb	r3, [r2, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009d52:	9b00      	ldr	r3, [sp, #0]
            readyToSend = true;
 8009d54:	0025      	movs	r5, r4
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8009d5a:	9b00      	ldr	r3, [sp, #0]
 8009d5c:	891b      	ldrh	r3, [r3, #8]
 8009d5e:	9301      	str	r3, [sp, #4]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009d60:	9b00      	ldr	r3, [sp, #0]
 8009d62:	579e      	ldrsb	r6, [r3, r6]
    uint8_t fPort = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	9304      	str	r3, [sp, #16]
            break;
 8009d68:	e740      	b.n	8009bec <LoRaMacMcpsRequest+0x78>
            MacCtx.NodeAckRequested = true;
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	4b50      	ldr	r3, [pc, #320]	; (8009eb0 <LoRaMacMcpsRequest+0x33c>)
 8009d6e:	54e0      	strb	r0, [r4, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009d70:	0025      	movs	r5, r4
 8009d72:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009d74:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009d76:	35ff      	adds	r5, #255	; 0xff
 8009d78:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009d7a:	4b51      	ldr	r3, [pc, #324]	; (8009ec0 <LoRaMacMcpsRequest+0x34c>)
 8009d7c:	36fc      	adds	r6, #252	; 0xfc
 8009d7e:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009d80:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009d82:	4f48      	ldr	r7, [pc, #288]	; (8009ea4 <LoRaMacMcpsRequest+0x330>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009d84:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009d86:	9904      	ldr	r1, [sp, #16]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009d88:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009d8a:	3329      	adds	r3, #41	; 0x29
 8009d8c:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009d8e:	003b      	movs	r3, r7
 8009d90:	33cc      	adds	r3, #204	; 0xcc
 8009d92:	681b      	ldr	r3, [r3, #0]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009d94:	a80b      	add	r0, sp, #44	; 0x2c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009d96:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009d98:	9b06      	ldr	r3, [sp, #24]
 8009d9a:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009d9c:	2398      	movs	r3, #152	; 0x98
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009da2:	4b44      	ldr	r3, [pc, #272]	; (8009eb4 <LoRaMacMcpsRequest+0x340>)
 8009da4:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009da6:	f000 fc53 	bl	800a650 <LoRaMacCryptoGetFCntUp>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d160      	bne.n	8009e70 <LoRaMacMcpsRequest+0x2fc>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009dae:	0022      	movs	r2, r4
 8009db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db2:	32fe      	adds	r2, #254	; 0xfe
 8009db4:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 8009db6:	4a43      	ldr	r2, [pc, #268]	; (8009ec4 <LoRaMacMcpsRequest+0x350>)
 8009db8:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009dba:	4a43      	ldr	r2, [pc, #268]	; (8009ec8 <LoRaMacMcpsRequest+0x354>)
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009dbc:	a80c      	add	r0, sp, #48	; 0x30
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009dbe:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009dc0:	f000 f9d6 	bl	800a170 <LoRaMacCommandsGetSizeSerializedCmds>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d131      	bne.n	8009e2c <LoRaMacMcpsRequest+0x2b8>
            if( macCmdsSize > 0 )
 8009dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d017      	beq.n	8009dfe <LoRaMacMcpsRequest+0x28a>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009dce:	2039      	movs	r0, #57	; 0x39
 8009dd0:	5638      	ldrsb	r0, [r7, r0]
 8009dd2:	f7fd fb35 	bl	8007440 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009dd6:	4b38      	ldr	r3, [pc, #224]	; (8009eb8 <LoRaMacMcpsRequest+0x344>)
 8009dd8:	5ce3      	ldrb	r3, [r4, r3]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d028      	beq.n	8009e30 <LoRaMacMcpsRequest+0x2bc>
 8009dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009de0:	2b0f      	cmp	r3, #15
 8009de2:	d81d      	bhi.n	8009e20 <LoRaMacMcpsRequest+0x2ac>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009de4:	200f      	movs	r0, #15
 8009de6:	4a39      	ldr	r2, [pc, #228]	; (8009ecc <LoRaMacMcpsRequest+0x358>)
 8009de8:	a90c      	add	r1, sp, #48	; 0x30
 8009dea:	f000 f9cd 	bl	800a188 <LoRaMacCommandsSerializeCmds>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d11c      	bne.n	8009e2c <LoRaMacMcpsRequest+0x2b8>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009df2:	260f      	movs	r6, #15
 8009df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009df6:	401e      	ands	r6, r3
 8009df8:	9b06      	ldr	r3, [sp, #24]
 8009dfa:	4333      	orrs	r3, r6
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009dfc:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009dfe:	9807      	ldr	r0, [sp, #28]
 8009e00:	f7fd fd34 	bl	800786c <ScheduleTx>
 8009e04:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8009e06:	d185      	bne.n	8009d14 <LoRaMacMcpsRequest+0x1a0>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009e08:	4b26      	ldr	r3, [pc, #152]	; (8009ea4 <LoRaMacMcpsRequest+0x330>)
 8009e0a:	001a      	movs	r2, r3
 8009e0c:	323a      	adds	r2, #58	; 0x3a
 8009e0e:	7010      	strb	r0, [r2, #0]
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e12:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009e14:	f000 f988 	bl	800a128 <LoRaMacCommandsRemoveNoneStickyCmds>
 8009e18:	1e04      	subs	r4, r0, #0
 8009e1a:	d02d      	beq.n	8009e78 <LoRaMacMcpsRequest+0x304>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e1c:	2413      	movs	r4, #19
 8009e1e:	e77c      	b.n	8009d1a <LoRaMacMcpsRequest+0x1a6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009e20:	4a2b      	ldr	r2, [pc, #172]	; (8009ed0 <LoRaMacMcpsRequest+0x35c>)
 8009e22:	a90c      	add	r1, sp, #48	; 0x30
 8009e24:	f000 f9b0 	bl	800a188 <LoRaMacCommandsSerializeCmds>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d0e8      	beq.n	8009dfe <LoRaMacMcpsRequest+0x28a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e2c:	2413      	movs	r4, #19
 8009e2e:	e771      	b.n	8009d14 <LoRaMacMcpsRequest+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009e30:	4d27      	ldr	r5, [pc, #156]	; (8009ed0 <LoRaMacMcpsRequest+0x35c>)
 8009e32:	a90c      	add	r1, sp, #48	; 0x30
 8009e34:	002a      	movs	r2, r5
 8009e36:	f000 f9a7 	bl	800a188 <LoRaMacCommandsSerializeCmds>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d1f6      	bne.n	8009e2c <LoRaMacMcpsRequest+0x2b8>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009e3e:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009e40:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e48:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009e4a:	6335      	str	r5, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009e4c:	54a3      	strb	r3, [r4, r2]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009e4e:	e7d6      	b.n	8009dfe <LoRaMacMcpsRequest+0x28a>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009e50:	9b02      	ldr	r3, [sp, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0d3      	beq.n	8009dfe <LoRaMacMcpsRequest+0x28a>
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	d0d1      	beq.n	8009dfe <LoRaMacMcpsRequest+0x28a>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009e5a:	466b      	mov	r3, sp
 8009e5c:	9902      	ldr	r1, [sp, #8]
 8009e5e:	791a      	ldrb	r2, [r3, #4]
 8009e60:	481c      	ldr	r0, [pc, #112]	; (8009ed4 <LoRaMacMcpsRequest+0x360>)
 8009e62:	f002 f8a7 	bl	800bfb4 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8009e66:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <LoRaMacMcpsRequest+0x344>)
 8009e68:	5ce3      	ldrb	r3, [r4, r3]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009e6e:	e7c6      	b.n	8009dfe <LoRaMacMcpsRequest+0x28a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009e70:	2412      	movs	r4, #18
 8009e72:	e74f      	b.n	8009d14 <LoRaMacMcpsRequest+0x1a0>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009e74:	2407      	movs	r4, #7
 8009e76:	e750      	b.n	8009d1a <LoRaMacMcpsRequest+0x1a6>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8009e78:	9a00      	ldr	r2, [sp, #0]
 8009e7a:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <LoRaMacMcpsRequest+0x320>)
 8009e7c:	7811      	ldrb	r1, [r2, #0]
 8009e7e:	2287      	movs	r2, #135	; 0x87
 8009e80:	00d2      	lsls	r2, r2, #3
 8009e82:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8009e84:	2201      	movs	r2, #1
 8009e86:	4914      	ldr	r1, [pc, #80]	; (8009ed8 <LoRaMacMcpsRequest+0x364>)
 8009e88:	5c58      	ldrb	r0, [r3, r1]
 8009e8a:	4302      	orrs	r2, r0
 8009e8c:	e748      	b.n	8009d20 <LoRaMacMcpsRequest+0x1ac>
 8009e8e:	46c0      	nop			; (mov r8, r8)
 8009e90:	20000da4 	.word	0x20000da4
 8009e94:	2000096c 	.word	0x2000096c
 8009e98:	00000439 	.word	0x00000439
 8009e9c:	00000412 	.word	0x00000412
 8009ea0:	00000411 	.word	0x00000411
 8009ea4:	20000698 	.word	0x20000698
 8009ea8:	200006d0 	.word	0x200006d0
 8009eac:	200006d1 	.word	0x200006d1
 8009eb0:	00000414 	.word	0x00000414
 8009eb4:	20000aa4 	.word	0x20000aa4
 8009eb8:	00000237 	.word	0x00000237
 8009ebc:	00000484 	.word	0x00000484
 8009ec0:	2000096e 	.word	0x2000096e
 8009ec4:	0000043c 	.word	0x0000043c
 8009ec8:	00000444 	.word	0x00000444
 8009ecc:	20000a84 	.word	0x20000a84
 8009ed0:	20000df4 	.word	0x20000df4
 8009ed4:	2000096f 	.word	0x2000096f
 8009ed8:	00000481 	.word	0x00000481

08009edc <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8009edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8009ede:	4c07      	ldr	r4, [pc, #28]	; (8009efc <LoRaMacTestSetDutyCycleOn+0x20>)
    verify.DutyCycle = enable;
 8009ee0:	a901      	add	r1, sp, #4
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8009ee2:	0023      	movs	r3, r4
    verify.DutyCycle = enable;
 8009ee4:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8009ee6:	3340      	adds	r3, #64	; 0x40
{
 8009ee8:	0005      	movs	r5, r0
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8009eea:	220f      	movs	r2, #15
 8009eec:	7818      	ldrb	r0, [r3, #0]
 8009eee:	f000 ff0d 	bl	800ad0c <RegionVerify>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d001      	beq.n	8009efa <LoRaMacTestSetDutyCycleOn+0x1e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8009ef6:	34ff      	adds	r4, #255	; 0xff
 8009ef8:	7065      	strb	r5, [r4, #1]
    }
}
 8009efa:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8009efc:	20000698 	.word	0x20000698

08009f00 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 8009f02:	2500      	movs	r5, #0
{
 8009f04:	b08d      	sub	sp, #52	; 0x34
 8009f06:	9104      	str	r1, [sp, #16]
 8009f08:	9205      	str	r2, [sp, #20]
 8009f0a:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 8009f0c:	7883      	ldrb	r3, [r0, #2]
{
 8009f0e:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	d12b      	bne.n	8009f6c <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 8009f14:	2310      	movs	r3, #16
 8009f16:	56c3      	ldrsb	r3, [r0, r3]
 8009f18:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 8009f1a:	2311      	movs	r3, #17
 8009f1c:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 8009f1e:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 8009f20:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 8009f22:	6883      	ldr	r3, [r0, #8]
 8009f24:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 8009f26:	7945      	ldrb	r5, [r0, #5]
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	d01a      	beq.n	8009f62 <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	aa06      	add	r2, sp, #24
 8009f30:	7113      	strb	r3, [r2, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009f32:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009f34:	a907      	add	r1, sp, #28
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009f36:	7193      	strb	r3, [r2, #6]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009f38:	7cc0      	ldrb	r0, [r0, #19]
 8009f3a:	f000 fecd 	bl	800acd8 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 8009f3e:	b243      	sxtb	r3, r0
 8009f40:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 8009f42:	466b      	mov	r3, sp
 8009f44:	9a02      	ldr	r2, [sp, #8]
 8009f46:	791f      	ldrb	r7, [r3, #4]
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	da01      	bge.n	8009f52 <LoRaMacAdrCalcNext+0x52>
 8009f4e:	466b      	mov	r3, sp
 8009f50:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 8009f52:	9b01      	ldr	r3, [sp, #4]
 8009f54:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 8009f56:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	dc0a      	bgt.n	8009f72 <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 8009f60:	2500      	movs	r5, #0
    *drOut = datarate;
 8009f62:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 8009f64:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 8009f66:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 8009f68:	9b05      	ldr	r3, [sp, #20]
 8009f6a:	701a      	strb	r2, [r3, #0]
}
 8009f6c:	0028      	movs	r0, r5
 8009f6e:	b00d      	add	sp, #52	; 0x34
 8009f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8009f72:	2500      	movs	r5, #0
 8009f74:	89a1      	ldrh	r1, [r4, #12]
 8009f76:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8009f78:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8009f7a:	428a      	cmp	r2, r1
 8009f7c:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8009f7e:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8009f80:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d3ed      	bcc.n	8009f62 <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8009f86:	2308      	movs	r3, #8
 8009f88:	ae07      	add	r6, sp, #28
 8009f8a:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009f8c:	0031      	movs	r1, r6
 8009f8e:	7ce0      	ldrb	r0, [r4, #19]
 8009f90:	f000 fea2 	bl	800acd8 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8009f94:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 8009f96:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8009f98:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 8009f9a:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8009f9c:	f7f6 f96a 	bl	8000274 <__aeabi_uidivmod>
 8009fa0:	2901      	cmp	r1, #1
 8009fa2:	d1de      	bne.n	8009f62 <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009fa4:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 8009fa6:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009fa8:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009faa:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009fac:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009fae:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009fb0:	7ce0      	ldrb	r0, [r4, #19]
 8009fb2:	f000 fe91 	bl	800acd8 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 8009fb6:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 8009fb8:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 8009fba:	42bb      	cmp	r3, r7
 8009fbc:	d1d1      	bne.n	8009f62 <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 8009fbe:	7925      	ldrb	r5, [r4, #4]
 8009fc0:	2d00      	cmp	r5, #0
 8009fc2:	d0ce      	beq.n	8009f62 <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	a909      	add	r1, sp, #36	; 0x24
 8009fc8:	720b      	strb	r3, [r1, #8]
                            RegionInitDefaults( adrNext->Region, &params );
 8009fca:	7ce0      	ldrb	r0, [r4, #19]
 8009fcc:	f000 fe97 	bl	800acfe <RegionInitDefaults>
 8009fd0:	e7c6      	b.n	8009f60 <LoRaMacAdrCalcNext+0x60>

08009fd2 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009fd2:	4770      	bx	lr

08009fd4 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009fd4:	4770      	bx	lr

08009fd6 <LoRaMacClassBSetPingSlotState>:
 8009fd6:	4770      	bx	lr

08009fd8 <LoRaMacClassBSetMulticastSlotState>:
 8009fd8:	4770      	bx	lr

08009fda <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009fda:	2000      	movs	r0, #0
 8009fdc:	4770      	bx	lr

08009fde <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009fde:	4770      	bx	lr

08009fe0 <LoRaMacClassBPingSlotTimerEvent>:
 8009fe0:	4770      	bx	lr

08009fe2 <LoRaMacClassBMulticastSlotTimerEvent>:
 8009fe2:	4770      	bx	lr

08009fe4 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	4770      	bx	lr

08009fe8 <LoRaMacClassBIsBeaconExpected>:
 8009fe8:	2000      	movs	r0, #0
 8009fea:	4770      	bx	lr

08009fec <LoRaMacClassBIsPingExpected>:
 8009fec:	2000      	movs	r0, #0
 8009fee:	4770      	bx	lr

08009ff0 <LoRaMacClassBIsMulticastExpected>:
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	4770      	bx	lr

08009ff4 <LoRaMacClassBIsBeaconModeActive>:
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	4770      	bx	lr

08009ff8 <LoRaMacClassBSetPingSlotInfo>:
 8009ff8:	4770      	bx	lr

08009ffa <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009ffa:	4770      	bx	lr

08009ffc <LoRaMacClassBResumeBeaconing>:
 8009ffc:	4770      	bx	lr

08009ffe <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009ffe:	2002      	movs	r0, #2
 800a000:	4770      	bx	lr

0800a002 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a002:	2002      	movs	r0, #2
 800a004:	4770      	bx	lr

0800a006 <LoRaMacMibClassBSetRequestConfirm>:
 800a006:	2002      	movs	r0, #2
 800a008:	4770      	bx	lr

0800a00a <LoRaMacClassBPingSlotInfoAns>:
 800a00a:	4770      	bx	lr

0800a00c <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a00c:	2000      	movs	r0, #0
 800a00e:	4770      	bx	lr

0800a010 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a010:	4770      	bx	lr

0800a012 <LoRaMacClassBDeviceTimeAns>:
 800a012:	4770      	bx	lr

0800a014 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a014:	2000      	movs	r0, #0
 800a016:	4770      	bx	lr

0800a018 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a018:	2000      	movs	r0, #0
 800a01a:	4770      	bx	lr

0800a01c <LoRaMacClassBStopRxSlots>:
 800a01c:	4770      	bx	lr

0800a01e <LoRaMacClassBProcess>:
 800a01e:	4770      	bx	lr

0800a020 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a020:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a022:	4c05      	ldr	r4, [pc, #20]	; (800a038 <LoRaMacCommandsInit+0x18>)
 800a024:	22fc      	movs	r2, #252	; 0xfc
 800a026:	0020      	movs	r0, r4
 800a028:	2100      	movs	r1, #0
 800a02a:	f001 ffd8 	bl	800bfde <memset1>
    list->First = NULL;
 800a02e:	2000      	movs	r0, #0
 800a030:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 800a032:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a034:	bd10      	pop	{r4, pc}
 800a036:	46c0      	nop			; (mov r8, r8)
 800a038:	20000e74 	.word	0x20000e74

0800a03c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800a03c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a03e:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a040:	2701      	movs	r7, #1
{
 800a042:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800a044:	2900      	cmp	r1, #0
 800a046:	d039      	beq.n	800a0bc <LoRaMacCommandsAddCmd+0x80>
 800a048:	2400      	movs	r4, #0
 800a04a:	4b20      	ldr	r3, [pc, #128]	; (800a0cc <LoRaMacCommandsAddCmd+0x90>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a04c:	0122      	lsls	r2, r4, #4
 800a04e:	0018      	movs	r0, r3
 800a050:	4694      	mov	ip, r2
 800a052:	001a      	movs	r2, r3
 800a054:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800a056:	7817      	ldrb	r7, [r2, #0]
 800a058:	2f00      	cmp	r7, #0
 800a05a:	d131      	bne.n	800a0c0 <LoRaMacCommandsAddCmd+0x84>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a05c:	3201      	adds	r2, #1
 800a05e:	4282      	cmp	r2, r0
 800a060:	d1f9      	bne.n	800a056 <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800a062:	481b      	ldr	r0, [pc, #108]	; (800a0d0 <LoRaMacCommandsAddCmd+0x94>)
 800a064:	6802      	ldr	r2, [r0, #0]
 800a066:	2a00      	cmp	r2, #0
 800a068:	d100      	bne.n	800a06c <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800a06a:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800a06c:	6842      	ldr	r2, [r0, #4]
 800a06e:	2a00      	cmp	r2, #0
 800a070:	d000      	beq.n	800a074 <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800a072:	6013      	str	r3, [r2, #0]
    list->Last = element;
 800a074:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 800a076:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800a078:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 800a07a:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 800a07c:	3401      	adds	r4, #1
    newCmd->CID = cid;
 800a07e:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800a080:	0123      	lsls	r3, r4, #4
 800a082:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a084:	4663      	mov	r3, ip
    element->Next = NULL;
 800a086:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a088:	330d      	adds	r3, #13
    element->Next = NULL;
 800a08a:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a08c:	18c0      	adds	r0, r0, r3
 800a08e:	b2aa      	uxth	r2, r5
 800a090:	f001 ff90 	bl	800bfb4 <memcpy1>
    switch( cid )
 800a094:	9b01      	ldr	r3, [sp, #4]
            return true;
 800a096:	2201      	movs	r2, #1
    switch( cid )
 800a098:	2b05      	cmp	r3, #5
 800a09a:	d006      	beq.n	800a0aa <LoRaMacCommandsAddCmd+0x6e>
 800a09c:	0018      	movs	r0, r3
 800a09e:	2302      	movs	r3, #2
 800a0a0:	3808      	subs	r0, #8
 800a0a2:	b2c0      	uxtb	r0, r0
 800a0a4:	4283      	cmp	r3, r0
 800a0a6:	4176      	adcs	r6, r6
 800a0a8:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800a0aa:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <LoRaMacCommandsAddCmd+0x94>)
 800a0ac:	0124      	lsls	r4, r4, #4
 800a0ae:	191c      	adds	r4, r3, r4

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a0b0:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800a0b2:	7122      	strb	r2, [r4, #4]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	3201      	adds	r2, #1
 800a0b8:	1955      	adds	r5, r2, r5
 800a0ba:	601d      	str	r5, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a0bc:	0038      	movs	r0, r7
 800a0be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800a0c0:	3401      	adds	r4, #1
 800a0c2:	0003      	movs	r3, r0
 800a0c4:	2c0f      	cmp	r4, #15
 800a0c6:	d1c1      	bne.n	800a04c <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a0c8:	2702      	movs	r7, #2
 800a0ca:	e7f7      	b.n	800a0bc <LoRaMacCommandsAddCmd+0x80>
 800a0cc:	20000e7c 	.word	0x20000e7c
 800a0d0:	20000e74 	.word	0x20000e74

0800a0d4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800a0d4:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a0d6:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d021      	beq.n	800a120 <LoRaMacCommandsRemoveCmd+0x4c>
    curElement = list->First;
 800a0dc:	4b11      	ldr	r3, [pc, #68]	; (800a124 <LoRaMacCommandsRemoveCmd+0x50>)
 800a0de:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800a0e0:	4290      	cmp	r0, r2
 800a0e2:	d104      	bne.n	800a0ee <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800a0e4:	6802      	ldr	r2, [r0, #0]
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	e005      	b.n	800a0f8 <LoRaMacCommandsRemoveCmd+0x24>
 800a0ec:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	d002      	beq.n	800a0f8 <LoRaMacCommandsRemoveCmd+0x24>
 800a0f2:	6811      	ldr	r1, [r2, #0]
 800a0f4:	4288      	cmp	r0, r1
 800a0f6:	d1f9      	bne.n	800a0ec <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800a0f8:	6859      	ldr	r1, [r3, #4]
 800a0fa:	4288      	cmp	r0, r1
 800a0fc:	d100      	bne.n	800a100 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800a0fe:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800a100:	2a00      	cmp	r2, #0
 800a102:	d001      	beq.n	800a108 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800a104:	6801      	ldr	r1, [r0, #0]
 800a106:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800a108:	2400      	movs	r4, #0
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a10a:	33f8      	adds	r3, #248	; 0xf8
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	6881      	ldr	r1, [r0, #8]
 800a110:	3a01      	subs	r2, #1
 800a112:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800a114:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a116:	0021      	movs	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a118:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a11a:	2210      	movs	r2, #16
 800a11c:	f001 ff5f 	bl	800bfde <memset1>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a120:	0020      	movs	r0, r4
 800a122:	bd10      	pop	{r4, pc}
 800a124:	20000e74 	.word	0x20000e74

0800a128 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800a128:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a12a:	4b06      	ldr	r3, [pc, #24]	; (800a144 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>)
 800a12c:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a12e:	2800      	cmp	r0, #0
 800a130:	d100      	bne.n	800a134 <LoRaMacCommandsRemoveNoneStickyCmds+0xc>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a132:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 800a134:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 800a136:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
 800a13c:	f7ff ffca 	bl	800a0d4 <LoRaMacCommandsRemoveCmd>
{
 800a140:	0020      	movs	r0, r4
 800a142:	e7f4      	b.n	800a12e <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800a144:	20000e74 	.word	0x20000e74

0800a148 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a148:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a14a:	4b08      	ldr	r3, [pc, #32]	; (800a16c <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800a14c:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a14e:	2800      	cmp	r0, #0
 800a150:	d100      	bne.n	800a154 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a152:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
 800a154:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 800a156:	6804      	ldr	r4, [r0, #0]
    switch( cid )
 800a158:	2b05      	cmp	r3, #5
 800a15a:	d002      	beq.n	800a162 <LoRaMacCommandsRemoveStickyAnsCmds+0x1a>
 800a15c:	3b08      	subs	r3, #8
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d801      	bhi.n	800a166 <LoRaMacCommandsRemoveStickyAnsCmds+0x1e>
            LoRaMacCommandsRemoveCmd( curElement );
 800a162:	f7ff ffb7 	bl	800a0d4 <LoRaMacCommandsRemoveCmd>
{
 800a166:	0020      	movs	r0, r4
 800a168:	e7f1      	b.n	800a14e <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800a16a:	46c0      	nop			; (mov r8, r8)
 800a16c:	20000e74 	.word	0x20000e74

0800a170 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800a170:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a172:	2001      	movs	r0, #1
    if( size == NULL )
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = CommandsCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800a178:	2000      	movs	r0, #0
    *size = CommandsCtx.SerializedCmdsSize;
 800a17a:	4a02      	ldr	r2, [pc, #8]	; (800a184 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a17c:	32f8      	adds	r2, #248	; 0xf8
 800a17e:	6812      	ldr	r2, [r2, #0]
 800a180:	601a      	str	r2, [r3, #0]
}
 800a182:	4770      	bx	lr
 800a184:	20000e74 	.word	0x20000e74

0800a188 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a18a:	000f      	movs	r7, r1
 800a18c:	9001      	str	r0, [sp, #4]
 800a18e:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a190:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a192:	2a00      	cmp	r2, #0
 800a194:	d00a      	beq.n	800a1ac <LoRaMacCommandsSerializeCmds+0x24>
 800a196:	2900      	cmp	r1, #0
 800a198:	d008      	beq.n	800a1ac <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a19a:	4b13      	ldr	r3, [pc, #76]	; (800a1e8 <LoRaMacCommandsSerializeCmds+0x60>)
 800a19c:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800a19e:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a1a0:	2c00      	cmp	r4, #0
 800a1a2:	d104      	bne.n	800a1ae <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a1a4:	0038      	movs	r0, r7
 800a1a6:	f7ff ffe3 	bl	800a170 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a1aa:	2000      	movs	r0, #0
}
 800a1ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a1ae:	9a01      	ldr	r2, [sp, #4]
 800a1b0:	1ad1      	subs	r1, r2, r3
 800a1b2:	68a2      	ldr	r2, [r4, #8]
 800a1b4:	3201      	adds	r2, #1
 800a1b6:	4291      	cmp	r1, r2
 800a1b8:	d30e      	bcc.n	800a1d8 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800a1ba:	7922      	ldrb	r2, [r4, #4]
 800a1bc:	1c5d      	adds	r5, r3, #1
 800a1be:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a1c0:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800a1c2:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	1d61      	adds	r1, r4, #5
 800a1c8:	1970      	adds	r0, r6, r5
 800a1ca:	f001 fef3 	bl	800bfb4 <memcpy1>
            itr += curElement->PayloadSize;
 800a1ce:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800a1d0:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800a1d2:	18ed      	adds	r5, r5, r3
 800a1d4:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 800a1d6:	e7e3      	b.n	800a1a0 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800a1d8:	0020      	movs	r0, r4
 800a1da:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a1dc:	f7ff ff7a 	bl	800a0d4 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800a1e0:	2c00      	cmp	r4, #0
 800a1e2:	d1f9      	bne.n	800a1d8 <LoRaMacCommandsSerializeCmds+0x50>
 800a1e4:	e7de      	b.n	800a1a4 <LoRaMacCommandsSerializeCmds+0x1c>
 800a1e6:	46c0      	nop			; (mov r8, r8)
 800a1e8:	20000e74 	.word	0x20000e74

0800a1ec <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800a1ec:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a1ee:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00b      	beq.n	800a20c <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800a1f4:	4a07      	ldr	r2, [pc, #28]	; (800a214 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a1f6:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d005      	beq.n	800a20c <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800a200:	7b02      	ldrb	r2, [r0, #12]
 800a202:	2a00      	cmp	r2, #0
 800a204:	d003      	beq.n	800a20e <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800a206:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800a208:	2000      	movs	r0, #0
            *cmdsPending = true;
 800a20a:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a20c:	4770      	bx	lr
        curElement = curElement->Next;
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	e7f4      	b.n	800a1fc <LoRaMacCommandsStickyCmdsPending+0x10>
 800a212:	46c0      	nop			; (mov r8, r8)
 800a214:	20000e74 	.word	0x20000e74

0800a218 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a218:	3802      	subs	r0, #2
 800a21a:	b2c3      	uxtb	r3, r0
{
 800a21c:	2000      	movs	r0, #0
 800a21e:	2b11      	cmp	r3, #17
 800a220:	d801      	bhi.n	800a226 <LoRaMacCommandsGetCmdSize+0xe>
 800a222:	4a01      	ldr	r2, [pc, #4]	; (800a228 <LoRaMacCommandsGetCmdSize+0x10>)
 800a224:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a226:	4770      	bx	lr
 800a228:	0800e71f 	.word	0x0800e71f

0800a22c <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	0004      	movs	r4, r0
 800a230:	0008      	movs	r0, r1
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a232:	490c      	ldr	r1, [pc, #48]	; (800a264 <GetElement.constprop.0+0x38>)
 800a234:	1c4b      	adds	r3, r1, #1
 800a236:	7fda      	ldrb	r2, [r3, #31]
    if( count == 0 )
 800a238:	2a00      	cmp	r2, #0
 800a23a:	d011      	beq.n	800a260 <GetElement.constprop.0+0x34>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a23c:	000d      	movs	r5, r1
 800a23e:	2300      	movs	r3, #0
 800a240:	351c      	adds	r5, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800a242:	7806      	ldrb	r6, [r0, #0]
 800a244:	42a6      	cmp	r6, r4
 800a246:	d007      	beq.n	800a258 <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a248:	42a8      	cmp	r0, r5
 800a24a:	d006      	beq.n	800a25a <GetElement.constprop.0+0x2e>
        bufferPointer++;
 800a24c:	3004      	adds	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a24e:	3301      	adds	r3, #1
 800a250:	b2db      	uxtb	r3, r3
 800a252:	429a      	cmp	r2, r3
 800a254:	d1f5      	bne.n	800a242 <GetElement.constprop.0+0x16>
        return NULL;
 800a256:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800a258:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a25a:	0008      	movs	r0, r1
 800a25c:	300c      	adds	r0, #12
 800a25e:	e7f6      	b.n	800a24e <GetElement.constprop.0+0x22>
        return NULL;
 800a260:	0010      	movs	r0, r2
 800a262:	e7f9      	b.n	800a258 <GetElement.constprop.0+0x2c>
 800a264:	20000f70 	.word	0x20000f70

0800a268 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a268:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a26a:	4c08      	ldr	r4, [pc, #32]	; (800a28c <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a26c:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 800a26e:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a270:	0020      	movs	r0, r4
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a272:	1c63      	adds	r3, r4, #1
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a274:	300c      	adds	r0, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a276:	77da      	strb	r2, [r3, #31]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a278:	21ff      	movs	r1, #255	; 0xff
 800a27a:	3214      	adds	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a27c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a27e:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a280:	f001 fead 	bl	800bfde <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	3402      	adds	r4, #2
 800a288:	77e3      	strb	r3, [r4, #31]
}
 800a28a:	bd10      	pop	{r4, pc}
 800a28c:	20000f70 	.word	0x20000f70

0800a290 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a290:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a292:	4a0e      	ldr	r2, [pc, #56]	; (800a2cc <LoRaMacConfirmQueueAdd+0x3c>)
{
 800a294:	0001      	movs	r1, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a296:	1c55      	adds	r5, r2, #1
 800a298:	7fec      	ldrb	r4, [r5, #31]
    {
        // Protect the buffer against overwrites
        return false;
 800a29a:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a29c:	2c04      	cmp	r4, #4
 800a29e:	d813      	bhi.n	800a2c8 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a2a0:	7808      	ldrb	r0, [r1, #0]
 800a2a2:	6893      	ldr	r3, [r2, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a2a4:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a2a6:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a2a8:	7848      	ldrb	r0, [r1, #1]
 800a2aa:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a2ac:	78c9      	ldrb	r1, [r1, #3]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2ae:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a2b0:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	7099      	strb	r1, [r3, #2]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a2b6:	0011      	movs	r1, r2
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2b8:	301c      	adds	r0, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a2ba:	77ec      	strb	r4, [r5, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a2bc:	310c      	adds	r1, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2be:	4283      	cmp	r3, r0
 800a2c0:	d000      	beq.n	800a2c4 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer++;
 800a2c2:	1d19      	adds	r1, r3, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 800a2c4:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a2c6:	6091      	str	r1, [r2, #8]
}
 800a2c8:	bd30      	pop	{r4, r5, pc}
 800a2ca:	46c0      	nop			; (mov r8, r8)
 800a2cc:	20000f70 	.word	0x20000f70

0800a2d0 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a2d0:	4b08      	ldr	r3, [pc, #32]	; (800a2f4 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800a2d2:	1c59      	adds	r1, r3, #1
 800a2d4:	7fca      	ldrb	r2, [r1, #31]
    {
        return false;
 800a2d6:	1e10      	subs	r0, r2, #0
    if( count == 0 )
 800a2d8:	d00b      	beq.n	800a2f2 <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a2da:	3a01      	subs	r2, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2dc:	0018      	movs	r0, r3
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a2de:	77ca      	strb	r2, [r1, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a2e0:	001a      	movs	r2, r3
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a2e2:	6859      	ldr	r1, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2e4:	301c      	adds	r0, #28
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a2e6:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2e8:	4281      	cmp	r1, r0
 800a2ea:	d000      	beq.n	800a2ee <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer++;
 800a2ec:	1d0a      	adds	r2, r1, #4

    return true;
 800a2ee:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a2f0:	605a      	str	r2, [r3, #4]
}
 800a2f2:	4770      	bx	lr
 800a2f4:	20000f70 	.word	0x20000f70

0800a2f8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a2f8:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a2fa:	4b08      	ldr	r3, [pc, #32]	; (800a31c <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800a2fc:	0004      	movs	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a2fe:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 800a300:	7fd2      	ldrb	r2, [r2, #31]
{
 800a302:	0008      	movs	r0, r1
    if( count == 0 )
 800a304:	2a00      	cmp	r2, #0
 800a306:	d007      	beq.n	800a318 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a308:	6859      	ldr	r1, [r3, #4]
 800a30a:	f7ff ff8f 	bl	800a22c <GetElement.constprop.0>
        if( element != NULL )
 800a30e:	2800      	cmp	r0, #0
 800a310:	d002      	beq.n	800a318 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800a312:	2301      	movs	r3, #1
            element->Status = status;
 800a314:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800a316:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	46c0      	nop			; (mov r8, r8)
 800a31c:	20000f70 	.word	0x20000f70

0800a320 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a320:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a322:	4b07      	ldr	r3, [pc, #28]	; (800a340 <LoRaMacConfirmQueueGetStatus+0x20>)
 800a324:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 800a326:	7fd1      	ldrb	r1, [r2, #31]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a328:	2201      	movs	r2, #1
    if( count == 0 )
 800a32a:	2900      	cmp	r1, #0
 800a32c:	d006      	beq.n	800a33c <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a32e:	6859      	ldr	r1, [r3, #4]
 800a330:	f7ff ff7c 	bl	800a22c <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a334:	2201      	movs	r2, #1
        if( element != NULL )
 800a336:	2800      	cmp	r0, #0
 800a338:	d000      	beq.n	800a33c <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800a33a:	7842      	ldrb	r2, [r0, #1]
}
 800a33c:	0010      	movs	r0, r2
 800a33e:	bd10      	pop	{r4, pc}
 800a340:	20000f70 	.word	0x20000f70

0800a344 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a344:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a346:	4a0d      	ldr	r2, [pc, #52]	; (800a37c <LoRaMacConfirmQueueSetStatusCmn+0x38>)

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a348:	1c91      	adds	r1, r2, #2
 800a34a:	77c8      	strb	r0, [r1, #31]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a34c:	1c51      	adds	r1, r2, #1
    if( count == 0 )
 800a34e:	7fc9      	ldrb	r1, [r1, #31]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a350:	6853      	ldr	r3, [r2, #4]
    if( count == 0 )
 800a352:	2900      	cmp	r1, #0
 800a354:	d00d      	beq.n	800a372 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a356:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800a358:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a35a:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a35c:	341c      	adds	r4, #28
            if( element->RestrictCommonReadyToHandle == false )
 800a35e:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800a360:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a362:	2e00      	cmp	r6, #0
 800a364:	d100      	bne.n	800a368 <LoRaMacConfirmQueueSetStatusCmn+0x24>
                element->ReadyToHandle = true;
 800a366:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a368:	42a3      	cmp	r3, r4
 800a36a:	d003      	beq.n	800a374 <LoRaMacConfirmQueueSetStatusCmn+0x30>
        bufferPointer++;
 800a36c:	3304      	adds	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a36e:	4299      	cmp	r1, r3
 800a370:	d1f5      	bne.n	800a35e <LoRaMacConfirmQueueSetStatusCmn+0x1a>
    }
}
 800a372:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a374:	0013      	movs	r3, r2
 800a376:	330c      	adds	r3, #12
 800a378:	e7f9      	b.n	800a36e <LoRaMacConfirmQueueSetStatusCmn+0x2a>
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	20000f70 	.word	0x20000f70

0800a380 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a380:	4b04      	ldr	r3, [pc, #16]	; (800a394 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800a382:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a384:	6859      	ldr	r1, [r3, #4]
 800a386:	f7ff ff51 	bl	800a22c <GetElement.constprop.0>
 800a38a:	1e43      	subs	r3, r0, #1
 800a38c:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800a38e:	b2c0      	uxtb	r0, r0
 800a390:	bd10      	pop	{r4, pc}
 800a392:	46c0      	nop			; (mov r8, r8)
 800a394:	20000f70 	.word	0x20000f70

0800a398 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a39a:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a39c:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a39e:	4e13      	ldr	r6, [pc, #76]	; (800a3ec <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800a3a0:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a3a2:	1c73      	adds	r3, r6, #1
 800a3a4:	7fdb      	ldrb	r3, [r3, #31]
 800a3a6:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800a3a8:	9b01      	ldr	r3, [sp, #4]
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	d101      	bne.n	800a3b2 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800a3ae:	b005      	add	sp, #20
 800a3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a3b2:	6873      	ldr	r3, [r6, #4]
 800a3b4:	7818      	ldrb	r0, [r3, #0]
 800a3b6:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a3b8:	7859      	ldrb	r1, [r3, #1]
 800a3ba:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a3bc:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800a3be:	2f00      	cmp	r7, #0
 800a3c0:	d00d      	beq.n	800a3de <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a3c2:	6833      	ldr	r3, [r6, #0]
 800a3c4:	0028      	movs	r0, r5
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800a3ca:	f7ff ff81 	bl	800a2d0 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800a3ce:	2f00      	cmp	r7, #0
 800a3d0:	d102      	bne.n	800a3d8 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a3d2:	a803      	add	r0, sp, #12
 800a3d4:	f7ff ff5c 	bl	800a290 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a3d8:	3401      	adds	r4, #1
 800a3da:	b2e4      	uxtb	r4, r4
 800a3dc:	e7e4      	b.n	800a3a8 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a3de:	aa03      	add	r2, sp, #12
 800a3e0:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a3e2:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a3e4:	78db      	ldrb	r3, [r3, #3]
 800a3e6:	70d3      	strb	r3, [r2, #3]
 800a3e8:	e7ef      	b.n	800a3ca <LoRaMacConfirmQueueHandleCb+0x32>
 800a3ea:	46c0      	nop			; (mov r8, r8)
 800a3ec:	20000f70 	.word	0x20000f70

0800a3f0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a3f0:	4b01      	ldr	r3, [pc, #4]	; (800a3f8 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	7fd8      	ldrb	r0, [r3, #31]
}
 800a3f6:	4770      	bx	lr
 800a3f8:	20000f70 	.word	0x20000f70

0800a3fc <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 800a3fc:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a3fe:	4b03      	ldr	r3, [pc, #12]	; (800a40c <LoRaMacConfirmQueueIsFull+0x10>)
 800a400:	3301      	adds	r3, #1
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a402:	7fdb      	ldrb	r3, [r3, #31]
}
 800a404:	4298      	cmp	r0, r3
 800a406:	4180      	sbcs	r0, r0
 800a408:	4240      	negs	r0, r0
 800a40a:	4770      	bx	lr
 800a40c:	20000f70 	.word	0x20000f70

0800a410 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 800a410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a412:	b085      	sub	sp, #20
 800a414:	000d      	movs	r5, r1
 800a416:	0014      	movs	r4, r2
 800a418:	0007      	movs	r7, r0
    uint8_t compBase[16] = { 0 };
 800a41a:	220c      	movs	r2, #12
 800a41c:	2100      	movs	r1, #0
 800a41e:	a801      	add	r0, sp, #4
{
 800a420:	001e      	movs	r6, r3
    uint8_t compBase[16] = { 0 };
 800a422:	f003 feb8 	bl	800e196 <memset>

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 800a426:	466a      	mov	r2, sp
 800a428:	1e7b      	subs	r3, r7, #1
 800a42a:	7013      	strb	r3, [r2, #0]
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a42c:	0a2b      	lsrs	r3, r5, #8
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800a42e:	7055      	strb	r5, [r2, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a430:	7093      	strb	r3, [r2, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800a432:	7114      	strb	r4, [r2, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800a434:	0a23      	lsrs	r3, r4, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800a436:	71d6      	strb	r6, [r2, #7]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a438:	0c2d      	lsrs	r5, r5, #16
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a43a:	0c24      	lsrs	r4, r4, #16
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a43c:	0a36      	lsrs	r6, r6, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a43e:	70d5      	strb	r5, [r2, #3]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800a440:	7153      	strb	r3, [r2, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a442:	7194      	strb	r4, [r2, #6]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a444:	7216      	strb	r6, [r2, #8]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a446:	2101      	movs	r1, #1
 800a448:	003a      	movs	r2, r7
 800a44a:	4668      	mov	r0, sp
 800a44c:	f7fc fa1d 	bl	800688a <SecureElementDeriveAndStoreKey>
 800a450:	2800      	cmp	r0, #0
 800a452:	d000      	beq.n	800a456 <DeriveSessionKey10x+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a454:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a456:	b005      	add	sp, #20
 800a458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a45a <PayloadEncrypt>:
{
 800a45a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a45c:	b08d      	sub	sp, #52	; 0x34
 800a45e:	001d      	movs	r5, r3
 800a460:	ab12      	add	r3, sp, #72	; 0x48
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	9001      	str	r0, [sp, #4]
 800a466:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800a468:	9b01      	ldr	r3, [sp, #4]
{
 800a46a:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a46c:	200a      	movs	r0, #10
{
 800a46e:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800a470:	2b00      	cmp	r3, #0
 800a472:	d02b      	beq.n	800a4cc <PayloadEncrypt+0x72>
    uint8_t sBlock[16] = { 0 };
 800a474:	2600      	movs	r6, #0
 800a476:	220c      	movs	r2, #12
 800a478:	0031      	movs	r1, r6
 800a47a:	a805      	add	r0, sp, #20
 800a47c:	9604      	str	r6, [sp, #16]
 800a47e:	f003 fe8a 	bl	800e196 <memset>
    uint8_t aBlock[16] = { 0 };
 800a482:	220c      	movs	r2, #12
 800a484:	0031      	movs	r1, r6
 800a486:	a809      	add	r0, sp, #36	; 0x24
 800a488:	9608      	str	r6, [sp, #32]
 800a48a:	f003 fe84 	bl	800e196 <memset>
    aBlock[0] = 0x01;
 800a48e:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800a490:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800a492:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800a494:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800a496:	0a2b      	lsrs	r3, r5, #8
 800a498:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a49a:	0c2b      	lsrs	r3, r5, #16
 800a49c:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800a49e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800a4a0:	71a5      	strb	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800a4a2:	72a3      	strb	r3, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a4a4:	0a1b      	lsrs	r3, r3, #8
 800a4a6:	72e3      	strb	r3, [r4, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a4a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a4aa:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a4ac:	0c1b      	lsrs	r3, r3, #16
 800a4ae:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a4b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[0] = 0x01;
 800a4b2:	7022      	strb	r2, [r4, #0]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a4b4:	0e1b      	lsrs	r3, r3, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a4b6:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a4b8:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800a4ba:	0014      	movs	r4, r2
 800a4bc:	b2e2      	uxtb	r2, r4
 800a4be:	0113      	lsls	r3, r2, #4
 800a4c0:	3b10      	subs	r3, #16
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800a4c6:	2f00      	cmp	r7, #0
 800a4c8:	dc02      	bgt.n	800a4d0 <PayloadEncrypt+0x76>
    return LORAMAC_CRYPTO_SUCCESS;
 800a4ca:	2000      	movs	r0, #0
}
 800a4cc:	b00d      	add	sp, #52	; 0x34
 800a4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800a4d0:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a4d2:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800a4d4:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800a4d6:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a4d8:	002b      	movs	r3, r5
 800a4da:	2110      	movs	r1, #16
 800a4dc:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800a4de:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a4e0:	f7fc f963 	bl	80067aa <SecureElementAesEncrypt>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d115      	bne.n	800a514 <PayloadEncrypt+0xba>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a4e8:	1c39      	adds	r1, r7, #0
 800a4ea:	1c0b      	adds	r3, r1, #0
 800a4ec:	2f10      	cmp	r7, #16
 800a4ee:	dd00      	ble.n	800a4f2 <PayloadEncrypt+0x98>
 800a4f0:	2310      	movs	r3, #16
 800a4f2:	b21b      	sxth	r3, r3
 800a4f4:	4298      	cmp	r0, r3
 800a4f6:	db02      	blt.n	800a4fe <PayloadEncrypt+0xa4>
        size -= 16;
 800a4f8:	3f10      	subs	r7, #16
 800a4fa:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800a4fc:	e7de      	b.n	800a4bc <PayloadEncrypt+0x62>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a4fe:	9b02      	ldr	r3, [sp, #8]
 800a500:	5c2e      	ldrb	r6, [r5, r0]
 800a502:	181a      	adds	r2, r3, r0
 800a504:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a506:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a508:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a50a:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a50c:	4073      	eors	r3, r6
 800a50e:	9e01      	ldr	r6, [sp, #4]
 800a510:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a512:	e7ea      	b.n	800a4ea <PayloadEncrypt+0x90>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a514:	200f      	movs	r0, #15
 800a516:	e7d9      	b.n	800a4cc <PayloadEncrypt+0x72>

0800a518 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800a518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800a51a:	2100      	movs	r1, #0
 800a51c:	220c      	movs	r2, #12
 800a51e:	a801      	add	r0, sp, #4
 800a520:	9100      	str	r1, [sp, #0]
 800a522:	f003 fe38 	bl	800e196 <memset>

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a526:	227f      	movs	r2, #127	; 0x7f
 800a528:	2104      	movs	r1, #4
 800a52a:	4668      	mov	r0, sp
 800a52c:	f7fc f9ad 	bl	800688a <SecureElementDeriveAndStoreKey>
 800a530:	2800      	cmp	r0, #0
 800a532:	d000      	beq.n	800a536 <LoRaMacCryptoDeriveMcKEKey.part.0+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a534:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a536:	b005      	add	sp, #20
 800a538:	bd00      	pop	{pc}
	...

0800a53c <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 800a53c:	3801      	subs	r0, #1
 800a53e:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 800a540:	b500      	push	{lr}
    switch( fCntID )
 800a542:	2803      	cmp	r0, #3
 800a544:	d80a      	bhi.n	800a55c <GetLastFcntDown.constprop.0+0x20>
 800a546:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <GetLastFcntDown.constprop.0+0x3c>)
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a548:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 800a54a:	f7f5 fdef 	bl	800012c <__gnu_thumb1_case_uqi>
 800a54e:	0902      	.short	0x0902
 800a550:	110d      	.short	0x110d
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a552:	691a      	ldr	r2, [r3, #16]
 800a554:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800a556:	691a      	ldr	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a558:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	0018      	movs	r0, r3
 800a55e:	bd00      	pop	{pc}
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a560:	695a      	ldr	r2, [r3, #20]
 800a562:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a564:	695a      	ldr	r2, [r3, #20]
 800a566:	e7f7      	b.n	800a558 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a568:	699a      	ldr	r2, [r3, #24]
 800a56a:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a56c:	699a      	ldr	r2, [r3, #24]
 800a56e:	e7f3      	b.n	800a558 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	600b      	str	r3, [r1, #0]
 800a574:	e7f1      	b.n	800a55a <GetLastFcntDown.constprop.0+0x1e>
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	20000f94 	.word	0x20000f94

0800a57c <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a57e:	b0c7      	sub	sp, #284	; 0x11c
 800a580:	0007      	movs	r7, r0
 800a582:	000c      	movs	r4, r1
 800a584:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a586:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a588:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 800a58a:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800a58c:	2f00      	cmp	r7, #0
 800a58e:	d037      	beq.n	800a600 <VerifyCmacB0.constprop.0.isra.0+0x84>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a590:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a592:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	4299      	cmp	r1, r3
 800a598:	d832      	bhi.n	800a600 <VerifyCmacB0.constprop.0.isra.0+0x84>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a59a:	2288      	movs	r2, #136	; 0x88
 800a59c:	2100      	movs	r1, #0
 800a59e:	0052      	lsls	r2, r2, #1
 800a5a0:	a802      	add	r0, sp, #8
 800a5a2:	f001 fd1c 	bl	800bfde <memset1>
    b0[0] = 0x49;
 800a5a6:	2349      	movs	r3, #73	; 0x49
 800a5a8:	aa02      	add	r2, sp, #8
 800a5aa:	7013      	strb	r3, [r2, #0]
        b0[1] = 0x00;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	7053      	strb	r3, [r2, #1]
        b0[2] = 0x00;
 800a5b0:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 800a5b2:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 800a5b4:	7113      	strb	r3, [r2, #4]
    b0[5] = dir;
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	a902      	add	r1, sp, #8
 800a5ba:	714a      	strb	r2, [r1, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a5bc:	0a2a      	lsrs	r2, r5, #8
 800a5be:	71ca      	strb	r2, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a5c0:	0c2a      	lsrs	r2, r5, #16
 800a5c2:	720a      	strb	r2, [r1, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a5c4:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 800a5c6:	718d      	strb	r5, [r1, #6]
    b0[10] = fCnt & 0xFF;
 800a5c8:	728e      	strb	r6, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a5ca:	72ca      	strb	r2, [r1, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a5cc:	0e2d      	lsrs	r5, r5, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a5ce:	0c32      	lsrs	r2, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a5d0:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a5d2:	730a      	strb	r2, [r1, #12]
    b0[14] = 0x00;
 800a5d4:	738b      	strb	r3, [r1, #14]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a5d6:	0022      	movs	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a5d8:	724d      	strb	r5, [r1, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a5da:	734e      	strb	r6, [r1, #13]
    b0[15] = msgLen & 0xFF;
 800a5dc:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a5de:	a806      	add	r0, sp, #24
 800a5e0:	0039      	movs	r1, r7
 800a5e2:	f001 fce7 	bl	800bfb4 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800a5e6:	0021      	movs	r1, r4
 800a5e8:	3110      	adds	r1, #16
 800a5ea:	9b01      	ldr	r3, [sp, #4]
 800a5ec:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800a5ee:	b289      	uxth	r1, r1
 800a5f0:	a802      	add	r0, sp, #8
 800a5f2:	f7fc f8c2 	bl	800677a <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d002      	beq.n	800a600 <VerifyCmacB0.constprop.0.isra.0+0x84>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800a5fa:	2801      	cmp	r0, #1
 800a5fc:	d000      	beq.n	800a600 <VerifyCmacB0.constprop.0.isra.0+0x84>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a5fe:	200f      	movs	r0, #15
}
 800a600:	b047      	add	sp, #284	; 0x11c
 800a602:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a604 <LoRaMacCryptoInit>:
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800a604:	2309      	movs	r3, #9
{
 800a606:	b510      	push	{r4, lr}
    if( nvm == NULL )
 800a608:	2800      	cmp	r0, #0
 800a60a:	d012      	beq.n	800a632 <LoRaMacCryptoInit+0x2e>
    CryptoNvm = nvm;
 800a60c:	4c0a      	ldr	r4, [pc, #40]	; (800a638 <LoRaMacCryptoInit+0x34>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800a60e:	2228      	movs	r2, #40	; 0x28
 800a610:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 800a612:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800a614:	f001 fce3 	bl	800bfde <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800a618:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800a61a:	4a08      	ldr	r2, [pc, #32]	; (800a63c <LoRaMacCryptoInit+0x38>)
    CryptoNvm->FCntList.FCntUp = 0;
 800a61c:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800a61e:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a620:	2201      	movs	r2, #1
 800a622:	4252      	negs	r2, r2
    CryptoNvm->FCntList.FCntUp = 0;
 800a624:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a626:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a628:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a62a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a62c:	621a      	str	r2, [r3, #32]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800a62e:	61da      	str	r2, [r3, #28]
    return LORAMAC_CRYPTO_SUCCESS;
 800a630:	0003      	movs	r3, r0
}
 800a632:	0018      	movs	r0, r3
 800a634:	bd10      	pop	{r4, pc}
 800a636:	46c0      	nop			; (mov r8, r8)
 800a638:	20000f94 	.word	0x20000f94
 800a63c:	01010100 	.word	0x01010100

0800a640 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6018      	str	r0, [r3, #0]
}
 800a646:	2000      	movs	r0, #0
 800a648:	4770      	bx	lr
 800a64a:	46c0      	nop			; (mov r8, r8)
 800a64c:	20000f94 	.word	0x20000f94

0800a650 <LoRaMacCryptoGetFCntUp>:
{
 800a650:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a652:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800a658:	2000      	movs	r0, #0
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800a65a:	4a03      	ldr	r2, [pc, #12]	; (800a668 <LoRaMacCryptoGetFCntUp+0x18>)
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	68d2      	ldr	r2, [r2, #12]
 800a660:	3201      	adds	r2, #1
 800a662:	601a      	str	r2, [r3, #0]
}
 800a664:	4770      	bx	lr
 800a666:	46c0      	nop			; (mov r8, r8)
 800a668:	20000f94 	.word	0x20000f94

0800a66c <LoRaMacCryptoGetFCntDown>:
{
 800a66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a66e:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800a670:	2300      	movs	r3, #0
{
 800a672:	0007      	movs	r7, r0
 800a674:	000d      	movs	r5, r1
 800a676:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a678:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800a67a:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800a67c:	429c      	cmp	r4, r3
 800a67e:	d026      	beq.n	800a6ce <LoRaMacCryptoGetFCntDown+0x62>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800a680:	0038      	movs	r0, r7
 800a682:	a901      	add	r1, sp, #4
 800a684:	f7ff ff5a 	bl	800a53c <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a688:	2800      	cmp	r0, #0
 800a68a:	d120      	bne.n	800a6ce <LoRaMacCryptoGetFCntDown+0x62>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800a68c:	9f01      	ldr	r7, [sp, #4]
 800a68e:	1c7b      	adds	r3, r7, #1
 800a690:	d101      	bne.n	800a696 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800a692:	6026      	str	r6, [r4, #0]
 800a694:	e005      	b.n	800a6a2 <LoRaMacCryptoGetFCntDown+0x36>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800a696:	b2bb      	uxth	r3, r7
 800a698:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	dd13      	ble.n	800a6c6 <LoRaMacCryptoGetFCntDown+0x5a>
            *currentDown = lastDown + fCntDiff;
 800a69e:	18fb      	adds	r3, r7, r3
 800a6a0:	6023      	str	r3, [r4, #0]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800a6a2:	4b10      	ldr	r3, [pc, #64]	; (800a6e4 <LoRaMacCryptoGetFCntDown+0x78>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	789e      	ldrb	r6, [r3, #2]
 800a6a8:	2e00      	cmp	r6, #0
 800a6aa:	d110      	bne.n	800a6ce <LoRaMacCryptoGetFCntDown+0x62>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800a6ac:	0033      	movs	r3, r6
 800a6ae:	0038      	movs	r0, r7
 800a6b0:	0031      	movs	r1, r6
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	1a12      	subs	r2, r2, r0
 800a6b6:	418b      	sbcs	r3, r1
 800a6b8:	429e      	cmp	r6, r3
 800a6ba:	dc10      	bgt.n	800a6de <LoRaMacCryptoGetFCntDown+0x72>
 800a6bc:	d101      	bne.n	800a6c2 <LoRaMacCryptoGetFCntDown+0x56>
 800a6be:	4295      	cmp	r5, r2
 800a6c0:	d80d      	bhi.n	800a6de <LoRaMacCryptoGetFCntDown+0x72>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800a6c2:	2008      	movs	r0, #8
 800a6c4:	e003      	b.n	800a6ce <LoRaMacCryptoGetFCntDown+0x62>
        else if( fCntDiff == 0 )
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d102      	bne.n	800a6d0 <LoRaMacCryptoGetFCntDown+0x64>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800a6ca:	2007      	movs	r0, #7
            *currentDown = lastDown;
 800a6cc:	6027      	str	r7, [r4, #0]
}
 800a6ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800a6d0:	2380      	movs	r3, #128	; 0x80
 800a6d2:	0c3a      	lsrs	r2, r7, #16
 800a6d4:	0412      	lsls	r2, r2, #16
 800a6d6:	025b      	lsls	r3, r3, #9
 800a6d8:	18d2      	adds	r2, r2, r3
 800a6da:	1996      	adds	r6, r2, r6
 800a6dc:	e7d9      	b.n	800a692 <LoRaMacCryptoGetFCntDown+0x26>
    return LORAMAC_CRYPTO_SUCCESS;
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e7f5      	b.n	800a6ce <LoRaMacCryptoGetFCntDown+0x62>
 800a6e2:	46c0      	nop			; (mov r8, r8)
 800a6e4:	20000f94 	.word	0x20000f94

0800a6e8 <LoRaMacCryptoSetMulticastReference>:
{
 800a6e8:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a6ea:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d004      	beq.n	800a6fa <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800a6f0:	2000      	movs	r0, #0
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800a6f2:	4a02      	ldr	r2, [pc, #8]	; (800a6fc <LoRaMacCryptoSetMulticastReference+0x14>)
 800a6f4:	6812      	ldr	r2, [r2, #0]
 800a6f6:	321c      	adds	r2, #28
 800a6f8:	621a      	str	r2, [r3, #32]
}
 800a6fa:	4770      	bx	lr
 800a6fc:	20000f94 	.word	0x20000f94

0800a700 <LoRaMacCryptoPrepareJoinRequest>:
{
 800a700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a702:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a704:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800a706:	2c00      	cmp	r4, #0
 800a708:	d021      	beq.n	800a74e <LoRaMacCryptoPrepareJoinRequest+0x4e>
    uint32_t devNonce = 0;
 800a70a:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800a70c:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800a70e:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800a710:	f7fc f91c 	bl	800694c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800a714:	4a0f      	ldr	r2, [pc, #60]	; (800a754 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	6812      	ldr	r2, [r2, #0]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	8093      	strh	r3, [r2, #4]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a71e:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800a720:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a722:	f000 fa30 	bl	800ab86 <LoRaMacSerializerJoinRequest>
 800a726:	2800      	cmp	r0, #0
 800a728:	d110      	bne.n	800a74c <LoRaMacCryptoPrepareJoinRequest+0x4c>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800a72a:	0023      	movs	r3, r4
 800a72c:	3318      	adds	r3, #24
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	2213      	movs	r2, #19
 800a732:	2301      	movs	r3, #1
 800a734:	6821      	ldr	r1, [r4, #0]
 800a736:	f7fc f815 	bl	8006764 <SecureElementComputeAesCmac>
 800a73a:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a73c:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d105      	bne.n	800a74e <LoRaMacCryptoPrepareJoinRequest+0x4e>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a742:	0020      	movs	r0, r4
 800a744:	f000 fa1f 	bl	800ab86 <LoRaMacSerializerJoinRequest>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d000      	beq.n	800a74e <LoRaMacCryptoPrepareJoinRequest+0x4e>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800a74c:	2011      	movs	r0, #17
}
 800a74e:	b004      	add	sp, #16
 800a750:	bd10      	pop	{r4, pc}
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	20000f94 	.word	0x20000f94

0800a758 <LoRaMacCryptoSecureMessage>:
{
 800a758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75a:	0005      	movs	r5, r0
 800a75c:	001c      	movs	r4, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a75e:	200a      	movs	r0, #10
{
 800a760:	b089      	sub	sp, #36	; 0x24
    if( macMsg == NULL )
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01f      	beq.n	800a7a6 <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800a766:	4b2e      	ldr	r3, [pc, #184]	; (800a820 <LoRaMacCryptoSecureMessage+0xc8>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800a768:	3804      	subs	r0, #4
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	42ab      	cmp	r3, r5
 800a770:	d819      	bhi.n	800a7a6 <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800a772:	1c62      	adds	r2, r4, #1
 800a774:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800a776:	1e51      	subs	r1, r2, #1
 800a778:	418a      	sbcs	r2, r1
 800a77a:	3202      	adds	r2, #2
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800a77c:	42ab      	cmp	r3, r5
 800a77e:	d306      	bcc.n	800a78e <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a780:	0020      	movs	r0, r4
 800a782:	f000 fa35 	bl	800abf0 <LoRaMacSerializerData>
 800a786:	1e03      	subs	r3, r0, #0
 800a788:	d00f      	beq.n	800a7aa <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800a78a:	2011      	movs	r0, #17
 800a78c:	e00b      	b.n	800a7a6 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800a78e:	0023      	movs	r3, r4
 800a790:	3328      	adds	r3, #40	; 0x28
 800a792:	7819      	ldrb	r1, [r3, #0]
 800a794:	2300      	movs	r3, #0
 800a796:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	9501      	str	r5, [sp, #4]
 800a79c:	68a3      	ldr	r3, [r4, #8]
 800a79e:	f7ff fe5c 	bl	800a45a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d0ec      	beq.n	800a780 <LoRaMacCryptoSecureMessage+0x28>
}
 800a7a6:	b009      	add	sp, #36	; 0x24
 800a7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a7aa:	7927      	ldrb	r7, [r4, #4]
 800a7ac:	6821      	ldr	r1, [r4, #0]
 800a7ae:	3f04      	subs	r7, #4
 800a7b0:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a7b2:	200a      	movs	r0, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a7b4:	9203      	str	r2, [sp, #12]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	d0f5      	beq.n	800a7a6 <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a7ba:	2680      	movs	r6, #128	; 0x80
 800a7bc:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a7be:	200e      	movs	r0, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a7c0:	0076      	lsls	r6, r6, #1
 800a7c2:	42b2      	cmp	r2, r6
 800a7c4:	d8ef      	bhi.n	800a7a6 <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800a7c6:	2249      	movs	r2, #73	; 0x49
 800a7c8:	a804      	add	r0, sp, #16
        b0[1] = 0x00;
 800a7ca:	7043      	strb	r3, [r0, #1]
        b0[2] = 0x00;
 800a7cc:	7083      	strb	r3, [r0, #2]
    b0[3] = 0x00;
 800a7ce:	70c3      	strb	r3, [r0, #3]
    b0[4] = 0x00;
 800a7d0:	7103      	strb	r3, [r0, #4]
    b0[5] = dir;
 800a7d2:	7143      	strb	r3, [r0, #5]
    b0[14] = 0x00;
 800a7d4:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a7d6:	0023      	movs	r3, r4
 800a7d8:	68a6      	ldr	r6, [r4, #8]
    b0[0] = 0x49;
 800a7da:	7002      	strb	r2, [r0, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a7dc:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 800a7de:	7186      	strb	r6, [r0, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a7e0:	71c2      	strb	r2, [r0, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a7e2:	0c32      	lsrs	r2, r6, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a7e4:	0e36      	lsrs	r6, r6, #24
 800a7e6:	7246      	strb	r6, [r0, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a7e8:	0a2e      	lsrs	r6, r5, #8
 800a7ea:	72c6      	strb	r6, [r0, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a7ec:	0c2e      	lsrs	r6, r5, #16
 800a7ee:	7306      	strb	r6, [r0, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a7f0:	332c      	adds	r3, #44	; 0x2c
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a7f2:	0e2e      	lsrs	r6, r5, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a7f4:	7202      	strb	r2, [r0, #8]
    b0[10] = fCnt & 0xFF;
 800a7f6:	7285      	strb	r5, [r0, #10]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a7f8:	7346      	strb	r6, [r0, #13]
    b0[15] = msgLen & 0xFF;
 800a7fa:	73c7      	strb	r7, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800a7fc:	9a03      	ldr	r2, [sp, #12]
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	2302      	movs	r3, #2
 800a802:	f7fb ffaf 	bl	8006764 <SecureElementComputeAesCmac>
 800a806:	2800      	cmp	r0, #0
 800a808:	d001      	beq.n	800a80e <LoRaMacCryptoSecureMessage+0xb6>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a80a:	200f      	movs	r0, #15
 800a80c:	e7cb      	b.n	800a7a6 <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a80e:	0020      	movs	r0, r4
 800a810:	f000 f9ee 	bl	800abf0 <LoRaMacSerializerData>
 800a814:	2800      	cmp	r0, #0
 800a816:	d1b8      	bne.n	800a78a <LoRaMacCryptoSecureMessage+0x32>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 800a818:	4b01      	ldr	r3, [pc, #4]	; (800a820 <LoRaMacCryptoSecureMessage+0xc8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 800a81e:	e7c2      	b.n	800a7a6 <LoRaMacCryptoSecureMessage+0x4e>
 800a820:	20000f94 	.word	0x20000f94

0800a824 <LoRaMacCryptoUnsecureMessage>:
{
 800a824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a826:	b087      	sub	sp, #28
 800a828:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a82a:	001c      	movs	r4, r3
 800a82c:	0007      	movs	r7, r0
 800a82e:	000e      	movs	r6, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a830:	230a      	movs	r3, #10
{
 800a832:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800a834:	2d00      	cmp	r5, #0
 800a836:	d008      	beq.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800a838:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800a83a:	0010      	movs	r0, r2
 800a83c:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800a83e:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800a840:	f7ff fe7c 	bl	800a53c <GetLastFcntDown.constprop.0>
 800a844:	2800      	cmp	r0, #0
 800a846:	d003      	beq.n	800a850 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800a848:	2306      	movs	r3, #6
}
 800a84a:	0018      	movs	r0, r3
 800a84c:	b007      	add	sp, #28
 800a84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	429c      	cmp	r4, r3
 800a854:	d801      	bhi.n	800a85a <LoRaMacCryptoUnsecureMessage+0x36>
 800a856:	3301      	adds	r3, #1
 800a858:	d1f6      	bne.n	800a848 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800a85a:	0028      	movs	r0, r5
 800a85c:	f000 f938 	bl	800aad0 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800a860:	2310      	movs	r3, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800a862:	2800      	cmp	r0, #0
 800a864:	d1f1      	bne.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800a866:	4a20      	ldr	r2, [pc, #128]	; (800a8e8 <LoRaMacCryptoUnsecureMessage+0xc4>)
 800a868:	7813      	ldrb	r3, [r2, #0]
 800a86a:	42bb      	cmp	r3, r7
 800a86c:	d004      	beq.n	800a878 <LoRaMacCryptoUnsecureMessage+0x54>
 800a86e:	7911      	ldrb	r1, [r2, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800a870:	230c      	movs	r3, #12
        if( KeyAddrList[i].AddrID == addrID )
 800a872:	42b9      	cmp	r1, r7
 800a874:	d1e9      	bne.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
 800a876:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800a878:	68a9      	ldr	r1, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800a87a:	2302      	movs	r3, #2
    if( address != macMsg->FHDR.DevAddr )
 800a87c:	42b1      	cmp	r1, r6
 800a87e:	d1e4      	bne.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 800a880:	4098      	lsls	r0, r3
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800a882:	7929      	ldrb	r1, [r5, #4]
 800a884:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800a886:	1810      	adds	r0, r2, r0
 800a888:	7847      	ldrb	r7, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800a88a:	7882      	ldrb	r2, [r0, #2]
 800a88c:	3904      	subs	r1, #4
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	9400      	str	r4, [sp, #0]
 800a892:	0033      	movs	r3, r6
 800a894:	6828      	ldr	r0, [r5, #0]
 800a896:	b289      	uxth	r1, r1
 800a898:	f7ff fe70 	bl	800a57c <VerifyCmacB0.constprop.0.isra.0>
 800a89c:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a89e:	d1d4      	bne.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800a8a0:	1c6b      	adds	r3, r5, #1
 800a8a2:	7fdb      	ldrb	r3, [r3, #31]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d100      	bne.n	800a8aa <LoRaMacCryptoUnsecureMessage+0x86>
        payloadDecryptionKeyID = NWK_S_KEY;
 800a8a8:	2702      	movs	r7, #2
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800a8aa:	002b      	movs	r3, r5
 800a8ac:	3328      	adds	r3, #40	; 0x28
 800a8ae:	7819      	ldrb	r1, [r3, #0]
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	9401      	str	r4, [sp, #4]
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	003a      	movs	r2, r7
 800a8b8:	0033      	movs	r3, r6
 800a8ba:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a8bc:	f7ff fdcd 	bl	800a45a <PayloadEncrypt>
 800a8c0:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a8c2:	d1c2      	bne.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800a8c4:	9803      	ldr	r0, [sp, #12]
 800a8c6:	3801      	subs	r0, #1
 800a8c8:	2803      	cmp	r0, #3
 800a8ca:	d8be      	bhi.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
 800a8cc:	4a07      	ldr	r2, [pc, #28]	; (800a8ec <LoRaMacCryptoUnsecureMessage+0xc8>)
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800a8ce:	6812      	ldr	r2, [r2, #0]
    switch( fCntID )
 800a8d0:	f7f5 fc2c 	bl	800012c <__gnu_thumb1_case_uqi>
 800a8d4:	08060402 	.word	0x08060402
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800a8d8:	6114      	str	r4, [r2, #16]
            break;
 800a8da:	e7b6      	b.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800a8dc:	6154      	str	r4, [r2, #20]
            break;
 800a8de:	e7b4      	b.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800a8e0:	6194      	str	r4, [r2, #24]
            break;
 800a8e2:	e7b2      	b.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800a8e4:	61d4      	str	r4, [r2, #28]
            break;
 800a8e6:	e7b0      	b.n	800a84a <LoRaMacCryptoUnsecureMessage+0x26>
 800a8e8:	200000d8 	.word	0x200000d8
 800a8ec:	20000f94 	.word	0x20000f94

0800a8f0 <LoRaMacCryptoDeriveMcRootKey>:
{
 800a8f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8f2:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800a8f4:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800a8f6:	2900      	cmp	r1, #0
 800a8f8:	d111      	bne.n	800a91e <LoRaMacCryptoDeriveMcRootKey+0x2e>
    uint8_t compBase[16] = { 0 };
 800a8fa:	220c      	movs	r2, #12
 800a8fc:	a801      	add	r0, sp, #4
 800a8fe:	9100      	str	r1, [sp, #0]
 800a900:	f003 fc49 	bl	800e196 <memset>
    if( versionMinor == 1 )
 800a904:	2c01      	cmp	r4, #1
 800a906:	d102      	bne.n	800a90e <LoRaMacCryptoDeriveMcRootKey+0x1e>
        compBase[0] = 0x20;
 800a908:	2320      	movs	r3, #32
 800a90a:	466a      	mov	r2, sp
 800a90c:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a90e:	2204      	movs	r2, #4
 800a910:	2100      	movs	r1, #0
 800a912:	4668      	mov	r0, sp
 800a914:	f7fb ffb9 	bl	800688a <SecureElementDeriveAndStoreKey>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d000      	beq.n	800a91e <LoRaMacCryptoDeriveMcRootKey+0x2e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a91c:	200f      	movs	r0, #15
}
 800a91e:	b004      	add	sp, #16
 800a920:	bd10      	pop	{r4, pc}
	...

0800a924 <LoRaMacCryptoSetKey>:
{
 800a924:	b570      	push	{r4, r5, r6, lr}
 800a926:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800a928:	f7fb ffa6 	bl	8006878 <SecureElementSetKey>
 800a92c:	1e04      	subs	r4, r0, #0
 800a92e:	d10d      	bne.n	800a94c <LoRaMacCryptoSetKey+0x28>
    if( keyID == APP_KEY )
 800a930:	2d00      	cmp	r5, #0
 800a932:	d10c      	bne.n	800a94e <LoRaMacCryptoSetKey+0x2a>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800a934:	4b07      	ldr	r3, [pc, #28]	; (800a954 <LoRaMacCryptoSetKey+0x30>)
 800a936:	0021      	movs	r1, r4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	7898      	ldrb	r0, [r3, #2]
 800a93c:	f7ff ffd8 	bl	800a8f0 <LoRaMacCryptoDeriveMcRootKey>
 800a940:	2800      	cmp	r0, #0
 800a942:	d103      	bne.n	800a94c <LoRaMacCryptoSetKey+0x28>
    if( keyID != MC_ROOT_KEY )
 800a944:	f7ff fde8 	bl	800a518 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800a948:	2800      	cmp	r0, #0
 800a94a:	d000      	beq.n	800a94e <LoRaMacCryptoSetKey+0x2a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a94c:	240f      	movs	r4, #15
}
 800a94e:	0020      	movs	r0, r4
 800a950:	bd70      	pop	{r4, r5, r6, pc}
 800a952:	46c0      	nop			; (mov r8, r8)
 800a954:	20000f94 	.word	0x20000f94

0800a958 <LoRaMacCryptoHandleJoinAccept>:
{
 800a958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a95a:	b091      	sub	sp, #68	; 0x44
 800a95c:	9005      	str	r0, [sp, #20]
 800a95e:	000e      	movs	r6, r1
 800a960:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a962:	200a      	movs	r0, #10
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800a964:	2a00      	cmp	r2, #0
 800a966:	d063      	beq.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800a968:	2900      	cmp	r1, #0
 800a96a:	d061      	beq.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800a96c:	2700      	movs	r7, #0
 800a96e:	221d      	movs	r2, #29
 800a970:	0039      	movs	r1, r7
 800a972:	a808      	add	r0, sp, #32
 800a974:	9707      	str	r7, [sp, #28]
 800a976:	f003 fc0e 	bl	800e196 <memset>
    uint8_t versionMinor         = 0;
 800a97a:	ab02      	add	r3, sp, #8
 800a97c:	74df      	strb	r7, [r3, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800a97e:	4f2d      	ldr	r7, [pc, #180]	; (800aa34 <LoRaMacCryptoHandleJoinAccept+0xdc>)
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800a980:	aa02      	add	r2, sp, #8
    uint16_t nonce               = CryptoNvm->DevNonce;
 800a982:	683b      	ldr	r3, [r7, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800a984:	0031      	movs	r1, r6
    uint16_t nonce               = CryptoNvm->DevNonce;
 800a986:	889d      	ldrh	r5, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800a988:	2313      	movs	r3, #19
 800a98a:	189b      	adds	r3, r3, r2
 800a98c:	9302      	str	r3, [sp, #8]
 800a98e:	ab07      	add	r3, sp, #28
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	7923      	ldrb	r3, [r4, #4]
 800a994:	002a      	movs	r2, r5
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	9805      	ldr	r0, [sp, #20]
 800a99c:	f7fb ff95 	bl	80068ca <SecureElementProcessJoinAccept>
 800a9a0:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a9a2:	200f      	movs	r0, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d143      	bne.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800a9a8:	a907      	add	r1, sp, #28
 800a9aa:	7922      	ldrb	r2, [r4, #4]
 800a9ac:	6820      	ldr	r0, [r4, #0]
 800a9ae:	f001 fb01 	bl	800bfb4 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800a9b2:	0020      	movs	r0, r4
 800a9b4:	f000 f840 	bl	800aa38 <LoRaMacParserJoinAccept>
 800a9b8:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800a9ba:	2010      	movs	r0, #16
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d137      	bne.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800a9c0:	7a22      	ldrb	r2, [r4, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800a9c2:	79e6      	ldrb	r6, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800a9c4:	4082      	lsls	r2, r0
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800a9c6:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800a9c8:	0236      	lsls	r6, r6, #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800a9ca:	4316      	orrs	r6, r2
 800a9cc:	431e      	orrs	r6, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800a9ce:	683b      	ldr	r3, [r7, #0]
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800a9d0:	380d      	subs	r0, #13
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800a9d2:	689a      	ldr	r2, [r3, #8]
 800a9d4:	42b2      	cmp	r2, r6
 800a9d6:	d02b      	beq.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800a9d8:	609e      	str	r6, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800a9da:	ab02      	add	r3, sp, #8
 800a9dc:	7cd8      	ldrb	r0, [r3, #19]
 800a9de:	f7ff ff87 	bl	800a8f0 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d124      	bne.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
    if( keyID != MC_ROOT_KEY )
 800a9e6:	f7ff fd97 	bl	800a518 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d120      	bne.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800a9ee:	7a62      	ldrb	r2, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800a9f0:	7aa3      	ldrb	r3, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800a9f2:	7ae4      	ldrb	r4, [r4, #11]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800a9f4:	021b      	lsls	r3, r3, #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800a9f6:	0424      	lsls	r4, r4, #16
 800a9f8:	431c      	orrs	r4, r3
 800a9fa:	4314      	orrs	r4, r2
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800a9fc:	002b      	movs	r3, r5
 800a9fe:	0022      	movs	r2, r4
 800aa00:	0031      	movs	r1, r6
 800aa02:	3003      	adds	r0, #3
 800aa04:	f7ff fd04 	bl	800a410 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d111      	bne.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800aa0c:	002b      	movs	r3, r5
 800aa0e:	0022      	movs	r2, r4
 800aa10:	0031      	movs	r1, r6
 800aa12:	3002      	adds	r0, #2
 800aa14:	f7ff fcfc 	bl	800a410 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d109      	bne.n	800aa30 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800aa1c:	aa02      	add	r2, sp, #8
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	7cd2      	ldrb	r2, [r2, #19]
    CryptoNvm->FCntList.FCntUp = 0;
 800aa22:	60d8      	str	r0, [r3, #12]
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800aa24:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa26:	2201      	movs	r2, #1
 800aa28:	4252      	negs	r2, r2
 800aa2a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa2c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa2e:	615a      	str	r2, [r3, #20]
}
 800aa30:	b011      	add	sp, #68	; 0x44
 800aa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa34:	20000f94 	.word	0x20000f94

0800aa38 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800aa3c:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aa3e:	2c00      	cmp	r4, #0
 800aa40:	d040      	beq.n	800aac4 <LoRaMacParserJoinAccept+0x8c>
 800aa42:	6821      	ldr	r1, [r4, #0]
 800aa44:	2900      	cmp	r1, #0
 800aa46:	d03d      	beq.n	800aac4 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aa48:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800aa4a:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aa4c:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800aa4e:	3101      	adds	r1, #1
 800aa50:	1da0      	adds	r0, r4, #6
 800aa52:	f001 faaf 	bl	800bfb4 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800aa56:	0020      	movs	r0, r4
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	2203      	movs	r2, #3
 800aa5c:	1d19      	adds	r1, r3, #4
 800aa5e:	3009      	adds	r0, #9
 800aa60:	f001 faa8 	bl	800bfb4 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aa64:	6821      	ldr	r1, [r4, #0]
 800aa66:	79c8      	ldrb	r0, [r1, #7]
 800aa68:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aa6a:	7a0a      	ldrb	r2, [r1, #8]
 800aa6c:	0212      	lsls	r2, r2, #8
 800aa6e:	4310      	orrs	r0, r2
 800aa70:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aa72:	7a4b      	ldrb	r3, [r1, #9]
 800aa74:	041b      	lsls	r3, r3, #16
 800aa76:	4303      	orrs	r3, r0
 800aa78:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aa7a:	7a8a      	ldrb	r2, [r1, #10]
 800aa7c:	0612      	lsls	r2, r2, #24
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800aa82:	7acb      	ldrb	r3, [r1, #11]
 800aa84:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800aa86:	7b0b      	ldrb	r3, [r1, #12]
 800aa88:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800aa8a:	7923      	ldrb	r3, [r4, #4]
 800aa8c:	2b21      	cmp	r3, #33	; 0x21
 800aa8e:	d11a      	bne.n	800aac6 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800aa90:	0020      	movs	r0, r4
 800aa92:	2210      	movs	r2, #16
 800aa94:	310d      	adds	r1, #13
 800aa96:	3012      	adds	r0, #18
 800aa98:	f001 fa8c 	bl	800bfb4 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800aa9c:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aa9e:	6825      	ldr	r5, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aaa0:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aaa2:	5ce8      	ldrb	r0, [r5, r3]
 800aaa4:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aaa6:	5ca9      	ldrb	r1, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aaa8:	1c9a      	adds	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aaaa:	0209      	lsls	r1, r1, #8
 800aaac:	4308      	orrs	r0, r1
 800aaae:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aab0:	5caa      	ldrb	r2, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aab2:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aab4:	0412      	lsls	r2, r2, #16
 800aab6:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 800aab8:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aaba:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aabc:	5ceb      	ldrb	r3, [r5, r3]
 800aabe:	061b      	lsls	r3, r3, #24
 800aac0:	431a      	orrs	r2, r3
 800aac2:	6262      	str	r2, [r4, #36]	; 0x24
}
 800aac4:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_PARSER_FAIL;
 800aac6:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800aac8:	2b11      	cmp	r3, #17
 800aaca:	dcfb      	bgt.n	800aac4 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800aacc:	230d      	movs	r3, #13
 800aace:	e7e6      	b.n	800aa9e <LoRaMacParserJoinAccept+0x66>

0800aad0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800aad4:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	d054      	beq.n	800ab84 <LoRaMacParserData+0xb4>
 800aada:	6821      	ldr	r1, [r4, #0]
 800aadc:	2900      	cmp	r1, #0
 800aade:	d051      	beq.n	800ab84 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aae0:	780b      	ldrb	r3, [r1, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800aae2:	1c65      	adds	r5, r4, #1
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aae4:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800aae6:	7848      	ldrb	r0, [r1, #1]
 800aae8:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aaea:	788a      	ldrb	r2, [r1, #2]
 800aaec:	0212      	lsls	r2, r2, #8
 800aaee:	4310      	orrs	r0, r2
 800aaf0:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aaf2:	78cb      	ldrb	r3, [r1, #3]
 800aaf4:	041b      	lsls	r3, r3, #16
 800aaf6:	4303      	orrs	r3, r0
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800aaf8:	0020      	movs	r0, r4
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aafa:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aafc:	790a      	ldrb	r2, [r1, #4]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800aafe:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ab00:	0612      	lsls	r2, r2, #24
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800ab06:	794b      	ldrb	r3, [r1, #5]
 800ab08:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800ab0a:	798b      	ldrb	r3, [r1, #6]
 800ab0c:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ab0e:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ab10:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ab12:	0212      	lsls	r2, r2, #8
 800ab14:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ab16:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ab18:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ab1a:	0712      	lsls	r2, r2, #28
 800ab1c:	0f12      	lsrs	r2, r2, #28
 800ab1e:	f001 fa49 	bl	800bfb4 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ab22:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800ab24:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800ab26:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ab28:	0709      	lsls	r1, r1, #28
 800ab2a:	0f09      	lsrs	r1, r1, #28
 800ab2c:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800ab2e:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800ab30:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800ab32:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ab34:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ab36:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ab38:	1b93      	subs	r3, r2, r6
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	dd0c      	ble.n	800ab58 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ab42:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ab44:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ab46:	1a52      	subs	r2, r2, r1
 800ab48:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ab4a:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ab4c:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800ab4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab50:	b292      	uxth	r2, r2
 800ab52:	1859      	adds	r1, r3, r1
 800ab54:	f001 fa2e 	bl	800bfb4 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ab58:	6822      	ldr	r2, [r4, #0]
 800ab5a:	7923      	ldrb	r3, [r4, #4]
 800ab5c:	18d3      	adds	r3, r2, r3
 800ab5e:	1f1a      	subs	r2, r3, #4
 800ab60:	7810      	ldrb	r0, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ab62:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ab64:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ab66:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ab68:	1e9a      	subs	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ab6a:	0209      	lsls	r1, r1, #8
 800ab6c:	4308      	orrs	r0, r1
 800ab6e:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ab70:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800ab72:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ab74:	0412      	lsls	r2, r2, #16
 800ab76:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 800ab78:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ab7a:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	061b      	lsls	r3, r3, #24
 800ab80:	431a      	orrs	r2, r3
 800ab82:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800ab84:	bd70      	pop	{r4, r5, r6, pc}

0800ab86 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800ab86:	b510      	push	{r4, lr}
 800ab88:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ab8a:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	d02e      	beq.n	800abee <LoRaMacSerializerJoinRequest+0x68>
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d02b      	beq.n	800abee <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800ab96:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800ab98:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800ab9a:	2a16      	cmp	r2, #22
 800ab9c:	d927      	bls.n	800abee <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ab9e:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800aba0:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800aba2:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	2208      	movs	r2, #8
 800aba8:	1c58      	adds	r0, r3, #1
 800abaa:	f001 fa0c 	bl	800bfc6 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800abae:	0021      	movs	r1, r4
 800abb0:	6820      	ldr	r0, [r4, #0]
 800abb2:	2208      	movs	r2, #8
 800abb4:	3009      	adds	r0, #9
 800abb6:	310e      	adds	r1, #14
 800abb8:	f001 fa05 	bl	800bfc6 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800abbc:	8ae3      	ldrh	r3, [r4, #22]
 800abbe:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800abc0:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800abc2:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800abc4:	8ae3      	ldrh	r3, [r4, #22]
 800abc6:	6822      	ldr	r2, [r4, #0]
 800abc8:	0a1b      	lsrs	r3, r3, #8
 800abca:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800abcc:	69a3      	ldr	r3, [r4, #24]
 800abce:	6822      	ldr	r2, [r4, #0]
 800abd0:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800abd2:	69a3      	ldr	r3, [r4, #24]
 800abd4:	6822      	ldr	r2, [r4, #0]
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800abda:	69a3      	ldr	r3, [r4, #24]
 800abdc:	6822      	ldr	r2, [r4, #0]
 800abde:	0c1b      	lsrs	r3, r3, #16
 800abe0:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800abe2:	69a3      	ldr	r3, [r4, #24]
 800abe4:	6822      	ldr	r2, [r4, #0]
 800abe6:	0e1b      	lsrs	r3, r3, #24
 800abe8:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800abea:	2317      	movs	r3, #23
 800abec:	7123      	strb	r3, [r4, #4]
}
 800abee:	bd10      	pop	{r4, pc}

0800abf0 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800abf4:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800abf6:	2c00      	cmp	r4, #0
 800abf8:	d068      	beq.n	800accc <LoRaMacSerializerData+0xdc>
 800abfa:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800abfc:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800abfe:	2900      	cmp	r1, #0
 800ac00:	d064      	beq.n	800accc <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800ac02:	0025      	movs	r5, r4
 800ac04:	3528      	adds	r5, #40	; 0x28
 800ac06:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ac08:	7b22      	ldrb	r2, [r4, #12]
 800ac0a:	0003      	movs	r3, r0
 800ac0c:	1e5e      	subs	r6, r3, #1
 800ac0e:	41b3      	sbcs	r3, r6
 800ac10:	0712      	lsls	r2, r2, #28
 800ac12:	0f12      	lsrs	r2, r2, #28
 800ac14:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ac16:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ac18:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ac1a:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800ac1c:	7922      	ldrb	r2, [r4, #4]
 800ac1e:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800ac20:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d352      	bcc.n	800accc <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ac26:	7963      	ldrb	r3, [r4, #5]
 800ac28:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ac2a:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ac30:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ac32:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800ac34:	68a3      	ldr	r3, [r4, #8]
 800ac36:	6822      	ldr	r2, [r4, #0]
 800ac38:	0a1b      	lsrs	r3, r3, #8
 800ac3a:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800ac3c:	68a3      	ldr	r3, [r4, #8]
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	0c1b      	lsrs	r3, r3, #16
 800ac42:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800ac44:	68a3      	ldr	r3, [r4, #8]
 800ac46:	6822      	ldr	r2, [r4, #0]
 800ac48:	0e1b      	lsrs	r3, r3, #24
 800ac4a:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800ac4c:	7b23      	ldrb	r3, [r4, #12]
 800ac4e:	6822      	ldr	r2, [r4, #0]
 800ac50:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800ac52:	89e3      	ldrh	r3, [r4, #14]
 800ac54:	6822      	ldr	r2, [r4, #0]
 800ac56:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800ac58:	89e3      	ldrh	r3, [r4, #14]
 800ac5a:	6822      	ldr	r2, [r4, #0]
 800ac5c:	0a1b      	lsrs	r3, r3, #8
 800ac5e:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ac60:	7b22      	ldrb	r2, [r4, #12]
 800ac62:	6820      	ldr	r0, [r4, #0]
 800ac64:	0712      	lsls	r2, r2, #28
 800ac66:	0f12      	lsrs	r2, r2, #28
 800ac68:	3008      	adds	r0, #8
 800ac6a:	f001 f9a3 	bl	800bfb4 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ac6e:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800ac70:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ac72:	071b      	lsls	r3, r3, #28
 800ac74:	0f1b      	lsrs	r3, r3, #28
 800ac76:	001e      	movs	r6, r3
 800ac78:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800ac7a:	2a00      	cmp	r2, #0
 800ac7c:	d005      	beq.n	800ac8a <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800ac7e:	1c62      	adds	r2, r4, #1
 800ac80:	7fd2      	ldrb	r2, [r2, #31]
 800ac82:	6821      	ldr	r1, [r4, #0]
 800ac84:	3309      	adds	r3, #9
 800ac86:	558a      	strb	r2, [r1, r6]
 800ac88:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	782a      	ldrb	r2, [r5, #0]
 800ac8e:	1998      	adds	r0, r3, r6
 800ac90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ac92:	f001 f98f 	bl	800bfb4 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800ac96:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800ac98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ac9a:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800ac9c:	18f3      	adds	r3, r6, r3
 800ac9e:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800aca0:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800aca2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aca4:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800aca6:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800aca8:	b292      	uxth	r2, r2
 800acaa:	0a09      	lsrs	r1, r1, #8
 800acac:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800acae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800acb0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800acb2:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800acb4:	b292      	uxth	r2, r2
 800acb6:	0c09      	lsrs	r1, r1, #16
 800acb8:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800acba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800acbc:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800acbe:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800acc0:	b292      	uxth	r2, r2
 800acc2:	0e09      	lsrs	r1, r1, #24
 800acc4:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800acc6:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800acc8:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800acca:	7123      	strb	r3, [r4, #4]
}
 800accc:	bd70      	pop	{r4, r5, r6, pc}

0800acce <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800acce:	3806      	subs	r0, #6
 800acd0:	4243      	negs	r3, r0
 800acd2:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800acd4:	b2c0      	uxtb	r0, r0
 800acd6:	4770      	bx	lr

0800acd8 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800acd8:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800acda:	2806      	cmp	r0, #6
 800acdc:	d105      	bne.n	800acea <RegionGetPhyParam+0x12>
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
 800acde:	0008      	movs	r0, r1
 800ace0:	f000 fc6a 	bl	800b5b8 <RegionKR920GetPhyParam>
 800ace4:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800ace6:	9801      	ldr	r0, [sp, #4]
 800ace8:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800acea:	2300      	movs	r3, #0
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	e7fa      	b.n	800ace6 <RegionGetPhyParam+0xe>

0800acf0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800acf0:	b510      	push	{r4, lr}
    switch( region )
 800acf2:	2806      	cmp	r0, #6
 800acf4:	d102      	bne.n	800acfc <RegionSetBandTxDone+0xc>
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
 800acf6:	0008      	movs	r0, r1
 800acf8:	f000 fcfc 	bl	800b6f4 <RegionKR920SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800acfc:	bd10      	pop	{r4, pc}

0800acfe <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800acfe:	b510      	push	{r4, lr}
    switch( region )
 800ad00:	2806      	cmp	r0, #6
 800ad02:	d102      	bne.n	800ad0a <RegionInitDefaults+0xc>
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
 800ad04:	0008      	movs	r0, r1
 800ad06:	f000 fd0d 	bl	800b724 <RegionKR920InitDefaults>
        default:
        {
            break;
        }
    }
}
 800ad0a:	bd10      	pop	{r4, pc}

0800ad0c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ad0c:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800ad0e:	2300      	movs	r3, #0
{
 800ad10:	0004      	movs	r4, r0
 800ad12:	0008      	movs	r0, r1
 800ad14:	0011      	movs	r1, r2
    switch( region )
 800ad16:	2c06      	cmp	r4, #6
 800ad18:	d102      	bne.n	800ad20 <RegionVerify+0x14>
        KR920_VERIFY( );
 800ad1a:	f000 fd57 	bl	800b7cc <RegionKR920Verify>
 800ad1e:	0003      	movs	r3, r0
        }
    }
}
 800ad20:	0018      	movs	r0, r3
 800ad22:	bd10      	pop	{r4, pc}

0800ad24 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800ad24:	b510      	push	{r4, lr}
    switch( region )
 800ad26:	2806      	cmp	r0, #6
 800ad28:	d102      	bne.n	800ad30 <RegionApplyCFList+0xc>
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
 800ad2a:	0008      	movs	r0, r1
 800ad2c:	f001 f884 	bl	800be38 <RegionKR920ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800ad30:	bd10      	pop	{r4, pc}

0800ad32 <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800ad32:	2300      	movs	r3, #0
{
 800ad34:	b510      	push	{r4, lr}
    switch( region )
 800ad36:	2806      	cmp	r0, #6
 800ad38:	d103      	bne.n	800ad42 <RegionChanMaskSet+0x10>
        KR920_CHAN_MASK_SET( );
 800ad3a:	0008      	movs	r0, r1
 800ad3c:	f000 fd66 	bl	800b80c <RegionKR920ChanMaskSet>
 800ad40:	0003      	movs	r3, r0
        }
    }
}
 800ad42:	0018      	movs	r0, r3
 800ad44:	bd10      	pop	{r4, pc}

0800ad46 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ad46:	b510      	push	{r4, lr}
 800ad48:	0004      	movs	r4, r0
 800ad4a:	0008      	movs	r0, r1
 800ad4c:	0011      	movs	r1, r2
 800ad4e:	001a      	movs	r2, r3
    switch( region )
 800ad50:	2c06      	cmp	r4, #6
 800ad52:	d102      	bne.n	800ad5a <RegionComputeRxWindowParameters+0x14>
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ad54:	9b02      	ldr	r3, [sp, #8]
 800ad56:	f000 fd75 	bl	800b844 <RegionKR920ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800ad5a:	bd10      	pop	{r4, pc}

0800ad5c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ad5c:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800ad5e:	2300      	movs	r3, #0
{
 800ad60:	0004      	movs	r4, r0
 800ad62:	0008      	movs	r0, r1
 800ad64:	0011      	movs	r1, r2
    switch( region )
 800ad66:	2c06      	cmp	r4, #6
 800ad68:	d102      	bne.n	800ad70 <RegionRxConfig+0x14>
        KR920_RX_CONFIG( );
 800ad6a:	f000 fd9b 	bl	800b8a4 <RegionKR920RxConfig>
 800ad6e:	0003      	movs	r3, r0
        }
    }
}
 800ad70:	0018      	movs	r0, r3
 800ad72:	bd10      	pop	{r4, pc}

0800ad74 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800ad78:	2400      	movs	r4, #0
{
 800ad7a:	0008      	movs	r0, r1
 800ad7c:	0011      	movs	r1, r2
 800ad7e:	001a      	movs	r2, r3
    switch( region )
 800ad80:	2d06      	cmp	r5, #6
 800ad82:	d102      	bne.n	800ad8a <RegionTxConfig+0x16>
        KR920_TX_CONFIG( );
 800ad84:	f000 fdec 	bl	800b960 <RegionKR920TxConfig>
 800ad88:	0004      	movs	r4, r0
        }
    }
}
 800ad8a:	0020      	movs	r0, r4
 800ad8c:	bd70      	pop	{r4, r5, r6, pc}

0800ad8e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ad8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad90:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800ad92:	2400      	movs	r4, #0
{
 800ad94:	0008      	movs	r0, r1
 800ad96:	0011      	movs	r1, r2
 800ad98:	001a      	movs	r2, r3
    switch( region )
 800ad9a:	2d06      	cmp	r5, #6
 800ad9c:	d105      	bne.n	800adaa <RegionLinkAdrReq+0x1c>
        KR920_LINK_ADR_REQ( );
 800ad9e:	9b07      	ldr	r3, [sp, #28]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	9b06      	ldr	r3, [sp, #24]
 800ada4:	f000 fe5e 	bl	800ba64 <RegionKR920LinkAdrReq>
 800ada8:	0004      	movs	r4, r0
        }
    }
}
 800adaa:	0020      	movs	r0, r4
 800adac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800adae <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800adae:	2300      	movs	r3, #0
{
 800adb0:	b510      	push	{r4, lr}
    switch( region )
 800adb2:	2806      	cmp	r0, #6
 800adb4:	d103      	bne.n	800adbe <RegionRxParamSetupReq+0x10>
        KR920_RX_PARAM_SETUP_REQ( );
 800adb6:	0008      	movs	r0, r1
 800adb8:	f000 fef6 	bl	800bba8 <RegionKR920RxParamSetupReq>
 800adbc:	0003      	movs	r3, r0
        }
    }
}
 800adbe:	0018      	movs	r0, r3
 800adc0:	bd10      	pop	{r4, pc}

0800adc2 <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800adc2:	2300      	movs	r3, #0
{
 800adc4:	b510      	push	{r4, lr}
    switch( region )
 800adc6:	2806      	cmp	r0, #6
 800adc8:	d103      	bne.n	800add2 <RegionNewChannelReq+0x10>
        KR920_NEW_CHANNEL_REQ( );
 800adca:	0008      	movs	r0, r1
 800adcc:	f001 f86e 	bl	800beac <RegionKR920NewChannelReq>
 800add0:	0003      	movs	r3, r0
        }
    }
}
 800add2:	0018      	movs	r0, r3
 800add4:	bd10      	pop	{r4, pc}

0800add6 <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800add6:	2300      	movs	r3, #0
{
 800add8:	b510      	push	{r4, lr}
    switch( region )
 800adda:	2806      	cmp	r0, #6
 800addc:	d103      	bne.n	800ade6 <RegionTxParamSetupReq+0x10>
        KR920_TX_PARAM_SETUP_REQ( );
 800adde:	0008      	movs	r0, r1
 800ade0:	f000 ff01 	bl	800bbe6 <RegionKR920TxParamSetupReq>
 800ade4:	0003      	movs	r3, r0
        }
    }
}
 800ade6:	0018      	movs	r0, r3
 800ade8:	bd10      	pop	{r4, pc}

0800adea <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800adea:	2300      	movs	r3, #0
{
 800adec:	b510      	push	{r4, lr}
    switch( region )
 800adee:	2806      	cmp	r0, #6
 800adf0:	d103      	bne.n	800adfa <RegionDlChannelReq+0x10>
        KR920_DL_CHANNEL_REQ( );
 800adf2:	0008      	movs	r0, r1
 800adf4:	f000 fefa 	bl	800bbec <RegionKR920DlChannelReq>
 800adf8:	0003      	movs	r3, r0
        }
    }
}
 800adfa:	0018      	movs	r0, r3
 800adfc:	bd10      	pop	{r4, pc}

0800adfe <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800adfe:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800ae00:	2300      	movs	r3, #0
{
 800ae02:	0004      	movs	r4, r0
 800ae04:	0008      	movs	r0, r1
 800ae06:	0011      	movs	r1, r2
    switch( region )
 800ae08:	2c06      	cmp	r4, #6
 800ae0a:	d102      	bne.n	800ae12 <RegionAlternateDr+0x14>
        KR920_ALTERNATE_DR( );
 800ae0c:	f000 ff0e 	bl	800bc2c <RegionKR920AlternateDr>
 800ae10:	0003      	movs	r3, r0
        }
    }
}
 800ae12:	0018      	movs	r0, r3
 800ae14:	bd10      	pop	{r4, pc}

0800ae16 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800ae16:	b570      	push	{r4, r5, r6, lr}
 800ae18:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ae1a:	2409      	movs	r4, #9
{
 800ae1c:	0008      	movs	r0, r1
 800ae1e:	0011      	movs	r1, r2
 800ae20:	001a      	movs	r2, r3
    switch( region )
 800ae22:	2d06      	cmp	r5, #6
 800ae24:	d103      	bne.n	800ae2e <RegionNextChannel+0x18>
        KR920_NEXT_CHANNEL( );
 800ae26:	9b04      	ldr	r3, [sp, #16]
 800ae28:	f000 ff02 	bl	800bc30 <RegionKR920NextChannel>
 800ae2c:	0004      	movs	r4, r0
        }
    }
}
 800ae2e:	0020      	movs	r0, r4
 800ae30:	bd70      	pop	{r4, r5, r6, pc}

0800ae32 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800ae32:	b510      	push	{r4, lr}
    switch( region )
 800ae34:	2806      	cmp	r0, #6
 800ae36:	d102      	bne.n	800ae3e <RegionSetContinuousWave+0xc>
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
        KR920_SET_CONTINUOUS_WAVE( );
 800ae38:	0008      	movs	r0, r1
 800ae3a:	f001 f855 	bl	800bee8 <RegionKR920SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800ae3e:	bd10      	pop	{r4, pc}

0800ae40 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	0005      	movs	r5, r0
 800ae44:	0008      	movs	r0, r1
 800ae46:	0011      	movs	r1, r2
 800ae48:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800ae4a:	b2cc      	uxtb	r4, r1
    switch( region )
 800ae4c:	2d06      	cmp	r5, #6
 800ae4e:	d102      	bne.n	800ae56 <RegionApplyDrOffset+0x16>
        KR920_APPLY_DR_OFFSET( );
 800ae50:	f001 f886 	bl	800bf60 <RegionKR920ApplyDrOffset>
 800ae54:	0004      	movs	r4, r0
        }
    }
}
 800ae56:	0020      	movs	r0, r4
 800ae58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae5c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800ae5c:	4800      	ldr	r0, [pc, #0]	; (800ae60 <RegionGetVersion+0x4>)
 800ae5e:	4770      	bx	lr
 800ae60:	01000300 	.word	0x01000300

0800ae64 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800ae64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae66:	9101      	str	r1, [sp, #4]
 800ae68:	a908      	add	r1, sp, #32
 800ae6a:	7809      	ldrb	r1, [r1, #0]
 800ae6c:	9000      	str	r0, [sp, #0]
 800ae6e:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800ae70:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800ae72:	429a      	cmp	r2, r3
 800ae74:	db29      	blt.n	800aeca <RegionCommonChanVerifyDr+0x66>
 800ae76:	428a      	cmp	r2, r1
 800ae78:	dc27      	bgt.n	800aeca <RegionCommonChanVerifyDr+0x66>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ae7a:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ae7c:	260f      	movs	r6, #15
 800ae7e:	e01e      	b.n	800aebe <RegionCommonChanVerifyDr+0x5a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ae80:	9c01      	ldr	r4, [sp, #4]
 800ae82:	0041      	lsls	r1, r0, #1
 800ae84:	5b09      	ldrh	r1, [r1, r4]
 800ae86:	2500      	movs	r5, #0
 800ae88:	468c      	mov	ip, r1
 800ae8a:	210c      	movs	r1, #12
 800ae8c:	434b      	muls	r3, r1
 800ae8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae90:	18cb      	adds	r3, r1, r3
 800ae92:	4661      	mov	r1, ip
 800ae94:	4129      	asrs	r1, r5
 800ae96:	4239      	tst	r1, r7
 800ae98:	d00b      	beq.n	800aeb2 <RegionCommonChanVerifyDr+0x4e>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ae9a:	2408      	movs	r4, #8
 800ae9c:	7a19      	ldrb	r1, [r3, #8]
 800ae9e:	571c      	ldrsb	r4, [r3, r4]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800aea0:	0709      	lsls	r1, r1, #28
 800aea2:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800aea4:	1124      	asrs	r4, r4, #4
    if( ( value >= min ) && ( value <= max ) )
 800aea6:	4031      	ands	r1, r6
 800aea8:	428a      	cmp	r2, r1
 800aeaa:	db02      	blt.n	800aeb2 <RegionCommonChanVerifyDr+0x4e>
 800aeac:	4034      	ands	r4, r6
 800aeae:	42a2      	cmp	r2, r4
 800aeb0:	dd0c      	ble.n	800aecc <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800aeb2:	3501      	adds	r5, #1
 800aeb4:	330c      	adds	r3, #12
 800aeb6:	2d10      	cmp	r5, #16
 800aeb8:	d1eb      	bne.n	800ae92 <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800aeba:	3001      	adds	r0, #1
 800aebc:	b2c0      	uxtb	r0, r0
 800aebe:	0103      	lsls	r3, r0, #4
 800aec0:	9900      	ldr	r1, [sp, #0]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	4299      	cmp	r1, r3
 800aec6:	d8db      	bhi.n	800ae80 <RegionCommonChanVerifyDr+0x1c>
        return false;
 800aec8:	2000      	movs	r0, #0
}
 800aeca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 800aecc:	2001      	movs	r0, #1
 800aece:	e7fc      	b.n	800aeca <RegionCommonChanVerifyDr+0x66>

0800aed0 <RegionCommonValueInRange>:
{
 800aed0:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800aed2:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800aed4:	428b      	cmp	r3, r1
 800aed6:	db04      	blt.n	800aee2 <RegionCommonValueInRange+0x12>
 800aed8:	0fd8      	lsrs	r0, r3, #31
 800aeda:	17d1      	asrs	r1, r2, #31
 800aedc:	429a      	cmp	r2, r3
 800aede:	4148      	adcs	r0, r1
        return 1;
 800aee0:	b2c0      	uxtb	r0, r0
}
 800aee2:	4770      	bx	lr

0800aee4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800aee4:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800aee6:	090b      	lsrs	r3, r1, #4
{
 800aee8:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800aeea:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800aeec:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800aeee:	429d      	cmp	r5, r3
 800aef0:	d30b      	bcc.n	800af0a <RegionCommonChanDisable+0x26>
 800aef2:	4291      	cmp	r1, r2
 800aef4:	d209      	bcs.n	800af0a <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800aef6:	220f      	movs	r2, #15
 800aef8:	3001      	adds	r0, #1
 800aefa:	4011      	ands	r1, r2
 800aefc:	0002      	movs	r2, r0
 800aefe:	408a      	lsls	r2, r1
 800af00:	0011      	movs	r1, r2
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	5ae2      	ldrh	r2, [r4, r3]
 800af06:	438a      	bics	r2, r1
 800af08:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800af0a:	bd30      	pop	{r4, r5, pc}

0800af0c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800af0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af0e:	1e03      	subs	r3, r0, #0
 800af10:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800af12:	d005      	beq.n	800af20 <RegionCommonCountChannels+0x14>
 800af14:	0048      	lsls	r0, r1, #1
 800af16:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800af18:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800af1a:	9a01      	ldr	r2, [sp, #4]
 800af1c:	4291      	cmp	r1, r2
 800af1e:	d300      	bcc.n	800af22 <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800af20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800af22:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800af24:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800af26:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800af28:	2501      	movs	r5, #1
 800af2a:	40a5      	lsls	r5, r4
 800af2c:	002e      	movs	r6, r5
 800af2e:	403e      	ands	r6, r7
 800af30:	42b5      	cmp	r5, r6
 800af32:	d101      	bne.n	800af38 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800af34:	3201      	adds	r2, #1
 800af36:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800af38:	3401      	adds	r4, #1
 800af3a:	2c10      	cmp	r4, #16
 800af3c:	d1f4      	bne.n	800af28 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800af3e:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800af40:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800af42:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800af44:	b2c9      	uxtb	r1, r1
 800af46:	3302      	adds	r3, #2
 800af48:	e7e7      	b.n	800af1a <RegionCommonCountChannels+0xe>

0800af4a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800af4a:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d005      	beq.n	800af5c <RegionCommonChanMaskCopy+0x12>
 800af50:	2900      	cmp	r1, #0
 800af52:	d003      	beq.n	800af5c <RegionCommonChanMaskCopy+0x12>
 800af54:	2300      	movs	r3, #0
 800af56:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800af58:	4293      	cmp	r3, r2
 800af5a:	d100      	bne.n	800af5e <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800af5c:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800af5e:	5acc      	ldrh	r4, [r1, r3]
 800af60:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800af62:	3302      	adds	r3, #2
 800af64:	e7f8      	b.n	800af58 <RegionCommonChanMaskCopy+0xe>
	...

0800af68 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800af68:	b082      	sub	sp, #8
 800af6a:	b570      	push	{r4, r5, r6, lr}
 800af6c:	8805      	ldrh	r5, [r0, #0]
 800af6e:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800af70:	2a00      	cmp	r2, #0
 800af72:	d111      	bne.n	800af98 <RegionCommonSetBandTxDone+0x30>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800af74:	26e1      	movs	r6, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800af76:	2464      	movs	r4, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800af78:	0136      	lsls	r6, r6, #4
 800af7a:	42b3      	cmp	r3, r6
 800af7c:	d307      	bcc.n	800af8e <RegionCommonSetBandTxDone+0x26>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800af7e:	4c0e      	ldr	r4, [pc, #56]	; (800afb8 <RegionCommonSetBandTxDone+0x50>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800af80:	429c      	cmp	r4, r3
 800af82:	4152      	adcs	r2, r2
 800af84:	4254      	negs	r4, r2
 800af86:	4a0d      	ldr	r2, [pc, #52]	; (800afbc <RegionCommonSetBandTxDone+0x54>)
 800af88:	4b0d      	ldr	r3, [pc, #52]	; (800afc0 <RegionCommonSetBandTxDone+0x58>)
 800af8a:	4014      	ands	r4, r2
 800af8c:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800af8e:	1c2b      	adds	r3, r5, #0
 800af90:	42a5      	cmp	r5, r4
 800af92:	d200      	bcs.n	800af96 <RegionCommonSetBandTxDone+0x2e>
 800af94:	1c23      	adds	r3, r4, #0
 800af96:	b29d      	uxth	r5, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800af98:	68c2      	ldr	r2, [r0, #12]
 800af9a:	1c2b      	adds	r3, r5, #0
 800af9c:	2d00      	cmp	r5, #0
 800af9e:	d100      	bne.n	800afa2 <RegionCommonSetBandTxDone+0x3a>
 800afa0:	2301      	movs	r3, #1
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800afa6:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800afa8:	428a      	cmp	r2, r1
 800afaa:	d900      	bls.n	800afae <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800afac:	1a53      	subs	r3, r2, r1
 800afae:	60c3      	str	r3, [r0, #12]
    }
}
 800afb0:	bc70      	pop	{r4, r5, r6}
 800afb2:	bc08      	pop	{r3}
 800afb4:	b002      	add	sp, #8
 800afb6:	4718      	bx	r3
 800afb8:	00009aaf 	.word	0x00009aaf
 800afbc:	ffffdcd8 	.word	0xffffdcd8
 800afc0:	00002710 	.word	0x00002710

0800afc4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800afc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afc6:	b093      	sub	sp, #76	; 0x4c
 800afc8:	9305      	str	r3, [sp, #20]
 800afca:	ab18      	add	r3, sp, #96	; 0x60
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	0015      	movs	r5, r2
 800afd0:	000c      	movs	r4, r1
 800afd2:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800afd4:	930b      	str	r3, [sp, #44]	; 0x2c
 800afd6:	9002      	str	r0, [sp, #8]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800afd8:	f002 fe4a 	bl	800dc70 <UTIL_TIMER_GetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800afdc:	4b70      	ldr	r3, [pc, #448]	; (800b1a0 <RegionCommonUpdateBandTimeOff+0x1dc>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800afde:	9008      	str	r0, [sp, #32]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800afe0:	4970      	ldr	r1, [pc, #448]	; (800b1a4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800afe2:	18f0      	adds	r0, r6, r3
 800afe4:	f7f5 f8c0 	bl	8000168 <__udivsi3>
 800afe8:	2218      	movs	r2, #24
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800afea:	4b6e      	ldr	r3, [pc, #440]	; (800b1a4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800afec:	4355      	muls	r5, r2
 800afee:	4358      	muls	r0, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800aff0:	4b6d      	ldr	r3, [pc, #436]	; (800b1a8 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800aff2:	18c3      	adds	r3, r0, r3
 800aff4:	9306      	str	r3, [sp, #24]
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800aff6:	4b6b      	ldr	r3, [pc, #428]	; (800b1a4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800aff8:	18c3      	adds	r3, r0, r3
 800affa:	9307      	str	r3, [sp, #28]
 800affc:	1963      	adds	r3, r4, r5
 800affe:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t validBands = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	9303      	str	r3, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800b004:	3b01      	subs	r3, #1
 800b006:	9304      	str	r3, [sp, #16]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b00a:	42a3      	cmp	r3, r4
 800b00c:	d107      	bne.n	800b01e <RegionCommonUpdateBandTimeOff+0x5a>
            }
        }
    }


    if( validBands == 0 )
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <RegionCommonUpdateBandTimeOff+0x54>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800b014:	3b01      	subs	r3, #1
 800b016:	9304      	str	r3, [sp, #16]
    }
    return minTimeToWait;
}
 800b018:	9804      	ldr	r0, [sp, #16]
 800b01a:	b013      	add	sp, #76	; 0x4c
 800b01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800b01e:	9619      	str	r6, [sp, #100]	; 0x64
 800b020:	ab19      	add	r3, sp, #100	; 0x64
 800b022:	2204      	movs	r2, #4
 800b024:	5e9a      	ldrsh	r2, [r3, r2]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800b026:	ab0c      	add	r3, sp, #48	; 0x30
 800b028:	809a      	strh	r2, [r3, #4]
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800b02a:	0030      	movs	r0, r6
 800b02c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b02e:	960c      	str	r6, [sp, #48]	; 0x30
 800b030:	f002 fda4 	bl	800db7c <SysTimeToMs>
    if( joined == false )
 800b034:	9b02      	ldr	r3, [sp, #8]
 800b036:	8825      	ldrh	r5, [r4, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d112      	bne.n	800b062 <RegionCommonUpdateBandTimeOff+0x9e>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b03c:	22e1      	movs	r2, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b03e:	3364      	adds	r3, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b040:	0112      	lsls	r2, r2, #4
 800b042:	4296      	cmp	r6, r2
 800b044:	d308      	bcc.n	800b058 <RegionCommonUpdateBandTimeOff+0x94>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b046:	4b59      	ldr	r3, [pc, #356]	; (800b1ac <RegionCommonUpdateBandTimeOff+0x1e8>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b048:	9a02      	ldr	r2, [sp, #8]
 800b04a:	42b3      	cmp	r3, r6
 800b04c:	4152      	adcs	r2, r2
 800b04e:	4253      	negs	r3, r2
 800b050:	4a57      	ldr	r2, [pc, #348]	; (800b1b0 <RegionCommonUpdateBandTimeOff+0x1ec>)
 800b052:	4013      	ands	r3, r2
 800b054:	4a57      	ldr	r2, [pc, #348]	; (800b1b4 <RegionCommonUpdateBandTimeOff+0x1f0>)
 800b056:	189b      	adds	r3, r3, r2
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b058:	1c2a      	adds	r2, r5, #0
 800b05a:	429d      	cmp	r5, r3
 800b05c:	d200      	bcs.n	800b060 <RegionCommonUpdateBandTimeOff+0x9c>
 800b05e:	1c1a      	adds	r2, r3, #0
 800b060:	b295      	uxth	r5, r2
    if( dutyCycle == 0 )
 800b062:	1c2b      	adds	r3, r5, #0
 800b064:	2d00      	cmp	r5, #0
 800b066:	d100      	bne.n	800b06a <RegionCommonUpdateBandTimeOff+0xa6>
 800b068:	2301      	movs	r3, #1
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	9309      	str	r3, [sp, #36]	; 0x24
    if( joined == false )
 800b06e:	9b02      	ldr	r3, [sp, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d15b      	bne.n	800b12c <RegionCommonUpdateBandTimeOff+0x168>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b074:	2d64      	cmp	r5, #100	; 0x64
 800b076:	d150      	bne.n	800b11a <RegionCommonUpdateBandTimeOff+0x156>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b078:	4f4f      	ldr	r7, [pc, #316]	; (800b1b8 <RegionCommonUpdateBandTimeOff+0x1f4>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800b07a:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800b07c:	68a1      	ldr	r1, [r4, #8]
 800b07e:	a810      	add	r0, sp, #64	; 0x40
 800b080:	f002 fd9e 	bl	800dbc0 <SysTimeFromMs>
 800b084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b086:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b08e:	a80e      	add	r0, sp, #56	; 0x38
 800b090:	f002 fcf8 	bl	800da84 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b094:	9b05      	ldr	r3, [sp, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d102      	bne.n	800b0a0 <RegionCommonUpdateBandTimeOff+0xdc>
 800b09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d006      	beq.n	800b0ae <RegionCommonUpdateBandTimeOff+0xea>
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	42bb      	cmp	r3, r7
 800b0a4:	d103      	bne.n	800b0ae <RegionCommonUpdateBandTimeOff+0xea>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b0a6:	4b45      	ldr	r3, [pc, #276]	; (800b1bc <RegionCommonUpdateBandTimeOff+0x1f8>)
 800b0a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d90d      	bls.n	800b0ca <RegionCommonUpdateBandTimeOff+0x106>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b0ae:	4b44      	ldr	r3, [pc, #272]	; (800b1c0 <RegionCommonUpdateBandTimeOff+0x1fc>)
            band->TimeCredits = maxCredits;
 800b0b0:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b0b2:	429e      	cmp	r6, r3
 800b0b4:	d909      	bls.n	800b0ca <RegionCommonUpdateBandTimeOff+0x106>
                timeDiff.SubSeconds = 0;
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	ab0e      	add	r3, sp, #56	; 0x38
 800b0ba:	809a      	strh	r2, [r3, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800b0bc:	9a06      	ldr	r2, [sp, #24]
 800b0be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b0c0:	0010      	movs	r0, r2
 800b0c2:	920e      	str	r2, [sp, #56]	; 0x38
 800b0c4:	f002 fd5a 	bl	800db7c <SysTimeToMs>
 800b0c8:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800b0ca:	6860      	ldr	r0, [r4, #4]
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d100      	bne.n	800b0d2 <RegionCommonUpdateBandTimeOff+0x10e>
        band->TimeCredits = maxCredits;
 800b0d0:	60e7      	str	r7, [r4, #12]
    if( joined == true )
 800b0d2:	9b02      	ldr	r3, [sp, #8]
    band->MaxTimeCredits = maxCredits;
 800b0d4:	6127      	str	r7, [r4, #16]
    if( joined == true )
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d004      	beq.n	800b0e4 <RegionCommonUpdateBandTimeOff+0x120>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800b0da:	f002 fdd3 	bl	800dc84 <UTIL_TIMER_GetElapsedTime>
 800b0de:	68e3      	ldr	r3, [r4, #12]
 800b0e0:	1818      	adds	r0, r3, r0
 800b0e2:	60e0      	str	r0, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800b0e4:	6922      	ldr	r2, [r4, #16]
 800b0e6:	68e3      	ldr	r3, [r4, #12]
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d900      	bls.n	800b0ee <RegionCommonUpdateBandTimeOff+0x12a>
        band->TimeCredits = band->MaxTimeCredits;
 800b0ec:	60e2      	str	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800b0ee:	9b08      	ldr	r3, [sp, #32]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b0f0:	991b      	ldr	r1, [sp, #108]	; 0x6c
    band->LastBandUpdateTime = currentTime;
 800b0f2:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f6:	434b      	muls	r3, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b0f8:	68e1      	ldr	r1, [r4, #12]
 800b0fa:	4299      	cmp	r1, r3
 800b0fc:	d805      	bhi.n	800b10a <RegionCommonUpdateBandTimeOff+0x146>
 800b0fe:	9805      	ldr	r0, [sp, #20]
 800b100:	2800      	cmp	r0, #0
 800b102:	d11a      	bne.n	800b13a <RegionCommonUpdateBandTimeOff+0x176>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b104:	9802      	ldr	r0, [sp, #8]
 800b106:	2800      	cmp	r0, #0
 800b108:	d017      	beq.n	800b13a <RegionCommonUpdateBandTimeOff+0x176>
            bands[i].ReadyForTransmission = true;
 800b10a:	2301      	movs	r3, #1
 800b10c:	7523      	strb	r3, [r4, #20]
            validBands++;
 800b10e:	9b03      	ldr	r3, [sp, #12]
 800b110:	3301      	adds	r3, #1
 800b112:	b2db      	uxtb	r3, r3
 800b114:	9303      	str	r3, [sp, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b116:	3418      	adds	r4, #24
 800b118:	e776      	b.n	800b008 <RegionCommonUpdateBandTimeOff+0x44>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b11a:	23fa      	movs	r3, #250	; 0xfa
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	429d      	cmp	r5, r3
 800b120:	d102      	bne.n	800b128 <RegionCommonUpdateBandTimeOff+0x164>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800b122:	4f28      	ldr	r7, [pc, #160]	; (800b1c4 <RegionCommonUpdateBandTimeOff+0x200>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800b124:	60a0      	str	r0, [r4, #8]
 800b126:	e7a9      	b.n	800b07c <RegionCommonUpdateBandTimeOff+0xb8>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800b128:	4f27      	ldr	r7, [pc, #156]	; (800b1c8 <RegionCommonUpdateBandTimeOff+0x204>)
 800b12a:	e7a7      	b.n	800b07c <RegionCommonUpdateBandTimeOff+0xb8>
        if( dutyCycleEnabled == false )
 800b12c:	4b22      	ldr	r3, [pc, #136]	; (800b1b8 <RegionCommonUpdateBandTimeOff+0x1f4>)
 800b12e:	9a05      	ldr	r2, [sp, #20]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b130:	001f      	movs	r7, r3
        if( dutyCycleEnabled == false )
 800b132:	2a00      	cmp	r2, #0
 800b134:	d1c9      	bne.n	800b0ca <RegionCommonUpdateBandTimeOff+0x106>
            band->TimeCredits = maxCredits;
 800b136:	60e3      	str	r3, [r4, #12]
 800b138:	e7c7      	b.n	800b0ca <RegionCommonUpdateBandTimeOff+0x106>
            bands[i].ReadyForTransmission = false;
 800b13a:	2000      	movs	r0, #0
 800b13c:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800b13e:	4293      	cmp	r3, r2
 800b140:	d208      	bcs.n	800b154 <RegionCommonUpdateBandTimeOff+0x190>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b142:	9a04      	ldr	r2, [sp, #16]
 800b144:	1a5b      	subs	r3, r3, r1
 800b146:	429a      	cmp	r2, r3
 800b148:	d900      	bls.n	800b14c <RegionCommonUpdateBandTimeOff+0x188>
 800b14a:	9304      	str	r3, [sp, #16]
                validBands++;
 800b14c:	9b03      	ldr	r3, [sp, #12]
 800b14e:	3301      	adds	r3, #1
 800b150:	b2db      	uxtb	r3, r3
 800b152:	9303      	str	r3, [sp, #12]
            if( joined == false )
 800b154:	9b02      	ldr	r3, [sp, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1dd      	bne.n	800b116 <RegionCommonUpdateBandTimeOff+0x152>
                SysTime_t backoffTimeRange = {
 800b15a:	9a02      	ldr	r2, [sp, #8]
 800b15c:	ab0e      	add	r3, sp, #56	; 0x38
 800b15e:	809a      	strh	r2, [r3, #4]
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b160:	4b11      	ldr	r3, [pc, #68]	; (800b1a8 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800b162:	2d64      	cmp	r5, #100	; 0x64
 800b164:	d019      	beq.n	800b19a <RegionCommonUpdateBandTimeOff+0x1d6>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b166:	4a19      	ldr	r2, [pc, #100]	; (800b1cc <RegionCommonUpdateBandTimeOff+0x208>)
 800b168:	18a9      	adds	r1, r5, r2
 800b16a:	424a      	negs	r2, r1
 800b16c:	4151      	adcs	r1, r2
 800b16e:	4d18      	ldr	r5, [pc, #96]	; (800b1d0 <RegionCommonUpdateBandTimeOff+0x20c>)
 800b170:	4249      	negs	r1, r1
 800b172:	4029      	ands	r1, r5
 800b174:	18c9      	adds	r1, r1, r3
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b176:	429e      	cmp	r6, r3
 800b178:	d901      	bls.n	800b17e <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b17a:	9b07      	ldr	r3, [sp, #28]
 800b17c:	18c9      	adds	r1, r1, r3
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b17e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	a80e      	add	r0, sp, #56	; 0x38
 800b186:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b188:	910e      	str	r1, [sp, #56]	; 0x38
 800b18a:	f002 fc7b 	bl	800da84 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b18e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b192:	f002 fcf3 	bl	800db7c <SysTimeToMs>
 800b196:	9004      	str	r0, [sp, #16]
 800b198:	e7bd      	b.n	800b116 <RegionCommonUpdateBandTimeOff+0x152>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b19a:	21e1      	movs	r1, #225	; 0xe1
 800b19c:	0109      	lsls	r1, r1, #4
 800b19e:	e7ea      	b.n	800b176 <RegionCommonUpdateBandTimeOff+0x1b2>
 800b1a0:	fffe13d0 	.word	0xfffe13d0
 800b1a4:	00015180 	.word	0x00015180
 800b1a8:	0001ec30 	.word	0x0001ec30
 800b1ac:	00009aaf 	.word	0x00009aaf
 800b1b0:	ffffdcd8 	.word	0xffffdcd8
 800b1b4:	00002710 	.word	0x00002710
 800b1b8:	001b7740 	.word	0x001b7740
 800b1bc:	0001517f 	.word	0x0001517f
 800b1c0:	0001ec2f 	.word	0x0001ec2f
 800b1c4:	0112a880 	.word	0x0112a880
 800b1c8:	02932e00 	.word	0x02932e00
 800b1cc:	fffffc18 	.word	0xfffffc18
 800b1d0:	fffeae80 	.word	0xfffeae80

0800b1d4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800b1d4:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b1d6:	7802      	ldrb	r2, [r0, #0]
{
 800b1d8:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800b1da:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b1dc:	2a03      	cmp	r2, #3
 800b1de:	d113      	bne.n	800b208 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800b1e0:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b1e2:	300f      	adds	r0, #15
 800b1e4:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b1e6:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b1e8:	4004      	ands	r4, r0
 800b1ea:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b1ec:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800b1ee:	789a      	ldrb	r2, [r3, #2]
 800b1f0:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800b1f2:	78dc      	ldrb	r4, [r3, #3]
 800b1f4:	0224      	lsls	r4, r4, #8
 800b1f6:	4322      	orrs	r2, r4
 800b1f8:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800b1fa:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b1fc:	065a      	lsls	r2, r3, #25
 800b1fe:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800b200:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b202:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800b204:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800b206:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800b208:	bd10      	pop	{r4, pc}

0800b20a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800b20a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20c:	b087      	sub	sp, #28
 800b20e:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800b210:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800b212:	2707      	movs	r7, #7
{
 800b214:	9103      	str	r1, [sp, #12]
 800b216:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800b218:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800b21a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800b21c:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800b21e:	7943      	ldrb	r3, [r0, #5]
{
 800b220:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800b222:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800b224:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800b226:	2b00      	cmp	r3, #0
 800b228:	d026      	beq.n	800b278 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800b22a:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	d019      	beq.n	800b264 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800b230:	69a2      	ldr	r2, [r4, #24]
 800b232:	2314      	movs	r3, #20
 800b234:	9201      	str	r2, [sp, #4]
 800b236:	2215      	movs	r2, #21
 800b238:	56a2      	ldrsb	r2, [r4, r2]
 800b23a:	56e3      	ldrsb	r3, [r4, r3]
 800b23c:	9200      	str	r2, [sp, #0]
 800b23e:	7b20      	ldrb	r0, [r4, #12]
 800b240:	9a02      	ldr	r2, [sp, #8]
 800b242:	6921      	ldr	r1, [r4, #16]
 800b244:	f7ff fe0e 	bl	800ae64 <RegionCommonChanVerifyDr>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d101      	bne.n	800b250 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800b24c:	2302      	movs	r3, #2
 800b24e:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800b250:	231d      	movs	r3, #29
 800b252:	221c      	movs	r2, #28
 800b254:	56e3      	ldrsb	r3, [r4, r3]
 800b256:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800b258:	42bb      	cmp	r3, r7
 800b25a:	dc15      	bgt.n	800b288 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800b25c:	42ba      	cmp	r2, r7
 800b25e:	da14      	bge.n	800b28a <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800b260:	2304      	movs	r3, #4
 800b262:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800b264:	0028      	movs	r0, r5
    *dr = datarate;
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	9a02      	ldr	r2, [sp, #8]
 800b26a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800b26c:	9b04      	ldr	r3, [sp, #16]
 800b26e:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800b270:	9b05      	ldr	r3, [sp, #20]
 800b272:	701e      	strb	r6, [r3, #0]
}
 800b274:	b007      	add	sp, #28
 800b276:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800b278:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800b27a:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800b27c:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800b27e:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800b280:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800b282:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800b284:	57c7      	ldrsb	r7, [r0, r7]
 800b286:	e7d1      	b.n	800b22c <RegionCommonLinkAdrReqVerifyParams+0x22>
 800b288:	001f      	movs	r7, r3
    if( status == 0x07 )
 800b28a:	2d07      	cmp	r5, #7
 800b28c:	d1ea      	bne.n	800b264 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800b28e:	2e00      	cmp	r6, #0
 800b290:	d1e8      	bne.n	800b264 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800b292:	3601      	adds	r6, #1
 800b294:	e7e6      	b.n	800b264 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800b298 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b298:	4b03      	ldr	r3, [pc, #12]	; (800b2a8 <RegionCommonComputeSymbolTimeLoRa+0x10>)
{
 800b29a:	b510      	push	{r4, lr}
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b29c:	4083      	lsls	r3, r0
 800b29e:	0018      	movs	r0, r3
 800b2a0:	f7f4 ff62 	bl	8000168 <__udivsi3>
}
 800b2a4:	bd10      	pop	{r4, pc}
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	000f4240 	.word	0x000f4240

0800b2ac <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	001e      	movs	r6, r3
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b2b0:	23fa      	movs	r3, #250	; 0xfa
{
 800b2b2:	0004      	movs	r4, r0
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	1f08      	subs	r0, r1, #4
 800b2b8:	4360      	muls	r0, r4
 800b2ba:	4353      	muls	r3, r2
 800b2bc:	18c0      	adds	r0, r0, r3
{
 800b2be:	000d      	movs	r5, r1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b2c0:	0040      	lsls	r0, r0, #1
 800b2c2:	d004      	beq.n	800b2ce <RegionCommonComputeRxWindowParameters+0x22>
 800b2c4:	1e62      	subs	r2, r4, #1
 800b2c6:	0021      	movs	r1, r4
 800b2c8:	1810      	adds	r0, r2, r0
 800b2ca:	f7f4 ff4d 	bl	8000168 <__udivsi3>
 800b2ce:	4285      	cmp	r5, r0
 800b2d0:	d200      	bcs.n	800b2d4 <RegionCommonComputeRxWindowParameters+0x28>
 800b2d2:	0005      	movs	r5, r0
 800b2d4:	9b04      	ldr	r3, [sp, #16]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b2d6:	00a0      	lsls	r0, r4, #2
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b2d8:	601d      	str	r5, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b2da:	436c      	muls	r4, r5
 800b2dc:	2500      	movs	r5, #0
 800b2de:	42ac      	cmp	r4, r5
 800b2e0:	d001      	beq.n	800b2e6 <RegionCommonComputeRxWindowParameters+0x3a>
 800b2e2:	3401      	adds	r4, #1
 800b2e4:	0865      	lsrs	r5, r4, #1
 800b2e6:	21fa      	movs	r1, #250	; 0xfa
 800b2e8:	0089      	lsls	r1, r1, #2
 800b2ea:	434e      	muls	r6, r1
 800b2ec:	1b40      	subs	r0, r0, r5
 800b2ee:	1b80      	subs	r0, r0, r6
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	dd01      	ble.n	800b2f8 <RegionCommonComputeRxWindowParameters+0x4c>
 800b2f4:	4b03      	ldr	r3, [pc, #12]	; (800b304 <RegionCommonComputeRxWindowParameters+0x58>)
 800b2f6:	18c0      	adds	r0, r0, r3
 800b2f8:	f7f4 ffc0 	bl	800027c <__divsi3>
 800b2fc:	9b05      	ldr	r3, [sp, #20]
 800b2fe:	6018      	str	r0, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800b300:	bd70      	pop	{r4, r5, r6, pc}
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	000003e7 	.word	0x000003e7

0800b308 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800b308:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b30a:	0040      	lsls	r0, r0, #1
{
 800b30c:	1c14      	adds	r4, r2, #0
 800b30e:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b310:	f7f5 fcde 	bl	8000cd0 <__aeabi_ui2f>
 800b314:	1c01      	adds	r1, r0, #0
 800b316:	1c28      	adds	r0, r5, #0
 800b318:	f7f5 fade 	bl	80008d8 <__aeabi_fsub>
 800b31c:	1c21      	adds	r1, r4, #0
 800b31e:	f7f5 fadb 	bl	80008d8 <__aeabi_fsub>
 800b322:	f7f6 f995 	bl	8001650 <__aeabi_f2d>
 800b326:	f002 ff3f 	bl	800e1a8 <floor>
 800b32a:	f7f6 f95b 	bl	80015e4 <__aeabi_d2iz>

    return phyTxPower;
 800b32e:	b240      	sxtb	r0, r0
}
 800b330:	bd70      	pop	{r4, r5, r6, pc}

0800b332 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800b332:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b334:	b087      	sub	sp, #28
 800b336:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b338:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800b33a:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800b33c:	001d      	movs	r5, r3
{
 800b33e:	9103      	str	r1, [sp, #12]
 800b340:	9204      	str	r2, [sp, #16]
 800b342:	011a      	lsls	r2, r3, #4
 800b344:	b2d2      	uxtb	r2, r2
 800b346:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b348:	9901      	ldr	r1, [sp, #4]
 800b34a:	8a02      	ldrh	r2, [r0, #16]
 800b34c:	428a      	cmp	r2, r1
 800b34e:	d806      	bhi.n	800b35e <RegionCommonCountNbOfEnabledChannels+0x2c>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b350:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800b352:	9b04      	ldr	r3, [sp, #16]
 800b354:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b356:	9b05      	ldr	r3, [sp, #20]
 800b358:	701a      	strb	r2, [r3, #0]
}
 800b35a:	b007      	add	sp, #28
 800b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b35e:	260c      	movs	r6, #12
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800b360:	005a      	lsls	r2, r3, #1
 800b362:	9202      	str	r2, [sp, #8]
 800b364:	9a01      	ldr	r2, [sp, #4]
 800b366:	4356      	muls	r6, r2
 800b368:	2200      	movs	r2, #0
 800b36a:	9600      	str	r6, [sp, #0]
 800b36c:	6841      	ldr	r1, [r0, #4]
 800b36e:	9c02      	ldr	r4, [sp, #8]
 800b370:	2701      	movs	r7, #1
 800b372:	5b09      	ldrh	r1, [r1, r4]
 800b374:	4111      	asrs	r1, r2
 800b376:	4239      	tst	r1, r7
 800b378:	d028      	beq.n	800b3cc <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800b37a:	6881      	ldr	r1, [r0, #8]
 800b37c:	9c00      	ldr	r4, [sp, #0]
 800b37e:	190c      	adds	r4, r1, r4
 800b380:	6821      	ldr	r1, [r4, #0]
 800b382:	2900      	cmp	r1, #0
 800b384:	d022      	beq.n	800b3cc <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b386:	7801      	ldrb	r1, [r0, #0]
 800b388:	2900      	cmp	r1, #0
 800b38a:	d107      	bne.n	800b39c <RegionCommonCountNbOfEnabledChannels+0x6a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800b38c:	6941      	ldr	r1, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b38e:	2900      	cmp	r1, #0
 800b390:	d004      	beq.n	800b39c <RegionCommonCountNbOfEnabledChannels+0x6a>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800b392:	9e02      	ldr	r6, [sp, #8]
 800b394:	5b89      	ldrh	r1, [r1, r6]
 800b396:	4111      	asrs	r1, r2
 800b398:	4239      	tst	r1, r7
 800b39a:	d017      	beq.n	800b3cc <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b39c:	2101      	movs	r1, #1
 800b39e:	5641      	ldrsb	r1, [r0, r1]
 800b3a0:	000e      	movs	r6, r1
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800b3a2:	7a21      	ldrb	r1, [r4, #8]
 800b3a4:	070f      	lsls	r7, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 800b3a6:	173f      	asrs	r7, r7, #28
 800b3a8:	42be      	cmp	r6, r7
 800b3aa:	db0f      	blt.n	800b3cc <RegionCommonCountNbOfEnabledChannels+0x9a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800b3ac:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800b3ae:	1109      	asrs	r1, r1, #4
 800b3b0:	428e      	cmp	r6, r1
 800b3b2:	dc0b      	bgt.n	800b3cc <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800b3b4:	7a61      	ldrb	r1, [r4, #9]
 800b3b6:	2418      	movs	r4, #24
 800b3b8:	4361      	muls	r1, r4
 800b3ba:	68c4      	ldr	r4, [r0, #12]
 800b3bc:	1861      	adds	r1, r4, r1
 800b3be:	7d09      	ldrb	r1, [r1, #20]
 800b3c0:	2900      	cmp	r1, #0
 800b3c2:	d10c      	bne.n	800b3de <RegionCommonCountNbOfEnabledChannels+0xac>
                    nbRestrictedChannelsCount++;
 800b3c4:	4661      	mov	r1, ip
 800b3c6:	3101      	adds	r1, #1
 800b3c8:	b2c9      	uxtb	r1, r1
 800b3ca:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800b3cc:	9900      	ldr	r1, [sp, #0]
 800b3ce:	3201      	adds	r2, #1
 800b3d0:	310c      	adds	r1, #12
 800b3d2:	9100      	str	r1, [sp, #0]
 800b3d4:	2a10      	cmp	r2, #16
 800b3d6:	d1c9      	bne.n	800b36c <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b3d8:	3301      	adds	r3, #1
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	e7b1      	b.n	800b342 <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800b3de:	9c01      	ldr	r4, [sp, #4]
 800b3e0:	9e03      	ldr	r6, [sp, #12]
 800b3e2:	1c69      	adds	r1, r5, #1
 800b3e4:	18a4      	adds	r4, r4, r2
 800b3e6:	5574      	strb	r4, [r6, r5]
 800b3e8:	b2cd      	uxtb	r5, r1
 800b3ea:	e7ef      	b.n	800b3cc <RegionCommonCountNbOfEnabledChannels+0x9a>

0800b3ec <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800b3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ee:	0004      	movs	r4, r0
 800b3f0:	b087      	sub	sp, #28
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b3f2:	6840      	ldr	r0, [r0, #4]
{
 800b3f4:	001d      	movs	r5, r3
 800b3f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b3f8:	9204      	str	r2, [sp, #16]
 800b3fa:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b3fc:	f002 fc42 	bl	800dc84 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b400:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800b402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b404:	1a1b      	subs	r3, r3, r0
 800b406:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800b408:	2301      	movs	r3, #1
 800b40a:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <RegionCommonIdentifyChannels+0x30>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	4283      	cmp	r3, r0
 800b41a:	d825      	bhi.n	800b468 <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	6033      	str	r3, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b420:	7a62      	ldrb	r2, [r4, #9]
 800b422:	69e1      	ldr	r1, [r4, #28]
 800b424:	4694      	mov	ip, r2
 800b426:	780a      	ldrb	r2, [r1, #0]
 800b428:	69a1      	ldr	r1, [r4, #24]
 800b42a:	9205      	str	r2, [sp, #20]
 800b42c:	9103      	str	r1, [sp, #12]
 800b42e:	0021      	movs	r1, r4
 800b430:	ae01      	add	r6, sp, #4
 800b432:	310c      	adds	r1, #12
 800b434:	7a23      	ldrb	r3, [r4, #8]
 800b436:	c905      	ldmia	r1!, {r0, r2}
 800b438:	c605      	stmia	r6!, {r0, r2}
 800b43a:	7d21      	ldrb	r1, [r4, #20]
 800b43c:	4662      	mov	r2, ip
 800b43e:	9100      	str	r1, [sp, #0]
 800b440:	69e1      	ldr	r1, [r4, #28]
 800b442:	9805      	ldr	r0, [sp, #20]
 800b444:	68c9      	ldr	r1, [r1, #12]
 800b446:	f7ff fdbd 	bl	800afc4 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800b44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b44c:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800b44e:	002a      	movs	r2, r5
 800b450:	9904      	ldr	r1, [sp, #16]
 800b452:	69e0      	ldr	r0, [r4, #28]
 800b454:	f7ff ff6d 	bl	800b332 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800b458:	782b      	ldrb	r3, [r5, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d004      	beq.n	800b468 <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 800b45e:	2300      	movs	r3, #0
        return LORAMAC_STATUS_OK;
 800b460:	0018      	movs	r0, r3
        *nextTxDelay = 0;
 800b462:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800b464:	b007      	add	sp, #28
 800b466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800b468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b46a:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800b46c:	4243      	negs	r3, r0
 800b46e:	4158      	adcs	r0, r3
 800b470:	300b      	adds	r0, #11
 800b472:	e7f7      	b.n	800b464 <RegionCommonIdentifyChannels+0x78>

0800b474 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800b474:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int8_t drLocal = params->CurrentDr;
 800b476:	2400      	movs	r4, #0

    if( params->CurrentDr == params->MinDr )
 800b478:	2602      	movs	r6, #2
    int8_t drLocal = params->CurrentDr;
 800b47a:	5704      	ldrsb	r4, [r0, r4]
    if( params->CurrentDr == params->MinDr )
 800b47c:	5786      	ldrsb	r6, [r0, r6]
{
 800b47e:	0005      	movs	r5, r0
    if( params->CurrentDr == params->MinDr )
 800b480:	42a6      	cmp	r6, r4
 800b482:	d010      	beq.n	800b4a6 <RegionCommonGetNextLowerTxDr+0x32>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800b484:	3c01      	subs	r4, #1
 800b486:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800b488:	42a6      	cmp	r6, r4
 800b48a:	d00c      	beq.n	800b4a6 <RegionCommonGetNextLowerTxDr+0x32>
 800b48c:	68ab      	ldr	r3, [r5, #8]
 800b48e:	0022      	movs	r2, r4
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	2301      	movs	r3, #1
 800b494:	56eb      	ldrsb	r3, [r5, r3]
 800b496:	78e8      	ldrb	r0, [r5, #3]
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	6869      	ldr	r1, [r5, #4]
 800b49c:	0033      	movs	r3, r6
 800b49e:	f7ff fce1 	bl	800ae64 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d0ee      	beq.n	800b484 <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 800b4a6:	0020      	movs	r0, r4
 800b4a8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800b4aa <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800b4aa:	1c0b      	adds	r3, r1, #0
 800b4ac:	4281      	cmp	r1, r0
 800b4ae:	da00      	bge.n	800b4b2 <RegionCommonLimitTxPower+0x8>
 800b4b0:	1c03      	adds	r3, r0, #0
 800b4b2:	b258      	sxtb	r0, r3
}
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800b4b8:	0080      	lsls	r0, r0, #2
 800b4ba:	5843      	ldr	r3, [r0, r1]
 800b4bc:	4a04      	ldr	r2, [pc, #16]	; (800b4d0 <RegionCommonGetBandwidth+0x18>)
 800b4be:	2001      	movs	r0, #1
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d004      	beq.n	800b4ce <RegionCommonGetBandwidth+0x16>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800b4c4:	4a03      	ldr	r2, [pc, #12]	; (800b4d4 <RegionCommonGetBandwidth+0x1c>)
 800b4c6:	189b      	adds	r3, r3, r2
 800b4c8:	425a      	negs	r2, r3
 800b4ca:	4153      	adcs	r3, r2
 800b4cc:	0058      	lsls	r0, r3, #1
    }
}
 800b4ce:	4770      	bx	lr
 800b4d0:	0003d090 	.word	0x0003d090
 800b4d4:	fff85ee0 	.word	0xfff85ee0

0800b4d8 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800b4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4da:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800b4dc:	ac04      	add	r4, sp, #16
 800b4de:	0025      	movs	r5, r4
{
 800b4e0:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <RegionCommonRxConfigPrint+0x48>)
 800b4e4:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800b4e6:	c5c4      	stmia	r5!, {r2, r6, r7}
 800b4e8:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800b4ea:	c5c4      	stmia	r5!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800b4ec:	4663      	mov	r3, ip
    if ( rxSlot < RX_SLOT_NONE )
 800b4ee:	2805      	cmp	r0, #5
 800b4f0:	d80c      	bhi.n	800b50c <RegionCommonRxConfigPrint+0x34>
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800b4f2:	9101      	str	r1, [sp, #4]
 800b4f4:	0080      	lsls	r0, r0, #2
 800b4f6:	9302      	str	r3, [sp, #8]
 800b4f8:	5903      	ldr	r3, [r0, r4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	2100      	movs	r1, #0
 800b500:	2002      	movs	r0, #2
 800b502:	4b08      	ldr	r3, [pc, #32]	; (800b524 <RegionCommonRxConfigPrint+0x4c>)
 800b504:	f002 f8d8 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800b508:	b00b      	add	sp, #44	; 0x2c
 800b50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	9100      	str	r1, [sp, #0]
 800b510:	2201      	movs	r2, #1
 800b512:	2100      	movs	r1, #0
 800b514:	4b04      	ldr	r3, [pc, #16]	; (800b528 <RegionCommonRxConfigPrint+0x50>)
 800b516:	2002      	movs	r0, #2
 800b518:	f002 f8ce 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b51c:	e7f4      	b.n	800b508 <RegionCommonRxConfigPrint+0x30>
 800b51e:	46c0      	nop			; (mov r8, r8)
 800b520:	0800e734 	.word	0x0800e734
 800b524:	0800edfd 	.word	0x0800edfd
 800b528:	0800ee1c 	.word	0x0800ee1c

0800b52c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800b52c:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800b52e:	4b04      	ldr	r3, [pc, #16]	; (800b540 <RegionCommonTxConfigPrint+0x14>)
 800b530:	9101      	str	r1, [sp, #4]
 800b532:	9000      	str	r0, [sp, #0]
 800b534:	2201      	movs	r2, #1
 800b536:	2100      	movs	r1, #0
 800b538:	2002      	movs	r0, #2
 800b53a:	f002 f8bd 	bl	800d6b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b53e:	bd07      	pop	{r0, r1, r2, pc}
 800b540:	0800ee38 	.word	0x0800ee38

0800b544 <GetTimeOnAir>:
    }
    return false;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800b544:	b530      	push	{r4, r5, lr}
 800b546:	000c      	movs	r4, r1
    int8_t phyDr = DataratesKR920[datarate];
 800b548:	490a      	ldr	r1, [pc, #40]	; (800b574 <GetTimeOnAir+0x30>)
{
 800b54a:	b085      	sub	sp, #20
    int8_t phyDr = DataratesKR920[datarate];
 800b54c:	560d      	ldrsb	r5, [r1, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsKR920 );
 800b54e:	3108      	adds	r1, #8
 800b550:	f7ff ffb2 	bl	800b4b8 <RegionCommonGetBandwidth>

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b554:	2300      	movs	r3, #0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsKR920 );
 800b556:	0001      	movs	r1, r0
    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b558:	2001      	movs	r0, #1
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	3308      	adds	r3, #8
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	4b05      	ldr	r3, [pc, #20]	; (800b578 <GetTimeOnAir+0x34>)
 800b562:	b2e4      	uxtb	r4, r4
 800b564:	9402      	str	r4, [sp, #8]
 800b566:	002a      	movs	r2, r5
 800b568:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b56a:	9003      	str	r0, [sp, #12]
 800b56c:	0003      	movs	r3, r0
 800b56e:	47a0      	blx	r4
}
 800b570:	b005      	add	sp, #20
 800b572:	bd30      	pop	{r4, r5, pc}
 800b574:	0800e74c 	.word	0x0800e74c
 800b578:	0800e890 	.word	0x0800e890

0800b57c <VerifyRfFreq>:
{
 800b57c:	b513      	push	{r0, r1, r4, lr}
    if( Radio.CheckRfFrequency( tmpFreq ) == false )
 800b57e:	4b0a      	ldr	r3, [pc, #40]	; (800b5a8 <VerifyRfFreq+0x2c>)
{
 800b580:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( tmpFreq ) == false )
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	4798      	blx	r3
 800b588:	1e01      	subs	r1, r0, #0
 800b58a:	d00b      	beq.n	800b5a4 <VerifyRfFreq+0x28>
    if( ( tmpFreq >= 920900000 ) && ( tmpFreq <=923300000 ) )
 800b58c:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <VerifyRfFreq+0x30>)
        return false;
 800b58e:	2100      	movs	r1, #0
    if( ( tmpFreq >= 920900000 ) && ( tmpFreq <=923300000 ) )
 800b590:	18e0      	adds	r0, r4, r3
 800b592:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <VerifyRfFreq+0x34>)
 800b594:	4298      	cmp	r0, r3
 800b596:	d805      	bhi.n	800b5a4 <VerifyRfFreq+0x28>
        if( ( tmpFreq % 200000 ) == 0 )
 800b598:	4906      	ldr	r1, [pc, #24]	; (800b5b4 <VerifyRfFreq+0x38>)
 800b59a:	f7f4 fe6b 	bl	8000274 <__aeabi_uidivmod>
 800b59e:	424b      	negs	r3, r1
 800b5a0:	4159      	adcs	r1, r3
 800b5a2:	b2c9      	uxtb	r1, r1
}
 800b5a4:	0008      	movs	r0, r1
 800b5a6:	bd16      	pop	{r1, r2, r4, pc}
 800b5a8:	0800e890 	.word	0x0800e890
 800b5ac:	c91c2e60 	.word	0xc91c2e60
 800b5b0:	00249f00 	.word	0x00249f00
 800b5b4:	00030d40 	.word	0x00030d40

0800b5b8 <RegionKR920GetPhyParam>:
#endif /* REGION_KR920 */

PhyParam_t RegionKR920GetPhyParam( GetPhyParams_t* getPhy )
{
 800b5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800b5ba:	2200      	movs	r2, #0
{
 800b5bc:	0003      	movs	r3, r0

#if defined( REGION_KR920 )
    switch( getPhy->Attribute )
 800b5be:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800b5c0:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800b5c2:	380b      	subs	r0, #11
 800b5c4:	282e      	cmp	r0, #46	; 0x2e
 800b5c6:	d867      	bhi.n	800b698 <RegionKR920GetPhyParam+0xe0>
 800b5c8:	f7f4 fdb0 	bl	800012c <__gnu_thumb1_case_uqi>
 800b5cc:	362f2d2a 	.word	0x362f2d2a
 800b5d0:	423f3c66 	.word	0x423f3c66
 800b5d4:	4c494745 	.word	0x4c494745
 800b5d8:	57665566 	.word	0x57665566
 800b5dc:	66615f5b 	.word	0x66615f5b
 800b5e0:	18696466 	.word	0x18696466
 800b5e4:	66666666 	.word	0x66666666
 800b5e8:	66666666 	.word	0x66666666
 800b5ec:	66666666 	.word	0x66666666
 800b5f0:	716d6b66 	.word	0x716d6b66
 800b5f4:	716b6666 	.word	0x716b6666
 800b5f8:	7366      	.short	0x7366
 800b5fa:	78          	.byte	0x78
 800b5fb:	00          	.byte	0x00
            phyParam.Value = KR920_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b5fc:	785b      	ldrb	r3, [r3, #1]
 800b5fe:	a801      	add	r0, sp, #4
 800b600:	7003      	strb	r3, [r0, #0]
 800b602:	2305      	movs	r3, #5
 800b604:	7043      	strb	r3, [r0, #1]
 800b606:	2380      	movs	r3, #128	; 0x80
 800b608:	015b      	lsls	r3, r3, #5
 800b60a:	8043      	strh	r3, [r0, #2]
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )KR920_TX_MAX_DATARATE,
                .MinDr = ( int8_t )KR920_TX_MIN_DATARATE,
                .NbChannels = KR920_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800b60c:	4b2f      	ldr	r3, [pc, #188]	; (800b6cc <RegionKR920GetPhyParam+0x114>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	001a      	movs	r2, r3
 800b612:	32c0      	adds	r2, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b614:	6042      	str	r2, [r0, #4]
 800b616:	6083      	str	r3, [r0, #8]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800b618:	f7ff ff2c 	bl	800b474 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesKR920[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsKR920 );
 800b61c:	9000      	str	r0, [sp, #0]
            break;
 800b61e:	e03b      	b.n	800b698 <RegionKR920GetPhyParam+0xe0>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800b620:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = KR920_BEACON_CHANNEL_DR;
 800b622:	9300      	str	r3, [sp, #0]
            break;
 800b624:	e038      	b.n	800b698 <RegionKR920GetPhyParam+0xe0>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800b626:	2320      	movs	r3, #32
 800b628:	e7fb      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateKR920[getPhy->Datarate];
 800b62a:	2101      	movs	r1, #1
 800b62c:	4a28      	ldr	r2, [pc, #160]	; (800b6d0 <RegionKR920GetPhyParam+0x118>)
 800b62e:	5659      	ldrsb	r1, [r3, r1]
 800b630:	1c53      	adds	r3, r2, #1
 800b632:	185b      	adds	r3, r3, r1
 800b634:	7fdb      	ldrb	r3, [r3, #31]
 800b636:	e7f4      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateRepeaterKR920[getPhy->Datarate];
 800b638:	2101      	movs	r1, #1
 800b63a:	4a25      	ldr	r2, [pc, #148]	; (800b6d0 <RegionKR920GetPhyParam+0x118>)
 800b63c:	5659      	ldrsb	r1, [r3, r1]
 800b63e:	3226      	adds	r2, #38	; 0x26
 800b640:	5c53      	ldrb	r3, [r2, r1]
 800b642:	e7ee      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = KR920_MAX_RX_WINDOW;
 800b644:	23fa      	movs	r3, #250	; 0xfa
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	e7eb      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800b64a:	23fa      	movs	r3, #250	; 0xfa
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	e7e8      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800b650:	23fa      	movs	r3, #250	; 0xfa
 800b652:	00db      	lsls	r3, r3, #3
 800b654:	e7e5      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800b656:	4b1f      	ldr	r3, [pc, #124]	; (800b6d4 <RegionKR920GetPhyParam+0x11c>)
 800b658:	e7e3      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800b65a:	4b1f      	ldr	r3, [pc, #124]	; (800b6d8 <RegionKR920GetPhyParam+0x120>)
 800b65c:	e7e1      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800b65e:	2380      	movs	r3, #128	; 0x80
 800b660:	01db      	lsls	r3, r3, #7
 800b662:	e7de      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800b664:	21fa      	movs	r1, #250	; 0xfa
 800b666:	481d      	ldr	r0, [pc, #116]	; (800b6dc <RegionKR920GetPhyParam+0x124>)
 800b668:	0089      	lsls	r1, r1, #2
 800b66a:	f000 fc87 	bl	800bf7c <randr>
 800b66e:	23fa      	movs	r3, #250	; 0xfa
 800b670:	00db      	lsls	r3, r3, #3
 800b672:	18c0      	adds	r0, r0, r3
 800b674:	e7d2      	b.n	800b61c <RegionKR920GetPhyParam+0x64>
            phyParam.Value = KR920_RX_WND_2_FREQ;
 800b676:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <RegionKR920GetPhyParam+0x128>)
 800b678:	e7d3      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800b67a:	4b14      	ldr	r3, [pc, #80]	; (800b6cc <RegionKR920GetPhyParam+0x114>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	33c0      	adds	r3, #192	; 0xc0
 800b680:	e7cf      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800b682:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <RegionKR920GetPhyParam+0x114>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	33c2      	adds	r3, #194	; 0xc2
 800b688:	e7cb      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = KR920_MAX_NB_CHANNELS;
 800b68a:	2310      	movs	r3, #16
 800b68c:	e7c9      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800b68e:	4b0f      	ldr	r3, [pc, #60]	; (800b6cc <RegionKR920GetPhyParam+0x114>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	e7c6      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.fValue = KR920_DEFAULT_MAX_EIRP_HIGH;
 800b694:	4b13      	ldr	r3, [pc, #76]	; (800b6e4 <RegionKR920GetPhyParam+0x12c>)
            phyParam.fValue = KR920_DEFAULT_ANTENNA_GAIN;
 800b696:	9300      	str	r3, [sp, #0]
        }
    }

#endif /* REGION_KR920 */
    return phyParam;
}
 800b698:	9800      	ldr	r0, [sp, #0]
 800b69a:	b005      	add	sp, #20
 800b69c:	bd00      	pop	{pc}
            phyParam.fValue = KR920_DEFAULT_ANTENNA_GAIN;
 800b69e:	4b12      	ldr	r3, [pc, #72]	; (800b6e8 <RegionKR920GetPhyParam+0x130>)
 800b6a0:	e7f9      	b.n	800b696 <RegionKR920GetPhyParam+0xde>
            phyParam.Value = KR920_BEACON_CHANNEL_FREQ;
 800b6a2:	4b12      	ldr	r3, [pc, #72]	; (800b6ec <RegionKR920GetPhyParam+0x134>)
 800b6a4:	e7bd      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.BeaconFormat.BeaconSize = KR920_BEACON_SIZE;
 800b6a6:	466a      	mov	r2, sp
 800b6a8:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <RegionKR920GetPhyParam+0x138>)
 800b6aa:	8013      	strh	r3, [r2, #0]
            break;
 800b6ac:	e7f4      	b.n	800b698 <RegionKR920GetPhyParam+0xe0>
            phyParam.Value = KR920_BEACON_CHANNEL_DR;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e7b7      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = DataratesKR920[getPhy->Datarate];
 800b6b2:	785b      	ldrb	r3, [r3, #1]
 800b6b4:	4a06      	ldr	r2, [pc, #24]	; (800b6d0 <RegionKR920GetPhyParam+0x118>)
 800b6b6:	b25b      	sxtb	r3, r3
 800b6b8:	5cd3      	ldrb	r3, [r2, r3]
 800b6ba:	e7b2      	b.n	800b622 <RegionKR920GetPhyParam+0x6a>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsKR920 );
 800b6bc:	2001      	movs	r0, #1
 800b6be:	4904      	ldr	r1, [pc, #16]	; (800b6d0 <RegionKR920GetPhyParam+0x118>)
 800b6c0:	5618      	ldrsb	r0, [r3, r0]
 800b6c2:	3108      	adds	r1, #8
 800b6c4:	f7ff fef8 	bl	800b4b8 <RegionCommonGetBandwidth>
 800b6c8:	e7a8      	b.n	800b61c <RegionKR920GetPhyParam+0x64>
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	20000f98 	.word	0x20000f98
 800b6d0:	0800e74c 	.word	0x0800e74c
 800b6d4:	00001388 	.word	0x00001388
 800b6d8:	00001770 	.word	0x00001770
 800b6dc:	fffffc18 	.word	0xfffffc18
 800b6e0:	36f313e0 	.word	0x36f313e0
 800b6e4:	41600000 	.word	0x41600000
 800b6e8:	4009999a 	.word	0x4009999a
 800b6ec:	37056360 	.word	0x37056360
 800b6f0:	00000211 	.word	0x00000211

0800b6f4 <RegionKR920SetBandTxDone>:

void RegionKR920SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
#if defined( REGION_KR920 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800b6f4:	230c      	movs	r3, #12
{
 800b6f6:	b513      	push	{r0, r1, r4, lr}
 800b6f8:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800b6fa:	7842      	ldrb	r2, [r0, #1]
 800b6fc:	7800      	ldrb	r0, [r0, #0]
 800b6fe:	4c08      	ldr	r4, [pc, #32]	; (800b720 <RegionKR920SetBandTxDone+0x2c>)
 800b700:	4343      	muls	r3, r0
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	18c3      	adds	r3, r0, r3
 800b706:	2018      	movs	r0, #24
 800b708:	7a5b      	ldrb	r3, [r3, #9]
 800b70a:	4343      	muls	r3, r0
 800b70c:	6860      	ldr	r0, [r4, #4]
 800b70e:	18c0      	adds	r0, r0, r3
 800b710:	690b      	ldr	r3, [r1, #16]
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	68cb      	ldr	r3, [r1, #12]
 800b716:	6889      	ldr	r1, [r1, #8]
 800b718:	f7ff fc26 	bl	800af68 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_KR920 */
}
 800b71c:	bd13      	pop	{r0, r1, r4, pc}
 800b71e:	46c0      	nop			; (mov r8, r8)
 800b720:	20000f98 	.word	0x20000f98

0800b724 <RegionKR920InitDefaults>:

void RegionKR920InitDefaults( InitDefaultsParams_t* params )
{
 800b724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b726:	b087      	sub	sp, #28
#if defined( REGION_KR920 )
    Band_t bands[KR920_MAX_NB_BANDS] =
 800b728:	466b      	mov	r3, sp
 800b72a:	2401      	movs	r4, #1
 800b72c:	466a      	mov	r2, sp
 800b72e:	801c      	strh	r4, [r3, #0]
 800b730:	2300      	movs	r3, #0
 800b732:	7093      	strb	r3, [r2, #2]
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	9302      	str	r3, [sp, #8]
 800b738:	9303      	str	r3, [sp, #12]
 800b73a:	9304      	str	r3, [sp, #16]
 800b73c:	7513      	strb	r3, [r2, #20]
    {
        KR920_BAND0
    };

    switch( params->Type )
 800b73e:	7a02      	ldrb	r2, [r0, #8]
{
 800b740:	0001      	movs	r1, r0
    switch( params->Type )
 800b742:	42a2      	cmp	r2, r4
 800b744:	d02a      	beq.n	800b79c <RegionKR920InitDefaults+0x78>
 800b746:	2a02      	cmp	r2, #2
 800b748:	d031      	beq.n	800b7ae <RegionKR920InitDefaults+0x8a>
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d124      	bne.n	800b798 <RegionKR920InitDefaults+0x74>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800b74e:	6800      	ldr	r0, [r0, #0]
 800b750:	4298      	cmp	r0, r3
 800b752:	d021      	beq.n	800b798 <RegionKR920InitDefaults+0x74>
 800b754:	684b      	ldr	r3, [r1, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d01e      	beq.n	800b798 <RegionKR920InitDefaults+0x74>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b75a:	4d1a      	ldr	r5, [pc, #104]	; (800b7c4 <RegionKR920InitDefaults+0xa0>)
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Initialize bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * KR920_MAX_NB_BANDS );
 800b75c:	2218      	movs	r2, #24
 800b75e:	4669      	mov	r1, sp
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b760:	6068      	str	r0, [r5, #4]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800b762:	602b      	str	r3, [r5, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * KR920_MAX_NB_BANDS );
 800b764:	f000 fc26 	bl	800bfb4 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) KR920_LC1;
 800b768:	4b17      	ldr	r3, [pc, #92]	; (800b7c8 <RegionKR920InitDefaults+0xa4>)
 800b76a:	6828      	ldr	r0, [r5, #0]
 800b76c:	001a      	movs	r2, r3
 800b76e:	0001      	movs	r1, r0
 800b770:	322c      	adds	r2, #44	; 0x2c
 800b772:	cae0      	ldmia	r2!, {r5, r6, r7}
 800b774:	c1e0      	stmia	r1!, {r5, r6, r7}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) KR920_LC2;
 800b776:	001a      	movs	r2, r3
 800b778:	3238      	adds	r2, #56	; 0x38
 800b77a:	cae0      	ldmia	r2!, {r5, r6, r7}
 800b77c:	c1e0      	stmia	r1!, {r5, r6, r7}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) KR920_LC3;
 800b77e:	0002      	movs	r2, r0
 800b780:	3344      	adds	r3, #68	; 0x44
 800b782:	3218      	adds	r2, #24
 800b784:	cb62      	ldmia	r3!, {r1, r5, r6}
 800b786:	c262      	stmia	r2!, {r1, r5, r6}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800b788:	0001      	movs	r1, r0
 800b78a:	2307      	movs	r3, #7

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b78c:	0022      	movs	r2, r4
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800b78e:	31c2      	adds	r1, #194	; 0xc2
 800b790:	800b      	strh	r3, [r1, #0]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b792:	30c0      	adds	r0, #192	; 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b794:	f7ff fbd9 	bl	800af4a <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_KR920 */
}
 800b798:	b007      	add	sp, #28
 800b79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800b79c:	4909      	ldr	r1, [pc, #36]	; (800b7c4 <RegionKR920InitDefaults+0xa0>)
 800b79e:	6808      	ldr	r0, [r1, #0]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b7a0:	0001      	movs	r1, r0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800b7a2:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800b7a4:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800b7a6:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b7a8:	31c2      	adds	r1, #194	; 0xc2
 800b7aa:	30c0      	adds	r0, #192	; 0xc0
 800b7ac:	e7f2      	b.n	800b794 <RegionKR920InitDefaults+0x70>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800b7ae:	4b05      	ldr	r3, [pc, #20]	; (800b7c4 <RegionKR920InitDefaults+0xa0>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	0019      	movs	r1, r3
 800b7b4:	33c2      	adds	r3, #194	; 0xc2
 800b7b6:	31c0      	adds	r1, #192	; 0xc0
 800b7b8:	880a      	ldrh	r2, [r1, #0]
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	800b      	strh	r3, [r1, #0]
            break;
 800b7c0:	e7ea      	b.n	800b798 <RegionKR920InitDefaults+0x74>
 800b7c2:	46c0      	nop			; (mov r8, r8)
 800b7c4:	20000f98 	.word	0x20000f98
 800b7c8:	0800e74c 	.word	0x0800e74c

0800b7cc <RegionKR920Verify>:

bool RegionKR920Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b7cc:	0003      	movs	r3, r0
 800b7ce:	b510      	push	{r4, lr}
#if defined( REGION_KR920 )
    switch( phyAttribute )
 800b7d0:	2907      	cmp	r1, #7
 800b7d2:	d808      	bhi.n	800b7e6 <RegionKR920Verify+0x1a>
 800b7d4:	2904      	cmp	r1, #4
 800b7d6:	d80b      	bhi.n	800b7f0 <RegionKR920Verify+0x24>
 800b7d8:	2000      	movs	r0, #0
 800b7da:	2900      	cmp	r1, #0
 800b7dc:	d107      	bne.n	800b7ee <RegionKR920Verify+0x22>
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800b7de:	6818      	ldr	r0, [r3, #0]
 800b7e0:	f7ff fecc 	bl	800b57c <VerifyRfFreq>
 800b7e4:	e003      	b.n	800b7ee <RegionKR920Verify+0x22>
    switch( phyAttribute )
 800b7e6:	3909      	subs	r1, #9
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	2901      	cmp	r1, #1
 800b7ec:	d90a      	bls.n	800b804 <RegionKR920Verify+0x38>
            return false;
    }
#else
    return false;
#endif /* REGION_KR920 */
}
 800b7ee:	bd10      	pop	{r4, pc}
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE );
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	2205      	movs	r2, #5
 800b7f4:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, KR920_MAX_TX_POWER, KR920_MIN_TX_POWER );
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	f7ff fb6a 	bl	800aed0 <RegionCommonValueInRange>
 800b7fc:	1e43      	subs	r3, r0, #1
 800b7fe:	4198      	sbcs	r0, r3
 800b800:	b2c0      	uxtb	r0, r0
 800b802:	e7f4      	b.n	800b7ee <RegionKR920Verify+0x22>
 800b804:	2000      	movs	r0, #0
 800b806:	2207      	movs	r2, #7
 800b808:	5618      	ldrsb	r0, [r3, r0]
 800b80a:	e7f4      	b.n	800b7f6 <RegionKR920Verify+0x2a>

0800b80c <RegionKR920ChanMaskSet>:
    }
#endif /* REGION_KR920 */
}

bool RegionKR920ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800b80c:	b510      	push	{r4, lr}
#if defined( REGION_KR920 )
    switch( chanMaskSet->ChannelsMaskType )
 800b80e:	7904      	ldrb	r4, [r0, #4]
{
 800b810:	0003      	movs	r3, r0
    switch( chanMaskSet->ChannelsMaskType )
 800b812:	2c00      	cmp	r4, #0
 800b814:	d00b      	beq.n	800b82e <RegionKR920ChanMaskSet+0x22>
 800b816:	2000      	movs	r0, #0
 800b818:	2c01      	cmp	r4, #1
 800b81a:	d110      	bne.n	800b83e <RegionKR920ChanMaskSet+0x32>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
            break;
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800b81c:	4a08      	ldr	r2, [pc, #32]	; (800b840 <RegionKR920ChanMaskSet+0x34>)
 800b81e:	6819      	ldr	r1, [r3, #0]
 800b820:	6810      	ldr	r0, [r2, #0]
 800b822:	0022      	movs	r2, r4
 800b824:	30c2      	adds	r0, #194	; 0xc2
 800b826:	f7ff fb90 	bl	800af4a <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800b82a:	0020      	movs	r0, r4
            break;
 800b82c:	e007      	b.n	800b83e <RegionKR920ChanMaskSet+0x32>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800b82e:	4a04      	ldr	r2, [pc, #16]	; (800b840 <RegionKR920ChanMaskSet+0x34>)
 800b830:	6819      	ldr	r1, [r3, #0]
 800b832:	6810      	ldr	r0, [r2, #0]
 800b834:	2201      	movs	r2, #1
 800b836:	30c0      	adds	r0, #192	; 0xc0
 800b838:	f7ff fb87 	bl	800af4a <RegionCommonChanMaskCopy>
    return true;
 800b83c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_KR920 */
}
 800b83e:	bd10      	pop	{r4, pc}
 800b840:	20000f98 	.word	0x20000f98

0800b844 <RegionKR920ComputeRxWindowParameters>:

void RegionKR920ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b846:	001c      	movs	r4, r3
 800b848:	000e      	movs	r6, r1
 800b84a:	0017      	movs	r7, r2
 800b84c:	b085      	sub	sp, #20
#if defined( REGION_KR920 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, KR920_RX_MAX_DATARATE );
 800b84e:	1c03      	adds	r3, r0, #0
 800b850:	2805      	cmp	r0, #5
 800b852:	dd00      	ble.n	800b856 <RegionKR920ComputeRxWindowParameters+0x12>
 800b854:	2305      	movs	r3, #5
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsKR920 );
 800b856:	4d11      	ldr	r5, [pc, #68]	; (800b89c <RegionKR920ComputeRxWindowParameters+0x58>)
    rxConfigParams->Datarate = MIN( datarate, KR920_RX_MAX_DATARATE );
 800b858:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsKR920 );
 800b85a:	0029      	movs	r1, r5
    rxConfigParams->Datarate = MIN( datarate, KR920_RX_MAX_DATARATE );
 800b85c:	b258      	sxtb	r0, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsKR920 );
 800b85e:	3108      	adds	r1, #8
 800b860:	f7ff fe2a 	bl	800b4b8 <RegionCommonGetBandwidth>

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesKR920[rxConfigParams->Datarate], BandwidthsKR920[rxConfigParams->Datarate] );
 800b864:	2201      	movs	r2, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsKR920 );
 800b866:	70a0      	strb	r0, [r4, #2]
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesKR920[rxConfigParams->Datarate], BandwidthsKR920[rxConfigParams->Datarate] );
 800b868:	56a2      	ldrsb	r2, [r4, r2]
 800b86a:	0093      	lsls	r3, r2, #2
 800b86c:	18eb      	adds	r3, r5, r3
 800b86e:	5ca8      	ldrb	r0, [r5, r2]
 800b870:	6899      	ldr	r1, [r3, #8]
 800b872:	f7ff fd11 	bl	800b298 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b876:	4b0a      	ldr	r3, [pc, #40]	; (800b8a0 <RegionKR920ComputeRxWindowParameters+0x5c>)
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesKR920[rxConfigParams->Datarate], BandwidthsKR920[rxConfigParams->Datarate] );
 800b878:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b87c:	9303      	str	r3, [sp, #12]
 800b87e:	4798      	blx	r3
 800b880:	0022      	movs	r2, r4
 800b882:	3408      	adds	r4, #8
 800b884:	320c      	adds	r2, #12
 800b886:	0003      	movs	r3, r0
 800b888:	9201      	str	r2, [sp, #4]
 800b88a:	0031      	movs	r1, r6
 800b88c:	003a      	movs	r2, r7
 800b88e:	0028      	movs	r0, r5
 800b890:	9400      	str	r4, [sp, #0]
 800b892:	f7ff fd0b 	bl	800b2ac <RegionCommonComputeRxWindowParameters>
#endif /* REGION_KR920 */
}
 800b896:	b005      	add	sp, #20
 800b898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b89a:	46c0      	nop			; (mov r8, r8)
 800b89c:	0800e74c 	.word	0x0800e74c
 800b8a0:	0800e890 	.word	0x0800e890

0800b8a4 <RegionKR920RxConfig>:

bool RegionKR920RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_KR920 )
    int8_t dr = rxConfig->Datarate;
 800b8a6:	2501      	movs	r5, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800b8a8:	4f2a      	ldr	r7, [pc, #168]	; (800b954 <RegionKR920RxConfig+0xb0>)
{
 800b8aa:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 800b8ac:	687b      	ldr	r3, [r7, #4]
{
 800b8ae:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800b8b0:	5745      	ldrsb	r5, [r0, r5]
{
 800b8b2:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800b8b4:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t frequency = rxConfig->Frequency;
 800b8b6:	6846      	ldr	r6, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800b8b8:	4798      	blx	r3
    {
        return false;
 800b8ba:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800b8bc:	4298      	cmp	r0, r3
 800b8be:	d140      	bne.n	800b942 <RegionKR920RxConfig+0x9e>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800b8c0:	7ce3      	ldrb	r3, [r4, #19]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <RegionKR920RxConfig+0x38>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800b8c6:	7822      	ldrb	r2, [r4, #0]
 800b8c8:	330c      	adds	r3, #12
 800b8ca:	435a      	muls	r2, r3
 800b8cc:	4b22      	ldr	r3, [pc, #136]	; (800b958 <RegionKR920RxConfig+0xb4>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	189b      	adds	r3, r3, r2
 800b8d2:	681e      	ldr	r6, [r3, #0]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d000      	beq.n	800b8dc <RegionKR920RxConfig+0x38>
 800b8da:	001e      	movs	r6, r3
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesKR920[dr];
 800b8dc:	4b1f      	ldr	r3, [pc, #124]	; (800b95c <RegionKR920RxConfig+0xb8>)

    Radio.SetChannel( frequency );
 800b8de:	0030      	movs	r0, r6
    phyDr = DataratesKR920[dr];
 800b8e0:	575b      	ldrsb	r3, [r3, r5]
 800b8e2:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8e8:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b8ea:	7ca3      	ldrb	r3, [r4, #18]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f0:	68a3      	ldr	r3, [r4, #8]
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	9302      	str	r3, [sp, #8]
 800b8f8:	2308      	movs	r3, #8
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	9207      	str	r2, [sp, #28]
 800b900:	930d      	str	r3, [sp, #52]	; 0x34
 800b902:	9206      	str	r2, [sp, #24]
 800b904:	0003      	movs	r3, r0
 800b906:	9205      	str	r2, [sp, #20]
 800b908:	9204      	str	r2, [sp, #16]
 800b90a:	9203      	str	r2, [sp, #12]
 800b90c:	9200      	str	r2, [sp, #0]
 800b90e:	78a1      	ldrb	r1, [r4, #2]
 800b910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b912:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b914:	9008      	str	r0, [sp, #32]
 800b916:	47b8      	blx	r7

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800b918:	7c63      	ldrb	r3, [r4, #17]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d014      	beq.n	800b948 <RegionKR920RxConfig+0xa4>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterKR920[dr];
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <RegionKR920RxConfig+0xb8>)
 800b920:	3326      	adds	r3, #38	; 0x26
 800b922:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateKR920[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800b924:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <RegionKR920RxConfig+0xb0>)
 800b926:	310d      	adds	r1, #13
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	2001      	movs	r0, #1
 800b92c:	b2c9      	uxtb	r1, r1
 800b92e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b930:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800b932:	002a      	movs	r2, r5
 800b934:	0031      	movs	r1, r6
 800b936:	7ce0      	ldrb	r0, [r4, #19]
 800b938:	f7ff fdce 	bl	800b4d8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800b93c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b93e:	701d      	strb	r5, [r3, #0]
    return true;
 800b940:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_KR920 */
}
 800b942:	0018      	movs	r0, r3
 800b944:	b00f      	add	sp, #60	; 0x3c
 800b946:	bdf0      	pop	{r4, r5, r6, r7, pc}
        maxPayload = MaxPayloadOfDatarateKR920[dr];
 800b948:	4b04      	ldr	r3, [pc, #16]	; (800b95c <RegionKR920RxConfig+0xb8>)
 800b94a:	3301      	adds	r3, #1
 800b94c:	195b      	adds	r3, r3, r5
 800b94e:	7fd9      	ldrb	r1, [r3, #31]
 800b950:	e7e8      	b.n	800b924 <RegionKR920RxConfig+0x80>
 800b952:	46c0      	nop			; (mov r8, r8)
 800b954:	0800e890 	.word	0x0800e890
 800b958:	20000f98 	.word	0x20000f98
 800b95c:	0800e74c 	.word	0x0800e74c

0800b960 <RegionKR920TxConfig>:

bool RegionKR920TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
#if defined( REGION_KR920 )
    int8_t phyDr = DataratesKR920[txConfig->Datarate];
 800b960:	2301      	movs	r3, #1
{
 800b962:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b964:	250c      	movs	r5, #12
{
 800b966:	b091      	sub	sp, #68	; 0x44
 800b968:	910d      	str	r1, [sp, #52]	; 0x34
 800b96a:	920e      	str	r2, [sp, #56]	; 0x38
    int8_t phyDr = DataratesKR920[txConfig->Datarate];
 800b96c:	56c3      	ldrsb	r3, [r0, r3]
 800b96e:	4e39      	ldr	r6, [pc, #228]	; (800ba54 <RegionKR920TxConfig+0xf4>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b970:	4f39      	ldr	r7, [pc, #228]	; (800ba58 <RegionKR920TxConfig+0xf8>)
    int8_t phyDr = DataratesKR920[txConfig->Datarate];
 800b972:	56f3      	ldrsb	r3, [r6, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b974:	683a      	ldr	r2, [r7, #0]
    int8_t phyDr = DataratesKR920[txConfig->Datarate];
 800b976:	930b      	str	r3, [sp, #44]	; 0x2c
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b978:	7803      	ldrb	r3, [r0, #0]
{
 800b97a:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b97c:	436b      	muls	r3, r5
 800b97e:	18d3      	adds	r3, r2, r3
 800b980:	7a5a      	ldrb	r2, [r3, #9]
 800b982:	2318      	movs	r3, #24
 800b984:	2102      	movs	r1, #2
 800b986:	2002      	movs	r0, #2
 800b988:	4353      	muls	r3, r2
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	5620      	ldrsb	r0, [r4, r0]
 800b98e:	18d3      	adds	r3, r2, r3
 800b990:	5659      	ldrsb	r1, [r3, r1]
 800b992:	f7ff fd8a 	bl	800b4aa <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsKR920 );
 800b996:	0031      	movs	r1, r6
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b998:	900a      	str	r0, [sp, #40]	; 0x28
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsKR920 );
 800b99a:	2001      	movs	r0, #1
 800b99c:	3108      	adds	r1, #8
 800b99e:	5620      	ldrsb	r0, [r4, r0]
 800b9a0:	f7ff fd8a 	bl	800b4b8 <RegionCommonGetBandwidth>
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b9a4:	7823      	ldrb	r3, [r4, #0]
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	435d      	muls	r5, r3
    if( freq >= 922100000 )
 800b9aa:	4b2c      	ldr	r3, [pc, #176]	; (800ba5c <RegionKR920TxConfig+0xfc>)
 800b9ac:	58aa      	ldr	r2, [r5, r2]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsKR920 );
 800b9ae:	900c      	str	r0, [sp, #48]	; 0x30
    return KR920_DEFAULT_MAX_EIRP_LOW;
 800b9b0:	200a      	movs	r0, #10
    if( freq >= 922100000 )
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d900      	bls.n	800b9b8 <RegionKR920TxConfig+0x58>
        return KR920_DEFAULT_MAX_EIRP_HIGH;
 800b9b6:	3004      	adds	r0, #4
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b9b8:	f7f5 f93c 	bl	8000c34 <__aeabi_i2f>
    int8_t phyTxPower = 0;

    // Take the minimum between the maxEIRP and txConfig->MaxEirp.
    // The value of txConfig->MaxEirp could have changed during runtime, e.g. due to a MAC command.
    maxEIRP = MIN( txConfig->MaxEirp, maxEIRP );
 800b9bc:	6866      	ldr	r6, [r4, #4]
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b9be:	1c05      	adds	r5, r0, #0
    maxEIRP = MIN( txConfig->MaxEirp, maxEIRP );
 800b9c0:	1c01      	adds	r1, r0, #0
 800b9c2:	1c30      	adds	r0, r6, #0
 800b9c4:	f7f4 fd96 	bl	80004f4 <__aeabi_fcmplt>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d000      	beq.n	800b9ce <RegionKR920TxConfig+0x6e>
 800b9cc:	1c35      	adds	r5, r6, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, txConfig->AntennaGain );
 800b9ce:	68a2      	ldr	r2, [r4, #8]
 800b9d0:	1c29      	adds	r1, r5, #0
 800b9d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9d4:	f7ff fc98 	bl	800b308 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b9d8:	220c      	movs	r2, #12
 800b9da:	4e21      	ldr	r6, [pc, #132]	; (800ba60 <RegionKR920TxConfig+0x100>)
 800b9dc:	7823      	ldrb	r3, [r4, #0]
 800b9de:	68f1      	ldr	r1, [r6, #12]
 800b9e0:	4353      	muls	r3, r2
 800b9e2:	4a1d      	ldr	r2, [pc, #116]	; (800ba58 <RegionKR920TxConfig+0xf8>)
 800b9e4:	910f      	str	r1, [sp, #60]	; 0x3c
 800b9e6:	6811      	ldr	r1, [r2, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, txConfig->AntennaGain );
 800b9e8:	0007      	movs	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b9ea:	5858      	ldr	r0, [r3, r1]
 800b9ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ee:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800b9f0:	23fa      	movs	r3, #250	; 0xfa
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	9308      	str	r3, [sp, #32]
 800b9f6:	2308      	movs	r3, #8
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2501      	movs	r5, #1
 800b9fc:	9302      	str	r3, [sp, #8]
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba00:	0039      	movs	r1, r7
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	69f3      	ldr	r3, [r6, #28]
 800ba06:	0028      	movs	r0, r5
 800ba08:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba0a:	9207      	str	r2, [sp, #28]
 800ba0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba0e:	9206      	str	r2, [sp, #24]
 800ba10:	9205      	str	r2, [sp, #20]
 800ba12:	9203      	str	r2, [sp, #12]
 800ba14:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ba16:	9504      	str	r5, [sp, #16]
 800ba18:	9501      	str	r5, [sp, #4]
 800ba1a:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ba1c:	200c      	movs	r0, #12
 800ba1e:	2101      	movs	r1, #1
 800ba20:	4b0d      	ldr	r3, [pc, #52]	; (800ba58 <RegionKR920TxConfig+0xf8>)
 800ba22:	5661      	ldrsb	r1, [r4, r1]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	7823      	ldrb	r3, [r4, #0]
 800ba28:	4343      	muls	r3, r0
 800ba2a:	5898      	ldr	r0, [r3, r2]
 800ba2c:	f7ff fd7e 	bl	800b52c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800ba30:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800ba32:	0028      	movs	r0, r5
 800ba34:	7b21      	ldrb	r1, [r4, #12]
 800ba36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba38:	4798      	blx	r3
    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ba3a:	2001      	movs	r0, #1
 800ba3c:	89a1      	ldrh	r1, [r4, #12]
 800ba3e:	5620      	ldrsb	r0, [r4, r0]
 800ba40:	f7ff fd80 	bl	800b544 <GetTimeOnAir>
 800ba44:	9b0e      	ldr	r3, [sp, #56]	; 0x38

    *txPower = txPowerLimited;
 800ba46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ba48:	6018      	str	r0, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_KR920 */
}
 800ba4a:	0028      	movs	r0, r5
    *txPower = txPowerLimited;
 800ba4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba4e:	701a      	strb	r2, [r3, #0]
}
 800ba50:	b011      	add	sp, #68	; 0x44
 800ba52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba54:	0800e74c 	.word	0x0800e74c
 800ba58:	20000f98 	.word	0x20000f98
 800ba5c:	36f6211f 	.word	0x36f6211f
 800ba60:	0800e890 	.word	0x0800e890

0800ba64 <RegionKR920LinkAdrReq>:

uint8_t RegionKR920LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = 0x07;
#if defined( REGION_KR920 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800ba66:	2700      	movs	r7, #0
    uint8_t status = 0x07;
 800ba68:	2507      	movs	r5, #7
{
 800ba6a:	b093      	sub	sp, #76	; 0x4c
 800ba6c:	9103      	str	r1, [sp, #12]
 800ba6e:	9204      	str	r2, [sp, #16]
 800ba70:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ba72:	2206      	movs	r2, #6
 800ba74:	2100      	movs	r1, #0
 800ba76:	a808      	add	r0, sp, #32
{
 800ba78:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ba7a:	f002 fb8c 	bl	800e196 <memset>
    uint16_t chMask = 0;
 800ba7e:	ab06      	add	r3, sp, #24
 800ba80:	80df      	strh	r7, [r3, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ba82:	7a23      	ldrb	r3, [r4, #8]
 800ba84:	42bb      	cmp	r3, r7
 800ba86:	d906      	bls.n	800ba96 <RegionKR920LinkAdrReq+0x32>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	a908      	add	r1, sp, #32
 800ba8c:	19d8      	adds	r0, r3, r7
 800ba8e:	f7ff fba1 	bl	800b1d4 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d144      	bne.n	800bb20 <RegionKR920LinkAdrReq+0xbc>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionKR920GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800ba96:	a80a      	add	r0, sp, #40	; 0x28
 800ba98:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ba9a:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ba9c:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ba9e:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800baa0:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = KR920_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = KR920_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800baa2:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800baa4:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800baa6:	78ab      	ldrb	r3, [r5, #2]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800baa8:	4e3e      	ldr	r6, [pc, #248]	; (800bba4 <RegionKR920LinkAdrReq+0x140>)
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800baaa:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800baac:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800baae:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800bab0:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800bab2:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bab4:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800bab6:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800bab8:	7b23      	ldrb	r3, [r4, #12]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800baba:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800babc:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800babe:	7b63      	ldrb	r3, [r4, #13]
 800bac0:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = KR920_MAX_NB_CHANNELS;
 800bac2:	2310      	movs	r3, #16
 800bac4:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800bac6:	ab06      	add	r3, sp, #24
 800bac8:	3306      	adds	r3, #6
 800baca:	6103      	str	r3, [r0, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800bacc:	23a0      	movs	r3, #160	; 0xa0
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800bad2:	6833      	ldr	r3, [r6, #0]
 800bad4:	6183      	str	r3, [r0, #24]
    linkAdrVerifyParams.MinTxPower = KR920_MIN_TX_POWER;
 800bad6:	2307      	movs	r3, #7
 800bad8:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800bada:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800badc:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800bade:	930a      	str	r3, [sp, #40]	; 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bae0:	1909      	adds	r1, r1, r4
 800bae2:	002b      	movs	r3, r5
 800bae4:	f7ff fb91 	bl	800b20a <RegionCommonLinkAdrReqVerifyParams>
 800bae8:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800baea:	2807      	cmp	r0, #7
 800baec:	d10a      	bne.n	800bb04 <RegionKR920LinkAdrReq+0xa0>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800baee:	6830      	ldr	r0, [r6, #0]
 800baf0:	2202      	movs	r2, #2
 800baf2:	2100      	movs	r1, #0
 800baf4:	30c0      	adds	r0, #192	; 0xc0
 800baf6:	f000 fa72 	bl	800bfde <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800bafa:	6833      	ldr	r3, [r6, #0]
 800bafc:	aa06      	add	r2, sp, #24
 800bafe:	88d2      	ldrh	r2, [r2, #6]
 800bb00:	33c0      	adds	r3, #192	; 0xc0
 800bb02:	801a      	strh	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

#endif /* REGION_KR920 */
    return status;
}
 800bb04:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800bb06:	786b      	ldrb	r3, [r5, #1]
 800bb08:	9a03      	ldr	r2, [sp, #12]
 800bb0a:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800bb0c:	78ab      	ldrb	r3, [r5, #2]
 800bb0e:	9a04      	ldr	r2, [sp, #16]
 800bb10:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800bb12:	782b      	ldrb	r3, [r5, #0]
 800bb14:	9a05      	ldr	r2, [sp, #20]
 800bb16:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800bb18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bb1a:	701f      	strb	r7, [r3, #0]
}
 800bb1c:	b013      	add	sp, #76	; 0x4c
 800bb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        chMask = linkAdrParams.ChMask;
 800bb20:	ab06      	add	r3, sp, #24
 800bb22:	899b      	ldrh	r3, [r3, #12]
 800bb24:	aa06      	add	r2, sp, #24
 800bb26:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800bb28:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 800bb2a:	183f      	adds	r7, r7, r0
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800bb2c:	7ad0      	ldrb	r0, [r2, #11]
        bytesProcessed += nextIndex;
 800bb2e:	b2ff      	uxtb	r7, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d123      	bne.n	800bb7c <RegionKR920LinkAdrReq+0x118>
            status &= 0xFE; // Channel mask KO
 800bb34:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0a3      	beq.n	800ba82 <RegionKR920LinkAdrReq+0x1e>
                        status &= 0xFE; // Channel mask KO
 800bb3a:	2606      	movs	r6, #6
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800bb3c:	4a19      	ldr	r2, [pc, #100]	; (800bba4 <RegionKR920LinkAdrReq+0x140>)
 800bb3e:	2507      	movs	r5, #7
 800bb40:	6812      	ldr	r2, [r2, #0]
                        status &= 0xFE; // Channel mask KO
 800bb42:	46b4      	mov	ip, r6
 800bb44:	9201      	str	r2, [sp, #4]
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800bb46:	2200      	movs	r2, #0
 800bb48:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800bb4a:	2806      	cmp	r0, #6
 800bb4c:	d11f      	bne.n	800bb8e <RegionKR920LinkAdrReq+0x12a>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800bb4e:	9901      	ldr	r1, [sp, #4]
 800bb50:	680e      	ldr	r6, [r1, #0]
 800bb52:	2e00      	cmp	r6, #0
 800bb54:	d005      	beq.n	800bb62 <RegionKR920LinkAdrReq+0xfe>
                        chMask |= 1 << i;
 800bb56:	2601      	movs	r6, #1
 800bb58:	4096      	lsls	r6, r2
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	4333      	orrs	r3, r6
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	9102      	str	r1, [sp, #8]
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 800bb62:	9901      	ldr	r1, [sp, #4]
 800bb64:	3201      	adds	r2, #1
 800bb66:	310c      	adds	r1, #12
 800bb68:	9101      	str	r1, [sp, #4]
 800bb6a:	2a10      	cmp	r2, #16
 800bb6c:	d1ed      	bne.n	800bb4a <RegionKR920LinkAdrReq+0xe6>
 800bb6e:	9a02      	ldr	r2, [sp, #8]
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	d100      	bne.n	800bb76 <RegionKR920LinkAdrReq+0x112>
 800bb74:	e785      	b.n	800ba82 <RegionKR920LinkAdrReq+0x1e>
 800bb76:	aa06      	add	r2, sp, #24
 800bb78:	80d3      	strh	r3, [r2, #6]
 800bb7a:	e782      	b.n	800ba82 <RegionKR920LinkAdrReq+0x1e>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800bb7c:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 800bb7e:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800bb80:	2a04      	cmp	r2, #4
 800bb82:	d800      	bhi.n	800bb86 <RegionKR920LinkAdrReq+0x122>
 800bb84:	e77d      	b.n	800ba82 <RegionKR920LinkAdrReq+0x1e>
 800bb86:	42a8      	cmp	r0, r5
 800bb88:	d000      	beq.n	800bb8c <RegionKR920LinkAdrReq+0x128>
 800bb8a:	e77a      	b.n	800ba82 <RegionKR920LinkAdrReq+0x1e>
 800bb8c:	e7d5      	b.n	800bb3a <RegionKR920LinkAdrReq+0xd6>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800bb8e:	001e      	movs	r6, r3
 800bb90:	2101      	movs	r1, #1
 800bb92:	4116      	asrs	r6, r2
 800bb94:	420e      	tst	r6, r1
 800bb96:	d0e4      	beq.n	800bb62 <RegionKR920LinkAdrReq+0xfe>
 800bb98:	9901      	ldr	r1, [sp, #4]
 800bb9a:	6809      	ldr	r1, [r1, #0]
 800bb9c:	2900      	cmp	r1, #0
 800bb9e:	d1e0      	bne.n	800bb62 <RegionKR920LinkAdrReq+0xfe>
                        status &= 0xFE; // Channel mask KO
 800bba0:	4665      	mov	r5, ip
 800bba2:	e7de      	b.n	800bb62 <RegionKR920LinkAdrReq+0xfe>
 800bba4:	20000f98 	.word	0x20000f98

0800bba8 <RegionKR920RxParamSetupReq>:

uint8_t RegionKR920RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	0005      	movs	r5, r0
    uint8_t status = 0x07;
#if defined( REGION_KR920 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800bbac:	6840      	ldr	r0, [r0, #4]
 800bbae:	f7ff fce5 	bl	800b57c <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800bbb2:	1e43      	subs	r3, r0, #1
 800bbb4:	4198      	sbcs	r0, r3
 800bbb6:	0004      	movs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE ) == false )
 800bbb8:	2000      	movs	r0, #0
 800bbba:	2205      	movs	r2, #5
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800bbc0:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE ) == false )
 800bbc2:	f7ff f985 	bl	800aed0 <RegionCommonValueInRange>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d101      	bne.n	800bbce <RegionKR920RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800bbca:	2302      	movs	r3, #2
 800bbcc:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, KR920_MIN_RX1_DR_OFFSET, KR920_MAX_RX1_DR_OFFSET ) == false )
 800bbce:	2001      	movs	r0, #1
 800bbd0:	2205      	movs	r2, #5
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	5628      	ldrsb	r0, [r5, r0]
 800bbd6:	f7ff f97b 	bl	800aed0 <RegionCommonValueInRange>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d101      	bne.n	800bbe2 <RegionKR920RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800bbde:	2304      	movs	r3, #4
 800bbe0:	439c      	bics	r4, r3
    }

#endif /* REGION_KR920 */
    return status;
}
 800bbe2:	0020      	movs	r0, r4
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}

0800bbe6 <RegionKR920TxParamSetupReq>:
}

int8_t RegionKR920TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
 800bbe6:	2001      	movs	r0, #1
}
 800bbe8:	4240      	negs	r0, r0
 800bbea:	4770      	bx	lr

0800bbec <RegionKR920DlChannelReq>:

int8_t RegionKR920DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800bbec:	b510      	push	{r4, lr}
 800bbee:	0004      	movs	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_KR920 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800bbf0:	6840      	ldr	r0, [r0, #4]
 800bbf2:	f7ff fcc3 	bl	800b57c <VerifyRfFreq>
    {
        status &= 0xFE;
 800bbf6:	0003      	movs	r3, r0
 800bbf8:	1e5a      	subs	r2, r3, #1
 800bbfa:	4193      	sbcs	r3, r2
 800bbfc:	220c      	movs	r2, #12
 800bbfe:	7821      	ldrb	r1, [r4, #0]
 800bc00:	3302      	adds	r3, #2
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800bc02:	4351      	muls	r1, r2
 800bc04:	4a08      	ldr	r2, [pc, #32]	; (800bc28 <RegionKR920DlChannelReq+0x3c>)
 800bc06:	6812      	ldr	r2, [r2, #0]
 800bc08:	1852      	adds	r2, r2, r1
 800bc0a:	6811      	ldr	r1, [r2, #0]
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d103      	bne.n	800bc18 <RegionKR920DlChannelReq+0x2c>
    {
        status &= 0xFD;
 800bc10:	2202      	movs	r2, #2
 800bc12:	4393      	bics	r3, r2
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_KR920 */
    return status;
 800bc14:	b258      	sxtb	r0, r3
}
 800bc16:	bd10      	pop	{r4, pc}
    if( status == 0x03 )
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d102      	bne.n	800bc22 <RegionKR920DlChannelReq+0x36>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800bc1c:	6861      	ldr	r1, [r4, #4]
 800bc1e:	6051      	str	r1, [r2, #4]
 800bc20:	e7f8      	b.n	800bc14 <RegionKR920DlChannelReq+0x28>
 800bc22:	2302      	movs	r3, #2
 800bc24:	e7f6      	b.n	800bc14 <RegionKR920DlChannelReq+0x28>
 800bc26:	46c0      	nop			; (mov r8, r8)
 800bc28:	20000f98 	.word	0x20000f98

0800bc2c <RegionKR920AlternateDr>:
#if defined( REGION_KR920 )
    return currentDr;
#else
    return -1;
#endif /* REGION_KR920 */
}
 800bc2c:	4770      	bx	lr
	...

0800bc30 <RegionKR920NextChannel>:

LoRaMacStatus_t RegionKR920NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800bc30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_KR920 )
    uint8_t channelNext = 0;
    uint8_t nbEnabledChannels = 0;
 800bc32:	2500      	movs	r5, #0
{
 800bc34:	b09b      	sub	sp, #108	; 0x6c
 800bc36:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800bc38:	ab07      	add	r3, sp, #28
 800bc3a:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800bc3c:	230d      	movs	r3, #13
{
 800bc3e:	9203      	str	r2, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800bc40:	aa04      	add	r2, sp, #16
 800bc42:	189b      	adds	r3, r3, r2
{
 800bc44:	9104      	str	r1, [sp, #16]
    uint8_t enabledChannels[KR920_MAX_NB_CHANNELS] = { 0 };
 800bc46:	220c      	movs	r2, #12
 800bc48:	0029      	movs	r1, r5
{
 800bc4a:	0004      	movs	r4, r0
    uint8_t enabledChannels[KR920_MAX_NB_CHANNELS] = { 0 };
 800bc4c:	a809      	add	r0, sp, #36	; 0x24
    uint8_t nbRestrictedChannels = 0;
 800bc4e:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[KR920_MAX_NB_CHANNELS] = { 0 };
 800bc50:	9508      	str	r5, [sp, #32]
 800bc52:	f002 faa0 	bl	800e196 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = KR920_JOIN_CHANNELS;
 800bc56:	230e      	movs	r3, #14
 800bc58:	2607      	movs	r6, #7

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800bc5a:	4f40      	ldr	r7, [pc, #256]	; (800bd5c <RegionKR920NextChannel+0x12c>)
    uint16_t joinChannels = KR920_JOIN_CHANNELS;
 800bc5c:	aa04      	add	r2, sp, #16
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800bc5e:	6838      	ldr	r0, [r7, #0]
    uint16_t joinChannels = KR920_JOIN_CHANNELS;
 800bc60:	189b      	adds	r3, r3, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800bc62:	0029      	movs	r1, r5
 800bc64:	2201      	movs	r2, #1
 800bc66:	30c0      	adds	r0, #192	; 0xc0
    uint16_t joinChannels = KR920_JOIN_CHANNELS;
 800bc68:	801e      	strh	r6, [r3, #0]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800bc6a:	f7ff f94f 	bl	800af0c <RegionCommonCountChannels>
 800bc6e:	42a8      	cmp	r0, r5
 800bc70:	d104      	bne.n	800bc7c <RegionKR920NextChannel+0x4c>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	33c0      	adds	r3, #192	; 0xc0
 800bc76:	881a      	ldrh	r2, [r3, #0]
 800bc78:	4316      	orrs	r6, r2
 800bc7a:	801e      	strh	r6, [r3, #0]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800bc7c:	7a63      	ldrb	r3, [r4, #9]
 800bc7e:	ad0c      	add	r5, sp, #48	; 0x30
 800bc80:	702b      	strb	r3, [r5, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800bc82:	2308      	movs	r3, #8
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bc84:	4e35      	ldr	r6, [pc, #212]	; (800bd5c <RegionKR920NextChannel+0x12c>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800bc86:	56e3      	ldrsb	r3, [r4, r3]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
    countChannelsParams.MaxNbChannels = KR920_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = &joinChannels;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bc88:	af12      	add	r7, sp, #72	; 0x48
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800bc8a:	706b      	strb	r3, [r5, #1]
 800bc8c:	469c      	mov	ip, r3
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bc8e:	6833      	ldr	r3, [r6, #0]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800bc90:	930e      	str	r3, [sp, #56]	; 0x38
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bc92:	001a      	movs	r2, r3
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800bc94:	6873      	ldr	r3, [r6, #4]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bc96:	32c0      	adds	r2, #192	; 0xc0
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800bc98:	930f      	str	r3, [sp, #60]	; 0x3c
    countChannelsParams.MaxNbChannels = KR920_MAX_NB_CHANNELS;
 800bc9a:	2310      	movs	r3, #16
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bc9c:	920d      	str	r2, [sp, #52]	; 0x34
    countChannelsParams.MaxNbChannels = KR920_MAX_NB_CHANNELS;
 800bc9e:	822b      	strh	r3, [r5, #16]
    countChannelsParams.JoinChannels = &joinChannels;
 800bca0:	aa04      	add	r2, sp, #16
 800bca2:	3b02      	subs	r3, #2
 800bca4:	189b      	adds	r3, r3, r2
 800bca6:	9311      	str	r3, [sp, #68]	; 0x44
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bca8:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = KR920_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bcaa:	0022      	movs	r2, r4
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bcac:	9312      	str	r3, [sp, #72]	; 0x48
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800bcae:	6863      	ldr	r3, [r4, #4]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bcb0:	320c      	adds	r2, #12
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800bcb2:	9313      	str	r3, [sp, #76]	; 0x4c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800bcb4:	7aa3      	ldrb	r3, [r4, #10]
 800bcb6:	723b      	strb	r3, [r7, #8]
    identifyChannelsParam.MaxBands = KR920_MAX_NB_BANDS;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	727b      	strb	r3, [r7, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bcbc:	ab15      	add	r3, sp, #84	; 0x54
 800bcbe:	ca03      	ldmia	r2!, {r0, r1}
 800bcc0:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800bcc2:	7d23      	ldrb	r3, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800bcc4:	4660      	mov	r0, ip
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800bcc6:	753b      	strb	r3, [r7, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800bcc8:	8ae1      	ldrh	r1, [r4, #22]
 800bcca:	f7ff fc3b 	bl	800b544 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	aa04      	add	r2, sp, #16
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	230d      	movs	r3, #13
 800bcd6:	ac07      	add	r4, sp, #28
 800bcd8:	189b      	adds	r3, r3, r2
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800bcda:	9018      	str	r0, [sp, #96]	; 0x60
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	0038      	movs	r0, r7
 800bce0:	0023      	movs	r3, r4
 800bce2:	9905      	ldr	r1, [sp, #20]
 800bce4:	aa08      	add	r2, sp, #32
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800bce6:	9519      	str	r5, [sp, #100]	; 0x64
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800bce8:	f7ff fb80 	bl	800b3ec <RegionCommonIdentifyChannels>
 800bcec:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800bcee:	d12c      	bne.n	800bd4a <RegionKR920NextChannel+0x11a>
    {
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 800bcf0:	7821      	ldrb	r1, [r4, #0]
 800bcf2:	2610      	movs	r6, #16
 800bcf4:	3901      	subs	r1, #1
 800bcf6:	f000 f941 	bl	800bf7c <randr>
 800bcfa:	b2c4      	uxtb	r4, r0
        {
            channelNext = enabledChannels[j];
 800bcfc:	ab08      	add	r3, sp, #32
 800bcfe:	5d1b      	ldrb	r3, [r3, r4]
            j = ( j + 1 ) % nbEnabledChannels;
 800bd00:	1c60      	adds	r0, r4, #1
            channelNext = enabledChannels[j];
 800bd02:	9303      	str	r3, [sp, #12]
            j = ( j + 1 ) % nbEnabledChannels;
 800bd04:	ab07      	add	r3, sp, #28
 800bd06:	7819      	ldrb	r1, [r3, #0]
 800bd08:	f7f4 fb9e 	bl	8000448 <__aeabi_idivmod>

            // Perform carrier sense for KR920_CARRIER_SENSE_TIME
            // If the channel is free, we can stop the LBT mechanism
            if( Radio.IsChannelFree( RegionNvmGroup2->Channels[channelNext].Frequency, KR920_LBT_RX_BANDWIDTH, KR920_RSSI_FREE_TH, KR920_CARRIER_SENSE_TIME ) == true )
 800bd0c:	4b13      	ldr	r3, [pc, #76]	; (800bd5c <RegionKR920NextChannel+0x12c>)
 800bd0e:	9a03      	ldr	r2, [sp, #12]
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	230c      	movs	r3, #12
 800bd14:	4353      	muls	r3, r2
 800bd16:	469c      	mov	ip, r3
 800bd18:	4667      	mov	r7, ip
 800bd1a:	2241      	movs	r2, #65	; 0x41
 800bd1c:	5838      	ldr	r0, [r7, r0]
 800bd1e:	4f10      	ldr	r7, [pc, #64]	; (800bd60 <RegionKR920NextChannel+0x130>)
            j = ( j + 1 ) % nbEnabledChannels;
 800bd20:	b2cc      	uxtb	r4, r1
            if( Radio.IsChannelFree( RegionNvmGroup2->Channels[channelNext].Frequency, KR920_LBT_RX_BANDWIDTH, KR920_RSSI_FREE_TH, KR920_CARRIER_SENSE_TIME ) == true )
 800bd22:	693f      	ldr	r7, [r7, #16]
 800bd24:	2306      	movs	r3, #6
 800bd26:	490f      	ldr	r1, [pc, #60]	; (800bd64 <RegionKR920NextChannel+0x134>)
 800bd28:	4252      	negs	r2, r2
 800bd2a:	9705      	str	r7, [sp, #20]
 800bd2c:	47b8      	blx	r7
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d005      	beq.n	800bd3e <RegionKR920NextChannel+0x10e>
            {
                // Free channel found
                *channel = channelNext;
 800bd32:	9b04      	ldr	r3, [sp, #16]
 800bd34:	9a03      	ldr	r2, [sp, #12]
 800bd36:	701a      	strb	r2, [r3, #0]
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_KR920 */
}
 800bd38:	0028      	movs	r0, r5
 800bd3a:	b01b      	add	sp, #108	; 0x6c
 800bd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 800bd3e:	3e01      	subs	r6, #1
 800bd40:	b2f6      	uxtb	r6, r6
 800bd42:	2e00      	cmp	r6, #0
 800bd44:	d1da      	bne.n	800bcfc <RegionKR920NextChannel+0xcc>
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 800bd46:	250d      	movs	r5, #13
 800bd48:	e7f6      	b.n	800bd38 <RegionKR920NextChannel+0x108>
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800bd4a:	280c      	cmp	r0, #12
 800bd4c:	d1f4      	bne.n	800bd38 <RegionKR920NextChannel+0x108>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800bd4e:	2207      	movs	r2, #7
 800bd50:	6833      	ldr	r3, [r6, #0]
 800bd52:	33c0      	adds	r3, #192	; 0xc0
 800bd54:	8819      	ldrh	r1, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	801a      	strh	r2, [r3, #0]
 800bd5a:	e7ed      	b.n	800bd38 <RegionKR920NextChannel+0x108>
 800bd5c:	20000f98 	.word	0x20000f98
 800bd60:	0800e890 	.word	0x0800e890
 800bd64:	00030d40 	.word	0x00030d40

0800bd68 <RegionKR920ChannelAdd>:

LoRaMacStatus_t RegionKR920ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800bd68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if defined( REGION_KR920 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800bd6a:	7906      	ldrb	r6, [r0, #4]
{
 800bd6c:	0004      	movs	r4, r0

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 800bd6e:	2e02      	cmp	r6, #2
 800bd70:	d801      	bhi.n	800bd76 <RegionKR920ChannelAdd+0xe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800bd72:	2006      	movs	r0, #6
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_KR920 */
}
 800bd74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bd76:	2003      	movs	r0, #3
    if( id >= KR920_MAX_NB_CHANNELS )
 800bd78:	2e0f      	cmp	r6, #15
 800bd7a:	d8fb      	bhi.n	800bd74 <RegionKR920ChannelAdd+0xc>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 800bd7c:	6823      	ldr	r3, [r4, #0]
 800bd7e:	2205      	movs	r2, #5
 800bd80:	7a18      	ldrb	r0, [r3, #8]
 800bd82:	2100      	movs	r1, #0
 800bd84:	0700      	lsls	r0, r0, #28
 800bd86:	1700      	asrs	r0, r0, #28
 800bd88:	f7ff f8a2 	bl	800aed0 <RegionCommonValueInRange>
 800bd8c:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 800bd8e:	2008      	movs	r0, #8
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	2205      	movs	r2, #5
 800bd94:	5618      	ldrsb	r0, [r3, r0]
 800bd96:	2100      	movs	r1, #0
 800bd98:	1100      	asrs	r0, r0, #4
 800bd9a:	f7ff f899 	bl	800aed0 <RegionCommonValueInRange>
        drInvalid = true;
 800bd9e:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d002      	beq.n	800bdaa <RegionKR920ChannelAdd+0x42>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 800bda4:	427b      	negs	r3, r7
 800bda6:	415f      	adcs	r7, r3
 800bda8:	b2fd      	uxtb	r5, r7
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800bdaa:	6821      	ldr	r1, [r4, #0]
 800bdac:	7a0b      	ldrb	r3, [r1, #8]
 800bdae:	071a      	lsls	r2, r3, #28
 800bdb0:	b25b      	sxtb	r3, r3
 800bdb2:	1712      	asrs	r2, r2, #28
 800bdb4:	111b      	asrs	r3, r3, #4
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	dd00      	ble.n	800bdbc <RegionKR920ChannelAdd+0x54>
        drInvalid = true;
 800bdba:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800bdbc:	6808      	ldr	r0, [r1, #0]
 800bdbe:	f7ff fbdd 	bl	800b57c <VerifyRfFreq>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d103      	bne.n	800bdce <RegionKR920ChannelAdd+0x66>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800bdc6:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800bdc8:	2d00      	cmp	r5, #0
 800bdca:	d0d3      	beq.n	800bd74 <RegionKR920ChannelAdd+0xc>
 800bdcc:	e7d1      	b.n	800bd72 <RegionKR920ChannelAdd+0xa>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800bdce:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800bdd0:	2d00      	cmp	r5, #0
 800bdd2:	d1cf      	bne.n	800bd74 <RegionKR920ChannelAdd+0xc>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800bdd4:	220c      	movs	r2, #12
 800bdd6:	0013      	movs	r3, r2
 800bdd8:	4373      	muls	r3, r6
 800bdda:	4f0a      	ldr	r7, [pc, #40]	; (800be04 <RegionKR920ChannelAdd+0x9c>)
 800bddc:	9301      	str	r3, [sp, #4]
 800bdde:	9901      	ldr	r1, [sp, #4]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	1858      	adds	r0, r3, r1
 800bde4:	6821      	ldr	r1, [r4, #0]
 800bde6:	f000 f8e5 	bl	800bfb4 <memcpy1>
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800bdea:	2101      	movs	r1, #1
 800bdec:	40b1      	lsls	r1, r6
    RegionNvmGroup2->Channels[id].Band = 0;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	9a01      	ldr	r2, [sp, #4]
    return LORAMAC_STATUS_OK;
 800bdf2:	0028      	movs	r0, r5
    RegionNvmGroup2->Channels[id].Band = 0;
 800bdf4:	189a      	adds	r2, r3, r2
 800bdf6:	7255      	strb	r5, [r2, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800bdf8:	33c0      	adds	r3, #192	; 0xc0
 800bdfa:	881a      	ldrh	r2, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800be00:	e7b8      	b.n	800bd74 <RegionKR920ChannelAdd+0xc>
 800be02:	46c0      	nop			; (mov r8, r8)
 800be04:	20000f98 	.word	0x20000f98

0800be08 <RegionKR920ChannelsRemove>:

bool RegionKR920ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800be08:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_KR920 )
    uint8_t id = channelRemove->ChannelId;
 800be0a:	7805      	ldrb	r5, [r0, #0]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800be0c:	2100      	movs	r1, #0
    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 800be0e:	2d02      	cmp	r5, #2
 800be10:	d90e      	bls.n	800be30 <RegionKR920ChannelsRemove+0x28>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800be12:	220c      	movs	r2, #12
 800be14:	0010      	movs	r0, r2
 800be16:	4b07      	ldr	r3, [pc, #28]	; (800be34 <RegionKR920ChannelsRemove+0x2c>)
 800be18:	4368      	muls	r0, r5
 800be1a:	681c      	ldr	r4, [r3, #0]
 800be1c:	1820      	adds	r0, r4, r0
 800be1e:	f002 f9ba 	bl	800e196 <memset>

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, KR920_MAX_NB_CHANNELS );
 800be22:	0020      	movs	r0, r4
 800be24:	0029      	movs	r1, r5
 800be26:	2210      	movs	r2, #16
 800be28:	30c0      	adds	r0, #192	; 0xc0
 800be2a:	f7ff f85b 	bl	800aee4 <RegionCommonChanDisable>
 800be2e:	0001      	movs	r1, r0
#else
    return false;
#endif /* REGION_KR920 */
}
 800be30:	0008      	movs	r0, r1
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	20000f98 	.word	0x20000f98

0800be38 <RegionKR920ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800be38:	2350      	movs	r3, #80	; 0x50
{
 800be3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be3c:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800be3e:	ac03      	add	r4, sp, #12
 800be40:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800be42:	7903      	ldrb	r3, [r0, #4]
{
 800be44:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 800be46:	2b10      	cmp	r3, #16
 800be48:	d12d      	bne.n	800bea6 <RegionKR920ApplyCFList+0x6e>
    if( applyCFList->Payload[15] != 0 )
 800be4a:	6803      	ldr	r3, [r0, #0]
 800be4c:	7bde      	ldrb	r6, [r3, #15]
 800be4e:	2e00      	cmp	r6, #0
 800be50:	d129      	bne.n	800bea6 <RegionKR920ApplyCFList+0x6e>
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800be52:	2503      	movs	r5, #3
        if( chanIdx < ( KR920_NUMB_CHANNELS_CF_LIST + KR920_NUMB_DEFAULT_CHANNELS ) )
 800be54:	2d07      	cmp	r5, #7
 800be56:	d817      	bhi.n	800be88 <RegionKR920ApplyCFList+0x50>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	5d91      	ldrb	r1, [r2, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800be5c:	1990      	adds	r0, r2, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800be5e:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800be60:	7842      	ldrb	r2, [r0, #1]
 800be62:	0212      	lsls	r2, r2, #8
 800be64:	4311      	orrs	r1, r2
            newChannel.Frequency *= 100;
 800be66:	2264      	movs	r2, #100	; 0x64
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800be68:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800be6a:	7883      	ldrb	r3, [r0, #2]
 800be6c:	041b      	lsls	r3, r3, #16
 800be6e:	430b      	orrs	r3, r1
            newChannel.Frequency *= 100;
 800be70:	4353      	muls	r3, r2
            newChannel.Rx1Frequency = 0;
 800be72:	2200      	movs	r2, #0
            newChannel.Frequency *= 100;
 800be74:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 800be76:	6062      	str	r2, [r4, #4]
        if( newChannel.Frequency != 0 )
 800be78:	4293      	cmp	r3, r2
 800be7a:	d10a      	bne.n	800be92 <RegionKR920ApplyCFList+0x5a>
            channelRemove.ChannelId = chanIdx;
 800be7c:	466b      	mov	r3, sp
            RegionKR920ChannelsRemove( &channelRemove );
 800be7e:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800be80:	701d      	strb	r5, [r3, #0]
            RegionKR920ChannelsRemove( &channelRemove );
 800be82:	f7ff ffc1 	bl	800be08 <RegionKR920ChannelsRemove>
 800be86:	e009      	b.n	800be9c <RegionKR920ApplyCFList+0x64>
            newChannel.Frequency = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800be8c:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800be8e:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800be90:	e7f4      	b.n	800be7c <RegionKR920ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800be92:	a801      	add	r0, sp, #4
 800be94:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800be96:	7105      	strb	r5, [r0, #4]
            RegionKR920ChannelAdd( &channelAdd );
 800be98:	f7ff ff66 	bl	800bd68 <RegionKR920ChannelAdd>
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800be9c:	3501      	adds	r5, #1
 800be9e:	b2ed      	uxtb	r5, r5
 800bea0:	3603      	adds	r6, #3
 800bea2:	2d10      	cmp	r5, #16
 800bea4:	d1d6      	bne.n	800be54 <RegionKR920ApplyCFList+0x1c>
}
 800bea6:	b007      	add	sp, #28
 800bea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800beac <RegionKR920NewChannelReq>:
{
 800beac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800beae:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800beb0:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
 800beb2:	6811      	ldr	r1, [r2, #0]
 800beb4:	2900      	cmp	r1, #0
 800beb6:	d10a      	bne.n	800bece <RegionKR920NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800beb8:	a801      	add	r0, sp, #4
 800beba:	7003      	strb	r3, [r0, #0]
        if( RegionKR920ChannelsRemove( &channelRemove ) == false )
 800bebc:	f7ff ffa4 	bl	800be08 <RegionKR920ChannelsRemove>
    uint8_t status = 0x03;
 800bec0:	2303      	movs	r3, #3
        if( RegionKR920ChannelsRemove( &channelRemove ) == false )
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d100      	bne.n	800bec8 <RegionKR920NewChannelReq+0x1c>
            status &= 0xFC;
 800bec6:	2300      	movs	r3, #0
    return status;
 800bec8:	b258      	sxtb	r0, r3
}
 800beca:	b005      	add	sp, #20
 800becc:	bd00      	pop	{pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800bece:	a802      	add	r0, sp, #8
 800bed0:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800bed2:	7103      	strb	r3, [r0, #4]
        switch( RegionKR920ChannelAdd( &channelAdd ) )
 800bed4:	f7ff ff48 	bl	800bd68 <RegionKR920ChannelAdd>
 800bed8:	2806      	cmp	r0, #6
 800beda:	d8f4      	bhi.n	800bec6 <RegionKR920NewChannelReq+0x1a>
 800bedc:	4b01      	ldr	r3, [pc, #4]	; (800bee4 <RegionKR920NewChannelReq+0x38>)
 800bede:	3350      	adds	r3, #80	; 0x50
 800bee0:	5c1b      	ldrb	r3, [r3, r0]
 800bee2:	e7f1      	b.n	800bec8 <RegionKR920NewChannelReq+0x1c>
 800bee4:	0800e74c 	.word	0x0800e74c

0800bee8 <RegionKR920SetContinuousWave>:

void RegionKR920SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800bee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if defined( REGION_KR920 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800beea:	250c      	movs	r5, #12
 800beec:	7803      	ldrb	r3, [r0, #0]
 800beee:	4e19      	ldr	r6, [pc, #100]	; (800bf54 <RegionKR920SetContinuousWave+0x6c>)
 800bef0:	436b      	muls	r3, r5
 800bef2:	6832      	ldr	r2, [r6, #0]
{
 800bef4:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800bef6:	18d3      	adds	r3, r2, r3
 800bef8:	7a5a      	ldrb	r2, [r3, #9]
 800befa:	2318      	movs	r3, #24
 800befc:	2102      	movs	r1, #2
 800befe:	2002      	movs	r0, #2
 800bf00:	4353      	muls	r3, r2
 800bf02:	6872      	ldr	r2, [r6, #4]
 800bf04:	5620      	ldrsb	r0, [r4, r0]
 800bf06:	18d3      	adds	r3, r2, r3
 800bf08:	5659      	ldrsb	r1, [r3, r1]
 800bf0a:	f7ff face 	bl	800b4aa <RegionCommonLimitTxPower>
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[continuousWave->Channel].Frequency );
 800bf0e:	7822      	ldrb	r2, [r4, #0]
 800bf10:	6833      	ldr	r3, [r6, #0]
 800bf12:	4355      	muls	r5, r2
 800bf14:	58ee      	ldr	r6, [r5, r3]
    if( freq >= 922100000 )
 800bf16:	4b10      	ldr	r3, [pc, #64]	; (800bf58 <RegionKR920SetContinuousWave+0x70>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800bf18:	9001      	str	r0, [sp, #4]
    return KR920_DEFAULT_MAX_EIRP_LOW;
 800bf1a:	200a      	movs	r0, #10
    if( freq >= 922100000 )
 800bf1c:	429e      	cmp	r6, r3
 800bf1e:	d900      	bls.n	800bf22 <RegionKR920SetContinuousWave+0x3a>
        return KR920_DEFAULT_MAX_EIRP_HIGH;
 800bf20:	3004      	adds	r0, #4
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[continuousWave->Channel].Frequency );
 800bf22:	f7f4 fe87 	bl	8000c34 <__aeabi_i2f>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;

    // Take the minimum between the maxEIRP and continuousWave->MaxEirp.
    // The value of continuousWave->MaxEirp could have changed during runtime, e.g. due to a MAC command.
    maxEIRP = MIN( continuousWave->MaxEirp, maxEIRP );
 800bf26:	6867      	ldr	r7, [r4, #4]
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[continuousWave->Channel].Frequency );
 800bf28:	1c05      	adds	r5, r0, #0
    maxEIRP = MIN( continuousWave->MaxEirp, maxEIRP );
 800bf2a:	1c01      	adds	r1, r0, #0
 800bf2c:	1c38      	adds	r0, r7, #0
 800bf2e:	f7f4 fae1 	bl	80004f4 <__aeabi_fcmplt>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d000      	beq.n	800bf38 <RegionKR920SetContinuousWave+0x50>
 800bf36:	1c3d      	adds	r5, r7, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, continuousWave->AntennaGain );
 800bf38:	1c29      	adds	r1, r5, #0
 800bf3a:	68a2      	ldr	r2, [r4, #8]
 800bf3c:	9801      	ldr	r0, [sp, #4]
 800bf3e:	f7ff f9e3 	bl	800b308 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800bf42:	4b06      	ldr	r3, [pc, #24]	; (800bf5c <RegionKR920SetContinuousWave+0x74>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, continuousWave->AntennaGain );
 800bf44:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800bf46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf48:	0030      	movs	r0, r6
 800bf4a:	89a2      	ldrh	r2, [r4, #12]
 800bf4c:	9301      	str	r3, [sp, #4]
 800bf4e:	4798      	blx	r3
#endif /* REGION_KR920 */
}
 800bf50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bf52:	46c0      	nop			; (mov r8, r8)
 800bf54:	20000f98 	.word	0x20000f98
 800bf58:	36f6211f 	.word	0x36f6211f
 800bf5c:	0800e890 	.word	0x0800e890

0800bf60 <RegionKR920ApplyDrOffset>:

uint8_t RegionKR920ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_KR920 )
    int8_t datarate = dr - drOffset;
 800bf60:	1a8a      	subs	r2, r1, r2
 800bf62:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800bf64:	1c10      	adds	r0, r2, #0
 800bf66:	2a00      	cmp	r2, #0
 800bf68:	da00      	bge.n	800bf6c <RegionKR920ApplyDrOffset+0xc>
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	b2c0      	uxtb	r0, r0
#else
    return 0;
#endif /* REGION_KR920 */
}
 800bf6e:	4770      	bx	lr

0800bf70 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800bf70:	4b01      	ldr	r3, [pc, #4]	; (800bf78 <srand1+0x8>)
 800bf72:	6018      	str	r0, [r3, #0]
}
 800bf74:	4770      	bx	lr
 800bf76:	46c0      	nop			; (mov r8, r8)
 800bf78:	200000e0 	.word	0x200000e0

0800bf7c <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800bf7c:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800bf7e:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800bf80:	681a      	ldr	r2, [r3, #0]
{
 800bf82:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800bf84:	4808      	ldr	r0, [pc, #32]	; (800bfa8 <randr+0x2c>)
{
 800bf86:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800bf88:	4350      	muls	r0, r2
 800bf8a:	4a08      	ldr	r2, [pc, #32]	; (800bfac <randr+0x30>)
 800bf8c:	4908      	ldr	r1, [pc, #32]	; (800bfb0 <randr+0x34>)
 800bf8e:	1880      	adds	r0, r0, r2
 800bf90:	6018      	str	r0, [r3, #0]
 800bf92:	f7f4 f96f 	bl	8000274 <__aeabi_uidivmod>
 800bf96:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800bf98:	1b61      	subs	r1, r4, r5
 800bf9a:	3101      	adds	r1, #1
 800bf9c:	f7f4 fa54 	bl	8000448 <__aeabi_idivmod>
 800bfa0:	1948      	adds	r0, r1, r5
}
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	200000e0 	.word	0x200000e0
 800bfa8:	41c64e6d 	.word	0x41c64e6d
 800bfac:	00003039 	.word	0x00003039
 800bfb0:	7fffffff 	.word	0x7fffffff

0800bfb4 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800bfb4:	2300      	movs	r3, #0
{
 800bfb6:	b510      	push	{r4, lr}
    while( size-- )
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d100      	bne.n	800bfbe <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800bfbc:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800bfbe:	5ccc      	ldrb	r4, [r1, r3]
 800bfc0:	54c4      	strb	r4, [r0, r3]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	e7f8      	b.n	800bfb8 <memcpy1+0x4>

0800bfc6 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800bfc6:	1e53      	subs	r3, r2, #1
 800bfc8:	18c0      	adds	r0, r0, r3
    while( size-- )
 800bfca:	2300      	movs	r3, #0
{
 800bfcc:	b530      	push	{r4, r5, lr}
    while( size-- )
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d100      	bne.n	800bfd4 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800bfd2:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800bfd4:	5ccd      	ldrb	r5, [r1, r3]
 800bfd6:	425c      	negs	r4, r3
 800bfd8:	5505      	strb	r5, [r0, r4]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	e7f7      	b.n	800bfce <memcpyr+0x8>

0800bfde <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800bfde:	b510      	push	{r4, lr}
    while( size-- )
    {
        *dst++ = value;
 800bfe0:	f002 f8d9 	bl	800e196 <memset>
    }
}
 800bfe4:	bd10      	pop	{r4, pc}
	...

0800bfe8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 800bfe8:	0002      	movs	r2, r0
 800bfea:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d008      	beq.n	800c002 <Crc32+0x1a>
    uint32_t crc = 0xFFFFFFFF;
 800bff0:	2301      	movs	r3, #1
 800bff2:	2500      	movs	r5, #0
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
 800bff4:	2608      	movs	r6, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800bff6:	2701      	movs	r7, #1
    uint32_t crc = 0xFFFFFFFF;
 800bff8:	425b      	negs	r3, r3
    for( uint16_t i = 0; i < length; ++i )
 800bffa:	b2ac      	uxth	r4, r5
 800bffc:	428c      	cmp	r4, r1
 800bffe:	d301      	bcc.n	800c004 <Crc32+0x1c>
        }
    }

    return ~crc;
 800c000:	43d8      	mvns	r0, r3
}
 800c002:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 800c004:	5d54      	ldrb	r4, [r2, r5]
 800c006:	4063      	eors	r3, r4
 800c008:	0034      	movs	r4, r6
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c00a:	0858      	lsrs	r0, r3, #1
 800c00c:	4684      	mov	ip, r0
 800c00e:	403b      	ands	r3, r7
 800c010:	4805      	ldr	r0, [pc, #20]	; (800c028 <Crc32+0x40>)
 800c012:	425b      	negs	r3, r3
 800c014:	4003      	ands	r3, r0
 800c016:	4660      	mov	r0, ip
        for( uint16_t i = 0; i < 8; i++ )
 800c018:	3c01      	subs	r4, #1
 800c01a:	b2a4      	uxth	r4, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c01c:	4043      	eors	r3, r0
        for( uint16_t i = 0; i < 8; i++ )
 800c01e:	2c00      	cmp	r4, #0
 800c020:	d1f3      	bne.n	800c00a <Crc32+0x22>
    for( uint16_t i = 0; i < length; ++i )
 800c022:	3501      	adds	r5, #1
 800c024:	e7e9      	b.n	800bffa <Crc32+0x12>
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	edb88320 	.word	0xedb88320

0800c02c <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 800c02c:	4b01      	ldr	r3, [pc, #4]	; (800c034 <SX1276GetStatus+0x8>)
 800c02e:	7918      	ldrb	r0, [r3, #4]
}
 800c030:	4770      	bx	lr
 800c032:	46c0      	nop			; (mov r8, r8)
 800c034:	20000fa0 	.word	0x20000fa0

0800c038 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c038:	4a09      	ldr	r2, [pc, #36]	; (800c060 <GetFskBandwidthRegValue+0x28>)
{
 800c03a:	2300      	movs	r3, #0
 800c03c:	0011      	movs	r1, r2
 800c03e:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800c040:	6814      	ldr	r4, [r2, #0]
 800c042:	4284      	cmp	r4, r0
 800c044:	d802      	bhi.n	800c04c <GetFskBandwidthRegValue+0x14>
 800c046:	6894      	ldr	r4, [r2, #8]
 800c048:	4284      	cmp	r4, r0
 800c04a:	d804      	bhi.n	800c056 <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c04c:	3301      	adds	r3, #1
 800c04e:	3208      	adds	r2, #8
 800c050:	2b15      	cmp	r3, #21
 800c052:	d1f5      	bne.n	800c040 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c054:	e7fe      	b.n	800c054 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 800c056:	00db      	lsls	r3, r3, #3
 800c058:	18cb      	adds	r3, r1, r3
 800c05a:	7918      	ldrb	r0, [r3, #4]
}
 800c05c:	bd10      	pop	{r4, pc}
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	0800e7e0 	.word	0x0800e7e0

0800c064 <SX1276GetTimeOnAir>:
{
 800c064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c066:	0014      	movs	r4, r2
 800c068:	aa08      	add	r2, sp, #32
 800c06a:	8816      	ldrh	r6, [r2, #0]
 800c06c:	aa09      	add	r2, sp, #36	; 0x24
 800c06e:	7817      	ldrb	r7, [r2, #0]
 800c070:	aa0a      	add	r2, sp, #40	; 0x28
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	000d      	movs	r5, r1
 800c076:	a90b      	add	r1, sp, #44	; 0x2c
 800c078:	4694      	mov	ip, r2
 800c07a:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d009      	beq.n	800c094 <SX1276GetTimeOnAir+0x30>
 800c080:	2801      	cmp	r0, #1
 800c082:	d017      	beq.n	800c0b4 <SX1276GetTimeOnAir+0x50>
 800c084:	2401      	movs	r4, #1
 800c086:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 800c088:	1900      	adds	r0, r0, r4
 800c08a:	0021      	movs	r1, r4
 800c08c:	3801      	subs	r0, #1
 800c08e:	f7f4 f86b 	bl	8000168 <__udivsi3>
}
 800c092:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c094:	1e4b      	subs	r3, r1, #1
 800c096:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c098:	427b      	negs	r3, r7
 800c09a:	415f      	adcs	r7, r3
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c09c:	0049      	lsls	r1, r1, #1
               ( 0 ) + // Address filter size
 800c09e:	000a      	movs	r2, r1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c0a0:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c0a2:	19be      	adds	r6, r7, r6
    return ( preambleLen << 3 ) +
 800c0a4:	00f6      	lsls	r6, r6, #3
               ( 0 ) + // Address filter size
 800c0a6:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c0a8:	3618      	adds	r6, #24
               ) << 3 
 800c0aa:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 800c0ac:	1996      	adds	r6, r2, r6
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c0ae:	0080      	lsls	r0, r0, #2
 800c0b0:	4370      	muls	r0, r6
        break;
 800c0b2:	e7e9      	b.n	800c088 <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c0b8:	1f63      	subs	r3, r4, #5
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d804      	bhi.n	800c0c8 <SX1276GetTimeOnAir+0x64>
    {
        if( preambleLen < 12 )
 800c0be:	1c33      	adds	r3, r6, #0
 800c0c0:	2e0c      	cmp	r6, #12
 800c0c2:	d200      	bcs.n	800c0c6 <SX1276GetTimeOnAir+0x62>
 800c0c4:	230c      	movs	r3, #12
 800c0c6:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	d136      	bne.n	800c13a <SX1276GetTimeOnAir+0xd6>
 800c0cc:	0023      	movs	r3, r4
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	002a      	movs	r2, r5
 800c0d2:	3b0b      	subs	r3, #11
 800c0d4:	4298      	cmp	r0, r3
 800c0d6:	416a      	adcs	r2, r5
 800c0d8:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c0da:	b2db      	uxtb	r3, r3
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
                            ( crcOn ? 16 : 0 ) -
 800c0dc:	1e48      	subs	r0, r1, #1
 800c0de:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c0e0:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 800c0e2:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c0e4:	00d2      	lsls	r2, r2, #3
 800c0e6:	1810      	adds	r0, r2, r0
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 800c0e8:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 800c0ea:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800c0ec:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 800c0ee:	4297      	cmp	r7, r2
 800c0f0:	d100      	bne.n	800c0f4 <SX1276GetTimeOnAir+0x90>
 800c0f2:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 800c0f4:	1880      	adds	r0, r0, r2
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800c0f6:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 800c0f8:	2c06      	cmp	r4, #6
 800c0fa:	d903      	bls.n	800c104 <SX1276GetTimeOnAir+0xa0>
        ceilNumerator += 8;
 800c0fc:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d000      	beq.n	800c104 <SX1276GetTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 800c102:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c104:	43c3      	mvns	r3, r0
 800c106:	17db      	asrs	r3, r3, #31
 800c108:	4018      	ands	r0, r3
 800c10a:	1840      	adds	r0, r0, r1
 800c10c:	3801      	subs	r0, #1
 800c10e:	f7f4 f8b5 	bl	800027c <__divsi3>
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	4343      	muls	r3, r0
 800c116:	199e      	adds	r6, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 800c118:	0032      	movs	r2, r6
 800c11a:	320e      	adds	r2, #14
    if( datarate <= 6 )
 800c11c:	2c06      	cmp	r4, #6
 800c11e:	d900      	bls.n	800c122 <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 800c120:	3a02      	subs	r2, #2
    switch( bw )
 800c122:	2d02      	cmp	r5, #2
 800c124:	d811      	bhi.n	800c14a <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c126:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c128:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c12a:	3201      	adds	r2, #1
 800c12c:	40ba      	lsls	r2, r7
 800c12e:	4b07      	ldr	r3, [pc, #28]	; (800c14c <SX1276GetTimeOnAir+0xe8>)
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c130:	0080      	lsls	r0, r0, #2
 800c132:	00ad      	lsls	r5, r5, #2
 800c134:	4350      	muls	r0, r2
 800c136:	58ec      	ldr	r4, [r5, r3]
 800c138:	e7a6      	b.n	800c088 <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 800c13a:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c13c:	2d01      	cmp	r5, #1
 800c13e:	d1cd      	bne.n	800c0dc <SX1276GetTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c140:	0023      	movs	r3, r4
 800c142:	3b0c      	subs	r3, #12
 800c144:	4258      	negs	r0, r3
 800c146:	4143      	adcs	r3, r0
 800c148:	e7c7      	b.n	800c0da <SX1276GetTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 800c14a:	deff      	udf	#255	; 0xff
 800c14c:	0800e7a4 	.word	0x0800e7a4

0800c150 <SX1276GetWakeupTime>:
{
 800c150:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800c152:	f7f6 fd7d 	bl	8002c50 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800c156:	3002      	adds	r0, #2
}
 800c158:	bd10      	pop	{r4, pc}

0800c15a <SX1276WriteBuffer>:
{
 800c15a:	b570      	push	{r4, r5, r6, lr}
 800c15c:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 800c15e:	2000      	movs	r0, #0
{
 800c160:	000c      	movs	r4, r1
 800c162:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800c164:	f7f6 ff4e 	bl	8003004 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 800c168:	2080      	movs	r0, #128	; 0x80
 800c16a:	4330      	orrs	r0, r6
 800c16c:	b280      	uxth	r0, r0
 800c16e:	f7f6 ff3b 	bl	8002fe8 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c172:	1965      	adds	r5, r4, r5
 800c174:	42ac      	cmp	r4, r5
 800c176:	d103      	bne.n	800c180 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 800c178:	2001      	movs	r0, #1
 800c17a:	f7f6 ff43 	bl	8003004 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 800c180:	7820      	ldrb	r0, [r4, #0]
 800c182:	f7f6 ff31 	bl	8002fe8 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c186:	3401      	adds	r4, #1
 800c188:	e7f4      	b.n	800c174 <SX1276WriteBuffer+0x1a>

0800c18a <SX1276Write>:
{
 800c18a:	b507      	push	{r0, r1, r2, lr}
 800c18c:	466b      	mov	r3, sp
 800c18e:	71d9      	strb	r1, [r3, #7]
 800c190:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800c192:	2201      	movs	r2, #1
 800c194:	0019      	movs	r1, r3
 800c196:	f7ff ffe0 	bl	800c15a <SX1276WriteBuffer>
}
 800c19a:	bd07      	pop	{r0, r1, r2, pc}

0800c19c <SX1276SetChannel>:
{
 800c19c:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c19e:	4911      	ldr	r1, [pc, #68]	; (800c1e4 <SX1276SetChannel+0x48>)
{
 800c1a0:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c1a2:	f7f4 f867 	bl	8000274 <__aeabi_uidivmod>
 800c1a6:	4b10      	ldr	r3, [pc, #64]	; (800c1e8 <SX1276SetChannel+0x4c>)
 800c1a8:	0208      	lsls	r0, r1, #8
 800c1aa:	18c0      	adds	r0, r0, r3
 800c1ac:	490d      	ldr	r1, [pc, #52]	; (800c1e4 <SX1276SetChannel+0x48>)
 800c1ae:	f7f3 ffdb 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800c1b2:	490c      	ldr	r1, [pc, #48]	; (800c1e4 <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c1b4:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800c1b6:	0028      	movs	r0, r5
 800c1b8:	f7f3 ffd6 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800c1bc:	0200      	lsls	r0, r0, #8
 800c1be:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 800c1c0:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800c1c2:	0c21      	lsrs	r1, r4, #16
 800c1c4:	2006      	movs	r0, #6
 800c1c6:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 800c1c8:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800c1ca:	f7ff ffde 	bl	800c18a <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800c1ce:	0a21      	lsrs	r1, r4, #8
 800c1d0:	2007      	movs	r0, #7
 800c1d2:	b2c9      	uxtb	r1, r1
 800c1d4:	f7ff ffd9 	bl	800c18a <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 800c1d8:	2008      	movs	r0, #8
 800c1da:	b2e1      	uxtb	r1, r4
 800c1dc:	f7ff ffd5 	bl	800c18a <SX1276Write>
}
 800c1e0:	bd70      	pop	{r4, r5, r6, pc}
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	00003d09 	.word	0x00003d09
 800c1e8:	00001e84 	.word	0x00001e84
 800c1ec:	20000fa0 	.word	0x20000fa0

0800c1f0 <SX1276ReadBuffer>:
{
 800c1f0:	b570      	push	{r4, r5, r6, lr}
 800c1f2:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 800c1f4:	2000      	movs	r0, #0
{
 800c1f6:	000c      	movs	r4, r1
 800c1f8:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 800c1fa:	f7f6 ff03 	bl	8003004 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 800c1fe:	207f      	movs	r0, #127	; 0x7f
 800c200:	4028      	ands	r0, r5
 800c202:	f7f6 fef1 	bl	8002fe8 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c206:	19a6      	adds	r6, r4, r6
 800c208:	42b4      	cmp	r4, r6
 800c20a:	d103      	bne.n	800c214 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 800c20c:	2001      	movs	r0, #1
 800c20e:	f7f6 fef9 	bl	8003004 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800c212:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 800c214:	2000      	movs	r0, #0
 800c216:	f7f6 fee7 	bl	8002fe8 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 800c21a:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 800c21c:	3401      	adds	r4, #1
 800c21e:	e7f3      	b.n	800c208 <SX1276ReadBuffer+0x18>

0800c220 <SX1276Read>:
{
 800c220:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800c222:	466b      	mov	r3, sp
 800c224:	1ddc      	adds	r4, r3, #7
 800c226:	2201      	movs	r2, #1
 800c228:	0021      	movs	r1, r4
 800c22a:	f7ff ffe1 	bl	800c1f0 <SX1276ReadBuffer>
    return data;
 800c22e:	7820      	ldrb	r0, [r4, #0]
}
 800c230:	bd16      	pop	{r1, r2, r4, pc}
	...

0800c234 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 800c234:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800c236:	4c2c      	ldr	r4, [pc, #176]	; (800c2e8 <SX1276OnDio2Irq+0xb4>)
 800c238:	7925      	ldrb	r5, [r4, #4]
 800c23a:	2d01      	cmp	r5, #1
 800c23c:	d002      	beq.n	800c244 <SX1276OnDio2Irq+0x10>
 800c23e:	2d02      	cmp	r5, #2
 800c240:	d049      	beq.n	800c2d6 <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 800c242:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800c244:	7963      	ldrb	r3, [r4, #5]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d017      	beq.n	800c27a <SX1276OnDio2Irq+0x46>
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d1f9      	bne.n	800c242 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c24e:	3453      	adds	r4, #83	; 0x53
 800c250:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c252:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c254:	2b00      	cmp	r3, #0
 800c256:	d0f4      	beq.n	800c242 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c258:	2012      	movs	r0, #18
 800c25a:	f7ff ff96 	bl	800c18a <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800c25e:	4b23      	ldr	r3, [pc, #140]	; (800c2ec <SX1276OnDio2Irq+0xb8>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0ed      	beq.n	800c242 <SX1276OnDio2Irq+0xe>
 800c266:	695c      	ldr	r4, [r3, #20]
 800c268:	2c00      	cmp	r4, #0
 800c26a:	d0ea      	beq.n	800c242 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800c26c:	201c      	movs	r0, #28
 800c26e:	f7ff ffd7 	bl	800c220 <SX1276Read>
 800c272:	233f      	movs	r3, #63	; 0x3f
 800c274:	4018      	ands	r0, r3
 800c276:	47a0      	blx	r4
}
 800c278:	e7e3      	b.n	800c242 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c27a:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800c27c:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c27e:	3330      	adds	r3, #48	; 0x30
 800c280:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800c282:	3631      	adds	r6, #49	; 0x31
 800c284:	7833      	ldrb	r3, [r6, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1db      	bne.n	800c242 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800c28a:	0020      	movs	r0, r4
 800c28c:	3068      	adds	r0, #104	; 0x68
 800c28e:	f001 fd33 	bl	800dcf8 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c292:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800c294:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c296:	f7ff ffc3 	bl	800c220 <SX1276Read>
 800c29a:	0023      	movs	r3, r4
 800c29c:	0840      	lsrs	r0, r0, #1
 800c29e:	3332      	adds	r3, #50	; 0x32
 800c2a0:	4240      	negs	r0, r0
 800c2a2:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c2a4:	201b      	movs	r0, #27
 800c2a6:	f7ff ffbb 	bl	800c220 <SX1276Read>
 800c2aa:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800c2ac:	201c      	movs	r0, #28
 800c2ae:	f7ff ffb7 	bl	800c220 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c2b2:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c2b4:	4b0e      	ldr	r3, [pc, #56]	; (800c2f0 <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c2b6:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c2b8:	b2c0      	uxtb	r0, r0
 800c2ba:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800c2bc:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c2be:	435d      	muls	r5, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c2c0:	3080      	adds	r0, #128	; 0x80
 800c2c2:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c2c4:	1940      	adds	r0, r0, r5
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c2c6:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800c2c8:	200c      	movs	r0, #12
 800c2ca:	f7ff ffa9 	bl	800c220 <SX1276Read>
 800c2ce:	3438      	adds	r4, #56	; 0x38
 800c2d0:	0940      	lsrs	r0, r0, #5
 800c2d2:	7020      	strb	r0, [r4, #0]
 800c2d4:	e7b5      	b.n	800c242 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 800c2d6:	7963      	ldrb	r3, [r4, #5]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d1b2      	bne.n	800c242 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c2dc:	3453      	adds	r4, #83	; 0x53
 800c2de:	7823      	ldrb	r3, [r4, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d0ae      	beq.n	800c242 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c2e4:	0029      	movs	r1, r5
 800c2e6:	e7b7      	b.n	800c258 <SX1276OnDio2Irq+0x24>
 800c2e8:	20000fa0 	.word	0x20000fa0
 800c2ec:	20001020 	.word	0x20001020
 800c2f0:	00003d09 	.word	0x00003d09

0800c2f4 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800c2f4:	4b05      	ldr	r3, [pc, #20]	; (800c30c <SX1276OnDio4Irq+0x18>)
 800c2f6:	795a      	ldrb	r2, [r3, #5]
 800c2f8:	2a00      	cmp	r2, #0
 800c2fa:	d105      	bne.n	800c308 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800c2fc:	3330      	adds	r3, #48	; 0x30
 800c2fe:	781a      	ldrb	r2, [r3, #0]
 800c300:	2a00      	cmp	r2, #0
 800c302:	d101      	bne.n	800c308 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c304:	3201      	adds	r2, #1
 800c306:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 800c308:	4770      	bx	lr
 800c30a:	46c0      	nop			; (mov r8, r8)
 800c30c:	20000fa0 	.word	0x20000fa0

0800c310 <SX1276OnDio3Irq>:
{
 800c310:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800c312:	4b12      	ldr	r3, [pc, #72]	; (800c35c <SX1276OnDio3Irq+0x4c>)
 800c314:	795c      	ldrb	r4, [r3, #5]
 800c316:	2c01      	cmp	r4, #1
 800c318:	d112      	bne.n	800c340 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800c31a:	2012      	movs	r0, #18
 800c31c:	f7ff ff80 	bl	800c220 <SX1276Read>
 800c320:	0005      	movs	r5, r0
 800c322:	4e0f      	ldr	r6, [pc, #60]	; (800c360 <SX1276OnDio3Irq+0x50>)
 800c324:	4025      	ands	r5, r4
 800c326:	4220      	tst	r0, r4
 800c328:	d00b      	beq.n	800c342 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800c32a:	2105      	movs	r1, #5
 800c32c:	2012      	movs	r0, #18
 800c32e:	f7ff ff2c 	bl	800c18a <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c332:	6833      	ldr	r3, [r6, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d003      	beq.n	800c340 <SX1276OnDio3Irq+0x30>
 800c338:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 800c33a:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10b      	bne.n	800c358 <SX1276OnDio3Irq+0x48>
}
 800c340:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800c342:	2104      	movs	r1, #4
 800c344:	2012      	movs	r0, #18
 800c346:	f7ff ff20 	bl	800c18a <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c34a:	6833      	ldr	r3, [r6, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d0f7      	beq.n	800c340 <SX1276OnDio3Irq+0x30>
 800c350:	699b      	ldr	r3, [r3, #24]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0f4      	beq.n	800c340 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800c356:	0028      	movs	r0, r5
 800c358:	4798      	blx	r3
}
 800c35a:	e7f1      	b.n	800c340 <SX1276OnDio3Irq+0x30>
 800c35c:	20000fa0 	.word	0x20000fa0
 800c360:	20001020 	.word	0x20001020

0800c364 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800c364:	b570      	push	{r4, r5, r6, lr}
 800c366:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 800c368:	2805      	cmp	r0, #5
 800c36a:	d111      	bne.n	800c390 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 800c36c:	2001      	movs	r0, #1
 800c36e:	f7f6 fc71 	bl	8002c54 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800c372:	2001      	movs	r0, #1
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800c374:	f7f6 fde6 	bl	8002f44 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c378:	2001      	movs	r0, #1
 800c37a:	f7ff ff51 	bl	800c220 <SX1276Read>
 800c37e:	2307      	movs	r3, #7
 800c380:	0001      	movs	r1, r0
 800c382:	4399      	bics	r1, r3
 800c384:	4321      	orrs	r1, r4
 800c386:	2001      	movs	r0, #1
 800c388:	b2c9      	uxtb	r1, r1
 800c38a:	f7ff fefe 	bl	800c18a <SX1276Write>
}
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 800c390:	2009      	movs	r0, #9
 800c392:	f7ff ff45 	bl	800c220 <SX1276Read>
 800c396:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 800c398:	2001      	movs	r0, #1
 800c39a:	f7f6 fc5b 	bl	8002c54 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 800c39e:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800c3a0:	062b      	lsls	r3, r5, #24
 800c3a2:	d4e7      	bmi.n	800c374 <SX1276SetOpMode.part.0+0x10>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800c3a4:	2002      	movs	r0, #2
 800c3a6:	e7e5      	b.n	800c374 <SX1276SetOpMode.part.0+0x10>

0800c3a8 <SX1276SetStby>:
{
 800c3a8:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800c3aa:	4c09      	ldr	r4, [pc, #36]	; (800c3d0 <SX1276SetStby+0x28>)
 800c3ac:	1d20      	adds	r0, r4, #4
 800c3ae:	f001 fca3 	bl	800dcf8 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800c3b2:	0020      	movs	r0, r4
 800c3b4:	301c      	adds	r0, #28
 800c3b6:	f001 fc9f 	bl	800dcf8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800c3ba:	4c06      	ldr	r4, [pc, #24]	; (800c3d4 <SX1276SetStby+0x2c>)
 800c3bc:	0020      	movs	r0, r4
 800c3be:	3068      	adds	r0, #104	; 0x68
 800c3c0:	f001 fc9a 	bl	800dcf8 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 800c3c4:	2001      	movs	r0, #1
 800c3c6:	f7ff ffcd 	bl	800c364 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	7123      	strb	r3, [r4, #4]
}
 800c3ce:	bd10      	pop	{r4, pc}
 800c3d0:	20001020 	.word	0x20001020
 800c3d4:	20000fa0 	.word	0x20000fa0

0800c3d8 <SX1276SetRx>:
{
 800c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3da:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 800c3dc:	4879      	ldr	r0, [pc, #484]	; (800c5c4 <SX1276SetRx+0x1ec>)
 800c3de:	301c      	adds	r0, #28
 800c3e0:	f001 fc8a 	bl	800dcf8 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 800c3e4:	4c78      	ldr	r4, [pc, #480]	; (800c5c8 <SX1276SetRx+0x1f0>)
 800c3e6:	7965      	ldrb	r5, [r4, #5]
 800c3e8:	2d00      	cmp	r5, #0
 800c3ea:	d02f      	beq.n	800c44c <SX1276SetRx+0x74>
 800c3ec:	2600      	movs	r6, #0
 800c3ee:	2d01      	cmp	r5, #1
 800c3f0:	d151      	bne.n	800c496 <SX1276SetRx+0xbe>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800c3f2:	0023      	movs	r3, r4
 800c3f4:	3355      	adds	r3, #85	; 0x55
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	2641      	movs	r6, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800c3fa:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d100      	bne.n	800c402 <SX1276SetRx+0x2a>
 800c400:	e06f      	b.n	800c4e2 <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800c402:	f7ff ff0d 	bl	800c220 <SX1276Read>
 800c406:	4306      	orrs	r6, r0
 800c408:	b2f1      	uxtb	r1, r6
 800c40a:	2033      	movs	r0, #51	; 0x33
 800c40c:	f7ff febd 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800c410:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800c412:	203b      	movs	r0, #59	; 0x3b
 800c414:	f7ff feb9 	bl	800c18a <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800c418:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800c41a:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800c41c:	2b08      	cmp	r3, #8
 800c41e:	d900      	bls.n	800c422 <SX1276SetRx+0x4a>
 800c420:	e0b8      	b.n	800c594 <SX1276SetRx+0x1bc>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800c422:	f7ff fefd 	bl	800c220 <SX1276Read>
 800c426:	217f      	movs	r1, #127	; 0x7f
 800c428:	4001      	ands	r1, r0
 800c42a:	2031      	movs	r0, #49	; 0x31
 800c42c:	f7ff fead 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800c430:	2030      	movs	r0, #48	; 0x30
 800c432:	2100      	movs	r1, #0
 800c434:	f7ff fea9 	bl	800c18a <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800c438:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c43a:	2808      	cmp	r0, #8
 800c43c:	d865      	bhi.n	800c50a <SX1276SetRx+0x132>
 800c43e:	f7f3 fe75 	bl	800012c <__gnu_thumb1_case_uqi>
 800c442:	815b      	.short	0x815b
 800c444:	9d968f88 	.word	0x9d968f88
 800c448:	a4a4      	.short	0xa4a4
 800c44a:	a4          	.byte	0xa4
 800c44b:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800c44c:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c44e:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800c450:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c452:	f7ff fee5 	bl	800c220 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800c456:	2103      	movs	r1, #3
 800c458:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c45a:	3109      	adds	r1, #9
 800c45c:	4301      	orrs	r1, r0
 800c45e:	2040      	movs	r0, #64	; 0x40
 800c460:	f7ff fe93 	bl	800c18a <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800c464:	2041      	movs	r0, #65	; 0x41
 800c466:	f7ff fedb 	bl	800c220 <SX1276Read>
 800c46a:	213f      	movs	r1, #63	; 0x3f
 800c46c:	4249      	negs	r1, r1
 800c46e:	4301      	orrs	r1, r0
 800c470:	b2c9      	uxtb	r1, r1
 800c472:	2041      	movs	r0, #65	; 0x41
 800c474:	f7ff fe89 	bl	800c18a <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800c478:	2035      	movs	r0, #53	; 0x35
 800c47a:	f7ff fed1 	bl	800c220 <SX1276Read>
 800c47e:	233f      	movs	r3, #63	; 0x3f
 800c480:	4018      	ands	r0, r3
 800c482:	0023      	movs	r3, r4
 800c484:	333e      	adds	r3, #62	; 0x3e
 800c486:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800c488:	211e      	movs	r1, #30
 800c48a:	200d      	movs	r0, #13
 800c48c:	f7ff fe7d 	bl	800c18a <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800c490:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800c492:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800c494:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800c496:	2280      	movs	r2, #128	; 0x80
 800c498:	2100      	movs	r1, #0
 800c49a:	484c      	ldr	r0, [pc, #304]	; (800c5cc <SX1276SetRx+0x1f4>)
 800c49c:	0052      	lsls	r2, r2, #1
 800c49e:	f001 fe7a 	bl	800e196 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800c4a6:	2f00      	cmp	r7, #0
 800c4a8:	d008      	beq.n	800c4bc <SX1276SetRx+0xe4>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800c4aa:	4b46      	ldr	r3, [pc, #280]	; (800c5c4 <SX1276SetRx+0x1ec>)
 800c4ac:	0039      	movs	r1, r7
 800c4ae:	1d1d      	adds	r5, r3, #4
 800c4b0:	0028      	movs	r0, r5
 800c4b2:	f001 fcb7 	bl	800de24 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800c4b6:	0028      	movs	r0, r5
 800c4b8:	f001 fc72 	bl	800dda0 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800c4bc:	7963      	ldrb	r3, [r4, #5]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d000      	beq.n	800c4c4 <SX1276SetRx+0xec>
 800c4c2:	e078      	b.n	800c5b6 <SX1276SetRx+0x1de>
    if( opMode == RF_OPMODE_SLEEP )
 800c4c4:	2005      	movs	r0, #5
 800c4c6:	f7ff ff4d 	bl	800c364 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 800c4ca:	2e00      	cmp	r6, #0
 800c4cc:	d108      	bne.n	800c4e0 <SX1276SetRx+0x108>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800c4ce:	0025      	movs	r5, r4
 800c4d0:	3568      	adds	r5, #104	; 0x68
 800c4d2:	0028      	movs	r0, r5
 800c4d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c4d6:	f001 fca5 	bl	800de24 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 800c4da:	0028      	movs	r0, r5
 800c4dc:	f001 fc60 	bl	800dda0 <UTIL_TIMER_Start>
}
 800c4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800c4e2:	f7ff fe9d 	bl	800c220 <SX1276Read>
 800c4e6:	0001      	movs	r1, r0
 800c4e8:	43b1      	bics	r1, r6
 800c4ea:	4329      	orrs	r1, r5
 800c4ec:	b2c9      	uxtb	r1, r1
 800c4ee:	2033      	movs	r0, #51	; 0x33
 800c4f0:	f7ff fe4b 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800c4f4:	211d      	movs	r1, #29
 800c4f6:	e78c      	b.n	800c412 <SX1276SetRx+0x3a>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800c4f8:	2148      	movs	r1, #72	; 0x48
 800c4fa:	202f      	movs	r0, #47	; 0x2f
 800c4fc:	f7ff fe45 	bl	800c18a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800c500:	68a3      	ldr	r3, [r4, #8]
 800c502:	4a33      	ldr	r2, [pc, #204]	; (800c5d0 <SX1276SetRx+0x1f8>)
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800c504:	1898      	adds	r0, r3, r2
 800c506:	f7ff fe49 	bl	800c19c <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800c50a:	0023      	movs	r3, r4
 800c50c:	3356      	adds	r3, #86	; 0x56
 800c50e:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c510:	0023      	movs	r3, r4
 800c512:	3353      	adds	r3, #83	; 0x53
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d044      	beq.n	800c5a4 <SX1276SetRx+0x1cc>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800c51a:	211d      	movs	r1, #29
 800c51c:	2011      	movs	r0, #17
 800c51e:	f7ff fe34 	bl	800c18a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800c522:	2040      	movs	r0, #64	; 0x40
 800c524:	f7ff fe7c 	bl	800c220 <SX1276Read>
 800c528:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800c52a:	4001      	ands	r1, r0
 800c52c:	2040      	movs	r0, #64	; 0x40
 800c52e:	f7ff fe2c 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800c532:	2100      	movs	r1, #0
 800c534:	200f      	movs	r0, #15
 800c536:	f7ff fe28 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800c53a:	2100      	movs	r1, #0
 800c53c:	200d      	movs	r0, #13
 800c53e:	f7ff fe24 	bl	800c18a <SX1276Write>
        break;
 800c542:	e7a8      	b.n	800c496 <SX1276SetRx+0xbe>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c544:	2144      	movs	r1, #68	; 0x44
 800c546:	202f      	movs	r0, #47	; 0x2f
 800c548:	f7ff fe1f 	bl	800c18a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800c54c:	68a3      	ldr	r3, [r4, #8]
 800c54e:	4a21      	ldr	r2, [pc, #132]	; (800c5d4 <SX1276SetRx+0x1fc>)
 800c550:	e7d8      	b.n	800c504 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c552:	2144      	movs	r1, #68	; 0x44
 800c554:	202f      	movs	r0, #47	; 0x2f
 800c556:	f7ff fe18 	bl	800c18a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800c55a:	68a3      	ldr	r3, [r4, #8]
 800c55c:	4a1e      	ldr	r2, [pc, #120]	; (800c5d8 <SX1276SetRx+0x200>)
 800c55e:	e7d1      	b.n	800c504 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c560:	2144      	movs	r1, #68	; 0x44
 800c562:	202f      	movs	r0, #47	; 0x2f
 800c564:	f7ff fe11 	bl	800c18a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800c568:	68a3      	ldr	r3, [r4, #8]
 800c56a:	4a1c      	ldr	r2, [pc, #112]	; (800c5dc <SX1276SetRx+0x204>)
 800c56c:	e7ca      	b.n	800c504 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c56e:	2144      	movs	r1, #68	; 0x44
 800c570:	202f      	movs	r0, #47	; 0x2f
 800c572:	f7ff fe0a 	bl	800c18a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	4a19      	ldr	r2, [pc, #100]	; (800c5e0 <SX1276SetRx+0x208>)
 800c57a:	e7c3      	b.n	800c504 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c57c:	2144      	movs	r1, #68	; 0x44
 800c57e:	202f      	movs	r0, #47	; 0x2f
 800c580:	f7ff fe03 	bl	800c18a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800c584:	68a3      	ldr	r3, [r4, #8]
 800c586:	4a17      	ldr	r2, [pc, #92]	; (800c5e4 <SX1276SetRx+0x20c>)
 800c588:	e7bc      	b.n	800c504 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800c58a:	2140      	movs	r1, #64	; 0x40
 800c58c:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800c58e:	f7ff fdfc 	bl	800c18a <SX1276Write>
 800c592:	e7ba      	b.n	800c50a <SX1276SetRx+0x132>
 800c594:	f7ff fe44 	bl	800c220 <SX1276Read>
 800c598:	2180      	movs	r1, #128	; 0x80
 800c59a:	4249      	negs	r1, r1
 800c59c:	4301      	orrs	r1, r0
 800c59e:	b2c9      	uxtb	r1, r1
 800c5a0:	2031      	movs	r0, #49	; 0x31
 800c5a2:	e7f4      	b.n	800c58e <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800c5a4:	211f      	movs	r1, #31
 800c5a6:	2011      	movs	r0, #17
 800c5a8:	f7ff fdef 	bl	800c18a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800c5ac:	2040      	movs	r0, #64	; 0x40
 800c5ae:	f7ff fe37 	bl	800c220 <SX1276Read>
 800c5b2:	213f      	movs	r1, #63	; 0x3f
 800c5b4:	e7b9      	b.n	800c52a <SX1276SetRx+0x152>
        if( rxContinuous == true )
 800c5b6:	2005      	movs	r0, #5
 800c5b8:	2e00      	cmp	r6, #0
 800c5ba:	d100      	bne.n	800c5be <SX1276SetRx+0x1e6>
    if( opMode == RF_OPMODE_SLEEP )
 800c5bc:	2006      	movs	r0, #6
 800c5be:	f7ff fed1 	bl	800c364 <SX1276SetOpMode.part.0>
}
 800c5c2:	e78d      	b.n	800c4e0 <SX1276SetRx+0x108>
 800c5c4:	20001020 	.word	0x20001020
 800c5c8:	20000fa0 	.word	0x20000fa0
 800c5cc:	20001054 	.word	0x20001054
 800c5d0:	00001e82 	.word	0x00001e82
 800c5d4:	000028b4 	.word	0x000028b4
 800c5d8:	00003d04 	.word	0x00003d04
 800c5dc:	0000515e 	.word	0x0000515e
 800c5e0:	00007a12 	.word	0x00007a12
 800c5e4:	0000a2c6 	.word	0x0000a2c6

0800c5e8 <SX1276StartCad>:
{
 800c5e8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800c5ea:	4c0b      	ldr	r4, [pc, #44]	; (800c618 <SX1276StartCad+0x30>)
 800c5ec:	7963      	ldrb	r3, [r4, #5]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d110      	bne.n	800c614 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800c5f2:	21fa      	movs	r1, #250	; 0xfa
 800c5f4:	2011      	movs	r0, #17
 800c5f6:	f7ff fdc8 	bl	800c18a <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800c5fa:	2040      	movs	r0, #64	; 0x40
 800c5fc:	f7ff fe10 	bl	800c220 <SX1276Read>
 800c600:	2503      	movs	r5, #3
 800c602:	43a8      	bics	r0, r5
 800c604:	b2c1      	uxtb	r1, r0
 800c606:	2040      	movs	r0, #64	; 0x40
 800c608:	f7ff fdbf 	bl	800c18a <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800c60c:	2007      	movs	r0, #7
 800c60e:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 800c610:	f7ff fea8 	bl	800c364 <SX1276SetOpMode.part.0>
}
 800c614:	bd70      	pop	{r4, r5, r6, pc}
 800c616:	46c0      	nop			; (mov r8, r8)
 800c618:	20000fa0 	.word	0x20000fa0

0800c61c <SX1276ReadRssi>:
{
 800c61c:	b510      	push	{r4, lr}
    switch( modem )
 800c61e:	2800      	cmp	r0, #0
 800c620:	d004      	beq.n	800c62c <SX1276ReadRssi+0x10>
 800c622:	2801      	cmp	r0, #1
 800c624:	d00a      	beq.n	800c63c <SX1276ReadRssi+0x20>
 800c626:	2001      	movs	r0, #1
 800c628:	4240      	negs	r0, r0
}
 800c62a:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c62c:	2011      	movs	r0, #17
 800c62e:	f7ff fdf7 	bl	800c220 <SX1276Read>
 800c632:	0840      	lsrs	r0, r0, #1
 800c634:	b2c0      	uxtb	r0, r0
 800c636:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800c638:	b200      	sxth	r0, r0
 800c63a:	e7f6      	b.n	800c62a <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800c63c:	4a06      	ldr	r2, [pc, #24]	; (800c658 <SX1276ReadRssi+0x3c>)
 800c63e:	4b07      	ldr	r3, [pc, #28]	; (800c65c <SX1276ReadRssi+0x40>)
 800c640:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800c642:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800c644:	429a      	cmp	r2, r3
 800c646:	d903      	bls.n	800c650 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800c648:	f7ff fdea 	bl	800c220 <SX1276Read>
 800c64c:	389d      	subs	r0, #157	; 0x9d
 800c64e:	e7f3      	b.n	800c638 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800c650:	f7ff fde6 	bl	800c220 <SX1276Read>
 800c654:	38a4      	subs	r0, #164	; 0xa4
 800c656:	e7ef      	b.n	800c638 <SX1276ReadRssi+0x1c>
 800c658:	20000fa0 	.word	0x20000fa0
 800c65c:	1f4add40 	.word	0x1f4add40

0800c660 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800c660:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c662:	2001      	movs	r0, #1
 800c664:	f7ff fddc 	bl	800c220 <SX1276Read>
 800c668:	21f8      	movs	r1, #248	; 0xf8
 800c66a:	4001      	ands	r1, r0
 800c66c:	2001      	movs	r0, #1
 800c66e:	f7ff fd8c 	bl	800c18a <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 800c672:	2000      	movs	r0, #0
 800c674:	f7f6 fc66 	bl	8002f44 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800c678:	2000      	movs	r0, #0
 800c67a:	f7f6 faeb 	bl	8002c54 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 800c67e:	bd10      	pop	{r4, pc}

0800c680 <SX1276SetModem>:
{
 800c680:	b510      	push	{r4, lr}
 800c682:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800c684:	2001      	movs	r0, #1
 800c686:	f7ff fdcb 	bl	800c220 <SX1276Read>
 800c68a:	b2c0      	uxtb	r0, r0
 800c68c:	4b16      	ldr	r3, [pc, #88]	; (800c6e8 <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 800c68e:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 800c690:	42a0      	cmp	r0, r4
 800c692:	d101      	bne.n	800c698 <SX1276SetModem+0x18>
 800c694:	7158      	strb	r0, [r3, #5]
}
 800c696:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 800c698:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800c69a:	2c01      	cmp	r4, #1
 800c69c:	d012      	beq.n	800c6c4 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800c69e:	f7ff ffdf 	bl	800c660 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800c6a2:	2001      	movs	r0, #1
 800c6a4:	f7ff fdbc 	bl	800c220 <SX1276Read>
 800c6a8:	217f      	movs	r1, #127	; 0x7f
 800c6aa:	4001      	ands	r1, r0
 800c6ac:	2001      	movs	r0, #1
 800c6ae:	f7ff fd6c 	bl	800c18a <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	2040      	movs	r0, #64	; 0x40
 800c6b6:	f7ff fd68 	bl	800c18a <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800c6ba:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800c6bc:	2041      	movs	r0, #65	; 0x41
 800c6be:	f7ff fd64 	bl	800c18a <SX1276Write>
        break;
 800c6c2:	e7e8      	b.n	800c696 <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800c6c4:	f7ff ffcc 	bl	800c660 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800c6c8:	0020      	movs	r0, r4
 800c6ca:	f7ff fda9 	bl	800c220 <SX1276Read>
 800c6ce:	2180      	movs	r1, #128	; 0x80
 800c6d0:	4249      	negs	r1, r1
 800c6d2:	4301      	orrs	r1, r0
 800c6d4:	b2c9      	uxtb	r1, r1
 800c6d6:	0020      	movs	r0, r4
 800c6d8:	f7ff fd57 	bl	800c18a <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800c6dc:	2100      	movs	r1, #0
 800c6de:	2040      	movs	r0, #64	; 0x40
 800c6e0:	f7ff fd53 	bl	800c18a <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	e7e9      	b.n	800c6bc <SX1276SetModem+0x3c>
 800c6e8:	20000fa0 	.word	0x20000fa0

0800c6ec <SX1276SetMaxPayloadLength>:
{
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	0004      	movs	r4, r0
 800c6f0:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800c6f2:	f7ff ffc5 	bl	800c680 <SX1276SetModem>
    switch( modem )
 800c6f6:	2c00      	cmp	r4, #0
 800c6f8:	d002      	beq.n	800c700 <SX1276SetMaxPayloadLength+0x14>
 800c6fa:	2c01      	cmp	r4, #1
 800c6fc:	d00a      	beq.n	800c714 <SX1276SetMaxPayloadLength+0x28>
}
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800c700:	4b06      	ldr	r3, [pc, #24]	; (800c71c <SX1276SetMaxPayloadLength+0x30>)
 800c702:	3303      	adds	r3, #3
 800c704:	7fdb      	ldrb	r3, [r3, #31]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1f9      	bne.n	800c6fe <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800c70a:	0029      	movs	r1, r5
 800c70c:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800c70e:	f7ff fd3c 	bl	800c18a <SX1276Write>
}
 800c712:	e7f4      	b.n	800c6fe <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800c714:	0029      	movs	r1, r5
 800c716:	2023      	movs	r0, #35	; 0x23
 800c718:	e7f9      	b.n	800c70e <SX1276SetMaxPayloadLength+0x22>
 800c71a:	46c0      	nop			; (mov r8, r8)
 800c71c:	20000fa0 	.word	0x20000fa0

0800c720 <SX1276SetPublicNetwork>:
{
 800c720:	b510      	push	{r4, lr}
 800c722:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 800c724:	2001      	movs	r0, #1
 800c726:	f7ff ffab 	bl	800c680 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800c72a:	4b05      	ldr	r3, [pc, #20]	; (800c740 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800c72c:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800c72e:	335c      	adds	r3, #92	; 0x5c
 800c730:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800c732:	2c00      	cmp	r4, #0
 800c734:	d100      	bne.n	800c738 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800c736:	2112      	movs	r1, #18
 800c738:	2039      	movs	r0, #57	; 0x39
 800c73a:	f7ff fd26 	bl	800c18a <SX1276Write>
}
 800c73e:	bd10      	pop	{r4, pc}
 800c740:	20000fa0 	.word	0x20000fa0

0800c744 <SX1276SetRxConfig>:
{
 800c744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c746:	b08b      	sub	sp, #44	; 0x2c
 800c748:	9305      	str	r3, [sp, #20]
 800c74a:	ab10      	add	r3, sp, #64	; 0x40
 800c74c:	cb80      	ldmia	r3!, {r7}
 800c74e:	0014      	movs	r4, r2
 800c750:	881b      	ldrh	r3, [r3, #0]
 800c752:	aa0a      	add	r2, sp, #40	; 0x28
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	ab12      	add	r3, sp, #72	; 0x48
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	0005      	movs	r5, r0
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	ab13      	add	r3, sp, #76	; 0x4c
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	000e      	movs	r6, r1
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	ab14      	add	r3, sp, #80	; 0x50
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	9302      	str	r3, [sp, #8]
 800c76c:	ab15      	add	r3, sp, #84	; 0x54
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	9303      	str	r3, [sp, #12]
 800c772:	ab16      	add	r3, sp, #88	; 0x58
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	9308      	str	r3, [sp, #32]
 800c778:	ab17      	add	r3, sp, #92	; 0x5c
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	9309      	str	r3, [sp, #36]	; 0x24
 800c77e:	2319      	movs	r3, #25
 800c780:	189b      	adds	r3, r3, r2
 800c782:	7fdb      	ldrb	r3, [r3, #31]
 800c784:	9306      	str	r3, [sp, #24]
 800c786:	231d      	movs	r3, #29
 800c788:	189b      	adds	r3, r3, r2
 800c78a:	7fdb      	ldrb	r3, [r3, #31]
 800c78c:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 800c78e:	f7ff ff77 	bl	800c680 <SX1276SetModem>
    switch( modem )
 800c792:	2d00      	cmp	r5, #0
 800c794:	d003      	beq.n	800c79e <SX1276SetRxConfig+0x5a>
 800c796:	2d01      	cmp	r5, #1
 800c798:	d068      	beq.n	800c86c <SX1276SetRxConfig+0x128>
}
 800c79a:	b00b      	add	sp, #44	; 0x2c
 800c79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800c79e:	20fa      	movs	r0, #250	; 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800c7a0:	4d98      	ldr	r5, [pc, #608]	; (800ca04 <SX1276SetRxConfig+0x2c0>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 800c7a2:	9a01      	ldr	r2, [sp, #4]
 800c7a4:	1ceb      	adds	r3, r5, #3
 800c7a6:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800c7a8:	9a02      	ldr	r2, [sp, #8]
 800c7aa:	1d2b      	adds	r3, r5, #4
 800c7ac:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800c7ae:	9a03      	ldr	r2, [sp, #12]
 800c7b0:	1d6b      	adds	r3, r5, #5
 800c7b2:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800c7b4:	9a06      	ldr	r2, [sp, #24]
 800c7b6:	1dab      	adds	r3, r5, #6
 800c7b8:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800c7ba:	9a07      	ldr	r2, [sp, #28]
 800c7bc:	1deb      	adds	r3, r5, #7
 800c7be:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800c7c0:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800c7c2:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800c7c4:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800c7c6:	9b04      	ldr	r3, [sp, #16]
 800c7c8:	0021      	movs	r1, r4
 800c7ca:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 800c7cc:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800c7ce:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800c7d0:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800c7d2:	f7f3 fcc9 	bl	8000168 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800c7d6:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800c7d8:	62e8      	str	r0, [r5, #44]	; 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800c7da:	488b      	ldr	r0, [pc, #556]	; (800ca08 <SX1276SetRxConfig+0x2c4>)
 800c7dc:	f7f3 fcc4 	bl	8000168 <__udivsi3>
 800c7e0:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800c7e2:	0a01      	lsrs	r1, r0, #8
 800c7e4:	b2c9      	uxtb	r1, r1
 800c7e6:	2002      	movs	r0, #2
 800c7e8:	f7ff fccf 	bl	800c18a <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800c7ec:	b2e1      	uxtb	r1, r4
 800c7ee:	2003      	movs	r0, #3
 800c7f0:	f7ff fccb 	bl	800c18a <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800c7f4:	0030      	movs	r0, r6
 800c7f6:	f7ff fc1f 	bl	800c038 <GetFskBandwidthRegValue>
 800c7fa:	0001      	movs	r1, r0
 800c7fc:	2012      	movs	r0, #18
 800c7fe:	f7ff fcc4 	bl	800c18a <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800c802:	0038      	movs	r0, r7
 800c804:	f7ff fc18 	bl	800c038 <GetFskBandwidthRegValue>
 800c808:	0001      	movs	r1, r0
 800c80a:	2013      	movs	r0, #19
 800c80c:	f7ff fcbd 	bl	800c18a <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800c810:	9b00      	ldr	r3, [sp, #0]
 800c812:	2025      	movs	r0, #37	; 0x25
 800c814:	0a19      	lsrs	r1, r3, #8
 800c816:	f7ff fcb8 	bl	800c18a <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800c81a:	466b      	mov	r3, sp
 800c81c:	2026      	movs	r0, #38	; 0x26
 800c81e:	7819      	ldrb	r1, [r3, #0]
 800c820:	f7ff fcb3 	bl	800c18a <SX1276Write>
            if( fixLen == 1 )
 800c824:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800c826:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d100      	bne.n	800c82e <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800c82c:	21ff      	movs	r1, #255	; 0xff
 800c82e:	2032      	movs	r0, #50	; 0x32
 800c830:	f7ff fcab 	bl	800c18a <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800c834:	2030      	movs	r0, #48	; 0x30
 800c836:	f7ff fcf3 	bl	800c220 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800c83a:	216f      	movs	r1, #111	; 0x6f
 800c83c:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800c83e:	2100      	movs	r1, #0
 800c840:	9b01      	ldr	r3, [sp, #4]
 800c842:	428b      	cmp	r3, r1
 800c844:	d100      	bne.n	800c848 <SX1276SetRxConfig+0x104>
 800c846:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800c84c:	4318      	orrs	r0, r3
 800c84e:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800c850:	b2c9      	uxtb	r1, r1
 800c852:	2030      	movs	r0, #48	; 0x30
 800c854:	f7ff fc99 	bl	800c18a <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800c858:	2031      	movs	r0, #49	; 0x31
 800c85a:	f7ff fce1 	bl	800c220 <SX1276Read>
 800c85e:	2140      	movs	r1, #64	; 0x40
 800c860:	4301      	orrs	r1, r0
 800c862:	2031      	movs	r0, #49	; 0x31
 800c864:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c866:	f7ff fc90 	bl	800c18a <SX1276Write>
}
 800c86a:	e796      	b.n	800c79a <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 800c86c:	2e02      	cmp	r6, #2
 800c86e:	d900      	bls.n	800c872 <SX1276SetRxConfig+0x12e>
                while( 1 );
 800c870:	e7fe      	b.n	800c870 <SX1276SetRxConfig+0x12c>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800c872:	4b64      	ldr	r3, [pc, #400]	; (800ca04 <SX1276SetRxConfig+0x2c0>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800c874:	9905      	ldr	r1, [sp, #20]
 800c876:	001a      	movs	r2, r3
 800c878:	324d      	adds	r2, #77	; 0x4d
 800c87a:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800c87c:	001a      	movs	r2, r3
 800c87e:	9900      	ldr	r1, [sp, #0]
 800c880:	324e      	adds	r2, #78	; 0x4e
 800c882:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800c884:	001a      	movs	r2, r3
 800c886:	9901      	ldr	r1, [sp, #4]
 800c888:	3250      	adds	r2, #80	; 0x50
 800c88a:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800c88c:	001a      	movs	r2, r3
 800c88e:	9902      	ldr	r1, [sp, #8]
 800c890:	3251      	adds	r2, #81	; 0x51
 800c892:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800c894:	001a      	movs	r2, r3
 800c896:	9903      	ldr	r1, [sp, #12]
 800c898:	3252      	adds	r2, #82	; 0x52
 800c89a:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800c89c:	001a      	movs	r2, r3
 800c89e:	9908      	ldr	r1, [sp, #32]
 800c8a0:	3253      	adds	r2, #83	; 0x53
 800c8a2:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800c8a4:	001a      	movs	r2, r3
 800c8a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8a8:	3254      	adds	r2, #84	; 0x54
 800c8aa:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800c8ac:	001a      	movs	r2, r3
 800c8ae:	9906      	ldr	r1, [sp, #24]
 800c8b0:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800c8b2:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800c8b4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800c8b6:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800c8b8:	645f      	str	r7, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800c8ba:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800c8bc:	3356      	adds	r3, #86	; 0x56
 800c8be:	2506      	movs	r5, #6
 800c8c0:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 800c8c2:	2c06      	cmp	r4, #6
 800c8c4:	d303      	bcc.n	800c8ce <SX1276SetRxConfig+0x18a>
 800c8c6:	0025      	movs	r5, r4
 800c8c8:	2c0c      	cmp	r4, #12
 800c8ca:	d900      	bls.n	800c8ce <SX1276SetRxConfig+0x18a>
 800c8cc:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c8ce:	2f07      	cmp	r7, #7
 800c8d0:	d17d      	bne.n	800c9ce <SX1276SetRxConfig+0x28a>
 800c8d2:	002a      	movs	r2, r5
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	2101      	movs	r1, #1
 800c8d8:	3a0b      	subs	r2, #11
 800c8da:	4291      	cmp	r1, r2
 800c8dc:	415b      	adcs	r3, r3
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	4a4a      	ldr	r2, [pc, #296]	; (800ca0c <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800c8e2:	201d      	movs	r0, #29
 800c8e4:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c8e6:	4e47      	ldr	r6, [pc, #284]	; (800ca04 <SX1276SetRxConfig+0x2c0>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800c8e8:	f7ff fc9a 	bl	800c220 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c8ec:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c8ee:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c8f0:	0059      	lsls	r1, r3, #1
 800c8f2:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800c8f4:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c8f6:	4319      	orrs	r1, r3
 800c8f8:	013b      	lsls	r3, r7, #4
 800c8fa:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c8fc:	b2c9      	uxtb	r1, r1
 800c8fe:	f7ff fc44 	bl	800c18a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800c902:	201e      	movs	r0, #30
 800c904:	f7ff fc8c 	bl	800c220 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800c908:	9b04      	ldr	r3, [sp, #16]
 800c90a:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800c90c:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800c90e:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800c910:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800c912:	4319      	orrs	r1, r3
 800c914:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800c916:	2508      	movs	r5, #8
 800c918:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 800c91a:	4301      	orrs	r1, r0
 800c91c:	b2c9      	uxtb	r1, r1
 800c91e:	201e      	movs	r0, #30
 800c920:	f7ff fc33 	bl	800c18a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800c924:	2026      	movs	r0, #38	; 0x26
 800c926:	f7ff fc7b 	bl	800c220 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800c92a:	4b38      	ldr	r3, [pc, #224]	; (800ca0c <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800c92c:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800c92e:	7819      	ldrb	r1, [r3, #0]
 800c930:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800c932:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800c934:	b2c9      	uxtb	r1, r1
 800c936:	2026      	movs	r0, #38	; 0x26
 800c938:	f7ff fc27 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800c93c:	466b      	mov	r3, sp
 800c93e:	201f      	movs	r0, #31
 800c940:	7c19      	ldrb	r1, [r3, #16]
 800c942:	f7ff fc22 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800c946:	9b00      	ldr	r3, [sp, #0]
 800c948:	2020      	movs	r0, #32
 800c94a:	0a19      	lsrs	r1, r3, #8
 800c94c:	f7ff fc1d 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800c950:	466b      	mov	r3, sp
 800c952:	2021      	movs	r0, #33	; 0x21
 800c954:	7819      	ldrb	r1, [r3, #0]
 800c956:	f7ff fc18 	bl	800c18a <SX1276Write>
            if( fixLen == 1 )
 800c95a:	9b01      	ldr	r3, [sp, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <SX1276SetRxConfig+0x224>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800c960:	2022      	movs	r0, #34	; 0x22
 800c962:	9902      	ldr	r1, [sp, #8]
 800c964:	f7ff fc11 	bl	800c18a <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c968:	0033      	movs	r3, r6
 800c96a:	3353      	adds	r3, #83	; 0x53
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00f      	beq.n	800c992 <SX1276SetRxConfig+0x24e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800c972:	2044      	movs	r0, #68	; 0x44
 800c974:	f7ff fc54 	bl	800c220 <SX1276Read>
 800c978:	2180      	movs	r1, #128	; 0x80
 800c97a:	4249      	negs	r1, r1
 800c97c:	4301      	orrs	r1, r0
 800c97e:	b2c9      	uxtb	r1, r1
 800c980:	2044      	movs	r0, #68	; 0x44
 800c982:	f7ff fc02 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800c986:	0033      	movs	r3, r6
 800c988:	3354      	adds	r3, #84	; 0x54
 800c98a:	2024      	movs	r0, #36	; 0x24
 800c98c:	7819      	ldrb	r1, [r3, #0]
 800c98e:	f7ff fbfc 	bl	800c18a <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800c992:	2f09      	cmp	r7, #9
 800c994:	d127      	bne.n	800c9e6 <SX1276SetRxConfig+0x2a2>
 800c996:	4b1e      	ldr	r3, [pc, #120]	; (800ca10 <SX1276SetRxConfig+0x2cc>)
 800c998:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800c99a:	2102      	movs	r1, #2
 800c99c:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d91d      	bls.n	800c9de <SX1276SetRxConfig+0x29a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800c9a2:	f7ff fbf2 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800c9a6:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800c9a8:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800c9aa:	f7ff fbee 	bl	800c18a <SX1276Write>
            if( datarate == 6 )
 800c9ae:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c9b0:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800c9b2:	2c06      	cmp	r4, #6
 800c9b4:	d81a      	bhi.n	800c9ec <SX1276SetRxConfig+0x2a8>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c9b6:	f7ff fc33 	bl	800c220 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c9ba:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c9bc:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c9be:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c9c0:	b2c9      	uxtb	r1, r1
 800c9c2:	2031      	movs	r0, #49	; 0x31
 800c9c4:	f7ff fbe1 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c9c8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c9ca:	2037      	movs	r0, #55	; 0x37
 800c9cc:	e74b      	b.n	800c866 <SX1276SetRxConfig+0x122>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800c9ce:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c9d0:	2f08      	cmp	r7, #8
 800c9d2:	d185      	bne.n	800c8e0 <SX1276SetRxConfig+0x19c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800c9d4:	330b      	adds	r3, #11
 800c9d6:	42a3      	cmp	r3, r4
 800c9d8:	419b      	sbcs	r3, r3
 800c9da:	425b      	negs	r3, r3
 800c9dc:	e780      	b.n	800c8e0 <SX1276SetRxConfig+0x19c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800c9de:	f7ff fbd4 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800c9e2:	217f      	movs	r1, #127	; 0x7f
 800c9e4:	e7e0      	b.n	800c9a8 <SX1276SetRxConfig+0x264>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800c9e6:	2103      	movs	r1, #3
 800c9e8:	2036      	movs	r0, #54	; 0x36
 800c9ea:	e7de      	b.n	800c9aa <SX1276SetRxConfig+0x266>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c9ec:	f7ff fc18 	bl	800c220 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c9f0:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c9f2:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c9f4:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c9f6:	b2c9      	uxtb	r1, r1
 800c9f8:	2031      	movs	r0, #49	; 0x31
 800c9fa:	f7ff fbc6 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c9fe:	210a      	movs	r1, #10
 800ca00:	e7e3      	b.n	800c9ca <SX1276SetRxConfig+0x286>
 800ca02:	46c0      	nop			; (mov r8, r8)
 800ca04:	20000fa0 	.word	0x20000fa0
 800ca08:	01e84800 	.word	0x01e84800
 800ca0c:	20000fec 	.word	0x20000fec
 800ca10:	1f4add40 	.word	0x1f4add40

0800ca14 <SX1276SetSleep>:
{
 800ca14:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800ca16:	4c0a      	ldr	r4, [pc, #40]	; (800ca40 <SX1276SetSleep+0x2c>)
 800ca18:	1d20      	adds	r0, r4, #4
 800ca1a:	f001 f96d 	bl	800dcf8 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800ca1e:	0020      	movs	r0, r4
 800ca20:	301c      	adds	r0, #28
 800ca22:	f001 f969 	bl	800dcf8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800ca26:	4c07      	ldr	r4, [pc, #28]	; (800ca44 <SX1276SetSleep+0x30>)
 800ca28:	0020      	movs	r0, r4
 800ca2a:	3068      	adds	r0, #104	; 0x68
 800ca2c:	f001 f964 	bl	800dcf8 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800ca30:	f7ff fe16 	bl	800c660 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 800ca34:	2000      	movs	r0, #0
 800ca36:	f7f6 f90d 	bl	8002c54 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	7123      	strb	r3, [r4, #4]
}
 800ca3e:	bd10      	pop	{r4, pc}
 800ca40:	20001020 	.word	0x20001020
 800ca44:	20000fa0 	.word	0x20000fa0

0800ca48 <SX1276IsChannelFree>:
{
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	0007      	movs	r7, r0
 800ca4c:	000c      	movs	r4, r1
 800ca4e:	0016      	movs	r6, r2
 800ca50:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800ca52:	f7ff ffdf 	bl	800ca14 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800ca56:	2000      	movs	r0, #0
 800ca58:	f7ff fe12 	bl	800c680 <SX1276SetModem>
    SX1276SetChannel( freq );
 800ca5c:	0038      	movs	r0, r7
 800ca5e:	f7ff fb9d 	bl	800c19c <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800ca62:	0020      	movs	r0, r4
 800ca64:	f7ff fae8 	bl	800c038 <GetFskBandwidthRegValue>
 800ca68:	0004      	movs	r4, r0
 800ca6a:	0001      	movs	r1, r0
 800ca6c:	2012      	movs	r0, #18
 800ca6e:	f7ff fb8c 	bl	800c18a <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800ca72:	0021      	movs	r1, r4
 800ca74:	2013      	movs	r0, #19
 800ca76:	f7ff fb88 	bl	800c18a <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800ca7a:	2005      	movs	r0, #5
 800ca7c:	f7ff fc72 	bl	800c364 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 800ca80:	2001      	movs	r0, #1
 800ca82:	f7f5 fe1b 	bl	80026bc <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800ca86:	f001 f8f3 	bl	800dc70 <UTIL_TIMER_GetCurrentTime>
 800ca8a:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800ca8c:	0020      	movs	r0, r4
 800ca8e:	f001 f8f9 	bl	800dc84 <UTIL_TIMER_GetElapsedTime>
 800ca92:	42a8      	cmp	r0, r5
 800ca94:	d304      	bcc.n	800caa0 <SX1276IsChannelFree+0x58>
    bool status = true;
 800ca96:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800ca98:	f7ff ffbc 	bl	800ca14 <SX1276SetSleep>
}
 800ca9c:	0020      	movs	r0, r4
 800ca9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 800caa0:	2000      	movs	r0, #0
 800caa2:	f7ff fdbb 	bl	800c61c <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800caa6:	42b0      	cmp	r0, r6
 800caa8:	ddf0      	ble.n	800ca8c <SX1276IsChannelFree+0x44>
            status = false;
 800caaa:	2400      	movs	r4, #0
 800caac:	e7f4      	b.n	800ca98 <SX1276IsChannelFree+0x50>

0800caae <SX1276Random>:
{
 800caae:	b570      	push	{r4, r5, r6, lr}
 800cab0:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 800cab2:	2001      	movs	r0, #1
 800cab4:	f7ff fde4 	bl	800c680 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800cab8:	21ff      	movs	r1, #255	; 0xff
 800caba:	2011      	movs	r0, #17
 800cabc:	f7ff fb65 	bl	800c18a <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800cac0:	2005      	movs	r0, #5
 800cac2:	f7ff fc4f 	bl	800c364 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 800cac6:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 800cac8:	2601      	movs	r6, #1
 800caca:	0030      	movs	r0, r6
 800cacc:	f7f5 fdf6 	bl	80026bc <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800cad0:	202c      	movs	r0, #44	; 0x2c
 800cad2:	f7ff fba5 	bl	800c220 <SX1276Read>
 800cad6:	4030      	ands	r0, r6
 800cad8:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 800cada:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800cadc:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800cade:	2c20      	cmp	r4, #32
 800cae0:	d1f3      	bne.n	800caca <SX1276Random+0x1c>
    SX1276SetSleep( );
 800cae2:	f7ff ff97 	bl	800ca14 <SX1276SetSleep>
}
 800cae6:	0028      	movs	r0, r5
 800cae8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800caec <SX1276SetTxConfig>:
{
 800caec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caee:	b08d      	sub	sp, #52	; 0x34
 800caf0:	9305      	str	r3, [sp, #20]
 800caf2:	ab12      	add	r3, sp, #72	; 0x48
 800caf4:	cb80      	ldmia	r3!, {r7}
 800caf6:	9204      	str	r2, [sp, #16]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	0006      	movs	r6, r0
 800cafc:	9307      	str	r3, [sp, #28]
 800cafe:	ab14      	add	r3, sp, #80	; 0x50
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	000c      	movs	r4, r1
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	ab15      	add	r3, sp, #84	; 0x54
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	9302      	str	r3, [sp, #8]
 800cb0c:	ab16      	add	r3, sp, #88	; 0x58
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	9303      	str	r3, [sp, #12]
 800cb12:	ab17      	add	r3, sp, #92	; 0x5c
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	9308      	str	r3, [sp, #32]
 800cb18:	ab18      	add	r3, sp, #96	; 0x60
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	930a      	str	r3, [sp, #40]	; 0x28
 800cb1e:	ab19      	add	r3, sp, #100	; 0x64
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800cb24:	4bb6      	ldr	r3, [pc, #728]	; (800ce00 <SX1276SetTxConfig+0x314>)
 800cb26:	791d      	ldrb	r5, [r3, #4]
 800cb28:	2d01      	cmp	r5, #1
 800cb2a:	d106      	bne.n	800cb3a <SX1276SetTxConfig+0x4e>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d104      	bne.n	800cb3a <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 800cb30:	f7ff ff70 	bl	800ca14 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800cb34:	0028      	movs	r0, r5
 800cb36:	f7f5 fdc1 	bl	80026bc <HAL_Delay>
    SX1276SetModem( modem );
 800cb3a:	0030      	movs	r0, r6
 800cb3c:	f7ff fda0 	bl	800c680 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 800cb40:	2009      	movs	r0, #9
 800cb42:	f7ff fb6d 	bl	800c220 <SX1276Read>
 800cb46:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 800cb48:	204d      	movs	r0, #77	; 0x4d
 800cb4a:	f7ff fb69 	bl	800c220 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800cb4e:	4bac      	ldr	r3, [pc, #688]	; (800ce00 <SX1276SetTxConfig+0x314>)
    paDac = SX1276Read( REG_PADAC );
 800cb50:	0005      	movs	r5, r0
 800cb52:	9006      	str	r0, [sp, #24]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800cb54:	6898      	ldr	r0, [r3, #8]
 800cb56:	f7f6 f9f3 	bl	8002f40 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d029      	beq.n	800cbb2 <SX1276SetTxConfig+0xc6>
 800cb5e:	3802      	subs	r0, #2
 800cb60:	b2c3      	uxtb	r3, r0
 800cb62:	2080      	movs	r0, #128	; 0x80
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d900      	bls.n	800cb6a <SX1276SetTxConfig+0x7e>
    uint8_t board_config = 0;
 800cb68:	2000      	movs	r0, #0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800cb6a:	237f      	movs	r3, #127	; 0x7f
 800cb6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb6e:	401a      	ands	r2, r3
 800cb70:	4310      	orrs	r0, r2
 800cb72:	b241      	sxtb	r1, r0
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800cb74:	0603      	lsls	r3, r0, #24
 800cb76:	d52a      	bpl.n	800cbce <SX1276SetTxConfig+0xe2>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800cb78:	230f      	movs	r3, #15
 800cb7a:	2507      	movs	r5, #7
 800cb7c:	4399      	bics	r1, r3
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800cb7e:	9b06      	ldr	r3, [sp, #24]
        if( power > 17 )
 800cb80:	2c11      	cmp	r4, #17
 800cb82:	dd1a      	ble.n	800cbba <SX1276SetTxConfig+0xce>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800cb84:	431d      	orrs	r5, r3
 800cb86:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800cb88:	1c23      	adds	r3, r4, #0
 800cb8a:	2c14      	cmp	r4, #20
 800cb8c:	dd00      	ble.n	800cb90 <SX1276SetTxConfig+0xa4>
 800cb8e:	2314      	movs	r3, #20
 800cb90:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800cb92:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 800cb94:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800cb96:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800cb98:	f7ff faf7 	bl	800c18a <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800cb9c:	0029      	movs	r1, r5
 800cb9e:	204d      	movs	r0, #77	; 0x4d
 800cba0:	f7ff faf3 	bl	800c18a <SX1276Write>
    switch( modem )
 800cba4:	2e00      	cmp	r6, #0
 800cba6:	d021      	beq.n	800cbec <SX1276SetTxConfig+0x100>
 800cba8:	2e01      	cmp	r6, #1
 800cbaa:	d100      	bne.n	800cbae <SX1276SetTxConfig+0xc2>
 800cbac:	e081      	b.n	800ccb2 <SX1276SetTxConfig+0x1c6>
}
 800cbae:	b00d      	add	sp, #52	; 0x34
 800cbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 800cbb2:	2c0e      	cmp	r4, #14
 800cbb4:	ddd9      	ble.n	800cb6a <SX1276SetTxConfig+0x7e>
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 800cbb6:	2080      	movs	r0, #128	; 0x80
 800cbb8:	e7d7      	b.n	800cb6a <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800cbba:	43ab      	bics	r3, r5
 800cbbc:	2504      	movs	r5, #4
 800cbbe:	432b      	orrs	r3, r5
 800cbc0:	b2dd      	uxtb	r5, r3
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800cbc2:	1c23      	adds	r3, r4, #0
 800cbc4:	2c02      	cmp	r4, #2
 800cbc6:	da00      	bge.n	800cbca <SX1276SetTxConfig+0xde>
 800cbc8:	2302      	movs	r3, #2
 800cbca:	3b02      	subs	r3, #2
 800cbcc:	e7e1      	b.n	800cb92 <SX1276SetTxConfig+0xa6>
        if( power > 0 )
 800cbce:	2c00      	cmp	r4, #0
 800cbd0:	dd05      	ble.n	800cbde <SX1276SetTxConfig+0xf2>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800cbd2:	1c23      	adds	r3, r4, #0
 800cbd4:	2c0f      	cmp	r4, #15
 800cbd6:	dd00      	ble.n	800cbda <SX1276SetTxConfig+0xee>
 800cbd8:	230f      	movs	r3, #15
 800cbda:	2170      	movs	r1, #112	; 0x70
 800cbdc:	e7d9      	b.n	800cb92 <SX1276SetTxConfig+0xa6>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800cbde:	1c21      	adds	r1, r4, #0
 800cbe0:	1d23      	adds	r3, r4, #4
 800cbe2:	da01      	bge.n	800cbe8 <SX1276SetTxConfig+0xfc>
 800cbe4:	4b87      	ldr	r3, [pc, #540]	; (800ce04 <SX1276SetTxConfig+0x318>)
 800cbe6:	7819      	ldrb	r1, [r3, #0]
 800cbe8:	3104      	adds	r1, #4
 800cbea:	e7d3      	b.n	800cb94 <SX1276SetTxConfig+0xa8>
            SX1276.Settings.Fsk.Power = power;
 800cbec:	4b84      	ldr	r3, [pc, #528]	; (800ce00 <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800cbee:	9a04      	ldr	r2, [sp, #16]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800cbf0:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.Fsk.Fdev = fdev;
 800cbf2:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800cbf4:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.Power = power;
 800cbf6:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800cbf8:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800cbfa:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800cbfc:	9804      	ldr	r0, [sp, #16]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800cbfe:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800cc00:	1cda      	adds	r2, r3, #3
 800cc02:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800cc04:	9903      	ldr	r1, [sp, #12]
 800cc06:	1d5a      	adds	r2, r3, #5
 800cc08:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800cc0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc0c:	1d9a      	adds	r2, r3, #6
 800cc0e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800cc10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 800cc12:	61df      	str	r7, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800cc14:	629a      	str	r2, [r3, #40]	; 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800cc16:	497c      	ldr	r1, [pc, #496]	; (800ce08 <SX1276SetTxConfig+0x31c>)
 800cc18:	f7f3 fb2c 	bl	8000274 <__aeabi_uidivmod>
 800cc1c:	4b7b      	ldr	r3, [pc, #492]	; (800ce0c <SX1276SetTxConfig+0x320>)
 800cc1e:	0208      	lsls	r0, r1, #8
 800cc20:	18c0      	adds	r0, r0, r3
 800cc22:	4979      	ldr	r1, [pc, #484]	; (800ce08 <SX1276SetTxConfig+0x31c>)
 800cc24:	f7f3 faa0 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800cc28:	4977      	ldr	r1, [pc, #476]	; (800ce08 <SX1276SetTxConfig+0x31c>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800cc2a:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800cc2c:	9804      	ldr	r0, [sp, #16]
 800cc2e:	f7f3 fa9b 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800cc32:	0200      	lsls	r0, r0, #8
 800cc34:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800cc36:	0a21      	lsrs	r1, r4, #8
 800cc38:	2004      	movs	r0, #4
 800cc3a:	b2c9      	uxtb	r1, r1
 800cc3c:	f7ff faa5 	bl	800c18a <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800cc40:	b2e1      	uxtb	r1, r4
 800cc42:	2005      	movs	r0, #5
 800cc44:	f7ff faa1 	bl	800c18a <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800cc48:	0039      	movs	r1, r7
 800cc4a:	4871      	ldr	r0, [pc, #452]	; (800ce10 <SX1276SetTxConfig+0x324>)
 800cc4c:	f7f3 fa8c 	bl	8000168 <__udivsi3>
 800cc50:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800cc52:	0a01      	lsrs	r1, r0, #8
 800cc54:	b2c9      	uxtb	r1, r1
 800cc56:	2002      	movs	r0, #2
 800cc58:	f7ff fa97 	bl	800c18a <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800cc5c:	2003      	movs	r0, #3
 800cc5e:	b2e1      	uxtb	r1, r4
 800cc60:	f7ff fa93 	bl	800c18a <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800cc64:	9b01      	ldr	r3, [sp, #4]
 800cc66:	2025      	movs	r0, #37	; 0x25
 800cc68:	0a19      	lsrs	r1, r3, #8
 800cc6a:	f7ff fa8e 	bl	800c18a <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800cc6e:	466b      	mov	r3, sp
 800cc70:	2026      	movs	r0, #38	; 0x26
 800cc72:	7919      	ldrb	r1, [r3, #4]
 800cc74:	f7ff fa89 	bl	800c18a <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800cc78:	2030      	movs	r0, #48	; 0x30
 800cc7a:	f7ff fad1 	bl	800c220 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800cc7e:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800cc80:	9b02      	ldr	r3, [sp, #8]
                           RF_PACKETCONFIG1_CRC_MASK &
 800cc82:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800cc84:	0031      	movs	r1, r6
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <SX1276SetTxConfig+0x1a2>
 800cc8a:	2180      	movs	r1, #128	; 0x80
 800cc8c:	4249      	negs	r1, r1
                           ( crcOn << 4 ) );
 800cc8e:	9b03      	ldr	r3, [sp, #12]
 800cc90:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800cc92:	4318      	orrs	r0, r3
 800cc94:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800cc96:	b2c9      	uxtb	r1, r1
 800cc98:	2030      	movs	r0, #48	; 0x30
 800cc9a:	f7ff fa76 	bl	800c18a <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800cc9e:	2031      	movs	r0, #49	; 0x31
 800cca0:	f7ff fabe 	bl	800c220 <SX1276Read>
 800cca4:	2140      	movs	r1, #64	; 0x40
 800cca6:	4301      	orrs	r1, r0
 800cca8:	2031      	movs	r0, #49	; 0x31
 800ccaa:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800ccac:	f7ff fa6d 	bl	800c18a <SX1276Write>
}
 800ccb0:	e77d      	b.n	800cbae <SX1276SetTxConfig+0xc2>
            SX1276.Settings.LoRa.Power = power;
 800ccb2:	4b53      	ldr	r3, [pc, #332]	; (800ce00 <SX1276SetTxConfig+0x314>)
 800ccb4:	001a      	movs	r2, r3
 800ccb6:	3240      	adds	r2, #64	; 0x40
 800ccb8:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 800ccba:	9a05      	ldr	r2, [sp, #20]
 800ccbc:	2a02      	cmp	r2, #2
 800ccbe:	d900      	bls.n	800ccc2 <SX1276SetTxConfig+0x1d6>
                while( 1 );
 800ccc0:	e7fe      	b.n	800ccc0 <SX1276SetTxConfig+0x1d4>
            SX1276.Settings.LoRa.Coderate = coderate;
 800ccc2:	001a      	movs	r2, r3
 800ccc4:	9907      	ldr	r1, [sp, #28]
 800ccc6:	324d      	adds	r2, #77	; 0x4d
 800ccc8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800ccca:	001a      	movs	r2, r3
 800cccc:	9901      	ldr	r1, [sp, #4]
 800ccce:	324e      	adds	r2, #78	; 0x4e
 800ccd0:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800ccd2:	001a      	movs	r2, r3
 800ccd4:	9902      	ldr	r1, [sp, #8]
 800ccd6:	3250      	adds	r2, #80	; 0x50
 800ccd8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800ccda:	001a      	movs	r2, r3
 800ccdc:	9908      	ldr	r1, [sp, #32]
 800ccde:	3253      	adds	r2, #83	; 0x53
 800cce0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800cce2:	001a      	movs	r2, r3
 800cce4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cce6:	3254      	adds	r2, #84	; 0x54
 800cce8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800ccea:	001a      	movs	r2, r3
 800ccec:	9903      	ldr	r1, [sp, #12]
 800ccee:	3252      	adds	r2, #82	; 0x52
 800ccf0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800ccf2:	001a      	movs	r2, r3
 800ccf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccf6:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800ccf8:	9d05      	ldr	r5, [sp, #20]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800ccfa:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800ccfc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 800ccfe:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cd00:	2406      	movs	r4, #6
 800cd02:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800cd04:	649f      	str	r7, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800cd06:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 800cd08:	2f06      	cmp	r7, #6
 800cd0a:	d303      	bcc.n	800cd14 <SX1276SetTxConfig+0x228>
 800cd0c:	003c      	movs	r4, r7
 800cd0e:	2f0c      	cmp	r7, #12
 800cd10:	d900      	bls.n	800cd14 <SX1276SetTxConfig+0x228>
 800cd12:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cd14:	2d07      	cmp	r5, #7
 800cd16:	d160      	bne.n	800cdda <SX1276SetTxConfig+0x2ee>
 800cd18:	0022      	movs	r2, r4
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	2101      	movs	r1, #1
 800cd1e:	3a0b      	subs	r2, #11
 800cd20:	4291      	cmp	r1, r2
 800cd22:	415b      	adcs	r3, r3
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	4e36      	ldr	r6, [pc, #216]	; (800ce00 <SX1276SetTxConfig+0x314>)
 800cd28:	0032      	movs	r2, r6
 800cd2a:	324c      	adds	r2, #76	; 0x4c
 800cd2c:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800cd2e:	9b08      	ldr	r3, [sp, #32]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00f      	beq.n	800cd54 <SX1276SetTxConfig+0x268>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800cd34:	2044      	movs	r0, #68	; 0x44
 800cd36:	f7ff fa73 	bl	800c220 <SX1276Read>
 800cd3a:	2180      	movs	r1, #128	; 0x80
 800cd3c:	4249      	negs	r1, r1
 800cd3e:	4301      	orrs	r1, r0
 800cd40:	b2c9      	uxtb	r1, r1
 800cd42:	2044      	movs	r0, #68	; 0x44
 800cd44:	f7ff fa21 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800cd48:	0033      	movs	r3, r6
 800cd4a:	3354      	adds	r3, #84	; 0x54
 800cd4c:	2024      	movs	r0, #36	; 0x24
 800cd4e:	7819      	ldrb	r1, [r3, #0]
 800cd50:	f7ff fa1b 	bl	800c18a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800cd54:	201d      	movs	r0, #29
 800cd56:	f7ff fa63 	bl	800c220 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800cd5a:	9b07      	ldr	r3, [sp, #28]
 800cd5c:	012d      	lsls	r5, r5, #4
 800cd5e:	0059      	lsls	r1, r3, #1
 800cd60:	9b02      	ldr	r3, [sp, #8]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800cd62:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800cd64:	430b      	orrs	r3, r1
 800cd66:	0019      	movs	r1, r3
 800cd68:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800cd6a:	b2c9      	uxtb	r1, r1
 800cd6c:	f7ff fa0d 	bl	800c18a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800cd70:	201e      	movs	r0, #30
 800cd72:	f7ff fa55 	bl	800c220 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 800cd76:	210b      	movs	r1, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	0124      	lsls	r4, r4, #4
 800cd7c:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800cd7e:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800cd80:	4001      	ands	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG2,
 800cd82:	4321      	orrs	r1, r4
 800cd84:	b2c9      	uxtb	r1, r1
 800cd86:	201e      	movs	r0, #30
 800cd88:	f7ff f9ff 	bl	800c18a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800cd8c:	2026      	movs	r0, #38	; 0x26
 800cd8e:	f7ff fa47 	bl	800c220 <SX1276Read>
 800cd92:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800cd94:	364c      	adds	r6, #76	; 0x4c
 800cd96:	7831      	ldrb	r1, [r6, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800cd98:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800cd9a:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800cd9c:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800cd9e:	b2c9      	uxtb	r1, r1
 800cda0:	2026      	movs	r0, #38	; 0x26
 800cda2:	f7ff f9f2 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800cda6:	9b01      	ldr	r3, [sp, #4]
 800cda8:	2020      	movs	r0, #32
 800cdaa:	0a19      	lsrs	r1, r3, #8
 800cdac:	f7ff f9ed 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800cdb0:	466b      	mov	r3, sp
 800cdb2:	2021      	movs	r0, #33	; 0x21
 800cdb4:	7919      	ldrb	r1, [r3, #4]
 800cdb6:	f7ff f9e8 	bl	800c18a <SX1276Write>
            if( datarate == 6 )
 800cdba:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cdbc:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800cdbe:	2f06      	cmp	r7, #6
 800cdc0:	d813      	bhi.n	800cdea <SX1276SetTxConfig+0x2fe>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cdc2:	f7ff fa2d 	bl	800c220 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800cdc6:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cdc8:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800cdca:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800cdcc:	b2c9      	uxtb	r1, r1
 800cdce:	2031      	movs	r0, #49	; 0x31
 800cdd0:	f7ff f9db 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cdd4:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cdd6:	2037      	movs	r0, #55	; 0x37
 800cdd8:	e768      	b.n	800ccac <SX1276SetTxConfig+0x1c0>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800cdda:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cddc:	2d08      	cmp	r5, #8
 800cdde:	d1a2      	bne.n	800cd26 <SX1276SetTxConfig+0x23a>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800cde0:	330b      	adds	r3, #11
 800cde2:	42bb      	cmp	r3, r7
 800cde4:	419b      	sbcs	r3, r3
 800cde6:	425b      	negs	r3, r3
 800cde8:	e79d      	b.n	800cd26 <SX1276SetTxConfig+0x23a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cdea:	f7ff fa19 	bl	800c220 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800cdee:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cdf0:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800cdf2:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800cdf4:	b2c9      	uxtb	r1, r1
 800cdf6:	2031      	movs	r0, #49	; 0x31
 800cdf8:	f7ff f9c7 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cdfc:	210a      	movs	r1, #10
 800cdfe:	e7ea      	b.n	800cdd6 <SX1276SetTxConfig+0x2ea>
 800ce00:	20000fa0 	.word	0x20000fa0
 800ce04:	0800ee54 	.word	0x0800ee54
 800ce08:	00003d09 	.word	0x00003d09
 800ce0c:	00001e84 	.word	0x00001e84
 800ce10:	01e84800 	.word	0x01e84800

0800ce14 <SX1276SetTxContinuousWave>:
{
 800ce14:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800ce16:	24fa      	movs	r4, #250	; 0xfa
{
 800ce18:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800ce1a:	00a4      	lsls	r4, r4, #2
 800ce1c:	4354      	muls	r4, r2
{
 800ce1e:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800ce20:	f7ff f9bc 	bl	800c19c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800ce24:	2305      	movs	r3, #5
 800ce26:	9302      	str	r3, [sp, #8]
 800ce28:	2396      	movs	r3, #150	; 0x96
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	015b      	lsls	r3, r3, #5
 800ce2e:	0002      	movs	r2, r0
 800ce30:	0029      	movs	r1, r5
 800ce32:	9007      	str	r0, [sp, #28]
 800ce34:	9006      	str	r0, [sp, #24]
 800ce36:	9005      	str	r0, [sp, #20]
 800ce38:	9004      	str	r0, [sp, #16]
 800ce3a:	9003      	str	r0, [sp, #12]
 800ce3c:	9001      	str	r0, [sp, #4]
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	9408      	str	r4, [sp, #32]
 800ce42:	0003      	movs	r3, r0
 800ce44:	f7ff fe52 	bl	800caec <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800ce48:	2031      	movs	r0, #49	; 0x31
 800ce4a:	f7ff f9e9 	bl	800c220 <SX1276Read>
 800ce4e:	2540      	movs	r5, #64	; 0x40
 800ce50:	43a8      	bics	r0, r5
 800ce52:	b2c1      	uxtb	r1, r0
 800ce54:	2031      	movs	r0, #49	; 0x31
 800ce56:	f7ff f998 	bl	800c18a <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800ce5a:	0028      	movs	r0, r5
 800ce5c:	21f0      	movs	r1, #240	; 0xf0
 800ce5e:	f7ff f994 	bl	800c18a <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800ce62:	21a0      	movs	r1, #160	; 0xa0
 800ce64:	2041      	movs	r0, #65	; 0x41
 800ce66:	f7ff f990 	bl	800c18a <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ce6a:	4d08      	ldr	r5, [pc, #32]	; (800ce8c <SX1276SetTxContinuousWave+0x78>)
 800ce6c:	0021      	movs	r1, r4
 800ce6e:	351c      	adds	r5, #28
 800ce70:	0028      	movs	r0, r5
 800ce72:	f000 ffd7 	bl	800de24 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800ce76:	2202      	movs	r2, #2
 800ce78:	4b05      	ldr	r3, [pc, #20]	; (800ce90 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800ce7a:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800ce7c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800ce7e:	f000 ff8f 	bl	800dda0 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800ce82:	2003      	movs	r0, #3
 800ce84:	f7ff fa6e 	bl	800c364 <SX1276SetOpMode.part.0>
}
 800ce88:	b00b      	add	sp, #44	; 0x2c
 800ce8a:	bd30      	pop	{r4, r5, pc}
 800ce8c:	20001020 	.word	0x20001020
 800ce90:	20000fa0 	.word	0x20000fa0

0800ce94 <RxChainCalibration>:
{
 800ce94:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800ce96:	2009      	movs	r0, #9
 800ce98:	f7ff f9c2 	bl	800c220 <SX1276Read>
 800ce9c:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800ce9e:	2006      	movs	r0, #6
 800cea0:	f7ff f9be 	bl	800c220 <SX1276Read>
 800cea4:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800cea6:	2007      	movs	r0, #7
 800cea8:	f7ff f9ba 	bl	800c220 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800ceac:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800ceae:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800ceb0:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 800ceb2:	2008      	movs	r0, #8
 800ceb4:	f7ff f9b4 	bl	800c220 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800ceb8:	4b1a      	ldr	r3, [pc, #104]	; (800cf24 <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800ceba:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800cebc:	b2c0      	uxtb	r0, r0
 800cebe:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800cec0:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800cec2:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800cec4:	3080      	adds	r0, #128	; 0x80
 800cec6:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 800cec8:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800ceca:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 800cecc:	2009      	movs	r0, #9
 800cece:	f7ff f95c 	bl	800c18a <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800ced2:	203b      	movs	r0, #59	; 0x3b
 800ced4:	f7ff f9a4 	bl	800c220 <SX1276Read>
 800ced8:	2140      	movs	r1, #64	; 0x40
 800ceda:	4301      	orrs	r1, r0
 800cedc:	b2c9      	uxtb	r1, r1
 800cede:	203b      	movs	r0, #59	; 0x3b
 800cee0:	f7ff f953 	bl	800c18a <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800cee4:	2620      	movs	r6, #32
 800cee6:	203b      	movs	r0, #59	; 0x3b
 800cee8:	f7ff f99a 	bl	800c220 <SX1276Read>
 800ceec:	4230      	tst	r0, r6
 800ceee:	d1fa      	bne.n	800cee6 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 800cef0:	480d      	ldr	r0, [pc, #52]	; (800cf28 <RxChainCalibration+0x94>)
 800cef2:	f7ff f953 	bl	800c19c <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800cef6:	203b      	movs	r0, #59	; 0x3b
 800cef8:	f7ff f992 	bl	800c220 <SX1276Read>
 800cefc:	2140      	movs	r1, #64	; 0x40
 800cefe:	4301      	orrs	r1, r0
 800cf00:	b2c9      	uxtb	r1, r1
 800cf02:	203b      	movs	r0, #59	; 0x3b
 800cf04:	f7ff f941 	bl	800c18a <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800cf08:	2620      	movs	r6, #32
 800cf0a:	203b      	movs	r0, #59	; 0x3b
 800cf0c:	f7ff f988 	bl	800c220 <SX1276Read>
 800cf10:	4230      	tst	r0, r6
 800cf12:	d1fa      	bne.n	800cf0a <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800cf14:	0029      	movs	r1, r5
 800cf16:	2009      	movs	r0, #9
 800cf18:	f7ff f937 	bl	800c18a <SX1276Write>
    SX1276SetChannel( initialFreq );
 800cf1c:	0020      	movs	r0, r4
 800cf1e:	f7ff f93d 	bl	800c19c <SX1276SetChannel>
}
 800cf22:	bd70      	pop	{r4, r5, r6, pc}
 800cf24:	00003d09 	.word	0x00003d09
 800cf28:	33bca100 	.word	0x33bca100

0800cf2c <SX1276Init>:
{
 800cf2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800cf2e:	4d21      	ldr	r5, [pc, #132]	; (800cfb4 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800cf30:	2400      	movs	r4, #0
    RadioEvents = events;
 800cf32:	6028      	str	r0, [r5, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800cf34:	2101      	movs	r1, #1
 800cf36:	0028      	movs	r0, r5
 800cf38:	4e1f      	ldr	r6, [pc, #124]	; (800cfb8 <SX1276Init+0x8c>)
 800cf3a:	0022      	movs	r2, r4
 800cf3c:	0033      	movs	r3, r6
 800cf3e:	9400      	str	r4, [sp, #0]
 800cf40:	4249      	negs	r1, r1
 800cf42:	301c      	adds	r0, #28
 800cf44:	f000 fe78 	bl	800dc38 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800cf48:	2101      	movs	r1, #1
 800cf4a:	0033      	movs	r3, r6
 800cf4c:	0022      	movs	r2, r4
 800cf4e:	1d28      	adds	r0, r5, #4
 800cf50:	9400      	str	r4, [sp, #0]
 800cf52:	4249      	negs	r1, r1
 800cf54:	f000 fe70 	bl	800dc38 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800cf58:	4d18      	ldr	r5, [pc, #96]	; (800cfbc <SX1276Init+0x90>)
 800cf5a:	2101      	movs	r1, #1
 800cf5c:	0028      	movs	r0, r5
 800cf5e:	0033      	movs	r3, r6
 800cf60:	0022      	movs	r2, r4
 800cf62:	4249      	negs	r1, r1
 800cf64:	9400      	str	r4, [sp, #0]
 800cf66:	3068      	adds	r0, #104	; 0x68
 800cf68:	f000 fe66 	bl	800dc38 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800cf6c:	2001      	movs	r0, #1
 800cf6e:	f7f5 fe71 	bl	8002c54 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 800cf72:	f7f6 f80f 	bl	8002f94 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 800cf76:	f7ff ff8d 	bl	800ce94 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800cf7a:	f7ff fb71 	bl	800c660 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 800cf7e:	4810      	ldr	r0, [pc, #64]	; (800cfc0 <SX1276Init+0x94>)
 800cf80:	f7f5 ffb0 	bl	8002ee4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800cf84:	4e0f      	ldr	r6, [pc, #60]	; (800cfc4 <SX1276Init+0x98>)
 800cf86:	0034      	movs	r4, r6
 800cf88:	363c      	adds	r6, #60	; 0x3c
 800cf8a:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 800cf8c:	7820      	ldrb	r0, [r4, #0]
 800cf8e:	f7ff fb77 	bl	800c680 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800cf92:	78a1      	ldrb	r1, [r4, #2]
 800cf94:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800cf96:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800cf98:	f7ff f8f7 	bl	800c18a <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800cf9c:	42b4      	cmp	r4, r6
 800cf9e:	d1f5      	bne.n	800cf8c <SX1276Init+0x60>
    SX1276SetModem( MODEM_FSK );
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	f7ff fb6d 	bl	800c680 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	712b      	strb	r3, [r5, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800cfaa:	f7f5 fe51 	bl	8002c50 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800cfae:	3002      	adds	r0, #2
}
 800cfb0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800cfb2:	46c0      	nop			; (mov r8, r8)
 800cfb4:	20001020 	.word	0x20001020
 800cfb8:	0800cfc9 	.word	0x0800cfc9
 800cfbc:	20000fa0 	.word	0x20000fa0
 800cfc0:	200000e4 	.word	0x200000e4
 800cfc4:	0800e7a4 	.word	0x0800e7a4

0800cfc8 <SX1276OnTimeoutIrq>:
{
 800cfc8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800cfca:	4c2a      	ldr	r4, [pc, #168]	; (800d074 <SX1276OnTimeoutIrq+0xac>)
 800cfcc:	7923      	ldrb	r3, [r4, #4]
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d002      	beq.n	800cfd8 <SX1276OnTimeoutIrq+0x10>
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d02a      	beq.n	800d02c <SX1276OnTimeoutIrq+0x64>
}
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800cfd8:	7963      	ldrb	r3, [r4, #5]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d117      	bne.n	800d00e <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800cfde:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800cfe0:	210b      	movs	r1, #11
 800cfe2:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800cfe4:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800cfe6:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800cfe8:	f7ff f8cf 	bl	800c18a <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800cfec:	2110      	movs	r1, #16
 800cfee:	203f      	movs	r0, #63	; 0x3f
 800cff0:	f7ff f8cb 	bl	800c18a <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800cff4:	1de3      	adds	r3, r4, #7
 800cff6:	7fdb      	ldrb	r3, [r3, #31]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d011      	beq.n	800d020 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800cffc:	200d      	movs	r0, #13
 800cffe:	f7ff f90f 	bl	800c220 <SX1276Read>
 800d002:	2140      	movs	r1, #64	; 0x40
 800d004:	4301      	orrs	r1, r0
 800d006:	b2c9      	uxtb	r1, r1
 800d008:	200d      	movs	r0, #13
 800d00a:	f7ff f8be 	bl	800c18a <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d00e:	4b1a      	ldr	r3, [pc, #104]	; (800d078 <SX1276OnTimeoutIrq+0xb0>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d0df      	beq.n	800cfd6 <SX1276OnTimeoutIrq+0xe>
 800d016:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d0dc      	beq.n	800cfd6 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800d01c:	4798      	blx	r3
}
 800d01e:	e7da      	b.n	800cfd6 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800d020:	0020      	movs	r0, r4
 800d022:	3068      	adds	r0, #104	; 0x68
                SX1276.Settings.State = RF_IDLE;
 800d024:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 800d026:	f000 fe67 	bl	800dcf8 <UTIL_TIMER_Stop>
 800d02a:	e7f0      	b.n	800d00e <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 800d02c:	f7f5 ffb2 	bl	8002f94 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 800d030:	f7ff ff30 	bl	800ce94 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d034:	f7ff fb14 	bl	800c660 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d038:	4e10      	ldr	r6, [pc, #64]	; (800d07c <SX1276OnTimeoutIrq+0xb4>)
 800d03a:	0035      	movs	r5, r6
 800d03c:	363c      	adds	r6, #60	; 0x3c
 800d03e:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 800d040:	7828      	ldrb	r0, [r5, #0]
 800d042:	f7ff fb1d 	bl	800c680 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d046:	78a9      	ldrb	r1, [r5, #2]
 800d048:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d04a:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d04c:	f7ff f89d 	bl	800c18a <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d050:	42b5      	cmp	r5, r6
 800d052:	d1f5      	bne.n	800d040 <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 800d054:	2000      	movs	r0, #0
 800d056:	f7ff fb13 	bl	800c680 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800d05a:	0023      	movs	r3, r4
 800d05c:	335c      	adds	r3, #92	; 0x5c
 800d05e:	7818      	ldrb	r0, [r3, #0]
 800d060:	f7ff fb5e 	bl	800c720 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800d064:	2300      	movs	r3, #0
 800d066:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d068:	4b03      	ldr	r3, [pc, #12]	; (800d078 <SX1276OnTimeoutIrq+0xb0>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0b2      	beq.n	800cfd6 <SX1276OnTimeoutIrq+0xe>
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	e7d1      	b.n	800d018 <SX1276OnTimeoutIrq+0x50>
 800d074:	20000fa0 	.word	0x20000fa0
 800d078:	20001020 	.word	0x20001020
 800d07c:	0800e7a4 	.word	0x0800e7a4

0800d080 <SX1276OnDio0Irq>:
{
 800d080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 800d082:	466b      	mov	r3, sp
 800d084:	1dde      	adds	r6, r3, #7
 800d086:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800d088:	4c8a      	ldr	r4, [pc, #552]	; (800d2b4 <SX1276OnDio0Irq+0x234>)
    volatile uint8_t irqFlags = 0;
 800d08a:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 800d08c:	7923      	ldrb	r3, [r4, #4]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d003      	beq.n	800d09a <SX1276OnDio0Irq+0x1a>
 800d092:	2b02      	cmp	r3, #2
 800d094:	d100      	bne.n	800d098 <SX1276OnDio0Irq+0x18>
 800d096:	e0f8      	b.n	800d28a <SX1276OnDio0Irq+0x20a>
}
 800d098:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 800d09a:	7963      	ldrb	r3, [r4, #5]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d023      	beq.n	800d0e8 <SX1276OnDio0Irq+0x68>
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d1f9      	bne.n	800d098 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800d0a4:	2140      	movs	r1, #64	; 0x40
 800d0a6:	2012      	movs	r0, #18
 800d0a8:	f7ff f86f 	bl	800c18a <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800d0ac:	2012      	movs	r0, #18
 800d0ae:	f7ff f8b7 	bl	800c220 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800d0b2:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800d0b4:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800d0b6:	7833      	ldrb	r3, [r6, #0]
 800d0b8:	4d7f      	ldr	r5, [pc, #508]	; (800d2b8 <SX1276OnDio0Irq+0x238>)
 800d0ba:	420b      	tst	r3, r1
 800d0bc:	d100      	bne.n	800d0c0 <SX1276OnDio0Irq+0x40>
 800d0be:	e08a      	b.n	800d1d6 <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800d0c0:	2012      	movs	r0, #18
 800d0c2:	f7ff f862 	bl	800c18a <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800d0c6:	0023      	movs	r3, r4
 800d0c8:	3356      	adds	r3, #86	; 0x56
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d100      	bne.n	800d0d2 <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 800d0d0:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 800d0d2:	1d28      	adds	r0, r5, #4
 800d0d4:	f000 fe10 	bl	800dcf8 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800d0d8:	682b      	ldr	r3, [r5, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d0dc      	beq.n	800d098 <SX1276OnDio0Irq+0x18>
 800d0de:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d0d9      	beq.n	800d098 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800d0e4:	4798      	blx	r3
}
 800d0e6:	e7d7      	b.n	800d098 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800d0e8:	1d63      	adds	r3, r4, #5
 800d0ea:	7fdb      	ldrb	r3, [r3, #31]
 800d0ec:	4d72      	ldr	r5, [pc, #456]	; (800d2b8 <SX1276OnDio0Irq+0x238>)
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d030      	beq.n	800d154 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800d0f2:	203f      	movs	r0, #63	; 0x3f
 800d0f4:	f7ff f894 	bl	800c220 <SX1276Read>
 800d0f8:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800d0fa:	7833      	ldrb	r3, [r6, #0]
 800d0fc:	079b      	lsls	r3, r3, #30
 800d0fe:	d429      	bmi.n	800d154 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d100:	210b      	movs	r1, #11
 800d102:	203e      	movs	r0, #62	; 0x3e
 800d104:	f7ff f841 	bl	800c18a <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800d108:	2110      	movs	r1, #16
 800d10a:	203f      	movs	r0, #63	; 0x3f
 800d10c:	f7ff f83d 	bl	800c18a <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800d110:	1d28      	adds	r0, r5, #4
 800d112:	f000 fdf1 	bl	800dcf8 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800d116:	1de3      	adds	r3, r4, #7
 800d118:	7fde      	ldrb	r6, [r3, #31]
 800d11a:	2e00      	cmp	r6, #0
 800d11c:	d110      	bne.n	800d140 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 800d11e:	0020      	movs	r0, r4
 800d120:	3068      	adds	r0, #104	; 0x68
 800d122:	f000 fde9 	bl	800dcf8 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 800d126:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d003      	beq.n	800d136 <SX1276OnDio0Irq+0xb6>
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d000      	beq.n	800d136 <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 800d134:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800d136:	2300      	movs	r3, #0
 800d138:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d13a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800d13c:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 800d13e:	e7ab      	b.n	800d098 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d140:	200d      	movs	r0, #13
 800d142:	f7ff f86d 	bl	800c220 <SX1276Read>
 800d146:	2140      	movs	r1, #64	; 0x40
 800d148:	4301      	orrs	r1, r0
 800d14a:	b2c9      	uxtb	r1, r1
 800d14c:	200d      	movs	r0, #13
 800d14e:	f7ff f81c 	bl	800c18a <SX1276Write>
 800d152:	e7e9      	b.n	800d128 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800d154:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800d156:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800d158:	0013      	movs	r3, r2
 800d15a:	4e58      	ldr	r6, [pc, #352]	; (800d2bc <SX1276OnDio0Irq+0x23c>)
 800d15c:	430b      	orrs	r3, r1
 800d15e:	d10a      	bne.n	800d176 <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800d160:	1ce3      	adds	r3, r4, #3
 800d162:	7fd8      	ldrb	r0, [r3, #31]
 800d164:	2800      	cmp	r0, #0
 800d166:	d127      	bne.n	800d1b8 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 800d168:	0021      	movs	r1, r4
 800d16a:	2201      	movs	r2, #1
 800d16c:	313a      	adds	r1, #58	; 0x3a
 800d16e:	f7ff f83f 	bl	800c1f0 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d172:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800d174:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d176:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d178:	2000      	movs	r0, #0
 800d17a:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d17c:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d17e:	f7ff f837 	bl	800c1f0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d182:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 800d184:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d186:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 800d188:	f000 fdb6 	bl	800dcf8 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800d18c:	1de3      	adds	r3, r4, #7
 800d18e:	7fdb      	ldrb	r3, [r3, #31]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d116      	bne.n	800d1c2 <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 800d194:	0020      	movs	r0, r4
 800d196:	3068      	adds	r0, #104	; 0x68
                    SX1276.Settings.State = RF_IDLE;
 800d198:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800d19a:	f000 fdad 	bl	800dcf8 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d19e:	682b      	ldr	r3, [r5, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d0c8      	beq.n	800d136 <SX1276OnDio0Irq+0xb6>
 800d1a4:	689d      	ldr	r5, [r3, #8]
 800d1a6:	2d00      	cmp	r5, #0
 800d1a8:	d0c5      	beq.n	800d136 <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800d1aa:	2232      	movs	r2, #50	; 0x32
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	0030      	movs	r0, r6
 800d1b0:	56a2      	ldrsb	r2, [r4, r2]
 800d1b2:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800d1b4:	47a8      	blx	r5
 800d1b6:	e7be      	b.n	800d136 <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800d1b8:	2032      	movs	r0, #50	; 0x32
 800d1ba:	f7ff f831 	bl	800c220 <SX1276Read>
 800d1be:	8760      	strh	r0, [r4, #58]	; 0x3a
 800d1c0:	e7d7      	b.n	800d172 <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d1c2:	200d      	movs	r0, #13
 800d1c4:	f7ff f82c 	bl	800c220 <SX1276Read>
 800d1c8:	2140      	movs	r1, #64	; 0x40
 800d1ca:	4301      	orrs	r1, r0
 800d1cc:	b2c9      	uxtb	r1, r1
 800d1ce:	200d      	movs	r0, #13
 800d1d0:	f7fe ffdb 	bl	800c18a <SX1276Write>
 800d1d4:	e7e3      	b.n	800d19e <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800d1d6:	2019      	movs	r0, #25
 800d1d8:	f7ff f822 	bl	800c220 <SX1276Read>
 800d1dc:	0027      	movs	r7, r4
 800d1de:	b240      	sxtb	r0, r0
 800d1e0:	3002      	adds	r0, #2
 800d1e2:	3760      	adds	r7, #96	; 0x60
 800d1e4:	1080      	asrs	r0, r0, #2
 800d1e6:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800d1e8:	201a      	movs	r0, #26
 800d1ea:	f7ff f819 	bl	800c220 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	0022      	movs	r2, r4
 800d1f2:	56fb      	ldrsb	r3, [r7, r3]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d1f4:	b201      	sxth	r1, r0
 800d1f6:	1109      	asrs	r1, r1, #4
 800d1f8:	4f31      	ldr	r7, [pc, #196]	; (800d2c0 <SX1276OnDio0Irq+0x240>)
 800d1fa:	b289      	uxth	r1, r1
 800d1fc:	b286      	uxth	r6, r0
 800d1fe:	3262      	adds	r2, #98	; 0x62
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800d200:	2b00      	cmp	r3, #0
 800d202:	da3a      	bge.n	800d27a <SX1276OnDio0Irq+0x1fa>
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800d204:	b298      	uxth	r0, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d206:	68a3      	ldr	r3, [r4, #8]
 800d208:	42bb      	cmp	r3, r7
 800d20a:	d934      	bls.n	800d276 <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d20c:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d20e:	1830      	adds	r0, r6, r0
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d210:	1808      	adds	r0, r1, r0
 800d212:	8010      	strh	r0, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800d214:	0026      	movs	r6, r4
 800d216:	2013      	movs	r0, #19
 800d218:	f7ff f802 	bl	800c220 <SX1276Read>
 800d21c:	3664      	adds	r6, #100	; 0x64
 800d21e:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800d220:	2010      	movs	r0, #16
 800d222:	f7fe fffd 	bl	800c220 <SX1276Read>
 800d226:	0001      	movs	r1, r0
 800d228:	200d      	movs	r0, #13
 800d22a:	f7fe ffae 	bl	800c18a <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 800d22e:	7832      	ldrb	r2, [r6, #0]
 800d230:	4e22      	ldr	r6, [pc, #136]	; (800d2bc <SX1276OnDio0Irq+0x23c>)
 800d232:	2000      	movs	r0, #0
 800d234:	0031      	movs	r1, r6
 800d236:	f7fe ffdb 	bl	800c1f0 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800d23a:	0023      	movs	r3, r4
 800d23c:	3356      	adds	r3, #86	; 0x56
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d100      	bne.n	800d246 <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 800d244:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 800d246:	1d28      	adds	r0, r5, #4
 800d248:	f000 fd56 	bl	800dcf8 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d100      	bne.n	800d254 <SX1276OnDio0Irq+0x1d4>
 800d252:	e721      	b.n	800d098 <SX1276OnDio0Irq+0x18>
 800d254:	689d      	ldr	r5, [r3, #8]
 800d256:	2d00      	cmp	r5, #0
 800d258:	d100      	bne.n	800d25c <SX1276OnDio0Irq+0x1dc>
 800d25a:	e71d      	b.n	800d098 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800d25c:	0023      	movs	r3, r4
 800d25e:	0022      	movs	r2, r4
 800d260:	3360      	adds	r3, #96	; 0x60
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	3464      	adds	r4, #100	; 0x64
 800d266:	3262      	adds	r2, #98	; 0x62
 800d268:	2100      	movs	r1, #0
 800d26a:	5e52      	ldrsh	r2, [r2, r1]
 800d26c:	0030      	movs	r0, r6
 800d26e:	7821      	ldrb	r1, [r4, #0]
 800d270:	b25b      	sxtb	r3, r3
 800d272:	47a8      	blx	r5
 800d274:	e710      	b.n	800d098 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d276:	38a4      	subs	r0, #164	; 0xa4
 800d278:	e7c9      	b.n	800d20e <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d27a:	68a3      	ldr	r3, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d27c:	0030      	movs	r0, r6
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d27e:	42bb      	cmp	r3, r7
 800d280:	d901      	bls.n	800d286 <SX1276OnDio0Irq+0x206>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d282:	389d      	subs	r0, #157	; 0x9d
 800d284:	e7c4      	b.n	800d210 <SX1276OnDio0Irq+0x190>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d286:	38a4      	subs	r0, #164	; 0xa4
 800d288:	e7c2      	b.n	800d210 <SX1276OnDio0Irq+0x190>
            TimerStop( &TxTimeoutTimer );
 800d28a:	4d0b      	ldr	r5, [pc, #44]	; (800d2b8 <SX1276OnDio0Irq+0x238>)
 800d28c:	0028      	movs	r0, r5
 800d28e:	301c      	adds	r0, #28
 800d290:	f000 fd32 	bl	800dcf8 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 800d294:	7963      	ldrb	r3, [r4, #5]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d103      	bne.n	800d2a2 <SX1276OnDio0Irq+0x222>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800d29a:	2108      	movs	r1, #8
 800d29c:	2012      	movs	r0, #18
 800d29e:	f7fe ff74 	bl	800c18a <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d2a6:	682b      	ldr	r3, [r5, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d100      	bne.n	800d2ae <SX1276OnDio0Irq+0x22e>
 800d2ac:	e6f4      	b.n	800d098 <SX1276OnDio0Irq+0x18>
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	e716      	b.n	800d0e0 <SX1276OnDio0Irq+0x60>
 800d2b2:	46c0      	nop			; (mov r8, r8)
 800d2b4:	20000fa0 	.word	0x20000fa0
 800d2b8:	20001020 	.word	0x20001020
 800d2bc:	20001054 	.word	0x20001054
 800d2c0:	1f4add40 	.word	0x1f4add40

0800d2c4 <SX1276Send>:
{
 800d2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2c6:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800d2c8:	4c61      	ldr	r4, [pc, #388]	; (800d450 <SX1276Send+0x18c>)
{
 800d2ca:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 800d2cc:	7965      	ldrb	r5, [r4, #5]
{
 800d2ce:	1dde      	adds	r6, r3, #7
 800d2d0:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 800d2d2:	2d00      	cmp	r5, #0
 800d2d4:	d01c      	beq.n	800d310 <SX1276Send+0x4c>
 800d2d6:	2d01      	cmp	r5, #1
 800d2d8:	d046      	beq.n	800d368 <SX1276Send+0xa4>
 800d2da:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 800d2dc:	4d5d      	ldr	r5, [pc, #372]	; (800d454 <SX1276Send+0x190>)
 800d2de:	1d28      	adds	r0, r5, #4
 800d2e0:	f000 fd0a 	bl	800dcf8 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d2e4:	0028      	movs	r0, r5
 800d2e6:	0031      	movs	r1, r6
 800d2e8:	301c      	adds	r0, #28
 800d2ea:	f000 fd9b 	bl	800de24 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 800d2ee:	7963      	ldrb	r3, [r4, #5]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d100      	bne.n	800d2f6 <SX1276Send+0x32>
 800d2f4:	e077      	b.n	800d3e6 <SX1276Send+0x122>
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d100      	bne.n	800d2fc <SX1276Send+0x38>
 800d2fa:	e08d      	b.n	800d418 <SX1276Send+0x154>
    TimerStart( &TxTimeoutTimer );
 800d2fc:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800d2fe:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 800d300:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 800d302:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800d304:	f000 fd4c 	bl	800dda0 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800d308:	2003      	movs	r0, #3
 800d30a:	f7ff f82b 	bl	800c364 <SX1276SetOpMode.part.0>
}
 800d30e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 800d310:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d312:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800d314:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800d316:	1ce3      	adds	r3, r4, #3
 800d318:	7fd8      	ldrb	r0, [r3, #31]
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d117      	bne.n	800d34e <SX1276Send+0x8a>
    SX1276WriteBuffer( 0, buffer, size );
 800d31e:	2201      	movs	r2, #1
 800d320:	0031      	movs	r1, r6
 800d322:	f7fe ff1a 	bl	800c15a <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 800d326:	7832      	ldrb	r2, [r6, #0]
 800d328:	1e53      	subs	r3, r2, #1
 800d32a:	2b3f      	cmp	r3, #63	; 0x3f
 800d32c:	d813      	bhi.n	800d356 <SX1276Send+0x92>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800d32e:	0023      	movs	r3, r4
 800d330:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800d332:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800d334:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800d336:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 800d338:	782a      	ldrb	r2, [r5, #0]
 800d33a:	0039      	movs	r1, r7
 800d33c:	2000      	movs	r0, #0
 800d33e:	f7fe ff0c 	bl	800c15a <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d342:	782b      	ldrb	r3, [r5, #0]
 800d344:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800d346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d348:	189b      	adds	r3, r3, r2
 800d34a:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 800d34c:	e7c6      	b.n	800d2dc <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800d34e:	2032      	movs	r0, #50	; 0x32
 800d350:	f7fe ff1b 	bl	800c18a <SX1276Write>
 800d354:	e7e7      	b.n	800d326 <SX1276Send+0x62>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 800d356:	b292      	uxth	r2, r2
 800d358:	0039      	movs	r1, r7
 800d35a:	483f      	ldr	r0, [pc, #252]	; (800d458 <SX1276Send+0x194>)
 800d35c:	f000 fac6 	bl	800d8ec <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800d360:	0023      	movs	r3, r4
 800d362:	2220      	movs	r2, #32
 800d364:	333f      	adds	r3, #63	; 0x3f
 800d366:	e7e4      	b.n	800d332 <SX1276Send+0x6e>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d368:	0023      	movs	r3, r4
 800d36a:	3355      	adds	r3, #85	; 0x55
 800d36c:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800d36e:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d370:	2b00      	cmp	r3, #0
 800d372:	d02c      	beq.n	800d3ce <SX1276Send+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800d374:	f7fe ff54 	bl	800c220 <SX1276Read>
 800d378:	2341      	movs	r3, #65	; 0x41
 800d37a:	4398      	bics	r0, r3
 800d37c:	b2c1      	uxtb	r1, r0
 800d37e:	2033      	movs	r0, #51	; 0x33
 800d380:	f7fe ff03 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800d384:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800d386:	203b      	movs	r0, #59	; 0x3b
 800d388:	f7fe feff 	bl	800c18a <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800d38c:	0023      	movs	r3, r4
 800d38e:	7831      	ldrb	r1, [r6, #0]
 800d390:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800d392:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800d394:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800d396:	f7fe fef8 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800d39a:	2100      	movs	r1, #0
 800d39c:	200e      	movs	r0, #14
 800d39e:	f7fe fef4 	bl	800c18a <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	200d      	movs	r0, #13
 800d3a6:	f7fe fef0 	bl	800c18a <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800d3aa:	2001      	movs	r0, #1
 800d3ac:	f7fe ff38 	bl	800c220 <SX1276Read>
 800d3b0:	23f8      	movs	r3, #248	; 0xf8
 800d3b2:	4398      	bics	r0, r3
 800d3b4:	d104      	bne.n	800d3c0 <SX1276Send+0xfc>
                SX1276SetStby( );
 800d3b6:	f7fe fff7 	bl	800c3a8 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	f7f5 f97e 	bl	80026bc <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 800d3c0:	7832      	ldrb	r2, [r6, #0]
 800d3c2:	0039      	movs	r1, r7
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	f7fe fec8 	bl	800c15a <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800d3ca:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 800d3cc:	e786      	b.n	800d2dc <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800d3ce:	f7fe ff27 	bl	800c220 <SX1276Read>
 800d3d2:	2341      	movs	r3, #65	; 0x41
 800d3d4:	0001      	movs	r1, r0
 800d3d6:	4399      	bics	r1, r3
 800d3d8:	4329      	orrs	r1, r5
 800d3da:	b2c9      	uxtb	r1, r1
 800d3dc:	2033      	movs	r0, #51	; 0x33
 800d3de:	f7fe fed4 	bl	800c18a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800d3e2:	211d      	movs	r1, #29
 800d3e4:	e7cf      	b.n	800d386 <SX1276Send+0xc2>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800d3e6:	2040      	movs	r0, #64	; 0x40
 800d3e8:	f7fe ff1a 	bl	800c220 <SX1276Read>
 800d3ec:	2103      	movs	r1, #3
 800d3ee:	4001      	ands	r1, r0
 800d3f0:	2040      	movs	r0, #64	; 0x40
 800d3f2:	f7fe feca 	bl	800c18a <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800d3f6:	2041      	movs	r0, #65	; 0x41
 800d3f8:	f7fe ff12 	bl	800c220 <SX1276Read>
 800d3fc:	213e      	movs	r1, #62	; 0x3e
 800d3fe:	4001      	ands	r1, r0
 800d400:	2041      	movs	r0, #65	; 0x41
 800d402:	f7fe fec2 	bl	800c18a <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800d406:	2035      	movs	r0, #53	; 0x35
 800d408:	f7fe ff0a 	bl	800c220 <SX1276Read>
 800d40c:	233f      	movs	r3, #63	; 0x3f
 800d40e:	4018      	ands	r0, r3
 800d410:	0023      	movs	r3, r4
 800d412:	333e      	adds	r3, #62	; 0x3e
 800d414:	7018      	strb	r0, [r3, #0]
        break;
 800d416:	e771      	b.n	800d2fc <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d418:	0023      	movs	r3, r4
 800d41a:	3353      	adds	r3, #83	; 0x53
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00d      	beq.n	800d43e <SX1276Send+0x17a>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d422:	21f5      	movs	r1, #245	; 0xf5
 800d424:	2011      	movs	r0, #17
 800d426:	f7fe feb0 	bl	800c18a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800d42a:	2040      	movs	r0, #64	; 0x40
 800d42c:	f7fe fef8 	bl	800c220 <SX1276Read>
 800d430:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800d432:	4001      	ands	r1, r0
 800d434:	2040      	movs	r0, #64	; 0x40
 800d436:	4301      	orrs	r1, r0
 800d438:	f7fe fea7 	bl	800c18a <SX1276Write>
 800d43c:	e75e      	b.n	800d2fc <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d43e:	21f7      	movs	r1, #247	; 0xf7
 800d440:	2011      	movs	r0, #17
 800d442:	f7fe fea2 	bl	800c18a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800d446:	2040      	movs	r0, #64	; 0x40
 800d448:	f7fe feea 	bl	800c220 <SX1276Read>
 800d44c:	213f      	movs	r1, #63	; 0x3f
 800d44e:	e7f0      	b.n	800d432 <SX1276Send+0x16e>
 800d450:	20000fa0 	.word	0x20000fa0
 800d454:	20001020 	.word	0x20001020
 800d458:	20001054 	.word	0x20001054

0800d45c <SX1276OnDio1Irq>:
{
 800d45c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800d45e:	4c39      	ldr	r4, [pc, #228]	; (800d544 <SX1276OnDio1Irq+0xe8>)
 800d460:	7925      	ldrb	r5, [r4, #4]
 800d462:	2d01      	cmp	r5, #1
 800d464:	d002      	beq.n	800d46c <SX1276OnDio1Irq+0x10>
 800d466:	2d02      	cmp	r5, #2
 800d468:	d050      	beq.n	800d50c <SX1276OnDio1Irq+0xb0>
}
 800d46a:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800d46c:	7963      	ldrb	r3, [r4, #5]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d017      	beq.n	800d4a2 <SX1276OnDio1Irq+0x46>
 800d472:	2b01      	cmp	r3, #1
 800d474:	d1f9      	bne.n	800d46a <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800d476:	f7f5 fdd3 	bl	8003020 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d0f5      	beq.n	800d46a <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800d47e:	4d32      	ldr	r5, [pc, #200]	; (800d548 <SX1276OnDio1Irq+0xec>)
 800d480:	1d28      	adds	r0, r5, #4
 800d482:	f000 fc39 	bl	800dcf8 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800d486:	2180      	movs	r1, #128	; 0x80
 800d488:	2012      	movs	r0, #18
 800d48a:	f7fe fe7e 	bl	800c18a <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800d48e:	2300      	movs	r3, #0
 800d490:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d492:	682b      	ldr	r3, [r5, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d0e8      	beq.n	800d46a <SX1276OnDio1Irq+0xe>
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d0e5      	beq.n	800d46a <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800d49e:	4798      	blx	r3
 800d4a0:	e7e3      	b.n	800d46a <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800d4a2:	f7f5 fdbd 	bl	8003020 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d0df      	beq.n	800d46a <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800d4aa:	0020      	movs	r0, r4
 800d4ac:	3068      	adds	r0, #104	; 0x68
 800d4ae:	f000 fc23 	bl	800dcf8 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800d4b2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d4b4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	d108      	bne.n	800d4cc <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800d4ba:	1ce3      	adds	r3, r4, #3
 800d4bc:	7fd8      	ldrb	r0, [r3, #31]
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d119      	bne.n	800d4f6 <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 800d4c2:	0021      	movs	r1, r4
 800d4c4:	002a      	movs	r2, r5
 800d4c6:	313a      	adds	r1, #58	; 0x3a
 800d4c8:	f7fe fe92 	bl	800c1f0 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d4cc:	0025      	movs	r5, r4
 800d4ce:	353e      	adds	r5, #62	; 0x3e
 800d4d0:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800d4d2:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d4d4:	491d      	ldr	r1, [pc, #116]	; (800d54c <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d4d6:	782b      	ldrb	r3, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d4d8:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d4da:	1a12      	subs	r2, r2, r0
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	db0f      	blt.n	800d500 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d4e0:	3b01      	subs	r3, #1
    SX1276ReadBuffer( 0, buffer, size );
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	f7fe fe83 	bl	800c1f0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800d4ea:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d4ec:	782b      	ldrb	r3, [r5, #0]
 800d4ee:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d4f0:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800d4f2:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 800d4f4:	e7b9      	b.n	800d46a <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800d4f6:	2032      	movs	r0, #50	; 0x32
 800d4f8:	f7fe fe92 	bl	800c220 <SX1276Read>
 800d4fc:	8760      	strh	r0, [r4, #58]	; 0x3a
 800d4fe:	e7e5      	b.n	800d4cc <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 800d500:	2000      	movs	r0, #0
 800d502:	b2d2      	uxtb	r2, r2
 800d504:	f7fe fe74 	bl	800c1f0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800d508:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d50a:	e7f2      	b.n	800d4f2 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 800d50c:	7965      	ldrb	r5, [r4, #5]
 800d50e:	2d00      	cmp	r5, #0
 800d510:	d1ab      	bne.n	800d46a <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 800d512:	f7f5 fd85 	bl	8003020 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800d516:	2801      	cmp	r0, #1
 800d518:	d0a7      	beq.n	800d46a <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d51a:	0026      	movs	r6, r4
 800d51c:	363f      	adds	r6, #63	; 0x3f
 800d51e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800d520:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800d522:	490a      	ldr	r1, [pc, #40]	; (800d54c <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d524:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800d526:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d528:	1a1b      	subs	r3, r3, r0
 800d52a:	4293      	cmp	r3, r2
 800d52c:	dd05      	ble.n	800d53a <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 800d52e:	0028      	movs	r0, r5
 800d530:	f7fe fe13 	bl	800c15a <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d534:	7833      	ldrb	r3, [r6, #0]
 800d536:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d538:	e7da      	b.n	800d4f0 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 800d53a:	0028      	movs	r0, r5
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	f7fe fe0c 	bl	800c15a <SX1276WriteBuffer>
 800d542:	e7e1      	b.n	800d508 <SX1276OnDio1Irq+0xac>
 800d544:	20000fa0 	.word	0x20000fa0
 800d548:	20001020 	.word	0x20001020
 800d54c:	20001054 	.word	0x20001054

0800d550 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800d550:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d552:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d556:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800d558:	4b16      	ldr	r3, [pc, #88]	; (800d5b4 <TRACE_AllocateBufer+0x64>)
 800d55a:	8a5d      	ldrh	r5, [r3, #18]
 800d55c:	8a1a      	ldrh	r2, [r3, #16]
 800d55e:	4295      	cmp	r5, r2
 800d560:	d114      	bne.n	800d58c <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800d562:	2280      	movs	r2, #128	; 0x80
 800d564:	00d2      	lsls	r2, r2, #3
 800d566:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800d568:	b292      	uxth	r2, r2
 800d56a:	4290      	cmp	r0, r2
 800d56c:	d306      	bcc.n	800d57c <TRACE_AllocateBufer+0x2c>
 800d56e:	4285      	cmp	r5, r0
 800d570:	d916      	bls.n	800d5a0 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800d572:	2201      	movs	r2, #1
 800d574:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800d576:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800d578:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800d57a:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800d57c:	8a5a      	ldrh	r2, [r3, #18]
 800d57e:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d580:	1812      	adds	r2, r2, r0
 800d582:	0592      	lsls	r2, r2, #22
 800d584:	0d92      	lsrs	r2, r2, #22
    ret = 0;
 800d586:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d588:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800d58a:	e00b      	b.n	800d5a4 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d58c:	4295      	cmp	r5, r2
 800d58e:	d90c      	bls.n	800d5aa <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800d590:	2680      	movs	r6, #128	; 0x80
 800d592:	00f6      	lsls	r6, r6, #3
 800d594:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800d596:	b2b6      	uxth	r6, r6
 800d598:	4286      	cmp	r6, r0
 800d59a:	d8ef      	bhi.n	800d57c <TRACE_AllocateBufer+0x2c>
 800d59c:	4282      	cmp	r2, r0
 800d59e:	d8e8      	bhi.n	800d572 <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800d5a0:	2001      	movs	r0, #1
 800d5a2:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5a4:	f384 8810 	msr	PRIMASK, r4
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800d5a8:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800d5aa:	1b52      	subs	r2, r2, r5
  if(freesize > Size)
 800d5ac:	b292      	uxth	r2, r2
 800d5ae:	4282      	cmp	r2, r0
 800d5b0:	d8e4      	bhi.n	800d57c <TRACE_AllocateBufer+0x2c>
 800d5b2:	e7f5      	b.n	800d5a0 <TRACE_AllocateBufer+0x50>
 800d5b4:	20001154 	.word	0x20001154

0800d5b8 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d5bc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800d5be:	4a03      	ldr	r2, [pc, #12]	; (800d5cc <TRACE_Lock+0x14>)
 800d5c0:	8ad3      	ldrh	r3, [r2, #22]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5c6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800d5ca:	4770      	bx	lr
 800d5cc:	20001154 	.word	0x20001154

0800d5d0 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d5d4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800d5d6:	4a03      	ldr	r2, [pc, #12]	; (800d5e4 <TRACE_UnLock+0x14>)
 800d5d8:	8ad3      	ldrh	r3, [r2, #22]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5de:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800d5e2:	4770      	bx	lr
 800d5e4:	20001154 	.word	0x20001154

0800d5e8 <UTIL_ADV_TRACE_Init>:
{
 800d5e8:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800d5ea:	2218      	movs	r2, #24
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	4807      	ldr	r0, [pc, #28]	; (800d60c <UTIL_ADV_TRACE_Init+0x24>)
 800d5f0:	f000 f985 	bl	800d8fe <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800d5f4:	2280      	movs	r2, #128	; 0x80
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	4805      	ldr	r0, [pc, #20]	; (800d610 <UTIL_ADV_TRACE_Init+0x28>)
 800d5fa:	00d2      	lsls	r2, r2, #3
 800d5fc:	f000 f97f 	bl	800d8fe <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800d600:	4b04      	ldr	r3, [pc, #16]	; (800d614 <UTIL_ADV_TRACE_Init+0x2c>)
 800d602:	4805      	ldr	r0, [pc, #20]	; (800d618 <UTIL_ADV_TRACE_Init+0x30>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4798      	blx	r3
}
 800d608:	bd10      	pop	{r4, pc}
 800d60a:	46c0      	nop			; (mov r8, r8)
 800d60c:	20001154 	.word	0x20001154
 800d610:	2000136c 	.word	0x2000136c
 800d614:	0800e35c 	.word	0x0800e35c
 800d618:	0800d785 	.word	0x0800d785

0800d61c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800d61c:	4b01      	ldr	r3, [pc, #4]	; (800d624 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800d61e:	6058      	str	r0, [r3, #4]
}
 800d620:	4770      	bx	lr
 800d622:	46c0      	nop			; (mov r8, r8)
 800d624:	20001154 	.word	0x20001154

0800d628 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800d628:	4b01      	ldr	r3, [pc, #4]	; (800d630 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800d62a:	7218      	strb	r0, [r3, #8]
}
 800d62c:	4770      	bx	lr
 800d62e:	46c0      	nop			; (mov r8, r8)
 800d630:	20001154 	.word	0x20001154

0800d634 <TRACE_Send>:
{
 800d634:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d636:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d63a:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800d63c:	4c1b      	ldr	r4, [pc, #108]	; (800d6ac <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800d63e:	8ae5      	ldrh	r5, [r4, #22]
 800d640:	2d00      	cmp	r5, #0
 800d642:	d12e      	bne.n	800d6a2 <TRACE_Send+0x6e>
    TRACE_Lock();
 800d644:	f7ff ffb8 	bl	800d5b8 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800d648:	8a20      	ldrh	r0, [r4, #16]
 800d64a:	8a62      	ldrh	r2, [r4, #18]
 800d64c:	4290      	cmp	r0, r2
 800d64e:	d026      	beq.n	800d69e <TRACE_Send+0x6a>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800d650:	78a1      	ldrb	r1, [r4, #2]
 800d652:	2901      	cmp	r1, #1
 800d654:	d110      	bne.n	800d678 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800d656:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d658:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800d65a:	1a1b      	subs	r3, r3, r0
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d660:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800d662:	8025      	strh	r5, [r4, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800d664:	2b00      	cmp	r3, #0
 800d666:	d109      	bne.n	800d67c <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d668:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d66a:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d66c:	8a23      	ldrh	r3, [r4, #16]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d912      	bls.n	800d698 <TRACE_Send+0x64>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d672:	1ad2      	subs	r2, r2, r3
 800d674:	82a2      	strh	r2, [r4, #20]
 800d676:	e001      	b.n	800d67c <TRACE_Send+0x48>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800d678:	2900      	cmp	r1, #0
 800d67a:	d0f7      	beq.n	800d66c <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800d67c:	8a25      	ldrh	r5, [r4, #16]
 800d67e:	4b0c      	ldr	r3, [pc, #48]	; (800d6b0 <TRACE_Send+0x7c>)
 800d680:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d682:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook();
 800d686:	f7f5 f807 	bl	8002698 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800d68a:	4b0a      	ldr	r3, [pc, #40]	; (800d6b4 <TRACE_Send+0x80>)
 800d68c:	8aa1      	ldrh	r1, [r4, #20]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	0028      	movs	r0, r5
 800d692:	9301      	str	r3, [sp, #4]
 800d694:	4798      	blx	r3
}
 800d696:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d698:	2280      	movs	r2, #128	; 0x80
 800d69a:	00d2      	lsls	r2, r2, #3
 800d69c:	e7e9      	b.n	800d672 <TRACE_Send+0x3e>
      TRACE_UnLock();
 800d69e:	f7ff ff97 	bl	800d5d0 <TRACE_UnLock>
 800d6a2:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800d6a6:	2000      	movs	r0, #0
}
 800d6a8:	e7f5      	b.n	800d696 <TRACE_Send+0x62>
 800d6aa:	46c0      	nop			; (mov r8, r8)
 800d6ac:	20001154 	.word	0x20001154
 800d6b0:	2000136c 	.word	0x2000136c
 800d6b4:	0800e35c 	.word	0x0800e35c

0800d6b8 <UTIL_ADV_TRACE_COND_FSend>:
{
 800d6b8:	b408      	push	{r3}
 800d6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6bc:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	466c      	mov	r4, sp
 800d6c2:	8023      	strh	r3, [r4, #0]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800d6c4:	4b2c      	ldr	r3, [pc, #176]	; (800d778 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800d6c6:	7a1c      	ldrb	r4, [r3, #8]
 800d6c8:	4284      	cmp	r4, r0
 800d6ca:	d350      	bcc.n	800d76e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800d6cc:	68d8      	ldr	r0, [r3, #12]
 800d6ce:	4008      	ands	r0, r1
 800d6d0:	4288      	cmp	r0, r1
 800d6d2:	d14e      	bne.n	800d772 <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d004      	beq.n	800d6e4 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800d6da:	2a00      	cmp	r2, #0
 800d6dc:	d002      	beq.n	800d6e4 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800d6de:	4669      	mov	r1, sp
 800d6e0:	a802      	add	r0, sp, #8
 800d6e2:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d6e4:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800d6e6:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d6e8:	0089      	lsls	r1, r1, #2
 800d6ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6ec:	4823      	ldr	r0, [pc, #140]	; (800d77c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800d6ee:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d6f0:	f000 fbfa 	bl	800dee8 <tiny_vsnprintf_like>
 800d6f4:	0005      	movs	r5, r0
  TRACE_Lock();
 800d6f6:	f7ff ff5f 	bl	800d5b8 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800d6fa:	466b      	mov	r3, sp
 800d6fc:	8818      	ldrh	r0, [r3, #0]
 800d6fe:	1c9c      	adds	r4, r3, #2
 800d700:	1940      	adds	r0, r0, r5
 800d702:	0021      	movs	r1, r4
 800d704:	b280      	uxth	r0, r0
 800d706:	f7ff ff23 	bl	800d550 <TRACE_AllocateBufer>
 800d70a:	1c43      	adds	r3, r0, #1
 800d70c:	d02a      	beq.n	800d764 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800d70e:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800d710:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800d712:	466b      	mov	r3, sp
 800d714:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800d716:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	8826      	ldrh	r6, [r4, #0]
 800d71c:	4818      	ldr	r0, [pc, #96]	; (800d780 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800d71e:	b297      	uxth	r7, r2
 800d720:	19f1      	adds	r1, r6, r7
 800d722:	b289      	uxth	r1, r1
 800d724:	42bb      	cmp	r3, r7
 800d726:	d815      	bhi.n	800d754 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800d728:	199b      	adds	r3, r3, r6
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	2d00      	cmp	r5, #0
 800d72e:	d000      	beq.n	800d732 <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800d730:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d732:	2180      	movs	r1, #128	; 0x80
 800d734:	8823      	ldrh	r3, [r4, #0]
 800d736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d738:	0089      	lsls	r1, r1, #2
 800d73a:	18c0      	adds	r0, r0, r3
 800d73c:	9b01      	ldr	r3, [sp, #4]
 800d73e:	f000 fbd3 	bl	800dee8 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800d742:	f7ff ff45 	bl	800d5d0 <TRACE_UnLock>
    return TRACE_Send();
 800d746:	f7ff ff75 	bl	800d634 <TRACE_Send>
}
 800d74a:	b006      	add	sp, #24
 800d74c:	bcf0      	pop	{r4, r5, r6, r7}
 800d74e:	bc08      	pop	{r3}
 800d750:	b001      	add	sp, #4
 800d752:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800d754:	466d      	mov	r5, sp
 800d756:	2708      	movs	r7, #8
 800d758:	19ed      	adds	r5, r5, r7
 800d75a:	5cad      	ldrb	r5, [r5, r2]
 800d75c:	3201      	adds	r2, #1
 800d75e:	5445      	strb	r5, [r0, r1]
 800d760:	4665      	mov	r5, ip
 800d762:	e7dc      	b.n	800d71e <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800d764:	f7ff ff34 	bl	800d5d0 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800d768:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800d76a:	4240      	negs	r0, r0
 800d76c:	e7ed      	b.n	800d74a <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800d76e:	2005      	movs	r0, #5
 800d770:	e7fb      	b.n	800d76a <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800d772:	2006      	movs	r0, #6
 800d774:	e7f9      	b.n	800d76a <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800d776:	46c0      	nop			; (mov r8, r8)
 800d778:	20001154 	.word	0x20001154
 800d77c:	2000116c 	.word	0x2000116c
 800d780:	2000136c 	.word	0x2000136c

0800d784 <TRACE_TxCpltCallback>:
{
 800d784:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d786:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d78a:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800d78c:	4b1f      	ldr	r3, [pc, #124]	; (800d80c <TRACE_TxCpltCallback+0x88>)
 800d78e:	789a      	ldrb	r2, [r3, #2]
 800d790:	2a02      	cmp	r2, #2
 800d792:	d11e      	bne.n	800d7d2 <TRACE_TxCpltCallback+0x4e>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d794:	2200      	movs	r2, #0
 800d796:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d798:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800d79a:	8a1d      	ldrh	r5, [r3, #16]
 800d79c:	8a58      	ldrh	r0, [r3, #18]
 800d79e:	4285      	cmp	r5, r0
 800d7a0:	d02d      	beq.n	800d7fe <TRACE_TxCpltCallback+0x7a>
 800d7a2:	8ada      	ldrh	r2, [r3, #22]
 800d7a4:	2a01      	cmp	r2, #1
 800d7a6:	d12a      	bne.n	800d7fe <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800d7a8:	789c      	ldrb	r4, [r3, #2]
 800d7aa:	2c01      	cmp	r4, #1
 800d7ac:	d117      	bne.n	800d7de <TRACE_TxCpltCallback+0x5a>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d7ae:	3401      	adds	r4, #1
 800d7b0:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800d7b2:	2400      	movs	r4, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800d7b4:	881a      	ldrh	r2, [r3, #0]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800d7b6:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800d7b8:	1b52      	subs	r2, r2, r5
 800d7ba:	b292      	uxth	r2, r2
 800d7bc:	829a      	strh	r2, [r3, #20]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800d7be:	42a2      	cmp	r2, r4
 800d7c0:	d10f      	bne.n	800d7e2 <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d7c2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d7c4:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d7c6:	8a1a      	ldrh	r2, [r3, #16]
 800d7c8:	4290      	cmp	r0, r2
 800d7ca:	d915      	bls.n	800d7f8 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d7cc:	1a80      	subs	r0, r0, r2
 800d7ce:	8298      	strh	r0, [r3, #20]
 800d7d0:	e007      	b.n	800d7e2 <TRACE_TxCpltCallback+0x5e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d7d2:	8a1a      	ldrh	r2, [r3, #16]
 800d7d4:	8a98      	ldrh	r0, [r3, #20]
 800d7d6:	1812      	adds	r2, r2, r0
 800d7d8:	0592      	lsls	r2, r2, #22
 800d7da:	0d92      	lsrs	r2, r2, #22
 800d7dc:	e7dc      	b.n	800d798 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800d7de:	2c00      	cmp	r4, #0
 800d7e0:	d0f1      	beq.n	800d7c6 <TRACE_TxCpltCallback+0x42>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800d7e2:	8a18      	ldrh	r0, [r3, #16]
 800d7e4:	4a0a      	ldr	r2, [pc, #40]	; (800d810 <TRACE_TxCpltCallback+0x8c>)
 800d7e6:	1880      	adds	r0, r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7e8:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800d7ec:	8a99      	ldrh	r1, [r3, #20]
 800d7ee:	4b09      	ldr	r3, [pc, #36]	; (800d814 <TRACE_TxCpltCallback+0x90>)
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	9301      	str	r3, [sp, #4]
 800d7f4:	4798      	blx	r3
}
 800d7f6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d7f8:	2080      	movs	r0, #128	; 0x80
 800d7fa:	00c0      	lsls	r0, r0, #3
 800d7fc:	e7e6      	b.n	800d7cc <TRACE_TxCpltCallback+0x48>
 800d7fe:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800d802:	f7f4 ff4f 	bl	80026a4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800d806:	f7ff fee3 	bl	800d5d0 <TRACE_UnLock>
}
 800d80a:	e7f4      	b.n	800d7f6 <TRACE_TxCpltCallback+0x72>
 800d80c:	20001154 	.word	0x20001154
 800d810:	2000136c 	.word	0x2000136c
 800d814:	0800e35c 	.word	0x0800e35c

0800d818 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d818:	2200      	movs	r2, #0
 800d81a:	4b02      	ldr	r3, [pc, #8]	; (800d824 <UTIL_LPM_Init+0xc>)
 800d81c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d81e:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d820:	4770      	bx	lr
 800d822:	46c0      	nop			; (mov r8, r8)
 800d824:	2000176c 	.word	0x2000176c

0800d828 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d828:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d82a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d82e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800d830:	2900      	cmp	r1, #0
 800d832:	d008      	beq.n	800d846 <UTIL_LPM_SetStopMode+0x1e>
 800d834:	2901      	cmp	r1, #1
 800d836:	d103      	bne.n	800d840 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800d838:	4b05      	ldr	r3, [pc, #20]	; (800d850 <UTIL_LPM_SetStopMode+0x28>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	4310      	orrs	r0, r2
 800d83e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d840:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d844:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800d846:	4a02      	ldr	r2, [pc, #8]	; (800d850 <UTIL_LPM_SetStopMode+0x28>)
 800d848:	6813      	ldr	r3, [r2, #0]
 800d84a:	4383      	bics	r3, r0
 800d84c:	6013      	str	r3, [r2, #0]
      break;
 800d84e:	e7f7      	b.n	800d840 <UTIL_LPM_SetStopMode+0x18>
 800d850:	2000176c 	.word	0x2000176c

0800d854 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d854:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d856:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d85a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800d85c:	2900      	cmp	r1, #0
 800d85e:	d008      	beq.n	800d872 <UTIL_LPM_SetOffMode+0x1e>
 800d860:	2901      	cmp	r1, #1
 800d862:	d103      	bne.n	800d86c <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d864:	4b05      	ldr	r3, [pc, #20]	; (800d87c <UTIL_LPM_SetOffMode+0x28>)
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	4310      	orrs	r0, r2
 800d86a:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d86c:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d870:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800d872:	4a02      	ldr	r2, [pc, #8]	; (800d87c <UTIL_LPM_SetOffMode+0x28>)
 800d874:	6853      	ldr	r3, [r2, #4]
 800d876:	4383      	bics	r3, r0
 800d878:	6053      	str	r3, [r2, #4]
      break;
 800d87a:	e7f7      	b.n	800d86c <UTIL_LPM_SetOffMode+0x18>
 800d87c:	2000176c 	.word	0x2000176c

0800d880 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d880:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d884:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800d886:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800d888:	4b05      	ldr	r3, [pc, #20]	; (800d8a0 <UTIL_LPM_GetMode+0x20>)
 800d88a:	6819      	ldr	r1, [r3, #0]
 800d88c:	4281      	cmp	r1, r0
 800d88e:	d103      	bne.n	800d898 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800d890:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800d892:	4243      	negs	r3, r0
 800d894:	4158      	adcs	r0, r3
 800d896:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d898:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800d89c:	4770      	bx	lr
 800d89e:	46c0      	nop			; (mov r8, r8)
 800d8a0:	2000176c 	.word	0x2000176c

0800d8a4 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800d8a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8a6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d8aa:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800d8ac:	4b0d      	ldr	r3, [pc, #52]	; (800d8e4 <UTIL_LPM_EnterLowPower+0x40>)
 800d8ae:	4c0e      	ldr	r4, [pc, #56]	; (800d8e8 <UTIL_LPM_EnterLowPower+0x44>)
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	2a00      	cmp	r2, #0
 800d8b4:	d008      	beq.n	800d8c8 <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800d8bc:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8c2:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800d8c6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d004      	beq.n	800d8d8 <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 800d8ce:	68a3      	ldr	r3, [r4, #8]
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800d8d4:	68e3      	ldr	r3, [r4, #12]
 800d8d6:	e7f2      	b.n	800d8be <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 800d8d8:	6923      	ldr	r3, [r4, #16]
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800d8de:	6963      	ldr	r3, [r4, #20]
 800d8e0:	e7ed      	b.n	800d8be <UTIL_LPM_EnterLowPower+0x1a>
 800d8e2:	46c0      	nop			; (mov r8, r8)
 800d8e4:	2000176c 	.word	0x2000176c
 800d8e8:	0800e344 	.word	0x0800e344

0800d8ec <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800d8ec:	2300      	movs	r3, #0
{
 800d8ee:	b510      	push	{r4, lr}
  while( size-- )
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d100      	bne.n	800d8f6 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800d8f4:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800d8f6:	5ccc      	ldrb	r4, [r1, r3]
 800d8f8:	54c4      	strb	r4, [r0, r3]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	e7f8      	b.n	800d8f0 <UTIL_MEM_cpy_8+0x4>

0800d8fe <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800d8fe:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800d900:	f000 fc49 	bl	800e196 <memset>
  }
}
 800d904:	bd10      	pop	{r4, pc}
	...

0800d908 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d908:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d90a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d90e:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800d910:	4b05      	ldr	r3, [pc, #20]	; (800d928 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d912:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4302      	orrs	r2, r0
 800d918:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d91a:	185b      	adds	r3, r3, r1
 800d91c:	691a      	ldr	r2, [r3, #16]
 800d91e:	4310      	orrs	r0, r2
 800d920:	6118      	str	r0, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d922:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800d926:	bd10      	pop	{r4, pc}
 800d928:	20001774 	.word	0x20001774

0800d92c <UTIL_SEQ_PreIdle>:
 800d92c:	4770      	bx	lr

0800d92e <UTIL_SEQ_PostIdle>:
 800d92e:	4770      	bx	lr

0800d930 <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 800d930:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800d932:	0c02      	lsrs	r2, r0, #16
 800d934:	429a      	cmp	r2, r3
 800d936:	d101      	bne.n	800d93c <SEQ_BitPosition+0xc>
 800d938:	0400      	lsls	r0, r0, #16
 800d93a:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800d93c:	0e02      	lsrs	r2, r0, #24
 800d93e:	d102      	bne.n	800d946 <SEQ_BitPosition+0x16>
 800d940:	3308      	adds	r3, #8
 800d942:	b2db      	uxtb	r3, r3
 800d944:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800d946:	0f02      	lsrs	r2, r0, #28
 800d948:	d102      	bne.n	800d950 <SEQ_BitPosition+0x20>
 800d94a:	3304      	adds	r3, #4
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800d950:	221f      	movs	r2, #31
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	4a02      	ldr	r2, [pc, #8]	; (800d960 <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800d956:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800d958:	5c10      	ldrb	r0, [r2, r0]
 800d95a:	1a18      	subs	r0, r3, r0
 800d95c:	b2c0      	uxtb	r0, r0
}
 800d95e:	4770      	bx	lr
 800d960:	0800e8fc 	.word	0x0800e8fc

0800d964 <UTIL_SEQ_Run>:
{
 800d964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800d966:	4e2f      	ldr	r6, [pc, #188]	; (800da24 <UTIL_SEQ_Run+0xc0>)
 800d968:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 800d96a:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800d96c:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 800d96e:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800d970:	4c2d      	ldr	r4, [pc, #180]	; (800da28 <UTIL_SEQ_Run+0xc4>)
 800d972:	6830      	ldr	r0, [r6, #0]
 800d974:	6822      	ldr	r2, [r4, #0]
 800d976:	6873      	ldr	r3, [r6, #4]
 800d978:	4002      	ands	r2, r0
 800d97a:	4213      	tst	r3, r2
 800d97c:	d037      	beq.n	800d9ee <UTIL_SEQ_Run+0x8a>
 800d97e:	68a1      	ldr	r1, [r4, #8]
 800d980:	6862      	ldr	r2, [r4, #4]
 800d982:	000d      	movs	r5, r1
 800d984:	4015      	ands	r5, r2
 800d986:	4211      	tst	r1, r2
 800d988:	d131      	bne.n	800d9ee <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800d98a:	6922      	ldr	r2, [r4, #16]
 800d98c:	4003      	ands	r3, r0
 800d98e:	0010      	movs	r0, r2
 800d990:	4018      	ands	r0, r3
 800d992:	421a      	tst	r2, r3
 800d994:	d102      	bne.n	800d99c <UTIL_SEQ_Run+0x38>
      counter++;
 800d996:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800d998:	69a0      	ldr	r0, [r4, #24]
 800d99a:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d99c:	00ed      	lsls	r5, r5, #3
 800d99e:	1963      	adds	r3, r4, r5
 800d9a0:	695a      	ldr	r2, [r3, #20]
 800d9a2:	4202      	tst	r2, r0
 800d9a4:	d102      	bne.n	800d9ac <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	4252      	negs	r2, r2
 800d9aa:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d9ac:	1965      	adds	r5, r4, r5
 800d9ae:	696f      	ldr	r7, [r5, #20]
 800d9b0:	4038      	ands	r0, r7
 800d9b2:	f7ff ffbd 	bl	800d930 <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	4083      	lsls	r3, r0
 800d9ba:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d9bc:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d9be:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d9c4:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	68e2      	ldr	r2, [r4, #12]
 800d9ca:	4093      	lsls	r3, r2
 800d9cc:	6822      	ldr	r2, [r4, #0]
 800d9ce:	439a      	bics	r2, r3
 800d9d0:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d9d2:	69a2      	ldr	r2, [r4, #24]
 800d9d4:	439a      	bics	r2, r3
 800d9d6:	61a2      	str	r2, [r4, #24]
 800d9d8:	6922      	ldr	r2, [r4, #16]
 800d9da:	439a      	bics	r2, r3
 800d9dc:	6122      	str	r2, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9de:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800d9e2:	68e3      	ldr	r3, [r4, #12]
 800d9e4:	4a11      	ldr	r2, [pc, #68]	; (800da2c <UTIL_SEQ_Run+0xc8>)
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	589b      	ldr	r3, [r3, r2]
 800d9ea:	4798      	blx	r3
 800d9ec:	e7c0      	b.n	800d970 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	425b      	negs	r3, r3
 800d9f2:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800d9f4:	f7ff ff9a 	bl	800d92c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9f8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d9fc:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800d9fe:	6822      	ldr	r2, [r4, #0]
 800da00:	6833      	ldr	r3, [r6, #0]
 800da02:	6861      	ldr	r1, [r4, #4]
 800da04:	4013      	ands	r3, r2
 800da06:	6872      	ldr	r2, [r6, #4]
 800da08:	4013      	ands	r3, r2
 800da0a:	68a2      	ldr	r2, [r4, #8]
 800da0c:	400a      	ands	r2, r1
 800da0e:	4313      	orrs	r3, r2
 800da10:	d101      	bne.n	800da16 <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 800da12:	f7f4 fdeb 	bl	80025ec <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da16:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800da1a:	f7ff ff88 	bl	800d92e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800da1e:	9b01      	ldr	r3, [sp, #4]
 800da20:	6073      	str	r3, [r6, #4]
}
 800da22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800da24:	200000fc 	.word	0x200000fc
 800da28:	20001774 	.word	0x20001774
 800da2c:	20001794 	.word	0x20001794

0800da30 <UTIL_SEQ_RegTask>:
{
 800da30:	b570      	push	{r4, r5, r6, lr}
 800da32:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da34:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da38:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800da3a:	f7ff ff79 	bl	800d930 <SEQ_BitPosition>
 800da3e:	4b03      	ldr	r3, [pc, #12]	; (800da4c <UTIL_SEQ_RegTask+0x1c>)
 800da40:	0080      	lsls	r0, r0, #2
 800da42:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da44:	f385 8810 	msr	PRIMASK, r5
}
 800da48:	bd70      	pop	{r4, r5, r6, pc}
 800da4a:	46c0      	nop			; (mov r8, r8)
 800da4c:	20001794 	.word	0x20001794

0800da50 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800da50:	b082      	sub	sp, #8
 800da52:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800da54:	18c9      	adds	r1, r1, r3
{
 800da56:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800da58:	ab05      	add	r3, sp, #20
 800da5a:	889c      	ldrh	r4, [r3, #4]
 800da5c:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800da5e:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800da60:	b293      	uxth	r3, r2
 800da62:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800da64:	00a4      	lsls	r4, r4, #2
 800da66:	42a2      	cmp	r2, r4
 800da68:	db03      	blt.n	800da72 <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800da6a:	4a05      	ldr	r2, [pc, #20]	; (800da80 <SysTimeAdd+0x30>)
    c.Seconds++;
 800da6c:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800da6e:	189b      	adds	r3, r3, r2
 800da70:	b21a      	sxth	r2, r3
  }
  return c;
 800da72:	6001      	str	r1, [r0, #0]
 800da74:	8082      	strh	r2, [r0, #4]
}
 800da76:	bc16      	pop	{r1, r2, r4}
 800da78:	bc08      	pop	{r3}
 800da7a:	b002      	add	sp, #8
 800da7c:	4718      	bx	r3
 800da7e:	46c0      	nop			; (mov r8, r8)
 800da80:	fffffc18 	.word	0xfffffc18

0800da84 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800da84:	b082      	sub	sp, #8
 800da86:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800da88:	1ac9      	subs	r1, r1, r3
{
 800da8a:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800da8c:	ab05      	add	r3, sp, #20
 800da8e:	889b      	ldrh	r3, [r3, #4]
 800da90:	1ad2      	subs	r2, r2, r3
 800da92:	b293      	uxth	r3, r2
 800da94:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800da96:	0412      	lsls	r2, r2, #16
 800da98:	d504      	bpl.n	800daa4 <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800da9a:	22fa      	movs	r2, #250	; 0xfa
 800da9c:	0092      	lsls	r2, r2, #2
 800da9e:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800daa0:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800daa2:	b21c      	sxth	r4, r3
  }
  return c;
 800daa4:	6001      	str	r1, [r0, #0]
 800daa6:	8084      	strh	r4, [r0, #4]
}
 800daa8:	bc16      	pop	{r1, r2, r4}
 800daaa:	bc08      	pop	{r3}
 800daac:	b002      	add	sp, #8
 800daae:	4718      	bx	r3

0800dab0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dab0:	2300      	movs	r3, #0
{
 800dab2:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dab4:	4c11      	ldr	r4, [pc, #68]	; (800dafc <SysTimeSet+0x4c>)
{
 800dab6:	b087      	sub	sp, #28
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dab8:	ad04      	add	r5, sp, #16
 800daba:	80ab      	strh	r3, [r5, #4]
 800dabc:	9304      	str	r3, [sp, #16]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dabe:	6923      	ldr	r3, [r4, #16]
{
 800dac0:	9002      	str	r0, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dac2:	a805      	add	r0, sp, #20
 800dac4:	9301      	str	r3, [sp, #4]
{
 800dac6:	9103      	str	r1, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dac8:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800daca:	9b02      	ldr	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dacc:	9004      	str	r0, [sp, #16]
  c.Seconds = a.Seconds - b.Seconds;
 800dace:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800dad0:	ab02      	add	r3, sp, #8
 800dad2:	88aa      	ldrh	r2, [r5, #4]
 800dad4:	889b      	ldrh	r3, [r3, #4]
 800dad6:	1a9b      	subs	r3, r3, r2
 800dad8:	b29a      	uxth	r2, r3
 800dada:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800dadc:	041b      	lsls	r3, r3, #16
 800dade:	d504      	bpl.n	800daea <SysTimeSet+0x3a>
    c.SubSeconds += 1000;
 800dae0:	23fa      	movs	r3, #250	; 0xfa
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800dae6:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800dae8:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800daea:	6823      	ldr	r3, [r4, #0]
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800daf0:	68a3      	ldr	r3, [r4, #8]
 800daf2:	0028      	movs	r0, r5
 800daf4:	9301      	str	r3, [sp, #4]
 800daf6:	4798      	blx	r3
}
 800daf8:	b007      	add	sp, #28
 800dafa:	bd30      	pop	{r4, r5, pc}
 800dafc:	0800e304 	.word	0x0800e304

0800db00 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800db00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800db02:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db04:	4e12      	ldr	r6, [pc, #72]	; (800db50 <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800db06:	aa02      	add	r2, sp, #8
 800db08:	8093      	strh	r3, [r2, #4]
 800db0a:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db0c:	6933      	ldr	r3, [r6, #16]
{
 800db0e:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db10:	a803      	add	r0, sp, #12
 800db12:	9301      	str	r3, [sp, #4]
 800db14:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db16:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db18:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800db1e:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db20:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 800db26:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800db28:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 800db2a:	0089      	lsls	r1, r1, #2
  c.Seconds = a.Seconds + b.Seconds;
 800db2c:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800db2e:	ab02      	add	r3, sp, #8
 800db30:	889b      	ldrh	r3, [r3, #4]
 800db32:	195b      	adds	r3, r3, r5
 800db34:	b29a      	uxth	r2, r3
 800db36:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800db38:	428b      	cmp	r3, r1
 800db3a:	db03      	blt.n	800db44 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 800db3c:	4b05      	ldr	r3, [pc, #20]	; (800db54 <SysTimeGet+0x54>)
    c.Seconds++;
 800db3e:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800db40:	18d2      	adds	r2, r2, r3
 800db42:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800db44:	6020      	str	r0, [r4, #0]
}
 800db46:	0020      	movs	r0, r4
  return sysTime;
 800db48:	80a3      	strh	r3, [r4, #4]
}
 800db4a:	b004      	add	sp, #16
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
 800db4e:	46c0      	nop			; (mov r8, r8)
 800db50:	0800e304 	.word	0x0800e304
 800db54:	fffffc18 	.word	0xfffffc18

0800db58 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800db58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800db5a:	2300      	movs	r3, #0
 800db5c:	466d      	mov	r5, sp
{
 800db5e:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800db60:	9300      	str	r3, [sp, #0]
 800db62:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db64:	4b04      	ldr	r3, [pc, #16]	; (800db78 <SysTimeGetMcuTime+0x20>)
 800db66:	a801      	add	r0, sp, #4
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	4798      	blx	r3
  
  return calendarTime;
 800db6c:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db6e:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800db70:	cd06      	ldmia	r5!, {r1, r2}
 800db72:	c306      	stmia	r3!, {r1, r2}
}
 800db74:	0020      	movs	r0, r4
 800db76:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800db78:	0800e304 	.word	0x0800e304

0800db7c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800db7c:	b530      	push	{r4, r5, lr}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db7e:	4d0f      	ldr	r5, [pc, #60]	; (800dbbc <SysTimeToMs+0x40>)
{
 800db80:	b085      	sub	sp, #20
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db82:	68eb      	ldr	r3, [r5, #12]
{
 800db84:	9103      	str	r1, [sp, #12]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db86:	9301      	str	r3, [sp, #4]
{
 800db88:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db8a:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800db8c:	686b      	ldr	r3, [r5, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db8e:	0004      	movs	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800db94:	aa02      	add	r2, sp, #8
 800db96:	8892      	ldrh	r2, [r2, #4]
  c.Seconds = a.Seconds - b.Seconds;
 800db98:	9b02      	ldr	r3, [sp, #8]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800db9a:	1b12      	subs	r2, r2, r4
  c.Seconds = a.Seconds - b.Seconds;
 800db9c:	1a1b      	subs	r3, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800db9e:	b291      	uxth	r1, r2
 800dba0:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800dba2:	0412      	lsls	r2, r2, #16
 800dba4:	d504      	bpl.n	800dbb0 <SysTimeToMs+0x34>
    c.SubSeconds += 1000;
 800dba6:	22fa      	movs	r2, #250	; 0xfa
 800dba8:	0092      	lsls	r2, r2, #2
 800dbaa:	1889      	adds	r1, r1, r2
    c.Seconds--;
 800dbac:	3b01      	subs	r3, #1
    c.SubSeconds += 1000;
 800dbae:	b20c      	sxth	r4, r1
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800dbb0:	20fa      	movs	r0, #250	; 0xfa
 800dbb2:	0080      	lsls	r0, r0, #2
 800dbb4:	4358      	muls	r0, r3
 800dbb6:	1900      	adds	r0, r0, r4
}
 800dbb8:	b005      	add	sp, #20
 800dbba:	bd30      	pop	{r4, r5, pc}
 800dbbc:	0800e304 	.word	0x0800e304

0800dbc0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800dbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbc2:	000f      	movs	r7, r1
  uint32_t seconds = timeMs / 1000;
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800dbc4:	26fa      	movs	r6, #250	; 0xfa
  uint32_t seconds = timeMs / 1000;
 800dbc6:	21fa      	movs	r1, #250	; 0xfa
{
 800dbc8:	b085      	sub	sp, #20
  uint32_t seconds = timeMs / 1000;
 800dbca:	0089      	lsls	r1, r1, #2
{
 800dbcc:	0004      	movs	r4, r0
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800dbce:	00b6      	lsls	r6, r6, #2
  uint32_t seconds = timeMs / 1000;
 800dbd0:	0038      	movs	r0, r7
 800dbd2:	f7f2 fac9 	bl	8000168 <__udivsi3>
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800dbd6:	0031      	movs	r1, r6
 800dbd8:	4341      	muls	r1, r0
 800dbda:	1a7f      	subs	r7, r7, r1
 800dbdc:	b2bb      	uxth	r3, r7
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dbde:	4f0e      	ldr	r7, [pc, #56]	; (800dc18 <SysTimeFromMs+0x58>)
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800dbe0:	9301      	str	r3, [sp, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dbe2:	68fb      	ldr	r3, [r7, #12]
  uint32_t seconds = timeMs / 1000;
 800dbe4:	0005      	movs	r5, r0
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dbe6:	9302      	str	r3, [sp, #8]
 800dbe8:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800dbea:	687b      	ldr	r3, [r7, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dbec:	9002      	str	r0, [sp, #8]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800dbee:	9303      	str	r3, [sp, #12]
 800dbf0:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dbf2:	9b01      	ldr	r3, [sp, #4]
 800dbf4:	9902      	ldr	r1, [sp, #8]
 800dbf6:	469c      	mov	ip, r3
 800dbf8:	4461      	add	r1, ip
  c.Seconds = a.Seconds + b.Seconds;
 800dbfa:	1945      	adds	r5, r0, r5
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dbfc:	b288      	uxth	r0, r1
 800dbfe:	b209      	sxth	r1, r1
  if( c.SubSeconds >= 1000 )
 800dc00:	42b1      	cmp	r1, r6
 800dc02:	db03      	blt.n	800dc0c <SysTimeFromMs+0x4c>
    c.SubSeconds -= 1000;
 800dc04:	4b05      	ldr	r3, [pc, #20]	; (800dc1c <SysTimeFromMs+0x5c>)
    c.Seconds++;
 800dc06:	3501      	adds	r5, #1
    c.SubSeconds -= 1000;
 800dc08:	18c0      	adds	r0, r0, r3
 800dc0a:	b201      	sxth	r1, r0
  return SysTimeAdd( sysTime, DeltaTime );
}
 800dc0c:	0020      	movs	r0, r4
  return c;
 800dc0e:	6025      	str	r5, [r4, #0]
 800dc10:	80a1      	strh	r1, [r4, #4]
}
 800dc12:	b005      	add	sp, #20
 800dc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc16:	46c0      	nop			; (mov r8, r8)
 800dc18:	0800e304 	.word	0x0800e304
 800dc1c:	fffffc18 	.word	0xfffffc18

0800dc20 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800dc20:	2200      	movs	r2, #0
{
 800dc22:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800dc24:	4b02      	ldr	r3, [pc, #8]	; (800dc30 <UTIL_TIMER_Init+0x10>)
 800dc26:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800dc28:	4b02      	ldr	r3, [pc, #8]	; (800dc34 <UTIL_TIMER_Init+0x14>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4798      	blx	r3
}
 800dc2e:	bd10      	pop	{r4, pc}
 800dc30:	20001814 	.word	0x20001814
 800dc34:	0800e318 	.word	0x0800e318

0800dc38 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800dc38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc3a:	0004      	movs	r4, r0
 800dc3c:	0017      	movs	r7, r2
 800dc3e:	0008      	movs	r0, r1
 800dc40:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800dc42:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800dc44:	2c00      	cmp	r4, #0
 800dc46:	d00f      	beq.n	800dc68 <UTIL_TIMER_Create+0x30>
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00d      	beq.n	800dc68 <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 800dc4c:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800dc4e:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800dc50:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800dc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc54:	9301      	str	r3, [sp, #4]
 800dc56:	4798      	blx	r3
    TimerObject->argument = Argument;
 800dc58:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800dc5a:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800dc5c:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800dc5e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800dc60:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800dc62:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800dc64:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800dc66:	6165      	str	r5, [r4, #20]
  }
}
 800dc68:	0028      	movs	r0, r5
 800dc6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc6c:	0800e318 	.word	0x0800e318

0800dc70 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800dc70:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800dc72:	4c03      	ldr	r4, [pc, #12]	; (800dc80 <UTIL_TIMER_GetCurrentTime+0x10>)
 800dc74:	69e3      	ldr	r3, [r4, #28]
 800dc76:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800dc78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dc7a:	4798      	blx	r3
}
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	46c0      	nop			; (mov r8, r8)
 800dc80:	0800e318 	.word	0x0800e318

0800dc84 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800dc84:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800dc86:	4d06      	ldr	r5, [pc, #24]	; (800dca0 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800dc88:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800dc8a:	69eb      	ldr	r3, [r5, #28]
 800dc8c:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800dc8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800dc90:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800dc92:	0030      	movs	r0, r6
 800dc94:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800dc96:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800dc98:	1a20      	subs	r0, r4, r0
 800dc9a:	4798      	blx	r3
}
 800dc9c:	bd70      	pop	{r4, r5, r6, pc}
 800dc9e:	46c0      	nop			; (mov r8, r8)
 800dca0:	0800e318 	.word	0x0800e318

0800dca4 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800dca4:	4a05      	ldr	r2, [pc, #20]	; (800dcbc <TimerExists+0x18>)
{
 800dca6:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800dca8:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d100      	bne.n	800dcb0 <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 800dcae:	4770      	bx	lr
    if( cur == TimerObject )
 800dcb0:	4298      	cmp	r0, r3
 800dcb2:	d001      	beq.n	800dcb8 <TimerExists+0x14>
    cur = cur->Next;
 800dcb4:	6940      	ldr	r0, [r0, #20]
 800dcb6:	e7f8      	b.n	800dcaa <TimerExists+0x6>
      return true;
 800dcb8:	2001      	movs	r0, #1
 800dcba:	e7f8      	b.n	800dcae <TimerExists+0xa>
 800dcbc:	20001814 	.word	0x20001814

0800dcc0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800dcc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800dcc2:	4e0c      	ldr	r6, [pc, #48]	; (800dcf4 <TimerSetTimeout+0x34>)
{
 800dcc4:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800dcc6:	6a33      	ldr	r3, [r6, #32]
 800dcc8:	9301      	str	r3, [sp, #4]
 800dcca:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800dccc:	2301      	movs	r3, #1
 800dcce:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800dcd0:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800dcd2:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800dcd4:	6827      	ldr	r7, [r4, #0]
 800dcd6:	9301      	str	r3, [sp, #4]
 800dcd8:	4798      	blx	r3
 800dcda:	1940      	adds	r0, r0, r5
 800dcdc:	4287      	cmp	r7, r0
 800dcde:	d203      	bcs.n	800dce8 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800dce0:	9b01      	ldr	r3, [sp, #4]
 800dce2:	4798      	blx	r3
 800dce4:	1945      	adds	r5, r0, r5
 800dce6:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800dce8:	68b3      	ldr	r3, [r6, #8]
 800dcea:	6820      	ldr	r0, [r4, #0]
 800dcec:	9301      	str	r3, [sp, #4]
 800dcee:	4798      	blx	r3
}
 800dcf0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dcf2:	46c0      	nop			; (mov r8, r8)
 800dcf4:	0800e318 	.word	0x0800e318

0800dcf8 <UTIL_TIMER_Stop>:
{
 800dcf8:	0003      	movs	r3, r0
 800dcfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800dcfc:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d016      	beq.n	800dd30 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd02:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dd06:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800dd08:	4c11      	ldr	r4, [pc, #68]	; (800dd50 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800dd0a:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800dd0c:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 800dd0e:	2a00      	cmp	r2, #0
 800dd10:	d00b      	beq.n	800dd2a <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800dd12:	2100      	movs	r1, #0
 800dd14:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d111      	bne.n	800dd3e <UTIL_TIMER_Stop+0x46>
          if( TimerListHead->Next != NULL )
 800dd1a:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 800dd1c:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800dd1e:	428e      	cmp	r6, r1
 800dd20:	d007      	beq.n	800dd32 <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800dd22:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 800dd24:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800dd26:	f7ff ffcb 	bl	800dcc0 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd2a:	f385 8810 	msr	PRIMASK, r5
}
 800dd2e:	2000      	movs	r0, #0
}
 800dd30:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800dd32:	4b08      	ldr	r3, [pc, #32]	; (800dd54 <UTIL_TIMER_Stop+0x5c>)
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	9301      	str	r3, [sp, #4]
 800dd38:	4798      	blx	r3
            TimerListHead = NULL;
 800dd3a:	6026      	str	r6, [r4, #0]
 800dd3c:	e7f5      	b.n	800dd2a <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800dd3e:	0011      	movs	r1, r2
 800dd40:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800dd42:	2a00      	cmp	r2, #0
 800dd44:	d0f1      	beq.n	800dd2a <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d1f9      	bne.n	800dd3e <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	614b      	str	r3, [r1, #20]
 800dd4e:	e7ec      	b.n	800dd2a <UTIL_TIMER_Stop+0x32>
 800dd50:	20001814 	.word	0x20001814
 800dd54:	0800e318 	.word	0x0800e318

0800dd58 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800dd58:	4b09      	ldr	r3, [pc, #36]	; (800dd80 <TimerInsertTimer+0x28>)
{
 800dd5a:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800dd5c:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800dd5e:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 800dd60:	6959      	ldr	r1, [r3, #20]
 800dd62:	2900      	cmp	r1, #0
 800dd64:	d102      	bne.n	800dd6c <TimerInsertTimer+0x14>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800dd66:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800dd68:	6141      	str	r1, [r0, #20]
 800dd6a:	e008      	b.n	800dd7e <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 800dd6c:	6801      	ldr	r1, [r0, #0]
 800dd6e:	6814      	ldr	r4, [r2, #0]
 800dd70:	42a1      	cmp	r1, r4
 800dd72:	d902      	bls.n	800dd7a <TimerInsertTimer+0x22>
        next = next->Next;
 800dd74:	0013      	movs	r3, r2
 800dd76:	6952      	ldr	r2, [r2, #20]
 800dd78:	e7f2      	b.n	800dd60 <TimerInsertTimer+0x8>
        cur->Next = TimerObject;
 800dd7a:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 800dd7c:	6142      	str	r2, [r0, #20]
}
 800dd7e:	bd10      	pop	{r4, pc}
 800dd80:	20001814 	.word	0x20001814

0800dd84 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800dd84:	4a05      	ldr	r2, [pc, #20]	; (800dd9c <TimerInsertNewHeadTimer+0x18>)
{
 800dd86:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800dd88:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800dd8e:	2100      	movs	r1, #0
 800dd90:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800dd92:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800dd94:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800dd96:	f7ff ff93 	bl	800dcc0 <TimerSetTimeout>
}
 800dd9a:	bd10      	pop	{r4, pc}
 800dd9c:	20001814 	.word	0x20001814

0800dda0 <UTIL_TIMER_Start>:
{
 800dda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dda2:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800dda4:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800dda6:	2800      	cmp	r0, #0
 800dda8:	d025      	beq.n	800ddf6 <UTIL_TIMER_Start+0x56>
 800ddaa:	f7ff ff7b 	bl	800dca4 <TimerExists>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d121      	bne.n	800ddf6 <UTIL_TIMER_Start+0x56>
 800ddb2:	7a65      	ldrb	r5, [r4, #9]
 800ddb4:	2d00      	cmp	r5, #0
 800ddb6:	d12e      	bne.n	800de16 <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddb8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddbc:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ddbe:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ddc0:	4e16      	ldr	r6, [pc, #88]	; (800de1c <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 800ddc2:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ddc4:	6a33      	ldr	r3, [r6, #32]
 800ddc6:	9301      	str	r3, [sp, #4]
 800ddc8:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800ddca:	4287      	cmp	r7, r0
 800ddcc:	d200      	bcs.n	800ddd0 <UTIL_TIMER_Start+0x30>
 800ddce:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800ddd0:	2380      	movs	r3, #128	; 0x80
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800ddd6:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800ddd8:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800ddda:	4f11      	ldr	r7, [pc, #68]	; (800de20 <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 800dddc:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d10a      	bne.n	800ddfa <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 800dde4:	6933      	ldr	r3, [r6, #16]
 800dde6:	9301      	str	r3, [sp, #4]
 800dde8:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800ddea:	0020      	movs	r0, r4
 800ddec:	f7ff ffca 	bl	800dd84 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddf0:	9b00      	ldr	r3, [sp, #0]
 800ddf2:	f383 8810 	msr	PRIMASK, r3
}
 800ddf6:	0028      	movs	r0, r5
 800ddf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800ddfa:	69b3      	ldr	r3, [r6, #24]
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800de00:	6823      	ldr	r3, [r4, #0]
 800de02:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800de04:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800de06:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4298      	cmp	r0, r3
 800de0c:	d3ed      	bcc.n	800ddea <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 800de0e:	0020      	movs	r0, r4
 800de10:	f7ff ffa2 	bl	800dd58 <TimerInsertTimer>
 800de14:	e7ec      	b.n	800ddf0 <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800de16:	2501      	movs	r5, #1
 800de18:	e7ed      	b.n	800ddf6 <UTIL_TIMER_Start+0x56>
 800de1a:	46c0      	nop			; (mov r8, r8)
 800de1c:	0800e318 	.word	0x0800e318
 800de20:	20001814 	.word	0x20001814

0800de24 <UTIL_TIMER_SetPeriod>:
{
 800de24:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800de26:	2301      	movs	r3, #1
{
 800de28:	0004      	movs	r4, r0
 800de2a:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800de2c:	2c00      	cmp	r4, #0
 800de2e:	d011      	beq.n	800de54 <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800de30:	4b09      	ldr	r3, [pc, #36]	; (800de58 <UTIL_TIMER_SetPeriod+0x34>)
 800de32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	4798      	blx	r3
 800de38:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800de3a:	0020      	movs	r0, r4
 800de3c:	f7ff ff32 	bl	800dca4 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800de40:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800de42:	4298      	cmp	r0, r3
 800de44:	d006      	beq.n	800de54 <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 800de46:	0020      	movs	r0, r4
 800de48:	f7ff ff56 	bl	800dcf8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800de4c:	0020      	movs	r0, r4
 800de4e:	f7ff ffa7 	bl	800dda0 <UTIL_TIMER_Start>
 800de52:	0003      	movs	r3, r0
}
 800de54:	0018      	movs	r0, r3
 800de56:	bd16      	pop	{r1, r2, r4, pc}
 800de58:	0800e318 	.word	0x0800e318

0800de5c <UTIL_TIMER_IRQ_Handler>:
{
 800de5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de5e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800de62:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800de64:	4e1e      	ldr	r6, [pc, #120]	; (800dee0 <UTIL_TIMER_IRQ_Handler+0x84>)
 800de66:	6973      	ldr	r3, [r6, #20]
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800de6c:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800de6e:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800de74:	4d1b      	ldr	r5, [pc, #108]	; (800dee4 <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 800de76:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800de78:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800de7a:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d01f      	beq.n	800dec0 <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 800de80:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800de82:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800de84:	4288      	cmp	r0, r1
 800de86:	d900      	bls.n	800de8a <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 800de88:	1822      	adds	r2, r4, r0
 800de8a:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800de8c:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800de8e:	e7f5      	b.n	800de7c <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800de90:	681c      	ldr	r4, [r3, #0]
 800de92:	2c00      	cmp	r4, #0
 800de94:	d004      	beq.n	800dea0 <UTIL_TIMER_IRQ_Handler+0x44>
 800de96:	69b3      	ldr	r3, [r6, #24]
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	4798      	blx	r3
 800de9c:	4284      	cmp	r4, r0
 800de9e:	d212      	bcs.n	800dec6 <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 800dea0:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800dea2:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800dea4:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800dea6:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800deac:	68e3      	ldr	r3, [r4, #12]
 800deae:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800deb0:	2280      	movs	r2, #128	; 0x80
 800deb2:	8963      	ldrh	r3, [r4, #10]
 800deb4:	0052      	lsls	r2, r2, #1
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d102      	bne.n	800dec0 <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 800deba:	0020      	movs	r0, r4
 800debc:	f7ff ff70 	bl	800dda0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1e4      	bne.n	800de90 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800dec6:	6828      	ldr	r0, [r5, #0]
 800dec8:	2800      	cmp	r0, #0
 800deca:	d102      	bne.n	800ded2 <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800decc:	f387 8810 	msr	PRIMASK, r7
}
 800ded0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800ded2:	7a03      	ldrb	r3, [r0, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1f9      	bne.n	800decc <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 800ded8:	f7ff fef2 	bl	800dcc0 <TimerSetTimeout>
 800dedc:	e7f6      	b.n	800decc <UTIL_TIMER_IRQ_Handler+0x70>
 800dede:	46c0      	nop			; (mov r8, r8)
 800dee0:	0800e318 	.word	0x0800e318
 800dee4:	20001814 	.word	0x20001814

0800dee8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800dee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deea:	b09d      	sub	sp, #116	; 0x74
 800deec:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800deee:	2000      	movs	r0, #0
{
 800def0:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800def2:	9f02      	ldr	r7, [sp, #8]
{
 800def4:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 800def6:	4281      	cmp	r1, r0
 800def8:	dc0a      	bgt.n	800df10 <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800defa:	b01d      	add	sp, #116	; 0x74
 800defc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800defe:	4298      	cmp	r0, r3
 800df00:	da0d      	bge.n	800df1e <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 800df02:	2925      	cmp	r1, #37	; 0x25
 800df04:	d00e      	beq.n	800df24 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800df06:	7039      	strb	r1, [r7, #0]
      continue;
 800df08:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800df0a:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800df0c:	9a01      	ldr	r2, [sp, #4]
 800df0e:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 800df10:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800df12:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800df14:	1af8      	subs	r0, r7, r3
 800df16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df18:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800df1a:	2900      	cmp	r1, #0
 800df1c:	d1ef      	bne.n	800defe <tiny_vsnprintf_like+0x16>
  *str = '\0';
 800df1e:	2300      	movs	r3, #0
 800df20:	703b      	strb	r3, [r7, #0]
  return str - buf;
 800df22:	e7ea      	b.n	800defa <tiny_vsnprintf_like+0x12>
    fmt++;
 800df24:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 800df26:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 800df28:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 800df2a:	0010      	movs	r0, r2
 800df2c:	3830      	subs	r0, #48	; 0x30
 800df2e:	9204      	str	r2, [sp, #16]
 800df30:	4241      	negs	r1, r0
 800df32:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 800df34:	b2c0      	uxtb	r0, r0
      flags |= ZEROPAD;
 800df36:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 800df38:	2809      	cmp	r0, #9
 800df3a:	d92e      	bls.n	800df9a <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 800df3c:	2001      	movs	r0, #1
 800df3e:	4240      	negs	r0, r0
 800df40:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 800df42:	9801      	ldr	r0, [sp, #4]
 800df44:	7800      	ldrb	r0, [r0, #0]
 800df46:	2869      	cmp	r0, #105	; 0x69
 800df48:	d100      	bne.n	800df4c <tiny_vsnprintf_like+0x64>
 800df4a:	e0a4      	b.n	800e096 <tiny_vsnprintf_like+0x1ae>
 800df4c:	d829      	bhi.n	800dfa2 <tiny_vsnprintf_like+0xba>
 800df4e:	2863      	cmp	r0, #99	; 0x63
 800df50:	d038      	beq.n	800dfc4 <tiny_vsnprintf_like+0xdc>
 800df52:	2864      	cmp	r0, #100	; 0x64
 800df54:	d100      	bne.n	800df58 <tiny_vsnprintf_like+0x70>
 800df56:	e09e      	b.n	800e096 <tiny_vsnprintf_like+0x1ae>
 800df58:	2858      	cmp	r0, #88	; 0x58
 800df5a:	d066      	beq.n	800e02a <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800df5c:	0039      	movs	r1, r7
 800df5e:	2825      	cmp	r0, #37	; 0x25
 800df60:	d126      	bne.n	800dfb0 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 800df62:	9801      	ldr	r0, [sp, #4]
 800df64:	7800      	ldrb	r0, [r0, #0]
 800df66:	2800      	cmp	r0, #0
 800df68:	d100      	bne.n	800df6c <tiny_vsnprintf_like+0x84>
 800df6a:	e098      	b.n	800e09e <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800df6c:	1c4f      	adds	r7, r1, #1
 800df6e:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 800df70:	9902      	ldr	r1, [sp, #8]
 800df72:	1a79      	subs	r1, r7, r1
 800df74:	4299      	cmp	r1, r3
 800df76:	db00      	blt.n	800df7a <tiny_vsnprintf_like+0x92>
 800df78:	e08f      	b.n	800e09a <tiny_vsnprintf_like+0x1b2>
 800df7a:	e7c7      	b.n	800df0c <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800df7c:	9d01      	ldr	r5, [sp, #4]
 800df7e:	3501      	adds	r5, #1
 800df80:	9501      	str	r5, [sp, #4]
 800df82:	9d00      	ldr	r5, [sp, #0]
 800df84:	4375      	muls	r5, r6
 800df86:	1828      	adds	r0, r5, r0
 800df88:	3830      	subs	r0, #48	; 0x30
 800df8a:	9000      	str	r0, [sp, #0]
 800df8c:	9801      	ldr	r0, [sp, #4]
 800df8e:	7800      	ldrb	r0, [r0, #0]
 800df90:	0005      	movs	r5, r0
 800df92:	3d30      	subs	r5, #48	; 0x30
 800df94:	2d09      	cmp	r5, #9
 800df96:	d9f1      	bls.n	800df7c <tiny_vsnprintf_like+0x94>
 800df98:	e7d3      	b.n	800df42 <tiny_vsnprintf_like+0x5a>
  int i = 0;
 800df9a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800df9c:	260a      	movs	r6, #10
  int i = 0;
 800df9e:	9000      	str	r0, [sp, #0]
 800dfa0:	e7f4      	b.n	800df8c <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800dfa2:	2875      	cmp	r0, #117	; 0x75
 800dfa4:	d079      	beq.n	800e09a <tiny_vsnprintf_like+0x1b2>
 800dfa6:	2510      	movs	r5, #16
 800dfa8:	2878      	cmp	r0, #120	; 0x78
 800dfaa:	d041      	beq.n	800e030 <tiny_vsnprintf_like+0x148>
 800dfac:	2873      	cmp	r0, #115	; 0x73
 800dfae:	d01d      	beq.n	800dfec <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800dfb0:	2025      	movs	r0, #37	; 0x25
 800dfb2:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 800dfb4:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800dfb6:	1c79      	adds	r1, r7, #1
 800dfb8:	000f      	movs	r7, r1
    base = 10;
 800dfba:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800dfbc:	1a08      	subs	r0, r1, r0
 800dfbe:	4298      	cmp	r0, r3
 800dfc0:	da36      	bge.n	800e030 <tiny_vsnprintf_like+0x148>
 800dfc2:	e7ce      	b.n	800df62 <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 800dfc4:	2500      	movs	r5, #0
 800dfc6:	9b00      	ldr	r3, [sp, #0]
 800dfc8:	42ab      	cmp	r3, r5
 800dfca:	dd00      	ble.n	800dfce <tiny_vsnprintf_like+0xe6>
 800dfcc:	1e5d      	subs	r5, r3, #1
 800dfce:	002a      	movs	r2, r5
 800dfd0:	2120      	movs	r1, #32
 800dfd2:	0038      	movs	r0, r7
 800dfd4:	f000 f8df 	bl	800e196 <memset>
 800dfd8:	9a00      	ldr	r2, [sp, #0]
 800dfda:	2301      	movs	r3, #1
 800dfdc:	197d      	adds	r5, r7, r5
 800dfde:	2a00      	cmp	r2, #0
 800dfe0:	dd00      	ble.n	800dfe4 <tiny_vsnprintf_like+0xfc>
 800dfe2:	0013      	movs	r3, r2
 800dfe4:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 800dfe6:	cc08      	ldmia	r4!, {r3}
 800dfe8:	702b      	strb	r3, [r5, #0]
        continue;
 800dfea:	e78f      	b.n	800df0c <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 800dfec:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 800dfee:	2e00      	cmp	r6, #0
 800dff0:	d100      	bne.n	800dff4 <tiny_vsnprintf_like+0x10c>
 800dff2:	4e4f      	ldr	r6, [pc, #316]	; (800e130 <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 800dff4:	0030      	movs	r0, r6
 800dff6:	f7f2 f887 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800dffa:	2300      	movs	r3, #0
 800dffc:	9303      	str	r3, [sp, #12]
 800dffe:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 800e000:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 800e002:	4283      	cmp	r3, r0
 800e004:	db01      	blt.n	800e00a <tiny_vsnprintf_like+0x122>
 800e006:	1a1b      	subs	r3, r3, r0
 800e008:	9303      	str	r3, [sp, #12]
 800e00a:	0038      	movs	r0, r7
 800e00c:	2120      	movs	r1, #32
 800e00e:	9a03      	ldr	r2, [sp, #12]
 800e010:	f000 f8c1 	bl	800e196 <memset>
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800e018:	2300      	movs	r3, #0
 800e01a:	42ab      	cmp	r3, r5
 800e01c:	db01      	blt.n	800e022 <tiny_vsnprintf_like+0x13a>
 800e01e:	197f      	adds	r7, r7, r5
 800e020:	e774      	b.n	800df0c <tiny_vsnprintf_like+0x24>
 800e022:	5cf2      	ldrb	r2, [r6, r3]
 800e024:	54fa      	strb	r2, [r7, r3]
 800e026:	3301      	adds	r3, #1
 800e028:	e7f7      	b.n	800e01a <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800e02a:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800e02c:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800e02e:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e030:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 800e032:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e034:	1a3e      	subs	r6, r7, r0
 800e036:	0020      	movs	r0, r4
 800e038:	1b9e      	subs	r6, r3, r6
 800e03a:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 800e03c:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e03e:	9005      	str	r0, [sp, #20]
  if (type & UPPERCASE)  dig = upper_digits;
 800e040:	483c      	ldr	r0, [pc, #240]	; (800e134 <tiny_vsnprintf_like+0x24c>)
 800e042:	9007      	str	r0, [sp, #28]
 800e044:	2040      	movs	r0, #64	; 0x40
 800e046:	4202      	tst	r2, r0
 800e048:	d101      	bne.n	800e04e <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 800e04a:	4a3b      	ldr	r2, [pc, #236]	; (800e138 <tiny_vsnprintf_like+0x250>)
 800e04c:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800e04e:	2230      	movs	r2, #48	; 0x30
 800e050:	9208      	str	r2, [sp, #32]
 800e052:	9a04      	ldr	r2, [sp, #16]
 800e054:	2a30      	cmp	r2, #48	; 0x30
 800e056:	d001      	beq.n	800e05c <tiny_vsnprintf_like+0x174>
 800e058:	2220      	movs	r2, #32
 800e05a:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 800e05c:	2900      	cmp	r1, #0
 800e05e:	d023      	beq.n	800e0a8 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 800e060:	2b00      	cmp	r3, #0
 800e062:	da21      	bge.n	800e0a8 <tiny_vsnprintf_like+0x1c0>
      size--;
 800e064:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 800e066:	425b      	negs	r3, r3
      size--;
 800e068:	3a01      	subs	r2, #1
 800e06a:	9200      	str	r2, [sp, #0]
      sign = '-';
 800e06c:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800e06e:	2400      	movs	r4, #0
 800e070:	9203      	str	r2, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800e072:	0018      	movs	r0, r3
 800e074:	0029      	movs	r1, r5
 800e076:	9306      	str	r3, [sp, #24]
 800e078:	f7f2 f8fc 	bl	8000274 <__aeabi_uidivmod>
 800e07c:	0022      	movs	r2, r4
 800e07e:	4684      	mov	ip, r0
 800e080:	9b07      	ldr	r3, [sp, #28]
 800e082:	3401      	adds	r4, #1
 800e084:	5c59      	ldrb	r1, [r3, r1]
 800e086:	ab0b      	add	r3, sp, #44	; 0x2c
 800e088:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 800e08a:	9a06      	ldr	r2, [sp, #24]
 800e08c:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 800e08e:	4663      	mov	r3, ip
    while (num != 0)
 800e090:	4295      	cmp	r5, r2
 800e092:	d9ee      	bls.n	800e072 <tiny_vsnprintf_like+0x18a>
 800e094:	e011      	b.n	800e0ba <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 800e096:	2202      	movs	r2, #2
 800e098:	430a      	orrs	r2, r1
    base = 10;
 800e09a:	250a      	movs	r5, #10
 800e09c:	e7c8      	b.n	800e030 <tiny_vsnprintf_like+0x148>
          --fmt;
 800e09e:	9801      	ldr	r0, [sp, #4]
 800e0a0:	000f      	movs	r7, r1
 800e0a2:	3801      	subs	r0, #1
 800e0a4:	9001      	str	r0, [sp, #4]
 800e0a6:	e763      	b.n	800df70 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <tiny_vsnprintf_like+0x1c8>
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	e7de      	b.n	800e06e <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 800e0b0:	2130      	movs	r1, #48	; 0x30
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	aa0b      	add	r2, sp, #44	; 0x2c
 800e0b6:	7011      	strb	r1, [r2, #0]
 800e0b8:	9303      	str	r3, [sp, #12]
  size -= precision;
 800e0ba:	9b00      	ldr	r3, [sp, #0]
 800e0bc:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e0be:	9b04      	ldr	r3, [sp, #16]
 800e0c0:	2b30      	cmp	r3, #48	; 0x30
 800e0c2:	d006      	beq.n	800e0d2 <tiny_vsnprintf_like+0x1ea>
 800e0c4:	003b      	movs	r3, r7
 800e0c6:	2220      	movs	r2, #32
 800e0c8:	0021      	movs	r1, r4
 800e0ca:	001f      	movs	r7, r3
 800e0cc:	3c01      	subs	r4, #1
 800e0ce:	2900      	cmp	r1, #0
 800e0d0:	dc0c      	bgt.n	800e0ec <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 800e0d2:	9b03      	ldr	r3, [sp, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d005      	beq.n	800e0e4 <tiny_vsnprintf_like+0x1fc>
 800e0d8:	1c79      	adds	r1, r7, #1
 800e0da:	3e01      	subs	r6, #1
 800e0dc:	703b      	strb	r3, [r7, #0]
 800e0de:	000f      	movs	r7, r1
 800e0e0:	2e00      	cmp	r6, #0
 800e0e2:	d009      	beq.n	800e0f8 <tiny_vsnprintf_like+0x210>
 800e0e4:	003b      	movs	r3, r7
 800e0e6:	0032      	movs	r2, r6
 800e0e8:	1ba4      	subs	r4, r4, r6
 800e0ea:	e00f      	b.n	800e10c <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	3e01      	subs	r6, #1
 800e0f0:	0019      	movs	r1, r3
 800e0f2:	703a      	strb	r2, [r7, #0]
 800e0f4:	2e00      	cmp	r6, #0
 800e0f6:	d1e7      	bne.n	800e0c8 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e0f8:	000f      	movs	r7, r1
 800e0fa:	9c05      	ldr	r4, [sp, #20]
 800e0fc:	e706      	b.n	800df0c <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 800e0fe:	9e08      	ldr	r6, [sp, #32]
 800e100:	3301      	adds	r3, #1
 800e102:	3a01      	subs	r2, #1
 800e104:	0019      	movs	r1, r3
 800e106:	702e      	strb	r6, [r5, #0]
 800e108:	2a00      	cmp	r2, #0
 800e10a:	d0f5      	beq.n	800e0f8 <tiny_vsnprintf_like+0x210>
 800e10c:	18a1      	adds	r1, r4, r2
 800e10e:	001d      	movs	r5, r3
 800e110:	2900      	cmp	r1, #0
 800e112:	dcf4      	bgt.n	800e0fe <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800e114:	ad0b      	add	r5, sp, #44	; 0x2c
 800e116:	189a      	adds	r2, r3, r2
 800e118:	001c      	movs	r4, r3
 800e11a:	3801      	subs	r0, #1
 800e11c:	d201      	bcs.n	800e122 <tiny_vsnprintf_like+0x23a>
 800e11e:	0019      	movs	r1, r3
 800e120:	e7ea      	b.n	800e0f8 <tiny_vsnprintf_like+0x210>
 800e122:	5d46      	ldrb	r6, [r0, r5]
 800e124:	3301      	adds	r3, #1
 800e126:	0019      	movs	r1, r3
 800e128:	7026      	strb	r6, [r4, #0]
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d1f4      	bne.n	800e118 <tiny_vsnprintf_like+0x230>
 800e12e:	e7e3      	b.n	800e0f8 <tiny_vsnprintf_like+0x210>
 800e130:	0800ee55 	.word	0x0800ee55
 800e134:	0800ee5c 	.word	0x0800ee5c
 800e138:	0800ee81 	.word	0x0800ee81

0800e13c <__libc_init_array>:
 800e13c:	b570      	push	{r4, r5, r6, lr}
 800e13e:	2600      	movs	r6, #0
 800e140:	4d0c      	ldr	r5, [pc, #48]	; (800e174 <__libc_init_array+0x38>)
 800e142:	4c0d      	ldr	r4, [pc, #52]	; (800e178 <__libc_init_array+0x3c>)
 800e144:	1b64      	subs	r4, r4, r5
 800e146:	10a4      	asrs	r4, r4, #2
 800e148:	42a6      	cmp	r6, r4
 800e14a:	d109      	bne.n	800e160 <__libc_init_array+0x24>
 800e14c:	2600      	movs	r6, #0
 800e14e:	f000 f8b5 	bl	800e2bc <_init>
 800e152:	4d0a      	ldr	r5, [pc, #40]	; (800e17c <__libc_init_array+0x40>)
 800e154:	4c0a      	ldr	r4, [pc, #40]	; (800e180 <__libc_init_array+0x44>)
 800e156:	1b64      	subs	r4, r4, r5
 800e158:	10a4      	asrs	r4, r4, #2
 800e15a:	42a6      	cmp	r6, r4
 800e15c:	d105      	bne.n	800e16a <__libc_init_array+0x2e>
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
 800e160:	00b3      	lsls	r3, r6, #2
 800e162:	58eb      	ldr	r3, [r5, r3]
 800e164:	4798      	blx	r3
 800e166:	3601      	adds	r6, #1
 800e168:	e7ee      	b.n	800e148 <__libc_init_array+0xc>
 800e16a:	00b3      	lsls	r3, r6, #2
 800e16c:	58eb      	ldr	r3, [r5, r3]
 800e16e:	4798      	blx	r3
 800e170:	3601      	adds	r6, #1
 800e172:	e7f2      	b.n	800e15a <__libc_init_array+0x1e>
 800e174:	0800eeb0 	.word	0x0800eeb0
 800e178:	0800eeb0 	.word	0x0800eeb0
 800e17c:	0800eeb0 	.word	0x0800eeb0
 800e180:	0800eeb4 	.word	0x0800eeb4

0800e184 <memcpy>:
 800e184:	2300      	movs	r3, #0
 800e186:	b510      	push	{r4, lr}
 800e188:	429a      	cmp	r2, r3
 800e18a:	d100      	bne.n	800e18e <memcpy+0xa>
 800e18c:	bd10      	pop	{r4, pc}
 800e18e:	5ccc      	ldrb	r4, [r1, r3]
 800e190:	54c4      	strb	r4, [r0, r3]
 800e192:	3301      	adds	r3, #1
 800e194:	e7f8      	b.n	800e188 <memcpy+0x4>

0800e196 <memset>:
 800e196:	0003      	movs	r3, r0
 800e198:	1882      	adds	r2, r0, r2
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d100      	bne.n	800e1a0 <memset+0xa>
 800e19e:	4770      	bx	lr
 800e1a0:	7019      	strb	r1, [r3, #0]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	e7f9      	b.n	800e19a <memset+0x4>
	...

0800e1a8 <floor>:
 800e1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1aa:	004b      	lsls	r3, r1, #1
 800e1ac:	4a3d      	ldr	r2, [pc, #244]	; (800e2a4 <floor+0xfc>)
 800e1ae:	0d5b      	lsrs	r3, r3, #21
 800e1b0:	189f      	adds	r7, r3, r2
 800e1b2:	4684      	mov	ip, r0
 800e1b4:	000e      	movs	r6, r1
 800e1b6:	000d      	movs	r5, r1
 800e1b8:	0004      	movs	r4, r0
 800e1ba:	9001      	str	r0, [sp, #4]
 800e1bc:	2f13      	cmp	r7, #19
 800e1be:	dc34      	bgt.n	800e22a <floor+0x82>
 800e1c0:	2f00      	cmp	r7, #0
 800e1c2:	da16      	bge.n	800e1f2 <floor+0x4a>
 800e1c4:	4a38      	ldr	r2, [pc, #224]	; (800e2a8 <floor+0x100>)
 800e1c6:	4b39      	ldr	r3, [pc, #228]	; (800e2ac <floor+0x104>)
 800e1c8:	4660      	mov	r0, ip
 800e1ca:	0031      	movs	r1, r6
 800e1cc:	f7f2 fdc2 	bl	8000d54 <__aeabi_dadd>
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	f7f2 f968 	bl	80004a8 <__aeabi_dcmpgt>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d007      	beq.n	800e1ec <floor+0x44>
 800e1dc:	2e00      	cmp	r6, #0
 800e1de:	da5d      	bge.n	800e29c <floor+0xf4>
 800e1e0:	0073      	lsls	r3, r6, #1
 800e1e2:	085b      	lsrs	r3, r3, #1
 800e1e4:	431c      	orrs	r4, r3
 800e1e6:	d001      	beq.n	800e1ec <floor+0x44>
 800e1e8:	2400      	movs	r4, #0
 800e1ea:	4d31      	ldr	r5, [pc, #196]	; (800e2b0 <floor+0x108>)
 800e1ec:	46a4      	mov	ip, r4
 800e1ee:	002e      	movs	r6, r5
 800e1f0:	e029      	b.n	800e246 <floor+0x9e>
 800e1f2:	4b30      	ldr	r3, [pc, #192]	; (800e2b4 <floor+0x10c>)
 800e1f4:	413b      	asrs	r3, r7
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	400b      	ands	r3, r1
 800e1fa:	4303      	orrs	r3, r0
 800e1fc:	d023      	beq.n	800e246 <floor+0x9e>
 800e1fe:	4a2a      	ldr	r2, [pc, #168]	; (800e2a8 <floor+0x100>)
 800e200:	4b2a      	ldr	r3, [pc, #168]	; (800e2ac <floor+0x104>)
 800e202:	4660      	mov	r0, ip
 800e204:	0031      	movs	r1, r6
 800e206:	f7f2 fda5 	bl	8000d54 <__aeabi_dadd>
 800e20a:	2200      	movs	r2, #0
 800e20c:	2300      	movs	r3, #0
 800e20e:	f7f2 f94b 	bl	80004a8 <__aeabi_dcmpgt>
 800e212:	2800      	cmp	r0, #0
 800e214:	d0ea      	beq.n	800e1ec <floor+0x44>
 800e216:	2e00      	cmp	r6, #0
 800e218:	da03      	bge.n	800e222 <floor+0x7a>
 800e21a:	2380      	movs	r3, #128	; 0x80
 800e21c:	035b      	lsls	r3, r3, #13
 800e21e:	413b      	asrs	r3, r7
 800e220:	18f5      	adds	r5, r6, r3
 800e222:	9b00      	ldr	r3, [sp, #0]
 800e224:	2400      	movs	r4, #0
 800e226:	439d      	bics	r5, r3
 800e228:	e7e0      	b.n	800e1ec <floor+0x44>
 800e22a:	2f33      	cmp	r7, #51	; 0x33
 800e22c:	dd0f      	ble.n	800e24e <floor+0xa6>
 800e22e:	2380      	movs	r3, #128	; 0x80
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	429f      	cmp	r7, r3
 800e234:	d107      	bne.n	800e246 <floor+0x9e>
 800e236:	0002      	movs	r2, r0
 800e238:	000b      	movs	r3, r1
 800e23a:	4660      	mov	r0, ip
 800e23c:	0031      	movs	r1, r6
 800e23e:	f7f2 fd89 	bl	8000d54 <__aeabi_dadd>
 800e242:	4684      	mov	ip, r0
 800e244:	000e      	movs	r6, r1
 800e246:	4660      	mov	r0, ip
 800e248:	0031      	movs	r1, r6
 800e24a:	b003      	add	sp, #12
 800e24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e24e:	4a1a      	ldr	r2, [pc, #104]	; (800e2b8 <floor+0x110>)
 800e250:	189b      	adds	r3, r3, r2
 800e252:	2201      	movs	r2, #1
 800e254:	4252      	negs	r2, r2
 800e256:	40da      	lsrs	r2, r3
 800e258:	9200      	str	r2, [sp, #0]
 800e25a:	4210      	tst	r0, r2
 800e25c:	d0f3      	beq.n	800e246 <floor+0x9e>
 800e25e:	4a12      	ldr	r2, [pc, #72]	; (800e2a8 <floor+0x100>)
 800e260:	4b12      	ldr	r3, [pc, #72]	; (800e2ac <floor+0x104>)
 800e262:	4660      	mov	r0, ip
 800e264:	0031      	movs	r1, r6
 800e266:	f7f2 fd75 	bl	8000d54 <__aeabi_dadd>
 800e26a:	2200      	movs	r2, #0
 800e26c:	2300      	movs	r3, #0
 800e26e:	f7f2 f91b 	bl	80004a8 <__aeabi_dcmpgt>
 800e272:	2800      	cmp	r0, #0
 800e274:	d0ba      	beq.n	800e1ec <floor+0x44>
 800e276:	2e00      	cmp	r6, #0
 800e278:	da02      	bge.n	800e280 <floor+0xd8>
 800e27a:	2f14      	cmp	r7, #20
 800e27c:	d103      	bne.n	800e286 <floor+0xde>
 800e27e:	3501      	adds	r5, #1
 800e280:	9b00      	ldr	r3, [sp, #0]
 800e282:	439c      	bics	r4, r3
 800e284:	e7b2      	b.n	800e1ec <floor+0x44>
 800e286:	2334      	movs	r3, #52	; 0x34
 800e288:	1bdf      	subs	r7, r3, r7
 800e28a:	3b33      	subs	r3, #51	; 0x33
 800e28c:	40bb      	lsls	r3, r7
 800e28e:	18e4      	adds	r4, r4, r3
 800e290:	9b01      	ldr	r3, [sp, #4]
 800e292:	429c      	cmp	r4, r3
 800e294:	419b      	sbcs	r3, r3
 800e296:	425b      	negs	r3, r3
 800e298:	18f5      	adds	r5, r6, r3
 800e29a:	e7f1      	b.n	800e280 <floor+0xd8>
 800e29c:	2400      	movs	r4, #0
 800e29e:	0025      	movs	r5, r4
 800e2a0:	e7a4      	b.n	800e1ec <floor+0x44>
 800e2a2:	46c0      	nop			; (mov r8, r8)
 800e2a4:	fffffc01 	.word	0xfffffc01
 800e2a8:	8800759c 	.word	0x8800759c
 800e2ac:	7e37e43c 	.word	0x7e37e43c
 800e2b0:	bff00000 	.word	0xbff00000
 800e2b4:	000fffff 	.word	0x000fffff
 800e2b8:	fffffbed 	.word	0xfffffbed

0800e2bc <_init>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	46c0      	nop			; (mov r8, r8)
 800e2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2c2:	bc08      	pop	{r3}
 800e2c4:	469e      	mov	lr, r3
 800e2c6:	4770      	bx	lr

0800e2c8 <_fini>:
 800e2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ca:	46c0      	nop			; (mov r8, r8)
 800e2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ce:	bc08      	pop	{r3}
 800e2d0:	469e      	mov	lr, r3
 800e2d2:	4770      	bx	lr
